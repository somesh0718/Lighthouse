CREATE DATABASE  IF NOT EXISTS `lighthousemh19d` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `lighthousemh19d`;
-- MySQL dump 10.13  Distrib 8.0.32, for Win64 (x86_64)
--
-- Host: localhost    Database: lighthousemh19d
-- ------------------------------------------------------
-- Server version	8.0.32

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `academicyearphases`
--

DROP TABLE IF EXISTS `academicyearphases`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `academicyearphases` (
  `AcademicYearPhaseId` char(36) NOT NULL,
  `AcademicYearId` char(36) NOT NULL,
  `PhaseId` char(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`AcademicYearPhaseId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `academicyearphases`
--

LOCK TABLES `academicyearphases` WRITE;
/*!40000 ALTER TABLE `academicyearphases` DISABLE KEYS */;
/*!40000 ALTER TABLE `academicyearphases` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `academicyears`
--

DROP TABLE IF EXISTS `academicyears`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `academicyears` (
  `AcademicYearId` varchar(36) NOT NULL,
  `PhaseId` varchar(36) DEFAULT NULL,
  `YearName` varchar(100) NOT NULL,
  `Description` varchar(250) DEFAULT NULL,
  `StartMonth` datetime DEFAULT NULL,
  `EndMonth` datetime DEFAULT NULL,
  `IsCurrentAcademicYear` bit(1) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`AcademicYearId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `academicyears`
--

LOCK TABLES `academicyears` WRITE;
/*!40000 ALTER TABLE `academicyears` DISABLE KEYS */;
INSERT INTO `academicyears` VALUES ('606ed468-fba1-46ac-ba70-ead58dc4ab29','d4917323-570a-4018-92a5-0a96806d5045','2022 Year End','',NULL,NULL,_binary '','','2023-05-08 16:30:49.882','','2023-05-08 16:30:49.882',_binary '');
/*!40000 ALTER TABLE `academicyears` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `accountroles`
--

DROP TABLE IF EXISTS `accountroles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `accountroles` (
  `AccountRoleId` varchar(36) NOT NULL,
  `AccountId` varchar(36) DEFAULT NULL,
  `RoleId` varchar(36) DEFAULT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`AccountRoleId`),
  KEY `FK_dbo.AccountRoleMap_dbo.Accounts_AccountId` (`AccountId`),
  KEY `FK_dbo.AccountRoleMap_dbo.Roles_RoleId` (`RoleId`),
  CONSTRAINT `FK_dbo.AccountRoleMap_dbo.Accounts_AccountId` FOREIGN KEY (`AccountId`) REFERENCES `accounts` (`AccountId`) ON DELETE CASCADE,
  CONSTRAINT `FK_dbo.AccountRoleMap_dbo.Roles_RoleId` FOREIGN KEY (`RoleId`) REFERENCES `roles` (`RoleId`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `accountroles`
--

LOCK TABLES `accountroles` WRITE;
/*!40000 ALTER TABLE `accountroles` DISABLE KEYS */;
INSERT INTO `accountroles` VALUES ('04e8ebf5-fcb7-473e-89a2-86a5070327cb','852998ad-0f21-40a1-9bbd-4ab787c060d4','9aa9dfe0-d6c7-45b8-ad31-50683512f9be',NULL,'','2023-05-17 12:02:55.827','','2023-05-17 12:02:55.827',_binary ''),('3fd3c90b-3045-4b6d-b0c6-0817376024db','e378f627-52de-41de-b2a1-64f19ad6dc44','1b91f252-32c1-43e4-8fa5-6ce0c71f5d45',NULL,'SomeshP','2023-05-09 14:04:28.503','SomeshP','2023-05-09 14:04:28.503',_binary ''),('8a4a65e3-a801-4f1d-8cbf-3b8c9b80bda5','d46b52d1-d544-40fe-8e2e-0fd4953ad005','d85259ec-9c98-4b1a-9e9f-9cb92414ee8e',NULL,'someshAdmin','2023-05-04 21:58:17.270','someshAdmin','2023-05-04 21:58:17.270',_binary ''),('d8dec215-581b-4c6d-b1d0-c2f39e53534c','e005e0e6-3bd9-4e3e-92e3-4b72c99599df','bc035793-f06f-45ca-a93c-ce97493f78fa',NULL,'someshvc','2023-05-10 16:55:34.254','someshvc','2023-05-10 16:55:34.254',_binary '');
/*!40000 ALTER TABLE `accountroles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `accounts`
--

DROP TABLE IF EXISTS `accounts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `accounts` (
  `AccountId` varchar(36) NOT NULL,
  `LoginId` varchar(135) NOT NULL,
  `Password` varchar(500) NOT NULL,
  `UserId` varchar(135) NOT NULL,
  `UserName` varchar(150) DEFAULT NULL,
  `FirstName` varchar(25) DEFAULT NULL,
  `LastName` varchar(25) DEFAULT NULL,
  `Designation` varchar(100) DEFAULT NULL,
  `EmailId` varchar(100) NOT NULL,
  `Mobile` varchar(10) NOT NULL,
  `AccountType` varchar(100) DEFAULT NULL,
  `StateId` varchar(15) DEFAULT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictId` varchar(15) DEFAULT NULL,
  `BlockId` varchar(150) DEFAULT NULL,
  `ClusterId` varchar(150) DEFAULT NULL,
  `PasswordUpdateDate` datetime(3) DEFAULT NULL,
  `PasswordExpiredOn` datetime(3) DEFAULT NULL,
  `LastLoginDate` datetime(3) DEFAULT NULL,
  `InvalidAttempt` int DEFAULT NULL,
  `IsPasswordReset` bit(1) NOT NULL,
  `PasswordResetToken` varchar(500) DEFAULT NULL,
  `AuthToken` longtext,
  `TokenExpiredOn` datetime(3) DEFAULT NULL,
  `IsLocked` bit(1) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`AccountId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `accounts`
--

LOCK TABLES `accounts` WRITE;
/*!40000 ALTER TABLE `accounts` DISABLE KEYS */;
INSERT INTO `accounts` VALUES ('852998ad-0f21-40a1-9bbd-4ab787c060d4','someshAdmin@gmail.com','SwjxBNIHDYiUcq4K6Fsl/g==','someshAdmin','someshAdmin','someshAdmin','Admin','Super user','someshAdmin@gmail.com','9121680047','Super user','KA','9c3f2d87-60ab-4edd-8a35-2f8f87687e90','KDHLI','','','2023-05-17 12:02:55.716','2023-11-17 12:02:55.716',NULL,0,_binary '','','',NULL,_binary '\0','','2023-05-17 12:02:55.704','','2023-05-17 12:02:55.704',_binary ''),('d46b52d1-d544-40fe-8e2e-0fd4953ad005','someshpmu@gmail.com','SwjxBNIHDYiUcq4K6Fsl/g==','SomeshP','SomeshP','SomeshP','P','PMU-Admin','someshpmu@gmail.com','9121680048','PMU-Admin','KA','b52fa10d-0e6f-4fc6-af51-f097f7261485','KDHLI','','','2023-05-04 21:58:17.213','2023-11-04 21:58:17.213',NULL,0,_binary '','','',NULL,_binary '\0','someshAdmin','2023-05-04 21:58:17.201','someshAdmin','2023-05-04 21:58:17.201',_binary ''),('e005e0e6-3bd9-4e3e-92e3-4b72c99599df','someshwarvt@gmail.com','Si91JG0GZeKUcq4K6Fsl/g==','someshwarvt','Someshwar Reddy','Someshwar','Reddy','Vocational Trainer','someshwarvt@gmail.com','9603071210','Vocational Trainer',NULL,NULL,NULL,NULL,NULL,NULL,'2023-11-10 16:55:34.208',NULL,0,_binary '\0',NULL,NULL,NULL,_binary '\0','someshvc','2023-05-10 16:55:34.208','someshvc','2023-05-10 16:55:34.208',_binary ''),('e378f627-52de-41de-b2a1-64f19ad6dc44','someshvc@gmail.com','SwjxBNIHDYiUcq4K6Fsl/g==','someshvc','someshvc','Somesh','Reddy','Vocational Coordinator','someshvc@gmail.com','9603071210','Vocational Coordinator','KA','b52fa10d-0e6f-4fc6-af51-f097f7261485','KDHLI','','','2023-05-09 14:04:28.297','2023-11-09 14:04:28.297',NULL,0,_binary '','','',NULL,_binary '\0','SomeshP','2023-05-09 14:04:28.274','SomeshP','2023-05-09 14:04:28.274',_binary '');
/*!40000 ALTER TABLE `accounts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `accounttransactions`
--

DROP TABLE IF EXISTS `accounttransactions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `accounttransactions` (
  `AccountTransactionId` varchar(36) NOT NULL,
  `AccountId` varchar(36) DEFAULT NULL,
  `TransactionId` varchar(36) DEFAULT NULL,
  `Rights` bit(1) NOT NULL,
  `CanAdd` bit(1) NOT NULL,
  `CanEdit` bit(1) NOT NULL,
  `CanDelete` bit(1) NOT NULL,
  `CanView` bit(1) NOT NULL,
  `CanExport` bit(1) NOT NULL,
  `ListView` bit(1) NOT NULL,
  `BasicView` bit(1) NOT NULL,
  `DetailView` bit(1) NOT NULL,
  `IsPublic` bit(1) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`AccountTransactionId`),
  KEY `FK_dbo.AccountTransactionMap_dbo.Accounts_AccountId` (`AccountId`),
  KEY `FK_dbo.AccountTransactionMap_dbo.Transactions_TransactionId` (`TransactionId`),
  CONSTRAINT `FK_dbo.AccountTransactionMap_dbo.Accounts_AccountId` FOREIGN KEY (`AccountId`) REFERENCES `accounts` (`AccountId`) ON DELETE CASCADE,
  CONSTRAINT `FK_dbo.AccountTransactionMap_dbo.Transactions_TransactionId` FOREIGN KEY (`TransactionId`) REFERENCES `transactions` (`TransactionId`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `accounttransactions`
--

LOCK TABLES `accounttransactions` WRITE;
/*!40000 ALTER TABLE `accounttransactions` DISABLE KEYS */;
/*!40000 ALTER TABLE `accounttransactions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `accountuserotps`
--

DROP TABLE IF EXISTS `accountuserotps`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `accountuserotps` (
  `AccountOTPId` varchar(36) NOT NULL,
  `AccountId` varchar(36) DEFAULT NULL,
  `OTPId` varchar(36) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`AccountOTPId`),
  KEY `FK_AccountOTPMap_Accounts_AccountId` (`AccountId`),
  KEY `FK_AccountOTPMap_UserOTPDetails_OTPId` (`OTPId`),
  CONSTRAINT `FK_AccountOTPMap_Accounts_AccountId` FOREIGN KEY (`AccountId`) REFERENCES `accounts` (`AccountId`) ON DELETE CASCADE,
  CONSTRAINT `FK_AccountOTPMap_UserOTPDetails_OTPId` FOREIGN KEY (`OTPId`) REFERENCES `userotpdetails` (`OTPId`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `accountuserotps`
--

LOCK TABLES `accountuserotps` WRITE;
/*!40000 ALTER TABLE `accountuserotps` DISABLE KEYS */;
/*!40000 ALTER TABLE `accountuserotps` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `accountuserterms`
--

DROP TABLE IF EXISTS `accountuserterms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `accountuserterms` (
  `AccountTermsId` varchar(36) NOT NULL,
  `AccountId` varchar(36) DEFAULT NULL,
  `TermsConditionId` varchar(36) DEFAULT NULL,
  `IsLatestTerms` bit(1) NOT NULL,
  `AcceptedDate` datetime DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`AccountTermsId`),
  KEY `FK_AccountTermsMap_Accounts_AccountId` (`AccountId`),
  KEY `FK_AccountTermsMap_TermsConditions_TermsConditionId` (`TermsConditionId`),
  CONSTRAINT `FK_AccountTermsMap_Accounts_AccountId` FOREIGN KEY (`AccountId`) REFERENCES `accounts` (`AccountId`) ON DELETE CASCADE,
  CONSTRAINT `FK_AccountTermsMap_TermsConditions_TermsConditionId` FOREIGN KEY (`TermsConditionId`) REFERENCES `termsconditions` (`TermsConditionId`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `accountuserterms`
--

LOCK TABLES `accountuserterms` WRITE;
/*!40000 ALTER TABLE `accountuserterms` DISABLE KEYS */;
/*!40000 ALTER TABLE `accountuserterms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `accountworklocations`
--

DROP TABLE IF EXISTS `accountworklocations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `accountworklocations` (
  `AccountWorkLocationId` varchar(36) NOT NULL,
  `AccountId` varchar(36) DEFAULT NULL,
  `StateCode` varchar(15) DEFAULT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictId` varchar(15) DEFAULT NULL,
  `BlockId` varchar(36) DEFAULT NULL,
  `ClusterId` varchar(36) DEFAULT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`AccountWorkLocationId`),
  KEY `FK_AccountWorkLocations_Accounts_AccountId` (`AccountId`),
  CONSTRAINT `FK_AccountWorkLocations_Accounts_AccountId` FOREIGN KEY (`AccountId`) REFERENCES `accounts` (`AccountId`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `accountworklocations`
--

LOCK TABLES `accountworklocations` WRITE;
/*!40000 ALTER TABLE `accountworklocations` DISABLE KEYS */;
INSERT INTO `accountworklocations` VALUES ('04ac8963-6650-4833-b11e-fd33a8385f5f','852998ad-0f21-40a1-9bbd-4ab787c060d4','KA','9c3f2d87-60ab-4edd-8a35-2f8f87687e90','KDHLI','','',NULL,'','2023-05-17 12:02:55.761','','2023-05-17 12:02:55.761',_binary ''),('26257467-5d90-4c3a-be6a-9041c02e5ea9','e378f627-52de-41de-b2a1-64f19ad6dc44','KA','b52fa10d-0e6f-4fc6-af51-f097f7261485','KDHLI','','',NULL,'SomeshP','2023-05-09 14:04:28.358','SomeshP','2023-05-09 14:04:28.358',_binary ''),('3d3e6c52-684f-4924-8d8a-5f1254955a4f','e005e0e6-3bd9-4e3e-92e3-4b72c99599df','KA','3fa85f64-5717-4562-b3fc-2c963f66afa6','BGLR','','',NULL,'someshvc','2023-05-03 18:42:27.143','someshvc','2023-05-03 18:42:27.143',_binary ''),('a84ef1ca-17de-4a5a-b468-97d2c9fee3dc','d46b52d1-d544-40fe-8e2e-0fd4953ad005','KA','b52fa10d-0e6f-4fc6-af51-f097f7261485','KDHLI','','',NULL,'someshAdmin','2023-05-04 21:58:17.243','someshAdmin','2023-05-04 21:58:17.243',_binary '');
/*!40000 ALTER TABLE `accountworklocations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blocks`
--

DROP TABLE IF EXISTS `blocks`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `blocks` (
  `BlockId` varchar(36) NOT NULL,
  `DistrictId` varchar(36) DEFAULT NULL,
  `BlockName` varchar(150) NOT NULL,
  `Description` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`BlockId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blocks`
--

LOCK TABLES `blocks` WRITE;
/*!40000 ALTER TABLE `blocks` DISABLE KEYS */;
INSERT INTO `blocks` VALUES ('cfcef538-d03c-4452-afb7-56b6ff082587','KA','Testblock','','','2023-05-08 16:42:44.319','','2023-05-08 16:42:44.319',_binary '');
/*!40000 ALTER TABLE `blocks` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `broadcastmessages`
--

DROP TABLE IF EXISTS `broadcastmessages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `broadcastmessages` (
  `BroadcastMessageId` varchar(36) NOT NULL,
  `MessageText` varchar(1000) NOT NULL,
  `FromDate` datetime NOT NULL,
  `ToDate` datetime NOT NULL,
  `ApplicableFor` varchar(100) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`BroadcastMessageId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `broadcastmessages`
--

LOCK TABLES `broadcastmessages` WRITE;
/*!40000 ALTER TABLE `broadcastmessages` DISABLE KEYS */;
/*!40000 ALTER TABLE `broadcastmessages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `clusters`
--

DROP TABLE IF EXISTS `clusters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `clusters` (
  `ClusterId` varchar(36) NOT NULL,
  `BlockId` varchar(36) NOT NULL,
  `ClusterName` varchar(150) NOT NULL,
  `Description` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`ClusterId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `clusters`
--

LOCK TABLES `clusters` WRITE;
/*!40000 ALTER TABLE `clusters` DISABLE KEYS */;
INSERT INTO `clusters` VALUES ('3c16a1e3-2eb8-4b55-b16f-3634f31688b8','cfcef538-d03c-4452-afb7-56b6ff082587','Testcluster','','','2023-05-08 16:44:48.868','','2023-05-08 16:44:48.868',_binary '');
/*!40000 ALTER TABLE `clusters` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `complaintregistrations`
--

DROP TABLE IF EXISTS `complaintregistrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `complaintregistrations` (
  `ComplaintRegistrationId` varchar(36) NOT NULL,
  `UserType` varchar(45) DEFAULT NULL,
  `UserName` varchar(150) DEFAULT NULL,
  `EmailId` varchar(150) DEFAULT NULL,
  `Subject` varchar(200) DEFAULT NULL,
  `IssueDetails` text,
  `IssueStatus` varchar(45) DEFAULT NULL,
  `Attachment` varchar(250) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `ResolvedBy` varchar(30) DEFAULT NULL,
  `ResolvedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  PRIMARY KEY (`ComplaintRegistrationId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `complaintregistrations`
--

LOCK TABLES `complaintregistrations` WRITE;
/*!40000 ALTER TABLE `complaintregistrations` DISABLE KEYS */;
/*!40000 ALTER TABLE `complaintregistrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `coordinatortrainers`
--

DROP TABLE IF EXISTS `coordinatortrainers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `coordinatortrainers` (
  `VCId` varchar(36) NOT NULL,
  `VTId` varchar(36) NOT NULL,
  `VTPId` varchar(36) NOT NULL,
  `DateOfJoining` datetime NOT NULL,
  `DateOfResignation` datetime DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VCId`,`VTId`,`VTPId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `coordinatortrainers`
--

LOCK TABLES `coordinatortrainers` WRITE;
/*!40000 ALTER TABLE `coordinatortrainers` DISABLE KEYS */;
/*!40000 ALTER TABLE `coordinatortrainers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `countries`
--

DROP TABLE IF EXISTS `countries`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `countries` (
  `CountryCode` varchar(15) NOT NULL,
  `CountryName` varchar(75) NOT NULL,
  `ISDCode` varchar(20) DEFAULT NULL,
  `ISOCode` varchar(5) DEFAULT NULL,
  `CurrencyName` varchar(100) DEFAULT NULL,
  `CurrencyCode` varchar(10) DEFAULT NULL,
  `CountryIcon` varchar(100) DEFAULT NULL,
  `Description` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`CountryCode`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `countries`
--

LOCK TABLES `countries` WRITE;
/*!40000 ALTER TABLE `countries` DISABLE KEYS */;
INSERT INTO `countries` VALUES ('IN','India','+91','IND','Indian Rupees','INR','','Indian Rupees','','2023-05-04 21:50:41.735','','2023-05-04 21:50:41.735',_binary '');
/*!40000 ALTER TABLE `countries` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `coursematerials`
--

DROP TABLE IF EXISTS `coursematerials`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `coursematerials` (
  `CourseMaterialId` varchar(36) NOT NULL,
  `VTId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) NOT NULL,
  `ClassId` varchar(36) NOT NULL,
  `ReceiptDate` datetime DEFAULT NULL,
  `Details` varchar(350) DEFAULT NULL,
  `CMStatus` varchar(50) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`CourseMaterialId`),
  KEY `FK_CourseMaterials_AcademicYears_idx` (`AcademicYearId`),
  KEY `FK_CourseMaterials_VTClasses_idx` (`ClassId`),
  CONSTRAINT `FK_CourseMaterials_AcademicYears` FOREIGN KEY (`AcademicYearId`) REFERENCES `academicyears` (`AcademicYearId`),
  CONSTRAINT `FK_CourseMaterials_VTClasses` FOREIGN KEY (`ClassId`) REFERENCES `vtclasses` (`VTClassId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `coursematerials`
--

LOCK TABLES `coursematerials` WRITE;
/*!40000 ALTER TABLE `coursematerials` DISABLE KEYS */;
/*!40000 ALTER TABLE `coursematerials` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `coursemodules`
--

DROP TABLE IF EXISTS `coursemodules`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `coursemodules` (
  `CourseModuleId` varchar(36) NOT NULL,
  `ClassId` varchar(36) NOT NULL,
  `ModuleTypeId` varchar(50) NOT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `UnitName` varchar(200) NOT NULL,
  `DisplayOrder` int NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  PRIMARY KEY (`CourseModuleId`),
  KEY `FK_CourseModules_SchoolClasses_idx` (`ClassId`),
  KEY `FK_CourseModules_Sectors_idx` (`SectorId`),
  KEY `FK_CourseModules_JobRoles_idx` (`JobRoleId`),
  CONSTRAINT `FK_CourseModules_JobRoles` FOREIGN KEY (`JobRoleId`) REFERENCES `jobroles` (`JobRoleId`),
  CONSTRAINT `FK_CourseModules_SchoolClasses` FOREIGN KEY (`ClassId`) REFERENCES `schoolclasses` (`ClassId`),
  CONSTRAINT `FK_CourseModules_Sectors` FOREIGN KEY (`SectorId`) REFERENCES `sectors` (`SectorId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `coursemodules`
--

LOCK TABLES `coursemodules` WRITE;
/*!40000 ALTER TABLE `coursemodules` DISABLE KEYS */;
/*!40000 ALTER TABLE `coursemodules` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `courseunitsessions`
--

DROP TABLE IF EXISTS `courseunitsessions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `courseunitsessions` (
  `CourseUnitSessionId` varchar(36) NOT NULL,
  `CourseModuleId` varchar(36) DEFAULT NULL,
  `SessionName` varchar(250) DEFAULT NULL,
  `DisplayOrder` int DEFAULT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  PRIMARY KEY (`CourseUnitSessionId`),
  KEY `FK_CourseUnitSessions_CourseModules_idx` (`CourseModuleId`),
  CONSTRAINT `FK_CourseUnitSessions_CourseModules` FOREIGN KEY (`CourseModuleId`) REFERENCES `coursemodules` (`CourseModuleId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `courseunitsessions`
--

LOCK TABLES `courseunitsessions` WRITE;
/*!40000 ALTER TABLE `courseunitsessions` DISABLE KEYS */;
/*!40000 ALTER TABLE `courseunitsessions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `datatypes`
--

DROP TABLE IF EXISTS `datatypes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `datatypes` (
  `DataTypeId` int NOT NULL AUTO_INCREMENT,
  `Name` varchar(50) NOT NULL,
  `Description` varchar(350) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`DataTypeId`)
) ENGINE=InnoDB AUTO_INCREMENT=78 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `datatypes`
--

LOCK TABLES `datatypes` WRITE;
/*!40000 ALTER TABLE `datatypes` DISABLE KEYS */;
INSERT INTO `datatypes` VALUES (72,'SchoolType','SchoolType','someshAdmin','2023-05-08 18:46:35.340','someshAdmin','2023-05-08 18:46:35.340',_binary ''),(73,'SchoolManagement','SchoolManagement','someshAdmin','2023-05-08 18:46:35.340','someshAdmin','2023-05-08 18:46:35.340',_binary ''),(74,'SocialCategory','SocialCategory','someshAdmin','2023-05-09 15:01:09.771','someshAdmin','2023-05-09 15:01:09.771',_binary ''),(75,'AcademicYears','AcademicYears','someshAdmin','2023-05-09 15:01:57.614','someshAdmin','2023-05-09 15:01:57.614',_binary ''),(76,'ProfessionalQualification','ProfessionalQualification','someshAdmin','2023-05-09 15:01:57.614','someshAdmin','2023-05-09 15:01:57.614',_binary ''),(77,'NatureOfAppointment','NatureOfAppointment','someshAdmin','2023-05-09 15:01:57.614','someshAdmin','2023-05-09 15:01:57.614',_binary '');
/*!40000 ALTER TABLE `datatypes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `datavalues`
--

DROP TABLE IF EXISTS `datavalues`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `datavalues` (
  `DataValueId` varchar(5) NOT NULL,
  `DataTypeId` varchar(50) NOT NULL,
  `ParentId` varchar(50) DEFAULT NULL,
  `Code` varchar(10) DEFAULT NULL,
  `Name` varchar(200) NOT NULL,
  `Description` varchar(350) DEFAULT NULL,
  `DisplayOrder` int NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`DataValueId`,`DataTypeId`),
  UNIQUE KEY `UC_DataValueId_DataTypeId` (`DataValueId`,`DataTypeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `datavalues`
--

LOCK TABLES `datavalues` WRITE;
/*!40000 ALTER TABLE `datavalues` DISABLE KEYS */;
INSERT INTO `datavalues` VALUES ('101','72','SchoolType','1','Higher Secondary with grades 1 to 12','Higher Secondary with grades 1 to 12',1,'someshAdmin','2023-05-08 18:50:10.097','','2023-05-08 18:50:10.097',_binary ''),('102','72','SchoolType','1','Secondary with grades 1 to 10','Secondary with grades 1 to 10',2,'someshAdmin','2023-05-08 18:50:10.097',NULL,'2023-05-08 18:50:10.097',_binary '\0'),('103','73','SchoolManagement','1','Tribal Welfare Department','Tribal Welfare Department',3,'someshAdmin','2023-05-08 18:50:10.097',NULL,'2023-05-08 18:50:10.097',_binary ''),('104','73','SchoolManagement','1','Social Welfare Depatment','Social Welfare Depatment',4,'someshAdmin','2023-05-08 18:50:10.097',NULL,'2023-05-08 18:50:10.097',_binary ''),('105','74',NULL,'SCG','General','General',1,'someshAdmin','2023-05-08 18:50:10.097',NULL,'2023-05-08 18:50:10.097',_binary ''),('106','76',NULL,'51','Certificate Course In Concerned Vocational Sector','Certificate Course In Concerned Vocational Sector',1,'someshAdmin','2023-05-08 18:50:10.097',NULL,'2023-05-08 18:50:10.097',_binary ''),('107','77',NULL,'11','Through VTP','Through VTP',1,'someshAdmin','2023-05-08 18:50:10.097',NULL,'2023-05-08 18:50:10.097',_binary '');
/*!40000 ALTER TABLE `datavalues` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `districts`
--

DROP TABLE IF EXISTS `districts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `districts` (
  `DistrictCode` varchar(15) NOT NULL,
  `StateCode` varchar(15) NOT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictName` varchar(50) NOT NULL,
  `Description` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`DistrictCode`),
  KEY `FK_dbo.Cities_dbo.States_StateCode` (`StateCode`),
  CONSTRAINT `FK_dbo.Cities_dbo.States_StateCode` FOREIGN KEY (`StateCode`) REFERENCES `states` (`StateCode`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `districts`
--

LOCK TABLES `districts` WRITE;
/*!40000 ALTER TABLE `districts` DISABLE KEYS */;
INSERT INTO `districts` VALUES ('KDHLI','KA','b52fa10d-0e6f-4fc6-af51-f097f7261485','Kodihalli',NULL,'someshAdmin','2023-05-04 21:54:14.813',NULL,'2023-05-04 21:54:14.813',_binary '');
/*!40000 ALTER TABLE `districts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `divisiondistricts`
--

DROP TABLE IF EXISTS `divisiondistricts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `divisiondistricts` (
  `DivisionDistrictId` char(36) NOT NULL,
  `DivisionId` char(36) NOT NULL,
  `DistrictId` char(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`DivisionDistrictId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `divisiondistricts`
--

LOCK TABLES `divisiondistricts` WRITE;
/*!40000 ALTER TABLE `divisiondistricts` DISABLE KEYS */;
/*!40000 ALTER TABLE `divisiondistricts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `divisions`
--

DROP TABLE IF EXISTS `divisions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `divisions` (
  `DivisionId` varchar(36) NOT NULL,
  `StateCode` varchar(15) DEFAULT NULL,
  `DivisionName` varchar(100) NOT NULL,
  `Description` varchar(250) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`DivisionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `divisions`
--

LOCK TABLES `divisions` WRITE;
/*!40000 ALTER TABLE `divisions` DISABLE KEYS */;
INSERT INTO `divisions` VALUES ('b52fa10d-0e6f-4fc6-af51-f097f7261485','KA','Bangalore','','','2023-05-04 21:54:14.813','','2023-05-04 21:54:14.813',_binary '');
/*!40000 ALTER TABLE `divisions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `drpdailyreporting`
--

DROP TABLE IF EXISTS `drpdailyreporting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `drpdailyreporting` (
  `DRPDailyReportingId` varchar(36) NOT NULL,
  `DRPId` varchar(36) DEFAULT NULL,
  `ReportDate` datetime(3) DEFAULT NULL,
  `ReportType` varchar(50) DEFAULT NULL,
  `SchoolId` varchar(36) DEFAULT NULL,
  `WorkTypeDetails` varchar(250) DEFAULT NULL,
  `GeoLocation` varchar(50) DEFAULT NULL,
  `Latitude` varchar(20) DEFAULT NULL,
  `Longitude` varchar(20) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`DRPDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `drpdailyreporting`
--

LOCK TABLES `drpdailyreporting` WRITE;
/*!40000 ALTER TABLE `drpdailyreporting` DISABLE KEYS */;
/*!40000 ALTER TABLE `drpdailyreporting` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `drprholidays`
--

DROP TABLE IF EXISTS `drprholidays`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `drprholidays` (
  `DRPRHolidayId` varchar(36) NOT NULL,
  `DRPDailyReportingId` varchar(36) NOT NULL,
  `HolidayTypeId` varchar(5) NOT NULL,
  `HolidayDetails` varchar(350) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`DRPRHolidayId`),
  KEY `FK_DRPRHolidays_DRPDailyReporting_idx` (`DRPDailyReportingId`),
  CONSTRAINT `FK_DRPRHolidays_DRPDailyReporting` FOREIGN KEY (`DRPDailyReportingId`) REFERENCES `drpdailyreporting` (`DRPDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `drprholidays`
--

LOCK TABLES `drprholidays` WRITE;
/*!40000 ALTER TABLE `drprholidays` DISABLE KEYS */;
/*!40000 ALTER TABLE `drprholidays` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `drprindustryexposurevisits`
--

DROP TABLE IF EXISTS `drprindustryexposurevisits`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `drprindustryexposurevisits` (
  `DRPRIndustryExposureVisitId` varchar(36) NOT NULL,
  `DRPDailyReportingId` varchar(36) NOT NULL,
  `TypeOfIndustryLinkage` varchar(250) DEFAULT NULL,
  `ContactPersonName` varchar(100) NOT NULL,
  `ContactPersonMobile` varchar(15) NOT NULL,
  `ContactPersonEmail` varchar(100) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`DRPRIndustryExposureVisitId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `drprindustryexposurevisits`
--

LOCK TABLES `drprindustryexposurevisits` WRITE;
/*!40000 ALTER TABLE `drprindustryexposurevisits` DISABLE KEYS */;
/*!40000 ALTER TABLE `drprindustryexposurevisits` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `drprleaves`
--

DROP TABLE IF EXISTS `drprleaves`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `drprleaves` (
  `DRPRLeaveId` varchar(36) NOT NULL,
  `DRPDailyReportingId` varchar(36) NOT NULL,
  `LeaveTypeId` varchar(5) NOT NULL,
  `LeaveApprovalStatus` varchar(20) NOT NULL,
  `LeaveApprover` varchar(5) NOT NULL,
  `LeaveReason` varchar(350) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`DRPRLeaveId`),
  KEY `FK_DRPRLeaves_DRPDailyReporting_idx` (`DRPDailyReportingId`),
  CONSTRAINT `FK_DRPRLeaves_DRPDailyReporting` FOREIGN KEY (`DRPDailyReportingId`) REFERENCES `drpdailyreporting` (`DRPDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `drprleaves`
--

LOCK TABLES `drprleaves` WRITE;
/*!40000 ALTER TABLE `drprleaves` DISABLE KEYS */;
/*!40000 ALTER TABLE `drprleaves` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `drprschoolvisits`
--

DROP TABLE IF EXISTS `drprschoolvisits`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `drprschoolvisits` (
  `DRPRSchoolVisitId` varchar(36) NOT NULL,
  `DRPDailyReportingId` varchar(36) NOT NULL,
  `SchoolId` varchar(36) NOT NULL,
  `WorkDetails` varchar(350) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`DRPRSchoolVisitId`),
  KEY `FK_DRPRSchoolVisits_DRPDailyReporting_idx` (`DRPDailyReportingId`),
  CONSTRAINT `FK_DRPRSchoolVisits_DRPDailyReporting` FOREIGN KEY (`DRPDailyReportingId`) REFERENCES `drpdailyreporting` (`DRPDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `drprschoolvisits`
--

LOCK TABLES `drprschoolvisits` WRITE;
/*!40000 ALTER TABLE `drprschoolvisits` DISABLE KEYS */;
/*!40000 ALTER TABLE `drprschoolvisits` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `drprworkingdaytypes`
--

DROP TABLE IF EXISTS `drprworkingdaytypes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `drprworkingdaytypes` (
  `DRPRWorkingDayTypeId` varchar(36) NOT NULL,
  `DRPDailyReportingId` varchar(36) NOT NULL,
  `WorkingTypeId` varchar(5) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`DRPRWorkingDayTypeId`),
  KEY `FK_DRPRWorkingDayTypes_WorkingTypes_idx` (`WorkingTypeId`),
  KEY `FK_DRPRHolidays_DRPDailyReporting_idx` (`DRPDailyReportingId`),
  CONSTRAINT `FK_DRPRWorkingDayTypes_DRPDailyReporting` FOREIGN KEY (`DRPDailyReportingId`) REFERENCES `drpdailyreporting` (`DRPDailyReportingId`),
  CONSTRAINT `FK_DRPRWorkingDayTypes_WorkingTypes` FOREIGN KEY (`WorkingTypeId`) REFERENCES `datavalues` (`DataValueId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `drprworkingdaytypes`
--

LOCK TABLES `drprworkingdaytypes` WRITE;
/*!40000 ALTER TABLE `drprworkingdaytypes` DISABLE KEYS */;
/*!40000 ALTER TABLE `drprworkingdaytypes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dsclasses`
--

DROP TABLE IF EXISTS `dsclasses`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dsclasses` (
  `DsClassId` bigint NOT NULL AUTO_INCREMENT,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictId` varchar(10) DEFAULT NULL,
  `SchoolManagementId` varchar(36) DEFAULT NULL,
  `TotalClasses` int DEFAULT NULL,
  `Class9` int DEFAULT NULL,
  `Class10` int DEFAULT NULL,
  `Class11` int DEFAULT NULL,
  `Class12` int DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `ClassId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DsClassId`)
) ENGINE=InnoDB AUTO_INCREMENT=462978 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dsclasses`
--

LOCK TABLES `dsclasses` WRITE;
/*!40000 ALTER TABLE `dsclasses` DISABLE KEYS */;
/*!40000 ALTER TABLE `dsclasses` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dscoordinatorattendances`
--

DROP TABLE IF EXISTS `dscoordinatorattendances`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dscoordinatorattendances` (
  `DsCoordinatorAttendanceId` bigint NOT NULL AUTO_INCREMENT,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictId` varchar(10) DEFAULT NULL,
  `SchoolManagementId` varchar(36) DEFAULT NULL,
  `VCSchoolSectorId` varchar(36) DEFAULT NULL,
  `SchoolId` varchar(36) DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `ReportingMonth` datetime DEFAULT NULL,
  `VCReporting` float DEFAULT NULL,
  `WorkingDays` int DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DsCoordinatorAttendanceId`)
) ENGINE=InnoDB AUTO_INCREMENT=44155 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dscoordinatorattendances`
--

LOCK TABLES `dscoordinatorattendances` WRITE;
/*!40000 ALTER TABLE `dscoordinatorattendances` DISABLE KEYS */;
/*!40000 ALTER TABLE `dscoordinatorattendances` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dscoursematerials`
--

DROP TABLE IF EXISTS `dscoursematerials`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dscoursematerials` (
  `DsCourseMaterialId` bigint NOT NULL AUTO_INCREMENT,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictId` varchar(10) DEFAULT NULL,
  `SchoolManagementId` varchar(36) DEFAULT NULL,
  `VTClassId` varchar(36) DEFAULT NULL,
  `CourseMaterialId` varchar(36) DEFAULT NULL,
  `CMClassId` varchar(36) DEFAULT NULL,
  `ReceiptDate` datetime DEFAULT NULL,
  `CMStatus` varchar(10) DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `ClassId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DsCourseMaterialId`)
) ENGINE=InnoDB AUTO_INCREMENT=699338 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dscoursematerials`
--

LOCK TABLES `dscoursematerials` WRITE;
/*!40000 ALTER TABLE `dscoursematerials` DISABLE KEYS */;
/*!40000 ALTER TABLE `dscoursematerials` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dsdatamanagement`
--

DROP TABLE IF EXISTS `dsdatamanagement`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dsdatamanagement` (
  `AcademicYearId` varchar(36) NOT NULL,
  `ReportDate` datetime NOT NULL,
  `DataType` varchar(100) NOT NULL,
  `RowCount` int DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`AcademicYearId`,`ReportDate`,`DataType`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dsdatamanagement`
--

LOCK TABLES `dsdatamanagement` WRITE;
/*!40000 ALTER TABLE `dsdatamanagement` DISABLE KEYS */;
/*!40000 ALTER TABLE `dsdatamanagement` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dsfieldvisits`
--

DROP TABLE IF EXISTS `dsfieldvisits`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dsfieldvisits` (
  `DsFieldVisitId` bigint NOT NULL AUTO_INCREMENT,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictId` varchar(10) DEFAULT NULL,
  `SchoolManagementId` varchar(36) DEFAULT NULL,
  `ClassTaughtId` varchar(36) DEFAULT NULL,
  `SchoolId` varchar(36) DEFAULT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `QuarterInYear` int DEFAULT NULL,
  `ReportMonth` varchar(50) DEFAULT NULL,
  `NoOfSchoolClasses` int DEFAULT NULL,
  `FieldIndustryCount` int DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `ClassId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DsFieldVisitId`)
) ENGINE=InnoDB AUTO_INCREMENT=446814 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dsfieldvisits`
--

LOCK TABLES `dsfieldvisits` WRITE;
/*!40000 ALTER TABLE `dsfieldvisits` DISABLE KEYS */;
/*!40000 ALTER TABLE `dsfieldvisits` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dsguestlectures`
--

DROP TABLE IF EXISTS `dsguestlectures`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dsguestlectures` (
  `DsGuestLectureId` bigint NOT NULL AUTO_INCREMENT,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictId` varchar(10) DEFAULT NULL,
  `SchoolManagementId` varchar(36) DEFAULT NULL,
  `ClassTaughtId` varchar(36) DEFAULT NULL,
  `SchoolId` varchar(36) DEFAULT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `ReportMonth` varchar(50) DEFAULT NULL,
  `NoOfSchoolClasses` int DEFAULT NULL,
  `GuestLectureCount` int DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `ClassId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DsGuestLectureId`)
) ENGINE=InnoDB AUTO_INCREMENT=831991 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dsguestlectures`
--

LOCK TABLES `dsguestlectures` WRITE;
/*!40000 ALTER TABLE `dsguestlectures` DISABLE KEYS */;
/*!40000 ALTER TABLE `dsguestlectures` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dsschoolclasses`
--

DROP TABLE IF EXISTS `dsschoolclasses`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dsschoolclasses` (
  `DsSchoolClassId` bigint NOT NULL AUTO_INCREMENT,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictId` varchar(10) DEFAULT NULL,
  `SchoolManagementId` varchar(36) DEFAULT NULL,
  `VTClassId` varchar(36) DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `ClassId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DsSchoolClassId`)
) ENGINE=InnoDB AUTO_INCREMENT=1397512 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dsschoolclasses`
--

LOCK TABLES `dsschoolclasses` WRITE;
/*!40000 ALTER TABLE `dsschoolclasses` DISABLE KEYS */;
/*!40000 ALTER TABLE `dsschoolclasses` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dsschools`
--

DROP TABLE IF EXISTS `dsschools`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dsschools` (
  `DsSchoolId` bigint NOT NULL AUTO_INCREMENT,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictId` varchar(10) DEFAULT NULL,
  `SchoolManagementId` varchar(36) DEFAULT NULL,
  `ApprovedSchoolId` varchar(36) DEFAULT NULL,
  `ImplementedSchoolId` varchar(36) DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `ClassId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DsSchoolId`)
) ENGINE=InnoDB AUTO_INCREMENT=1691386 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dsschools`
--

LOCK TABLES `dsschools` WRITE;
/*!40000 ALTER TABLE `dsschools` DISABLE KEYS */;
/*!40000 ALTER TABLE `dsschools` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dssectorjobroles`
--

DROP TABLE IF EXISTS `dssectorjobroles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dssectorjobroles` (
  `DsSectorJobRoleId` bigint NOT NULL AUTO_INCREMENT,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictId` varchar(10) DEFAULT NULL,
  `SchoolManagementId` varchar(36) DEFAULT NULL,
  `VTSchoolSectorId` varchar(36) DEFAULT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `SchoolId` varchar(36) DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DsSectorJobRoleId`)
) ENGINE=InnoDB AUTO_INCREMENT=583690 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dssectorjobroles`
--

LOCK TABLES `dssectorjobroles` WRITE;
/*!40000 ALTER TABLE `dssectorjobroles` DISABLE KEYS */;
/*!40000 ALTER TABLE `dssectorjobroles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dsstudentattendances`
--

DROP TABLE IF EXISTS `dsstudentattendances`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dsstudentattendances` (
  `DsStudentAttendanceId` bigint NOT NULL AUTO_INCREMENT,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VTSchoolSectorId` varchar(36) DEFAULT NULL,
  `ClassId` varchar(36) DEFAULT NULL,
  `ReportingMonth` datetime DEFAULT NULL,
  `VTWorkingDays` int DEFAULT NULL,
  `AttendanceDays` int DEFAULT NULL,
  `EnrolledBoys` int DEFAULT NULL,
  `EnrolledGirls` int DEFAULT NULL,
  `EnrolledStudents` int DEFAULT NULL,
  `AttendanceBoys` int DEFAULT NULL,
  `AttendanceGirls` int DEFAULT NULL,
  `StudentAttendances` int DEFAULT NULL,
  `AttendanceBoysInPerc` float DEFAULT NULL,
  `AttendanceGirlsInPerc` float DEFAULT NULL,
  `AttendancesInPerc` float DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DsStudentAttendanceId`)
) ENGINE=InnoDB AUTO_INCREMENT=138611 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dsstudentattendances`
--

LOCK TABLES `dsstudentattendances` WRITE;
/*!40000 ALTER TABLE `dsstudentattendances` DISABLE KEYS */;
/*!40000 ALTER TABLE `dsstudentattendances` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dsstudents`
--

DROP TABLE IF EXISTS `dsstudents`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dsstudents` (
  `DsStudentId` bigint NOT NULL AUTO_INCREMENT,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `SchoolId` varchar(36) DEFAULT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictId` varchar(10) DEFAULT NULL,
  `SchoolManagementId` varchar(36) DEFAULT NULL,
  `Boys` int DEFAULT NULL,
  `Girls` int DEFAULT NULL,
  `Total` int DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `ClassId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DsStudentId`)
) ENGINE=InnoDB AUTO_INCREMENT=262494 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dsstudents`
--

LOCK TABLES `dsstudents` WRITE;
/*!40000 ALTER TABLE `dsstudents` DISABLE KEYS */;
/*!40000 ALTER TABLE `dsstudents` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dstoolsandequipments`
--

DROP TABLE IF EXISTS `dstoolsandequipments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dstoolsandequipments` (
  `DsToolsAndEquipmentId` bigint NOT NULL AUTO_INCREMENT,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictId` varchar(10) DEFAULT NULL,
  `SchoolManagementId` varchar(36) DEFAULT NULL,
  `TESectorId` varchar(36) DEFAULT NULL,
  `TEJobRoleId` varchar(36) DEFAULT NULL,
  `ToolEquipmentId` varchar(36) DEFAULT NULL,
  `ReceiptDate` datetime DEFAULT NULL,
  `TEReceiveStatus` varchar(50) DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DsToolsAndEquipmentId`)
) ENGINE=InnoDB AUTO_INCREMENT=335449 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dstoolsandequipments`
--

LOCK TABLES `dstoolsandequipments` WRITE;
/*!40000 ALTER TABLE `dstoolsandequipments` DISABLE KEYS */;
/*!40000 ALTER TABLE `dstoolsandequipments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dstrainerattendances`
--

DROP TABLE IF EXISTS `dstrainerattendances`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dstrainerattendances` (
  `DsTrainerAttendanceId` bigint NOT NULL AUTO_INCREMENT,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `VTSchoolSectorId` varchar(36) DEFAULT NULL,
  `ReportingMonth` datetime DEFAULT NULL,
  `VTReporting` int DEFAULT NULL,
  `OnLeave` int DEFAULT NULL,
  `Holiday` int DEFAULT NULL,
  `ObservationDay` int DEFAULT NULL,
  `WorkingDays` int DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DsTrainerAttendanceId`)
) ENGINE=InnoDB AUTO_INCREMENT=126705 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dstrainerattendances`
--

LOCK TABLES `dstrainerattendances` WRITE;
/*!40000 ALTER TABLE `dstrainerattendances` DISABLE KEYS */;
/*!40000 ALTER TABLE `dstrainerattendances` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dstrainers`
--

DROP TABLE IF EXISTS `dstrainers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dstrainers` (
  `DsTrainerId` bigint NOT NULL AUTO_INCREMENT,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictId` varchar(10) DEFAULT NULL,
  `SchoolManagementId` varchar(36) DEFAULT NULL,
  `TotalVT` varchar(36) DEFAULT NULL,
  `PlacedVT` varchar(36) DEFAULT NULL,
  `ReportedVT` varchar(36) DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `ClassId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DsTrainerId`)
) ENGINE=InnoDB AUTO_INCREMENT=182970 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dstrainers`
--

LOCK TABLES `dstrainers` WRITE;
/*!40000 ALTER TABLE `dstrainers` DISABLE KEYS */;
/*!40000 ALTER TABLE `dstrainers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `employeeaddresses`
--

DROP TABLE IF EXISTS `employeeaddresses`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employeeaddresses` (
  `AddressId` char(36) NOT NULL,
  `EmployeeId` char(36) NOT NULL,
  `SequenceNo` int NOT NULL,
  `AddressType` varchar(25) NOT NULL,
  `StateCode` varchar(15) NOT NULL,
  `DistrictCode` varchar(15) DEFAULT NULL,
  `Address1` varchar(150) NOT NULL,
  `Address2` varchar(150) DEFAULT NULL,
  `Address3` varchar(150) DEFAULT NULL,
  `Pincode` varchar(6) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`AddressId`),
  KEY `FK_EmployeeAddresses_States_StateCode` (`StateCode`),
  KEY `FK_EmployeeAddresses_Employees_EmployeeId` (`EmployeeId`),
  KEY `FK_EmployeeAddresses_Districts_DistrictCode` (`DistrictCode`),
  CONSTRAINT `FK_EmployeeAddresses_Employees_EmployeeId` FOREIGN KEY (`EmployeeId`) REFERENCES `employees` (`AccountId`) ON DELETE CASCADE,
  CONSTRAINT `FK_EmployeeAddresses_States_StateCode` FOREIGN KEY (`StateCode`) REFERENCES `states` (`StateCode`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `employeeaddresses`
--

LOCK TABLES `employeeaddresses` WRITE;
/*!40000 ALTER TABLE `employeeaddresses` DISABLE KEYS */;
/*!40000 ALTER TABLE `employeeaddresses` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `employeeeducations`
--

DROP TABLE IF EXISTS `employeeeducations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employeeeducations` (
  `EducationId` char(36) NOT NULL,
  `EmployeeId` char(36) NOT NULL,
  `SequenceNo` int NOT NULL,
  `Institution` varchar(150) NOT NULL,
  `DateFrom` datetime(3) NOT NULL,
  `DateTo` datetime(3) DEFAULT NULL,
  `IsCurrent` bit(1) NOT NULL,
  `EducationType` varchar(20) NOT NULL,
  `Grade` varchar(150) DEFAULT NULL,
  `GradeType` varchar(20) DEFAULT NULL,
  `FieldOfStudy` varchar(150) DEFAULT NULL,
  `Summary` varchar(250) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`EducationId`),
  KEY `FK_EmployeeEducations_Employees_EmployeeId` (`EmployeeId`),
  CONSTRAINT `FK_EmployeeEducations_Employees_EmployeeId` FOREIGN KEY (`EmployeeId`) REFERENCES `employees` (`AccountId`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `employeeeducations`
--

LOCK TABLES `employeeeducations` WRITE;
/*!40000 ALTER TABLE `employeeeducations` DISABLE KEYS */;
/*!40000 ALTER TABLE `employeeeducations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `employeeexperiences`
--

DROP TABLE IF EXISTS `employeeexperiences`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employeeexperiences` (
  `ExperienceId` char(36) NOT NULL,
  `EmployeeId` char(36) NOT NULL,
  `SequenceNo` int NOT NULL,
  `Organization` varchar(150) NOT NULL,
  `Position` varchar(20) DEFAULT NULL,
  `Location` varchar(150) NOT NULL,
  `DateFrom` datetime(3) NOT NULL,
  `DateTo` datetime(3) DEFAULT NULL,
  `IsCurrent` bit(1) NOT NULL,
  `Summary` varchar(250) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`ExperienceId`),
  KEY `FK_EmployeeExperiences_Employees_EmployeeId` (`EmployeeId`),
  CONSTRAINT `FK_EmployeeExperiences_Employees_EmployeeId` FOREIGN KEY (`EmployeeId`) REFERENCES `employees` (`AccountId`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `employeeexperiences`
--

LOCK TABLES `employeeexperiences` WRITE;
/*!40000 ALTER TABLE `employeeexperiences` DISABLE KEYS */;
/*!40000 ALTER TABLE `employeeexperiences` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `employees`
--

DROP TABLE IF EXISTS `employees`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employees` (
  `AccountId` varchar(36) NOT NULL,
  `EmployeeCode` varchar(15) DEFAULT NULL,
  `FirstName` varchar(25) NOT NULL,
  `MiddleName` varchar(25) DEFAULT NULL,
  `LastName` varchar(25) NOT NULL,
  `Gender` varchar(15) NOT NULL,
  `DateOfBirth` datetime(3) DEFAULT NULL,
  `Department` varchar(100) DEFAULT NULL,
  `Telephone` varchar(15) DEFAULT NULL,
  `Mobile` varchar(15) NOT NULL,
  `EmailId` varchar(75) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`AccountId`),
  CONSTRAINT `FK_dbo.Employees_dbo.Accounts_AccountId` FOREIGN KEY (`AccountId`) REFERENCES `accounts` (`AccountId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `employees`
--

LOCK TABLES `employees` WRITE;
/*!40000 ALTER TABLE `employees` DISABLE KEYS */;
/*!40000 ALTER TABLE `employees` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `employers`
--

DROP TABLE IF EXISTS `employers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employers` (
  `EmployerId` varchar(36) NOT NULL,
  `StateCode` varchar(36) NOT NULL,
  `DivisionId` varchar(36) NOT NULL,
  `DistrictCode` varchar(15) NOT NULL,
  `BlockName` varchar(150) NOT NULL,
  `Address` varchar(350) DEFAULT NULL,
  `City` varchar(50) DEFAULT NULL,
  `Pincode` varchar(6) DEFAULT NULL,
  `BusinessType` varchar(50) DEFAULT NULL,
  `EmployeeCount` int DEFAULT '0',
  `Outlets` varchar(350) DEFAULT NULL,
  `Contact1` varchar(150) DEFAULT NULL,
  `Mobile1` varchar(15) DEFAULT NULL,
  `Designation1` varchar(100) DEFAULT NULL,
  `EmailId1` varchar(150) DEFAULT NULL,
  `Contact2` varchar(150) DEFAULT NULL,
  `Mobile2` varchar(15) DEFAULT NULL,
  `Designation2` varchar(100) DEFAULT NULL,
  `EmailId2` varchar(150) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`EmployerId`),
  KEY `FK_Employers_Divisions_idx` (`DivisionId`),
  KEY `FK_Employers_Districts_idx` (`DistrictCode`),
  CONSTRAINT `FK_Employers_Divisions` FOREIGN KEY (`DivisionId`) REFERENCES `divisions` (`DivisionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `employers`
--

LOCK TABLES `employers` WRITE;
/*!40000 ALTER TABLE `employers` DISABLE KEYS */;
/*!40000 ALTER TABLE `employers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `errorlogs`
--

DROP TABLE IF EXISTS `errorlogs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `errorlogs` (
  `ErrorLogId` varchar(36) NOT NULL,
  `ModuleName` varchar(100) DEFAULT NULL,
  `ErrorCode` varchar(30) DEFAULT NULL,
  `ErrorSeverity` int DEFAULT NULL,
  `ErrorState` int DEFAULT NULL,
  `ErrorProcedure` varchar(70) DEFAULT NULL,
  `ErrorLine` int DEFAULT NULL,
  `ErrorTime` datetime(3) NOT NULL,
  `ErrorType` varchar(150) DEFAULT NULL,
  `ErrorLocation` varchar(250) DEFAULT NULL,
  `ErrorMessage` varchar(500) NOT NULL,
  `StackTrace` varchar(3500) DEFAULT NULL,
  `ErrorStatus` varchar(50) DEFAULT NULL,
  `IsResolved` bit(1) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`ErrorLogId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `errorlogs`
--

LOCK TABLES `errorlogs` WRITE;
/*!40000 ALTER TABLE `errorlogs` DISABLE KEYS */;
/*!40000 ALTER TABLE `errorlogs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `exitsurveydetails`
--

DROP TABLE IF EXISTS `exitsurveydetails`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `exitsurveydetails` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ExitStudentId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `SeatNo` varchar(45) DEFAULT NULL,
  `Religion` varchar(45) DEFAULT NULL,
  `ParentName` varchar(45) DEFAULT NULL,
  `StudentMobileNo` varchar(15) DEFAULT NULL,
  `StudentWANo` varchar(15) DEFAULT NULL,
  `ParentMobileNo` varchar(15) DEFAULT NULL,
  `CityOfResidence` varchar(45) DEFAULT NULL,
  `DistrictOfResidence` varchar(45) DEFAULT NULL,
  `BlockOfResidence` varchar(45) DEFAULT NULL,
  `PinCode` varchar(45) DEFAULT NULL,
  `StudentAddress` varchar(250) DEFAULT NULL,
  `WillContHigherStudies` varchar(10) DEFAULT NULL,
  `IsFullTime` varchar(10) DEFAULT NULL,
  `CourseToPursue` varchar(100) DEFAULT NULL,
  `StreamOfEducation` varchar(100) DEFAULT NULL,
  `WillContVocEdu` varchar(10) DEFAULT NULL,
  `WillContVocational11` varchar(45) DEFAULT NULL,
  `ReasonsNOTToContinue` varchar(200) DEFAULT NULL,
  `WillContSameSector` varchar(10) DEFAULT NULL,
  `SectorForTraining` varchar(45) DEFAULT NULL,
  `OtherSector` varchar(100) DEFAULT NULL,
  `CurrentlyEmployed` varchar(10) DEFAULT NULL,
  `WorkTitle` varchar(150) DEFAULT NULL,
  `DetailsOfEmployment` varchar(100) DEFAULT NULL,
  `WillBeFullTime` varchar(10) DEFAULT NULL,
  `SectorsOfEmployment` varchar(100) DEFAULT NULL,
  `IsVSCompleted` varchar(45) DEFAULT NULL,
  `WantToPursueAnySkillTraining` varchar(15) DEFAULT NULL,
  `IsFulltimeWillingness` varchar(50) DEFAULT NULL,
  `HveRegisteredOnEmploymentPortal` varchar(40) DEFAULT NULL,
  `EmploymentPortalName` varchar(100) DEFAULT NULL,
  `WillingToGetRegisteredOnNAPS` varchar(10) DEFAULT NULL,
  `WantToKnowAboutOpportunities` varchar(10) DEFAULT NULL,
  `CanLahiGetInTouch` varchar(20) DEFAULT NULL,
  `CollectedEmailId` varchar(45) DEFAULT NULL,
  `SurveyCompletedByStudentORParent` varchar(45) DEFAULT NULL,
  `DateOfIntv` date DEFAULT NULL,
  `Remark` varchar(500) DEFAULT NULL,
  `DoneInternship` varchar(10) DEFAULT NULL,
  `InternshipCompletedSector` varchar(36) DEFAULT NULL,
  `IntrestedInJobOrSelfEmploymentPost12th` varchar(36) DEFAULT NULL,
  `PreferredLocations` varchar(100) DEFAULT NULL,
  `ParticularLocation` varchar(100) DEFAULT NULL,
  `DifferentProgramOpportunities` varchar(50) DEFAULT NULL,
  `OtherStreamStudying` varchar(36) DEFAULT NULL,
  `TrainingType` varchar(45) DEFAULT NULL,
  `OtherCourse` varchar(45) DEFAULT NULL,
  `WillingToContSkillTraining` varchar(10) DEFAULT NULL,
  `SkillTrainingType` varchar(15) DEFAULT NULL,
  `CourseForTraining` varchar(500) DEFAULT NULL,
  `CourseNameIfOther` varchar(45) DEFAULT NULL,
  `OtherSectorsIfAny` varchar(100) DEFAULT NULL,
  `InterestedInJobOrSelfEmployment` varchar(10) DEFAULT NULL,
  `TopicsOfInterest` varchar(100) DEFAULT NULL,
  `IsRelevantToVocCourse` varchar(10) DEFAULT NULL,
  `SectorForSkillTraining` varchar(45) DEFAULT NULL,
  `OthersIfAny` varchar(45) DEFAULT NULL,
  `WillingToGoForTechHighEdu` varchar(15) DEFAULT NULL,
  `WantToKnowAbtPgmsForJobsNContEdu` varchar(15) DEFAULT NULL,
  `CanSendTheUpdates` varchar(10) DEFAULT NULL,
  `IsOtherCourse` varchar(10) DEFAULT NULL,
  `OtherReasons` varchar(200) DEFAULT NULL,
  `DoesFieldStudyHveVocSub` varchar(10) DEFAULT NULL,
  `InterestedInSkillDevelopmentPgms` varchar(10) DEFAULT NULL,
  `SectorsInterestedIn` varchar(100) DEFAULT NULL,
  `AnyPreferredLocForEmployment` varchar(10) DEFAULT NULL,
  `WantToKnowAbtSkillsUnivByGvt` varchar(15) DEFAULT NULL,
  `VTMobile` varchar(15) DEFAULT NULL,
  `MotherName` varchar(45) DEFAULT NULL,
  `CreatedBy` varchar(45) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedBy` varchar(45) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_ExitSurveyDetails_ExitStudentId` (`ExitStudentId`)
) ENGINE=InnoDB AUTO_INCREMENT=26475 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `exitsurveydetails`
--

LOCK TABLES `exitsurveydetails` WRITE;
/*!40000 ALTER TABLE `exitsurveydetails` DISABLE KEYS */;
/*!40000 ALTER TABLE `exitsurveydetails` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `forgotpasswordhistories`
--

DROP TABLE IF EXISTS `forgotpasswordhistories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `forgotpasswordhistories` (
  `ForgotPasswordId` varchar(36) NOT NULL,
  `EmailId` varchar(100) DEFAULT NULL,
  `PasswordResetUrl` varchar(500) DEFAULT NULL,
  `UserIPAddress` varchar(30) DEFAULT NULL,
  `RequestDate` datetime(3) DEFAULT NULL,
  `ResetPasswordDate` datetime(3) DEFAULT NULL,
  PRIMARY KEY (`ForgotPasswordId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `forgotpasswordhistories`
--

LOCK TABLES `forgotpasswordhistories` WRITE;
/*!40000 ALTER TABLE `forgotpasswordhistories` DISABLE KEYS */;
/*!40000 ALTER TABLE `forgotpasswordhistories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `fvclasssectionstaught`
--

DROP TABLE IF EXISTS `fvclasssectionstaught`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `fvclasssectionstaught` (
  `FVClassSectionsTaughtId` varchar(36) NOT NULL,
  `ClassId` varchar(36) NOT NULL,
  `SectionId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`FVClassSectionsTaughtId`),
  KEY `FK_FVClassSections_Sections_idx` (`SectionId`),
  KEY `FK_FVClassSections_SchoolClasses_idx` (`ClassId`),
  CONSTRAINT `FK_FVClassSections_SchoolClasses` FOREIGN KEY (`ClassId`) REFERENCES `schoolclasses` (`ClassId`),
  CONSTRAINT `FK_FVClassSections_Sections` FOREIGN KEY (`SectionId`) REFERENCES `sections` (`SectionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `fvclasssectionstaught`
--

LOCK TABLES `fvclasssectionstaught` WRITE;
/*!40000 ALTER TABLE `fvclasssectionstaught` DISABLE KEYS */;
/*!40000 ALTER TABLE `fvclasssectionstaught` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `fvstudentattendances`
--

DROP TABLE IF EXISTS `fvstudentattendances`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `fvstudentattendances` (
  `FVStudentAttendanceId` varchar(36) NOT NULL,
  `VTFieldIndustryVisitConductedId` varchar(36) NOT NULL,
  `VTId` varchar(36) NOT NULL,
  `ClassId` varchar(36) NOT NULL,
  `StudentId` varchar(36) NOT NULL,
  `IsPresent` bit(1) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`FVStudentAttendanceId`),
  KEY `FK_FVStudentAttendances_VTFieldIndustryVisitConducted_idx` (`VTFieldIndustryVisitConductedId`),
  KEY `FK_FVStudentAttendances_VocationalTrainers_idx` (`VTId`),
  KEY `FK_FVStudentAttendances_SchoolClasses_idx` (`ClassId`),
  KEY `FK_FVStudentAttendances_StudentClasses_idx` (`StudentId`),
  CONSTRAINT `FK_FVStudentAttendances_SchoolClasses` FOREIGN KEY (`ClassId`) REFERENCES `schoolclasses` (`ClassId`),
  CONSTRAINT `FK_FVStudentAttendances_StudentClasses` FOREIGN KEY (`StudentId`) REFERENCES `studentclasses` (`StudentId`),
  CONSTRAINT `FK_FVStudentAttendances_VocationalTrainers` FOREIGN KEY (`VTId`) REFERENCES `vocationaltrainers` (`VTId`),
  CONSTRAINT `FK_FVStudentAttendances_VTFieldIndustryVisitConducted` FOREIGN KEY (`VTFieldIndustryVisitConductedId`) REFERENCES `vtfieldindustryvisitconducted` (`VTFieldIndustryVisitConductedId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `fvstudentattendances`
--

LOCK TABLES `fvstudentattendances` WRITE;
/*!40000 ALTER TABLE `fvstudentattendances` DISABLE KEYS */;
/*!40000 ALTER TABLE `fvstudentattendances` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `fvunitsessionstaught`
--

DROP TABLE IF EXISTS `fvunitsessionstaught`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `fvunitsessionstaught` (
  `FVUnitSessionsTaughtId` varchar(36) NOT NULL,
  `FVUnitsTaughtId` varchar(36) NOT NULL,
  `SessionId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`FVUnitSessionsTaughtId`),
  KEY `FK_FVUnitSessionTaughts_FVUnitsTaught_idx` (`FVUnitsTaughtId`),
  KEY `FK_FVUnitSessionTaughts_CourseUnitSessions_idx` (`SessionId`),
  CONSTRAINT `FK_FVUnitSessionTaughts_CourseUnitSessions` FOREIGN KEY (`SessionId`) REFERENCES `courseunitsessions` (`CourseUnitSessionId`),
  CONSTRAINT `FK_FVUnitSessionTaughts_FVUnitsTaught` FOREIGN KEY (`FVUnitsTaughtId`) REFERENCES `fvunitstaught` (`FVUnitsTaughtId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `fvunitsessionstaught`
--

LOCK TABLES `fvunitsessionstaught` WRITE;
/*!40000 ALTER TABLE `fvunitsessionstaught` DISABLE KEYS */;
/*!40000 ALTER TABLE `fvunitsessionstaught` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `fvunitstaught`
--

DROP TABLE IF EXISTS `fvunitstaught`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `fvunitstaught` (
  `FVUnitsTaughtId` varchar(36) NOT NULL,
  `VTFieldIndustryVisitConductedId` varchar(36) NOT NULL,
  `UnitId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`FVUnitsTaughtId`),
  KEY `FK_FVUnitsTaughts_VTFieldIndustryVisitConducted_idx` (`VTFieldIndustryVisitConductedId`),
  KEY `FK_FVUnitsTaughts_CourseModules_idx` (`UnitId`),
  CONSTRAINT `FK_FVUnitsTaughts_CourseModules` FOREIGN KEY (`UnitId`) REFERENCES `coursemodules` (`CourseModuleId`),
  CONSTRAINT `FK_FVUnitsTaughts_VTFieldIndustryVisitConducted` FOREIGN KEY (`VTFieldIndustryVisitConductedId`) REFERENCES `vtfieldindustryvisitconducted` (`VTFieldIndustryVisitConductedId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `fvunitstaught`
--

LOCK TABLES `fvunitstaught` WRITE;
/*!40000 ALTER TABLE `fvunitstaught` DISABLE KEYS */;
/*!40000 ALTER TABLE `fvunitstaught` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `glclasssectionstaught`
--

DROP TABLE IF EXISTS `glclasssectionstaught`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `glclasssectionstaught` (
  `GLClassSectionsTaughtId` varchar(36) NOT NULL,
  `ClassId` varchar(36) NOT NULL,
  `SectionId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`GLClassSectionsTaughtId`),
  KEY `FK_GLClassSections_Sections_idx` (`SectionId`),
  KEY `FK_GLClassSections_SchoolClasses_idx` (`ClassId`),
  CONSTRAINT `FK_GLClassSections_SchoolClasses` FOREIGN KEY (`ClassId`) REFERENCES `schoolclasses` (`ClassId`),
  CONSTRAINT `FK_GLClassSections_Sections` FOREIGN KEY (`SectionId`) REFERENCES `sections` (`SectionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `glclasssectionstaught`
--

LOCK TABLES `glclasssectionstaught` WRITE;
/*!40000 ALTER TABLE `glclasssectionstaught` DISABLE KEYS */;
/*!40000 ALTER TABLE `glclasssectionstaught` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `glmethodologies`
--

DROP TABLE IF EXISTS `glmethodologies`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `glmethodologies` (
  `GLMethodologyId` varchar(36) NOT NULL,
  `VTGuestLectureId` varchar(36) NOT NULL,
  `MethodologyTypeId` varchar(5) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`GLMethodologyId`),
  KEY `FK_GLMethodologies_VTGuestLectureConducted_idx` (`VTGuestLectureId`),
  KEY `FK_GLMethodologies_MethodologyTypes_idx` (`MethodologyTypeId`),
  CONSTRAINT `FK_GLMethodologies_MethodologyTypes` FOREIGN KEY (`MethodologyTypeId`) REFERENCES `datavalues` (`DataValueId`),
  CONSTRAINT `FK_GLMethodologies_VTGuestLectureConducted` FOREIGN KEY (`VTGuestLectureId`) REFERENCES `vtguestlectureconducted` (`VTGuestLectureId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `glmethodologies`
--

LOCK TABLES `glmethodologies` WRITE;
/*!40000 ALTER TABLE `glmethodologies` DISABLE KEYS */;
/*!40000 ALTER TABLE `glmethodologies` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `glstudentattendances`
--

DROP TABLE IF EXISTS `glstudentattendances`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `glstudentattendances` (
  `GLStudentAttendanceId` varchar(36) NOT NULL,
  `VTGuestLectureId` varchar(36) NOT NULL,
  `VTId` varchar(36) NOT NULL,
  `ClassId` varchar(36) NOT NULL,
  `StudentId` varchar(36) NOT NULL,
  `IsPresent` bit(1) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`GLStudentAttendanceId`),
  KEY `FK_GLStudentAttendances_VTGuestLectureConducted_idx` (`VTGuestLectureId`),
  KEY `FK_GLStudentAttendances_VocationalTrainers_idx` (`VTId`),
  KEY `FK_GLStudentAttendances_SchoolClasses_idx` (`ClassId`),
  KEY `FK_GLStudentAttendances_StudentClasses_idx` (`StudentId`),
  CONSTRAINT `FK_GLStudentAttendances_SchoolClasses` FOREIGN KEY (`ClassId`) REFERENCES `schoolclasses` (`ClassId`),
  CONSTRAINT `FK_GLStudentAttendances_StudentClasses` FOREIGN KEY (`StudentId`) REFERENCES `studentclasses` (`StudentId`),
  CONSTRAINT `FK_GLStudentAttendances_VocationalTrainers` FOREIGN KEY (`VTId`) REFERENCES `vocationaltrainers` (`VTId`),
  CONSTRAINT `FK_GLStudentAttendances_VTGuestLectureConducted` FOREIGN KEY (`VTGuestLectureId`) REFERENCES `vtguestlectureconducted` (`VTGuestLectureId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `glstudentattendances`
--

LOCK TABLES `glstudentattendances` WRITE;
/*!40000 ALTER TABLE `glstudentattendances` DISABLE KEYS */;
/*!40000 ALTER TABLE `glstudentattendances` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `glunitsessionstaught`
--

DROP TABLE IF EXISTS `glunitsessionstaught`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `glunitsessionstaught` (
  `GLUnitSessionsTaughtId` varchar(36) NOT NULL,
  `GLUnitsTaughtId` varchar(36) NOT NULL,
  `SessionId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`GLUnitSessionsTaughtId`),
  KEY `FK_GLUnitSessionTaughts_GLUnitsTaught_idx` (`GLUnitsTaughtId`),
  KEY `FK_GLUnitSessionTaughts_CourseUnitSessions_idx` (`SessionId`),
  CONSTRAINT `FK_GLUnitSessionTaughts_CourseUnitSessions` FOREIGN KEY (`SessionId`) REFERENCES `courseunitsessions` (`CourseUnitSessionId`),
  CONSTRAINT `FK_GLUnitSessionTaughts_GLUnitsTaught` FOREIGN KEY (`GLUnitsTaughtId`) REFERENCES `glunitstaught` (`GLUnitsTaughtId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `glunitsessionstaught`
--

LOCK TABLES `glunitsessionstaught` WRITE;
/*!40000 ALTER TABLE `glunitsessionstaught` DISABLE KEYS */;
/*!40000 ALTER TABLE `glunitsessionstaught` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `glunitstaught`
--

DROP TABLE IF EXISTS `glunitstaught`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `glunitstaught` (
  `GLUnitsTaughtId` varchar(36) NOT NULL,
  `VTGuestLectureId` varchar(36) NOT NULL,
  `UnitId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`GLUnitsTaughtId`),
  KEY `FK_GLUnitsTaughts_VTGuestLectureConducted_idx` (`VTGuestLectureId`),
  KEY `FK_GLUnitsTaughts_CourseModules_idx` (`UnitId`),
  CONSTRAINT `FK_GLUnitsTaughts_CourseModules` FOREIGN KEY (`UnitId`) REFERENCES `coursemodules` (`CourseModuleId`),
  CONSTRAINT `FK_GLUnitsTaughts_VTGuestLectureConducted` FOREIGN KEY (`VTGuestLectureId`) REFERENCES `vtguestlectureconducted` (`VTGuestLectureId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `glunitstaught`
--

LOCK TABLES `glunitstaught` WRITE;
/*!40000 ALTER TABLE `glunitstaught` DISABLE KEYS */;
/*!40000 ALTER TABLE `glunitstaught` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `headmasters`
--

DROP TABLE IF EXISTS `headmasters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `headmasters` (
  `HMId` varchar(36) NOT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `SchoolId` varchar(36) DEFAULT NULL,
  `FirstName` varchar(50) NOT NULL,
  `MiddleName` varchar(50) DEFAULT NULL,
  `LastName` varchar(50) NOT NULL,
  `FullName` varchar(150) NOT NULL,
  `Mobile` varchar(15) NOT NULL,
  `Mobile1` varchar(15) DEFAULT NULL,
  `Email` varchar(100) DEFAULT NULL,
  `Gender` varchar(10) NOT NULL,
  `YearsInSchool` int DEFAULT NULL,
  `DateOfJoiningSchool` datetime(3) DEFAULT NULL,
  `DateOfResignationFromSchool` datetime(3) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`HMId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `headmasters`
--

LOCK TABLES `headmasters` WRITE;
/*!40000 ALTER TABLE `headmasters` DISABLE KEYS */;
/*!40000 ALTER TABLE `headmasters` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hmissuereporting`
--

DROP TABLE IF EXISTS `hmissuereporting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hmissuereporting` (
  `HMIssueReportingId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `HMId` varchar(36) DEFAULT NULL,
  `IssueMappingId` varchar(36) DEFAULT NULL,
  `IssueReportDate` datetime(3) NOT NULL,
  `MainIssue` varchar(50) DEFAULT NULL,
  `SubIssue` varchar(50) DEFAULT NULL,
  `StudentClass` varchar(100) NOT NULL,
  `Month` varchar(100) NOT NULL,
  `StudentType` varchar(50) DEFAULT NULL,
  `NoOfStudents` int NOT NULL,
  `IssueDetails` varchar(350) DEFAULT NULL,
  `GeoLocation` varchar(50) DEFAULT NULL,
  `Latitude` varchar(20) DEFAULT NULL,
  `Longitude` varchar(20) DEFAULT NULL,
  `ApprovalStatus` varchar(50) DEFAULT NULL,
  `ApprovedDate` datetime DEFAULT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`HMIssueReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `hmissuereporting`
--

LOCK TABLES `hmissuereporting` WRITE;
/*!40000 ALTER TABLE `hmissuereporting` DISABLE KEYS */;
/*!40000 ALTER TABLE `hmissuereporting` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hmschoolsmap`
--

DROP TABLE IF EXISTS `hmschoolsmap`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hmschoolsmap` (
  `HMSchoolId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) NOT NULL,
  `SchoolId` varchar(36) NOT NULL,
  `HMId` varchar(36) NOT NULL,
  `DateOfJoining` datetime DEFAULT NULL,
  `DateOfResignation` datetime DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  PRIMARY KEY (`HMSchoolId`),
  UNIQUE KEY `UC_HMSchoolsMap_AY_SCH_HM` (`AcademicYearId`,`SchoolId`,`HMId`,`IsActive`),
  KEY `FK_HMSchoolsMap_AY` (`AcademicYearId`),
  KEY `FK_HMSchoolsMap_Schools` (`SchoolId`),
  KEY `FK_HMSchoolsMap_HM` (`HMId`),
  KEY `IX_HMSchoolsMap_AY_SCH_HM` (`AcademicYearId`,`SchoolId`,`HMId`,`IsActive`),
  CONSTRAINT `FK_HMSchoolsMap_AY` FOREIGN KEY (`AcademicYearId`) REFERENCES `academicyears` (`AcademicYearId`),
  CONSTRAINT `FK_HMSchoolsMap_HM` FOREIGN KEY (`HMId`) REFERENCES `headmasters` (`HMId`),
  CONSTRAINT `FK_HMSchoolsMap_Schools` FOREIGN KEY (`SchoolId`) REFERENCES `schools` (`SchoolId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `hmschoolsmap`
--

LOCK TABLES `hmschoolsmap` WRITE;
/*!40000 ALTER TABLE `hmschoolsmap` DISABLE KEYS */;
/*!40000 ALTER TABLE `hmschoolsmap` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `issueapprovalhistories`
--

DROP TABLE IF EXISTS `issueapprovalhistories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `issueapprovalhistories` (
  `IssueApprovalHistoryId` varchar(36) NOT NULL,
  `IssueId` varchar(36) DEFAULT NULL,
  `IssueType` varchar(15) DEFAULT NULL,
  `ApprovedBy` varchar(36) DEFAULT NULL,
  `ApprovedDate` datetime DEFAULT NULL,
  `ApprovalStatus` varchar(10) DEFAULT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  PRIMARY KEY (`IssueApprovalHistoryId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `issueapprovalhistories`
--

LOCK TABLES `issueapprovalhistories` WRITE;
/*!40000 ALTER TABLE `issueapprovalhistories` DISABLE KEYS */;
/*!40000 ALTER TABLE `issueapprovalhistories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `issueassignforreviews`
--

DROP TABLE IF EXISTS `issueassignforreviews`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `issueassignforreviews` (
  `IssueAssignForReviewId` varchar(36) NOT NULL,
  `IssueMappingId` varchar(36) NOT NULL,
  `ReviewId` varchar(10) NOT NULL,
  `CreatedBy` varchar(30) DEFAULT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`IssueAssignForReviewId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `issueassignforreviews`
--

LOCK TABLES `issueassignforreviews` WRITE;
/*!40000 ALTER TABLE `issueassignforreviews` DISABLE KEYS */;
/*!40000 ALTER TABLE `issueassignforreviews` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `issueforwardedto`
--

DROP TABLE IF EXISTS `issueforwardedto`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `issueforwardedto` (
  `IssueForwardedToId` varchar(36) NOT NULL,
  `IssueType` varchar(15) NOT NULL,
  `IssueReportingId` varchar(36) NOT NULL,
  `ReviewId` varchar(10) NOT NULL,
  `CreatedBy` varchar(30) DEFAULT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`IssueForwardedToId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `issueforwardedto`
--

LOCK TABLES `issueforwardedto` WRITE;
/*!40000 ALTER TABLE `issueforwardedto` DISABLE KEYS */;
/*!40000 ALTER TABLE `issueforwardedto` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `issuemapping`
--

DROP TABLE IF EXISTS `issuemapping`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `issuemapping` (
  `IssueMappingId` varchar(36) NOT NULL,
  `MainIssueId` varchar(10) NOT NULL,
  `SubIssueId` varchar(10) NOT NULL,
  `IssueCategoryId` varchar(10) NOT NULL,
  `IssuePriority` varchar(30) NOT NULL,
  `IsApplicableForVC` bit(1) NOT NULL,
  `IsApplicableForVT` bit(1) NOT NULL,
  `IsApplicableForHM` bit(1) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`IssueMappingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `issuemapping`
--

LOCK TABLES `issuemapping` WRITE;
/*!40000 ALTER TABLE `issuemapping` DISABLE KEYS */;
/*!40000 ALTER TABLE `issuemapping` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `jobroles`
--

DROP TABLE IF EXISTS `jobroles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `jobroles` (
  `JobRoleId` varchar(36) NOT NULL,
  `SectorId` char(36) NOT NULL,
  `JobRoleName` varchar(100) NOT NULL,
  `QPCode` varchar(15) NOT NULL,
  `DisplayOrder` int NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`JobRoleId`),
  KEY `FK_CourseModules_JobRoles_idx` (`JobRoleId`),
  KEY `FK_CourseModules_Sectors_idx` (`SectorId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `jobroles`
--

LOCK TABLES `jobroles` WRITE;
/*!40000 ALTER TABLE `jobroles` DISABLE KEYS */;
/*!40000 ALTER TABLE `jobroles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `lighthouseparams`
--

DROP TABLE IF EXISTS `lighthouseparams`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `lighthouseparams` (
  `LighthouseParamId` int NOT NULL AUTO_INCREMENT,
  `Param1` text,
  `Param2` text,
  `Param3` text,
  `Param4` text,
  `Param5` text,
  `CreatedBy` varchar(45) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`LighthouseParamId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `lighthouseparams`
--

LOCK TABLES `lighthouseparams` WRITE;
/*!40000 ALTER TABLE `lighthouseparams` DISABLE KEYS */;
/*!40000 ALTER TABLE `lighthouseparams` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `logouthistories`
--

DROP TABLE IF EXISTS `logouthistories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `logouthistories` (
  `LoginUniqueId` varchar(36) NOT NULL,
  `AccountId` varchar(36) DEFAULT NULL,
  `UserId` varchar(45) DEFAULT NULL,
  `LoginDateTime` datetime DEFAULT NULL,
  `LogoutDateTime` varchar(45) DEFAULT NULL,
  `AuthToken` varchar(500) DEFAULT NULL,
  `IsMobile` bit(1) DEFAULT NULL,
  PRIMARY KEY (`LoginUniqueId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `logouthistories`
--

LOCK TABLES `logouthistories` WRITE;
/*!40000 ALTER TABLE `logouthistories` DISABLE KEYS */;
/*!40000 ALTER TABLE `logouthistories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mainissues`
--

DROP TABLE IF EXISTS `mainissues`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `mainissues` (
  `MainIssueId` varchar(36) NOT NULL,
  `Code` varchar(15) DEFAULT NULL,
  `Name` varchar(150) DEFAULT NULL,
  `Description` varchar(350) DEFAULT NULL,
  `DisplayOrder` int DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  PRIMARY KEY (`MainIssueId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mainissues`
--

LOCK TABLES `mainissues` WRITE;
/*!40000 ALTER TABLE `mainissues` DISABLE KEYS */;
/*!40000 ALTER TABLE `mainissues` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `messagetemplates`
--

DROP TABLE IF EXISTS `messagetemplates`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `messagetemplates` (
  `MessageTemplateId` int NOT NULL AUTO_INCREMENT,
  `TemplateName` varchar(150) NOT NULL,
  `TemplateFlowId` varchar(200) NOT NULL,
  `MessageTypeId` varchar(15) NOT NULL,
  `MessageSubTypeId` varchar(15) NOT NULL,
  `MessageFields` varchar(250) NOT NULL,
  `SMSMessage` varchar(750) DEFAULT NULL,
  `WhatsappMessage` text,
  `EmailMessage` text,
  `ApplicableFor` varchar(150) NOT NULL,
  `CreatedBy` varchar(35) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(35) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`MessageTemplateId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `messagetemplates`
--

LOCK TABLES `messagetemplates` WRITE;
/*!40000 ALTER TABLE `messagetemplates` DISABLE KEYS */;
/*!40000 ALTER TABLE `messagetemplates` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `phases`
--

DROP TABLE IF EXISTS `phases`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `phases` (
  `PhaseId` varchar(36) NOT NULL,
  `PhaseName` varchar(100) NOT NULL,
  `Description` varchar(250) DEFAULT NULL,
  `DisplayOrder` int NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`PhaseId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `phases`
--

LOCK TABLES `phases` WRITE;
/*!40000 ALTER TABLE `phases` DISABLE KEYS */;
INSERT INTO `phases` VALUES ('d4917323-570a-4018-92a5-0a96806d5045','Phase 1',NULL,1,'someshAdmin','2023-05-04 21:50:41.735',NULL,'2023-05-04 21:50:41.735',_binary '');
/*!40000 ALTER TABLE `phases` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `qrtz_blob_triggers`
--

DROP TABLE IF EXISTS `qrtz_blob_triggers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `qrtz_blob_triggers` (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `BLOB_DATA` longblob,
  PRIMARY KEY (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `qrtz_blob_triggers`
--

LOCK TABLES `qrtz_blob_triggers` WRITE;
/*!40000 ALTER TABLE `qrtz_blob_triggers` DISABLE KEYS */;
/*!40000 ALTER TABLE `qrtz_blob_triggers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `qrtz_calendars`
--

DROP TABLE IF EXISTS `qrtz_calendars`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `qrtz_calendars` (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `CALENDAR_NAME` varchar(200) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `CALENDAR` longblob NOT NULL,
  PRIMARY KEY (`SCHED_NAME`,`CALENDAR_NAME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `qrtz_calendars`
--

LOCK TABLES `qrtz_calendars` WRITE;
/*!40000 ALTER TABLE `qrtz_calendars` DISABLE KEYS */;
/*!40000 ALTER TABLE `qrtz_calendars` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `qrtz_cron_triggers`
--

DROP TABLE IF EXISTS `qrtz_cron_triggers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `qrtz_cron_triggers` (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `CRON_EXPRESSION` varchar(120) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TIME_ZONE_ID` varchar(80) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  PRIMARY KEY (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`),
  CONSTRAINT `FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `qrtz_triggers` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `qrtz_cron_triggers`
--

LOCK TABLES `qrtz_cron_triggers` WRITE;
/*!40000 ALTER TABLE `qrtz_cron_triggers` DISABLE KEYS */;
/*!40000 ALTER TABLE `qrtz_cron_triggers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `qrtz_fired_triggers`
--

DROP TABLE IF EXISTS `qrtz_fired_triggers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `qrtz_fired_triggers` (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `ENTRY_ID` varchar(140) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `INSTANCE_NAME` varchar(200) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `FIRED_TIME` bigint NOT NULL,
  `SCHED_TIME` bigint NOT NULL,
  `PRIORITY` int NOT NULL,
  `STATE` varchar(16) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `JOB_NAME` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `JOB_GROUP` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `IS_NONCONCURRENT` bit(1) DEFAULT NULL,
  `REQUESTS_RECOVERY` bit(1) DEFAULT NULL,
  PRIMARY KEY (`SCHED_NAME`,`ENTRY_ID`),
  KEY `IDX_QRTZ_FT_INST_JOB_REQ_RCVRY` (`SCHED_NAME`,`INSTANCE_NAME`,`REQUESTS_RECOVERY`),
  KEY `IDX_QRTZ_FT_J_G` (`SCHED_NAME`,`JOB_NAME`,`JOB_GROUP`),
  KEY `IDX_QRTZ_FT_JG` (`SCHED_NAME`,`JOB_GROUP`),
  KEY `IDX_QRTZ_FT_T_G` (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`),
  KEY `IDX_QRTZ_FT_TG` (`SCHED_NAME`,`TRIGGER_GROUP`),
  KEY `IDX_QRTZ_FT_TRIG_INST_NAME` (`SCHED_NAME`,`INSTANCE_NAME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `qrtz_fired_triggers`
--

LOCK TABLES `qrtz_fired_triggers` WRITE;
/*!40000 ALTER TABLE `qrtz_fired_triggers` DISABLE KEYS */;
/*!40000 ALTER TABLE `qrtz_fired_triggers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `qrtz_job_details`
--

DROP TABLE IF EXISTS `qrtz_job_details`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `qrtz_job_details` (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `JOB_NAME` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `JOB_GROUP` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `DESCRIPTION` varchar(250) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `JOB_CLASS_NAME` varchar(250) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `IS_DURABLE` bit(1) NOT NULL,
  `IS_NONCONCURRENT` bit(1) NOT NULL,
  `IS_UPDATE_DATA` bit(1) NOT NULL,
  `REQUESTS_RECOVERY` bit(1) NOT NULL,
  `JOB_DATA` longblob,
  PRIMARY KEY (`SCHED_NAME`,`JOB_NAME`,`JOB_GROUP`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `qrtz_job_details`
--

LOCK TABLES `qrtz_job_details` WRITE;
/*!40000 ALTER TABLE `qrtz_job_details` DISABLE KEYS */;
/*!40000 ALTER TABLE `qrtz_job_details` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `qrtz_locks`
--

DROP TABLE IF EXISTS `qrtz_locks`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `qrtz_locks` (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `LOCK_NAME` varchar(40) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  PRIMARY KEY (`SCHED_NAME`,`LOCK_NAME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `qrtz_locks`
--

LOCK TABLES `qrtz_locks` WRITE;
/*!40000 ALTER TABLE `qrtz_locks` DISABLE KEYS */;
/*!40000 ALTER TABLE `qrtz_locks` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `qrtz_paused_trigger_grps`
--

DROP TABLE IF EXISTS `qrtz_paused_trigger_grps`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `qrtz_paused_trigger_grps` (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  PRIMARY KEY (`SCHED_NAME`,`TRIGGER_GROUP`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `qrtz_paused_trigger_grps`
--

LOCK TABLES `qrtz_paused_trigger_grps` WRITE;
/*!40000 ALTER TABLE `qrtz_paused_trigger_grps` DISABLE KEYS */;
/*!40000 ALTER TABLE `qrtz_paused_trigger_grps` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `qrtz_scheduler_state`
--

DROP TABLE IF EXISTS `qrtz_scheduler_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `qrtz_scheduler_state` (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `INSTANCE_NAME` varchar(200) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `LAST_CHECKIN_TIME` bigint NOT NULL,
  `CHECKIN_INTERVAL` bigint NOT NULL,
  PRIMARY KEY (`SCHED_NAME`,`INSTANCE_NAME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `qrtz_scheduler_state`
--

LOCK TABLES `qrtz_scheduler_state` WRITE;
/*!40000 ALTER TABLE `qrtz_scheduler_state` DISABLE KEYS */;
/*!40000 ALTER TABLE `qrtz_scheduler_state` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `qrtz_simple_triggers`
--

DROP TABLE IF EXISTS `qrtz_simple_triggers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `qrtz_simple_triggers` (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `REPEAT_COUNT` int NOT NULL,
  `REPEAT_INTERVAL` bigint NOT NULL,
  `TIMES_TRIGGERED` int NOT NULL,
  PRIMARY KEY (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`),
  CONSTRAINT `FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `qrtz_triggers` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `qrtz_simple_triggers`
--

LOCK TABLES `qrtz_simple_triggers` WRITE;
/*!40000 ALTER TABLE `qrtz_simple_triggers` DISABLE KEYS */;
/*!40000 ALTER TABLE `qrtz_simple_triggers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `qrtz_simprop_triggers`
--

DROP TABLE IF EXISTS `qrtz_simprop_triggers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `qrtz_simprop_triggers` (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `STR_PROP_1` varchar(512) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `STR_PROP_2` varchar(512) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `STR_PROP_3` varchar(512) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `INT_PROP_1` int DEFAULT NULL,
  `INT_PROP_2` int DEFAULT NULL,
  `LONG_PROP_1` bigint DEFAULT NULL,
  `LONG_PROP_2` bigint DEFAULT NULL,
  `DEC_PROP_1` decimal(13,4) DEFAULT NULL,
  `DEC_PROP_2` decimal(13,4) DEFAULT NULL,
  `BOOL_PROP_1` bit(1) DEFAULT NULL,
  `BOOL_PROP_2` bit(1) DEFAULT NULL,
  `TIME_ZONE_ID` varchar(80) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  PRIMARY KEY (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`),
  CONSTRAINT `FK_QRTZ_SIMPROP_TRIGGERS_QRTZ_TRIGGERS` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `qrtz_triggers` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `qrtz_simprop_triggers`
--

LOCK TABLES `qrtz_simprop_triggers` WRITE;
/*!40000 ALTER TABLE `qrtz_simprop_triggers` DISABLE KEYS */;
/*!40000 ALTER TABLE `qrtz_simprop_triggers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `qrtz_triggers`
--

DROP TABLE IF EXISTS `qrtz_triggers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `qrtz_triggers` (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `JOB_NAME` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `JOB_GROUP` varchar(150) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `DESCRIPTION` varchar(250) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `NEXT_FIRE_TIME` bigint DEFAULT NULL,
  `PREV_FIRE_TIME` bigint DEFAULT NULL,
  `PRIORITY` int DEFAULT NULL,
  `TRIGGER_STATE` varchar(16) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `TRIGGER_TYPE` varchar(8) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `START_TIME` bigint NOT NULL,
  `END_TIME` bigint DEFAULT NULL,
  `CALENDAR_NAME` varchar(200) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `MISFIRE_INSTR` int DEFAULT NULL,
  `JOB_DATA` longblob,
  PRIMARY KEY (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`),
  KEY `IDX_QRTZ_T_C` (`SCHED_NAME`,`CALENDAR_NAME`),
  KEY `IDX_QRTZ_T_G` (`SCHED_NAME`,`TRIGGER_GROUP`),
  KEY `IDX_QRTZ_T_J` (`SCHED_NAME`,`JOB_NAME`,`JOB_GROUP`),
  KEY `IDX_QRTZ_T_JG` (`SCHED_NAME`,`JOB_GROUP`),
  KEY `IDX_QRTZ_T_N_G_STATE` (`SCHED_NAME`,`TRIGGER_GROUP`,`TRIGGER_STATE`),
  KEY `IDX_QRTZ_T_N_STATE` (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`,`TRIGGER_STATE`),
  KEY `IDX_QRTZ_T_NEXT_FIRE_TIME` (`SCHED_NAME`,`NEXT_FIRE_TIME`),
  KEY `IDX_QRTZ_T_NFT_MISFIRE` (`SCHED_NAME`,`MISFIRE_INSTR`,`NEXT_FIRE_TIME`),
  KEY `IDX_QRTZ_T_NFT_ST` (`SCHED_NAME`,`TRIGGER_STATE`,`NEXT_FIRE_TIME`),
  KEY `IDX_QRTZ_T_NFT_ST_MISFIRE` (`SCHED_NAME`,`MISFIRE_INSTR`,`NEXT_FIRE_TIME`,`TRIGGER_STATE`),
  KEY `IDX_QRTZ_T_NFT_ST_MISFIRE_GRP` (`SCHED_NAME`,`MISFIRE_INSTR`,`NEXT_FIRE_TIME`,`TRIGGER_GROUP`,`TRIGGER_STATE`),
  KEY `IDX_QRTZ_T_STATE` (`SCHED_NAME`,`TRIGGER_STATE`),
  CONSTRAINT `FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS` FOREIGN KEY (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) REFERENCES `qrtz_job_details` (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `qrtz_triggers`
--

LOCK TABLES `qrtz_triggers` WRITE;
/*!40000 ALTER TABLE `qrtz_triggers` DISABLE KEYS */;
/*!40000 ALTER TABLE `qrtz_triggers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roles`
--

DROP TABLE IF EXISTS `roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `roles` (
  `RoleId` varchar(36) NOT NULL,
  `Code` varchar(15) NOT NULL,
  `Name` varchar(50) NOT NULL,
  `Description` varchar(350) DEFAULT NULL,
  `LandingPageUrl` varchar(100) DEFAULT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`RoleId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `roles`
--

LOCK TABLES `roles` WRITE;
/*!40000 ALTER TABLE `roles` DISABLE KEYS */;
INSERT INTO `roles` VALUES ('1b91f252-32c1-43e4-8fa5-6ce0c71f5d45','VC ','Vocational Coordinator','Vocational Coordinator',NULL,NULL,'someshAdmin','2023-05-04 21:56:13.142',NULL,'2023-05-04 21:56:13.142',_binary ''),('9aa9dfe0-d6c7-45b8-ad31-50683512f9be','ADMIN','Super user','Super user','','','','2023-05-17 11:53:56.644','','2023-05-17 11:53:56.644',_binary ''),('bc035793-f06f-45ca-a93c-ce97493f78fa','VT','Vocational Trainer','Vocational Trainer',NULL,NULL,'someshAdmin','2023-05-04 21:56:13.142',NULL,'2023-05-04 21:56:13.142',_binary ''),('d85259ec-9c98-4b1a-9e9f-9cb92414ee8e','PMU-Admin','PMU-Admin','PMU-Admin','','','someshAdmin','2023-05-04 21:56:13.142','','2023-05-04 21:56:13.142',_binary '');
/*!40000 ALTER TABLE `roles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roletransactions`
--

DROP TABLE IF EXISTS `roletransactions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `roletransactions` (
  `RoleTransactionId` varchar(36) NOT NULL,
  `RoleId` varchar(36) DEFAULT NULL,
  `TransactionId` varchar(36) DEFAULT NULL,
  `Rights` bit(1) NOT NULL,
  `CanAdd` bit(1) NOT NULL,
  `CanEdit` bit(1) NOT NULL,
  `CanDelete` bit(1) NOT NULL,
  `CanView` bit(1) NOT NULL,
  `CanExport` bit(1) NOT NULL,
  `ListView` bit(1) NOT NULL,
  `BasicView` bit(1) NOT NULL,
  `DetailView` bit(1) NOT NULL,
  `IsPublic` bit(1) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`RoleTransactionId`),
  KEY `FK_dbo.RoleTransactionMap_dbo.Roles_RoleId` (`RoleId`),
  KEY `FK_dbo.RoleTransactionMap_dbo.Transactions_TransactionId` (`TransactionId`),
  CONSTRAINT `FK_dbo.RoleTransactionMap_dbo.Roles_RoleId` FOREIGN KEY (`RoleId`) REFERENCES `roles` (`RoleId`) ON DELETE CASCADE,
  CONSTRAINT `FK_dbo.RoleTransactionMap_dbo.Transactions_TransactionId` FOREIGN KEY (`TransactionId`) REFERENCES `transactions` (`TransactionId`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `roletransactions`
--

LOCK TABLES `roletransactions` WRITE;
/*!40000 ALTER TABLE `roletransactions` DISABLE KEYS */;
/*!40000 ALTER TABLE `roletransactions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `schoolcategories`
--

DROP TABLE IF EXISTS `schoolcategories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `schoolcategories` (
  `SchoolCategoryId` varchar(36) NOT NULL,
  `CategoryName` varchar(100) NOT NULL,
  `Description` varchar(250) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`SchoolCategoryId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `schoolcategories`
--

LOCK TABLES `schoolcategories` WRITE;
/*!40000 ALTER TABLE `schoolcategories` DISABLE KEYS */;
INSERT INTO `schoolcategories` VALUES ('fb94dafa-fe90-4f22-9d7e-bfbd59d529fd','Non-Composite','string','','2023-05-08 16:34:48.882','','2023-05-08 16:34:48.882',_binary '');
/*!40000 ALTER TABLE `schoolcategories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `schoolclasses`
--

DROP TABLE IF EXISTS `schoolclasses`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `schoolclasses` (
  `ClassId` varchar(36) NOT NULL,
  `Name` varchar(50) NOT NULL,
  `Description` varchar(350) DEFAULT NULL,
  `DisplayOrder` int NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`ClassId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `schoolclasses`
--

LOCK TABLES `schoolclasses` WRITE;
/*!40000 ALTER TABLE `schoolclasses` DISABLE KEYS */;
/*!40000 ALTER TABLE `schoolclasses` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `schools`
--

DROP TABLE IF EXISTS `schools`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `schools` (
  `SchoolId` varchar(36) NOT NULL,
  `SchoolName` varchar(150) NOT NULL,
  `SchoolCategoryId` varchar(36) NOT NULL,
  `SchoolTypeId` varchar(45) NOT NULL,
  `UDISE` varchar(11) NOT NULL,
  `AcademicYearId` varchar(36) NOT NULL,
  `PhaseId` varchar(36) NOT NULL,
  `StateCode` varchar(15) NOT NULL,
  `DivisionId` varchar(36) NOT NULL,
  `DistrictCode` varchar(15) NOT NULL,
  `BlockId` varchar(36) DEFAULT NULL,
  `ClusterId` varchar(36) DEFAULT NULL,
  `BlockName` varchar(100) NOT NULL,
  `Village` varchar(150) DEFAULT NULL,
  `Panchayat` varchar(150) DEFAULT NULL,
  `Pincode` varchar(6) DEFAULT NULL,
  `IsImplemented` bit(1) NOT NULL,
  `Demography` varchar(250) DEFAULT NULL,
  `SchoolManagementId` varchar(20) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`SchoolId`),
  KEY `FK_Schools_Districts` (`DistrictCode`),
  KEY `FK_Schools_States` (`StateCode`),
  KEY `FK_Schools_AcademicYears` (`AcademicYearId`),
  KEY `FK_Schools_Divisions` (`DivisionId`),
  KEY `FK_Schools_Phases` (`PhaseId`),
  KEY `FK_Schools_SchoolCategories` (`SchoolCategoryId`),
  CONSTRAINT `FK_Schools_AcademicYears` FOREIGN KEY (`AcademicYearId`) REFERENCES `academicyears` (`AcademicYearId`),
  CONSTRAINT `FK_Schools_Districts` FOREIGN KEY (`DistrictCode`) REFERENCES `districts` (`DistrictCode`),
  CONSTRAINT `FK_Schools_Divisions` FOREIGN KEY (`DivisionId`) REFERENCES `divisions` (`DivisionId`),
  CONSTRAINT `FK_Schools_Phases` FOREIGN KEY (`PhaseId`) REFERENCES `phases` (`PhaseId`),
  CONSTRAINT `FK_Schools_SchoolCategories` FOREIGN KEY (`SchoolCategoryId`) REFERENCES `schoolcategories` (`SchoolCategoryId`),
  CONSTRAINT `FK_Schools_States` FOREIGN KEY (`StateCode`) REFERENCES `states` (`StateCode`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `schools`
--

LOCK TABLES `schools` WRITE;
/*!40000 ALTER TABLE `schools` DISABLE KEYS */;
INSERT INTO `schools` VALUES ('043f49b6-3e58-4e10-8a12-9ef8655e44f2','ABC PUBLIC SCHOOL','fb94dafa-fe90-4f22-9d7e-bfbd59d529fd','101','27031404411','606ed468-fba1-46ac-ba70-ead58dc4ab29','d4917323-570a-4018-92a5-0a96806d5045','KA','b52fa10d-0e6f-4fc6-af51-f097f7261485','KDHLI','cfcef538-d03c-4452-afb7-56b6ff082587','3c16a1e3-2eb8-4b55-b16f-3634f31688b8','Testblock',NULL,NULL,NULL,_binary '',NULL,'104','someshAdmin','2023-05-08 16:34:48.882',NULL,'2023-05-08 16:34:48.882',_binary '');
/*!40000 ALTER TABLE `schools` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Temporary view structure for view `schoolsbyvtpsectorglfv`
--

DROP TABLE IF EXISTS `schoolsbyvtpsectorglfv`;
/*!50001 DROP VIEW IF EXISTS `schoolsbyvtpsectorglfv`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `schoolsbyvtpsectorglfv` AS SELECT 
 1 AS `ImplementedSchoolId`,
 1 AS `ApprovedSchoolId`,
 1 AS `AcademicYearId`,
 1 AS `VTPId`,
 1 AS `SectorId`,
 1 AS `VCId`,
 1 AS `VTId`,
 1 AS `VTSchoolSectorId`*/;
SET character_set_client = @saved_cs_client;

--
-- Temporary view structure for view `schoolsbyvtpsectorinfo`
--

DROP TABLE IF EXISTS `schoolsbyvtpsectorinfo`;
/*!50001 DROP VIEW IF EXISTS `schoolsbyvtpsectorinfo`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `schoolsbyvtpsectorinfo` AS SELECT 
 1 AS `ImplementedSchoolId`,
 1 AS `ApprovedSchoolId`,
 1 AS `AcademicYearId`,
 1 AS `VTPId`,
 1 AS `SectorId`,
 1 AS `VCId`,
 1 AS `VTId`,
 1 AS `VTSchoolSectorId`,
 1 AS `VTClassId`,
 1 AS `DivisionId`,
 1 AS `DistrictId`*/;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `schoolveincharges`
--

DROP TABLE IF EXISTS `schoolveincharges`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `schoolveincharges` (
  `VEIId` varchar(36) NOT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `SchoolId` varchar(36) DEFAULT NULL,
  `FirstName` varchar(50) NOT NULL,
  `MiddleName` varchar(50) DEFAULT NULL,
  `LastName` varchar(50) NOT NULL,
  `FullName` varchar(150) NOT NULL,
  `Mobile` varchar(15) NOT NULL,
  `Mobile1` varchar(15) DEFAULT NULL,
  `Email` varchar(100) DEFAULT NULL,
  `Gender` varchar(10) NOT NULL,
  `DateOfJoining` datetime(3) DEFAULT NULL,
  `DateOfResignationFromRoleSchool` datetime(3) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VEIId`),
  KEY `SchoolVEIncharges_Schools_idx` (`SchoolId`),
  CONSTRAINT `SchoolVEIncharges_Schools` FOREIGN KEY (`SchoolId`) REFERENCES `schools` (`SchoolId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `schoolveincharges`
--

LOCK TABLES `schoolveincharges` WRITE;
/*!40000 ALTER TABLE `schoolveincharges` DISABLE KEYS */;
/*!40000 ALTER TABLE `schoolveincharges` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `schoolvtpsectors`
--

DROP TABLE IF EXISTS `schoolvtpsectors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `schoolvtpsectors` (
  `SchoolVTPSectorId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) NOT NULL,
  `SectorId` varchar(36) NOT NULL,
  `VTPId` varchar(36) NOT NULL,
  `SchoolId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `IsAYRollover` bit(1) DEFAULT (0),
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`SchoolVTPSectorId`),
  KEY `FK_SchoolVTPSectors_AcademicYears` (`AcademicYearId`),
  KEY `FK_SchoolVTPSectors_Sectors` (`SectorId`),
  KEY `FK_SchoolVTPSectors_Schools` (`SchoolId`),
  KEY `FK_SchoolVTPSectors_VocationalTrainingProviders` (`VTPId`),
  CONSTRAINT `SchoolVTPSectors_AcademicYears` FOREIGN KEY (`AcademicYearId`) REFERENCES `academicyears` (`AcademicYearId`),
  CONSTRAINT `SchoolVTPSectors_Schools` FOREIGN KEY (`SchoolId`) REFERENCES `schools` (`SchoolId`),
  CONSTRAINT `SchoolVTPSectors_Sectors` FOREIGN KEY (`SectorId`) REFERENCES `sectors` (`SectorId`),
  CONSTRAINT `SchoolVTPSectors_VocationalTrainingProviders` FOREIGN KEY (`VTPId`) REFERENCES `vocationaltrainingproviders` (`VTPId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `schoolvtpsectors`
--

LOCK TABLES `schoolvtpsectors` WRITE;
/*!40000 ALTER TABLE `schoolvtpsectors` DISABLE KEYS */;
INSERT INTO `schoolvtpsectors` VALUES ('99311d9e-8632-4167-aae6-2b789a6b70b9','606ed468-fba1-46ac-ba70-ead58dc4ab29','844ee4d3-1867-453b-873e-26e1654782f2','643142aa-574a-42b2-8f75-dfad884f5fc5','043f49b6-3e58-4e10-8a12-9ef8655e44f2','',_binary '\0','','2023-05-09 12:01:44.173','','2023-05-09 12:01:44.173',_binary '');
/*!40000 ALTER TABLE `schoolvtpsectors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sections`
--

DROP TABLE IF EXISTS `sections`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sections` (
  `SectionId` varchar(36) NOT NULL,
  `Name` varchar(50) NOT NULL,
  `Description` varchar(350) DEFAULT NULL,
  `DisplayOrder` int DEFAULT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`SectionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sections`
--

LOCK TABLES `sections` WRITE;
/*!40000 ALTER TABLE `sections` DISABLE KEYS */;
/*!40000 ALTER TABLE `sections` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sectorjobroles`
--

DROP TABLE IF EXISTS `sectorjobroles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sectorjobroles` (
  `SectorJobRoleId` varchar(36) NOT NULL,
  `SectorId` varchar(36) NOT NULL,
  `JobRoleId` varchar(36) NOT NULL,
  `QPCode` varchar(15) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`SectorJobRoleId`),
  KEY `FK_SectorJobRoles_JobRoles` (`JobRoleId`),
  KEY `FK_SectorJobRoles_Sectors` (`SectorId`),
  CONSTRAINT `FK_SectorJobRoles_JobRoles` FOREIGN KEY (`JobRoleId`) REFERENCES `jobroles` (`JobRoleId`),
  CONSTRAINT `FK_SectorJobRoles_Sectors` FOREIGN KEY (`SectorId`) REFERENCES `sectors` (`SectorId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sectorjobroles`
--

LOCK TABLES `sectorjobroles` WRITE;
/*!40000 ALTER TABLE `sectorjobroles` DISABLE KEYS */;
/*!40000 ALTER TABLE `sectorjobroles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sectors`
--

DROP TABLE IF EXISTS `sectors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sectors` (
  `SectorId` varchar(36) NOT NULL,
  `SectorName` varchar(100) NOT NULL,
  `Description` varchar(250) DEFAULT NULL,
  `DisplayOrder` int NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`SectorId`),
  KEY `FK_CourseModules_Sectors_idx` (`SectorId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sectors`
--

LOCK TABLES `sectors` WRITE;
/*!40000 ALTER TABLE `sectors` DISABLE KEYS */;
INSERT INTO `sectors` VALUES ('844ee4d3-1867-453b-873e-26e1654782f2','Agriculture','Agriculture',1,'','2023-05-09 11:53:14.484','','2023-05-09 11:53:14.484',_binary '');
/*!40000 ALTER TABLE `sectors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `siteheaders`
--

DROP TABLE IF EXISTS `siteheaders`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `siteheaders` (
  `SiteHeaderId` varchar(36) NOT NULL,
  `ShortName` varchar(40) NOT NULL,
  `LongName` varchar(100) DEFAULT NULL,
  `Description` varchar(350) DEFAULT NULL,
  `DisplayOrder` tinyint unsigned NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`SiteHeaderId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `siteheaders`
--

LOCK TABLES `siteheaders` WRITE;
/*!40000 ALTER TABLE `siteheaders` DISABLE KEYS */;
/*!40000 ALTER TABLE `siteheaders` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sitesubheaders`
--

DROP TABLE IF EXISTS `sitesubheaders`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sitesubheaders` (
  `SiteSubHeaderId` varchar(36) NOT NULL,
  `SiteHeaderId` varchar(36) DEFAULT NULL,
  `TransactionId` varchar(36) DEFAULT NULL,
  `IsHeaderMenu` tinyint NOT NULL,
  `DisplayOrder` tinyint unsigned NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`SiteSubHeaderId`),
  KEY `FK_dbo.SiteSubHeaders_dbo.SiteHeaders_SiteHeaderId` (`SiteHeaderId`),
  KEY `FK_dbo.SiteSubHeaders_dbo.Transactions_TransactionId` (`TransactionId`),
  CONSTRAINT `FK_dbo.SiteSubHeaders_dbo.SiteHeaders_SiteHeaderId` FOREIGN KEY (`SiteHeaderId`) REFERENCES `siteheaders` (`SiteHeaderId`) ON DELETE CASCADE,
  CONSTRAINT `FK_dbo.SiteSubHeaders_dbo.Transactions_TransactionId` FOREIGN KEY (`TransactionId`) REFERENCES `transactions` (`TransactionId`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sitesubheaders`
--

LOCK TABLES `sitesubheaders` WRITE;
/*!40000 ALTER TABLE `sitesubheaders` DISABLE KEYS */;
/*!40000 ALTER TABLE `sitesubheaders` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `states`
--

DROP TABLE IF EXISTS `states`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `states` (
  `StateCode` varchar(15) NOT NULL,
  `StateId` varchar(2) NOT NULL,
  `CountryCode` varchar(15) NOT NULL,
  `StateName` varchar(75) NOT NULL,
  `Description` varchar(350) DEFAULT NULL,
  `SequenceNo` int NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`StateCode`),
  KEY `FK_dbo.States_dbo.Countries_CountryCode` (`CountryCode`),
  CONSTRAINT `FK_dbo.States_dbo.Countries_CountryCode` FOREIGN KEY (`CountryCode`) REFERENCES `countries` (`CountryCode`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `states`
--

LOCK TABLES `states` WRITE;
/*!40000 ALTER TABLE `states` DISABLE KEYS */;
INSERT INTO `states` VALUES ('KA','KA','IN','Karnataka',NULL,1,'someshAdmin','2023-05-04 21:40:33.569',NULL,'2023-05-04 21:40:33.569',_binary '');
/*!40000 ALTER TABLE `states` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `studentclassdetails`
--

DROP TABLE IF EXISTS `studentclassdetails`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `studentclassdetails` (
  `StudentId` varchar(36) NOT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `FatherName` varchar(100) NOT NULL,
  `MotherName` varchar(100) NOT NULL,
  `GuardianName` varchar(100) DEFAULT NULL,
  `DateOfBirth` datetime(3) NOT NULL,
  `AadhaarNumber` varchar(12) DEFAULT NULL,
  `StudentRollNumber` varchar(20) NOT NULL,
  `SocialCategory` varchar(150) NOT NULL,
  `Religion` varchar(150) DEFAULT NULL,
  `CWSNStatus` varchar(45) DEFAULT NULL,
  `Mobile` varchar(15) DEFAULT NULL,
  `Mobile1` varchar(15) DEFAULT NULL,
  `WhatsAppNo` varchar(15) DEFAULT NULL,
  `AssessmentConducted` varchar(50) DEFAULT NULL,
  `StreamId` varchar(36) DEFAULT NULL,
  `IsStudentVE9And10` varchar(50) DEFAULT NULL,
  `IsSameStudentTrade` varchar(50) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`StudentId`),
  CONSTRAINT `FK_StudentClassDetails_StudentClasses` FOREIGN KEY (`StudentId`) REFERENCES `studentclasses` (`StudentId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `studentclassdetails`
--

LOCK TABLES `studentclassdetails` WRITE;
/*!40000 ALTER TABLE `studentclassdetails` DISABLE KEYS */;
/*!40000 ALTER TABLE `studentclassdetails` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `studentclasses`
--

DROP TABLE IF EXISTS `studentclasses`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `studentclasses` (
  `StudentId` varchar(36) NOT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `SchoolId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) NOT NULL,
  `ClassId` varchar(36) NOT NULL,
  `SectionId` varchar(36) NOT NULL,
  `DateOfEnrollment` datetime(3) NOT NULL,
  `FirstName` varchar(50) NOT NULL,
  `MiddleName` varchar(50) DEFAULT NULL,
  `LastName` varchar(50) NOT NULL,
  `FullName` varchar(150) DEFAULT NULL,
  `Gender` varchar(10) NOT NULL,
  `Mobile` varchar(15) DEFAULT NULL,
  `DateOfDropout` datetime(3) DEFAULT NULL,
  `DropoutReason` varchar(150) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `DeletedBy` varchar(30) DEFAULT NULL,
  `DeletedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`StudentId`),
  KEY `FK_StudentClasses_Classes_idx` (`ClassId`),
  KEY `FK_StudentClasses_Sections_idx` (`SectionId`),
  KEY `FK_StudentClasses_AcademicYears` (`AcademicYearId`),
  KEY `IX_StudentClasses_SchoolId_StudentId` (`SchoolId`,`StudentId`),
  KEY `IX_StudentClasses_SchoolId_StudentId_Name` (`AcademicYearId`,`SchoolId`,`StudentId`,`FullName`),
  KEY `IX_StudentClasses_AY_School_Class_Sec_Student` (`AcademicYearId`,`SchoolId`,`ClassId`,`SectionId`,`StudentId`),
  CONSTRAINT `FK_StudentClasses_AcademicYears` FOREIGN KEY (`AcademicYearId`) REFERENCES `academicyears` (`AcademicYearId`),
  CONSTRAINT `FK_StudentClasses_Classes` FOREIGN KEY (`ClassId`) REFERENCES `schoolclasses` (`ClassId`),
  CONSTRAINT `FK_StudentClasses_Sections` FOREIGN KEY (`SectionId`) REFERENCES `sections` (`SectionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `studentclasses`
--

LOCK TABLES `studentclasses` WRITE;
/*!40000 ALTER TABLE `studentclasses` DISABLE KEYS */;
/*!40000 ALTER TABLE `studentclasses` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `studentclassmapping`
--

DROP TABLE IF EXISTS `studentclassmapping`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `studentclassmapping` (
  `StudentClassMappingId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) NOT NULL,
  `SchoolId` varchar(36) NOT NULL,
  `ClassId` varchar(36) NOT NULL,
  `SectionId` varchar(36) NOT NULL,
  `VTId` varchar(36) NOT NULL,
  `StudentId` varchar(36) NOT NULL,
  `StudentRollNumber` varchar(30) DEFAULT NULL,
  `IsAYRollover` bit(1) DEFAULT (0),
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`StudentClassMappingId`),
  KEY `IX_StudentClassMapping_SchoolId_StudentId` (`AcademicYearId`,`SchoolId`,`ClassId`,`SectionId`,`StudentId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `studentclassmapping`
--

LOCK TABLES `studentclassmapping` WRITE;
/*!40000 ALTER TABLE `studentclassmapping` DISABLE KEYS */;
/*!40000 ALTER TABLE `studentclassmapping` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `studentsforexitform`
--

DROP TABLE IF EXISTS `studentsforexitform`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `studentsforexitform` (
  `ExitStudentId` varchar(36) NOT NULL,
  `FirstName` varchar(100) DEFAULT NULL,
  `MiddleName` varchar(100) DEFAULT NULL,
  `LastName` varchar(100) DEFAULT NULL,
  `AcademicYear` varchar(45) DEFAULT NULL,
  `StudentFullName` varchar(100) DEFAULT NULL,
  `FatherName` varchar(100) DEFAULT NULL,
  `JobRole` varchar(45) DEFAULT NULL,
  `StudentUniqueId` varchar(45) DEFAULT NULL,
  `NameOfSchool` varchar(100) DEFAULT NULL,
  `UdiseCode` varchar(45) DEFAULT NULL,
  `District` varchar(45) DEFAULT NULL,
  `Class` varchar(45) DEFAULT NULL,
  `Gender` varchar(45) DEFAULT NULL,
  `DOB` datetime NOT NULL,
  `Category` varchar(45) DEFAULT NULL,
  `Sector` varchar(45) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `VTPName` varchar(100) DEFAULT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `VTName` varchar(100) DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `VCName` varchar(100) DEFAULT NULL,
  `CreatedBy` varchar(45) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedBy` varchar(45) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  `VTMobile` varchar(15) DEFAULT NULL,
  `MotherName` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`ExitStudentId`),
  KEY `IX_StudentsForExitForm_StudentFullName` (`StudentFullName`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `studentsforexitform`
--

LOCK TABLES `studentsforexitform` WRITE;
/*!40000 ALTER TABLE `studentsforexitform` DISABLE KEYS */;
/*!40000 ALTER TABLE `studentsforexitform` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `subissues`
--

DROP TABLE IF EXISTS `subissues`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `subissues` (
  `SubIssueId` varchar(36) NOT NULL,
  `MainIssueId` varchar(36) NOT NULL,
  `IssueName` varchar(150) NOT NULL,
  `IssueCategoryId` varchar(15) NOT NULL,
  `IssuePriority` varchar(10) NOT NULL,
  `Description` varchar(350) DEFAULT NULL,
  `DisplayOrder` int NOT NULL,
  `IsApplicableForVT` bit(1) NOT NULL,
  `IsApplicableForVC` bit(1) NOT NULL,
  `IsApplicableForHM` bit(1) NOT NULL,
  `AssignForReviewPMU` bit(1) NOT NULL,
  `AssignForReviewVC` bit(1) NOT NULL,
  `AssignForReviewHM` bit(1) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`SubIssueId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `subissues`
--

LOCK TABLES `subissues` WRITE;
/*!40000 ALTER TABLE `subissues` DISABLE KEYS */;
/*!40000 ALTER TABLE `subissues` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `teandrmlist`
--

DROP TABLE IF EXISTS `teandrmlist`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `teandrmlist` (
  `TEAndRMId` varchar(36) NOT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `ClassId` varchar(36) DEFAULT NULL,
  `TEType` varchar(50) NOT NULL,
  `SrNo` int NOT NULL,
  `ToolEquipmentName` varchar(200) NOT NULL,
  `Specification` varchar(2000) DEFAULT NULL,
  `UnitType` varchar(45) DEFAULT NULL,
  `UnitName` varchar(70) DEFAULT NULL,
  `CreatedBy` varchar(45) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(45) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`TEAndRMId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `teandrmlist`
--

LOCK TABLES `teandrmlist` WRITE;
/*!40000 ALTER TABLE `teandrmlist` DISABLE KEYS */;
/*!40000 ALTER TABLE `teandrmlist` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `temateriallists`
--

DROP TABLE IF EXISTS `temateriallists`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `temateriallists` (
  `TEMaterialListId` varchar(36) NOT NULL,
  `ToolEquipmentId` varchar(36) NOT NULL,
  `RawMaterialId` varchar(36) NOT NULL,
  `RawMaterialName` varchar(350) DEFAULT NULL,
  `RawMaterialStatus` varchar(50) DEFAULT NULL,
  `RMLastReceivedDate` datetime DEFAULT NULL,
  `RawMaterialAction` varchar(50) DEFAULT NULL,
  `QuantityCount` int NOT NULL,
  `CreatedBy` varchar(30) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  PRIMARY KEY (`TEMaterialListId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `temateriallists`
--

LOCK TABLES `temateriallists` WRITE;
/*!40000 ALTER TABLE `temateriallists` DISABLE KEYS */;
/*!40000 ALTER TABLE `temateriallists` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `termsconditions`
--

DROP TABLE IF EXISTS `termsconditions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `termsconditions` (
  `TermsConditionId` varchar(36) NOT NULL,
  `Name` varchar(100) NOT NULL,
  `Description` longtext NOT NULL,
  `ApplicableFrom` datetime(3) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`TermsConditionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `termsconditions`
--

LOCK TABLES `termsconditions` WRITE;
/*!40000 ALTER TABLE `termsconditions` DISABLE KEYS */;
/*!40000 ALTER TABLE `termsconditions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tetoollists`
--

DROP TABLE IF EXISTS `tetoollists`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tetoollists` (
  `TEToolListId` varchar(36) NOT NULL,
  `ToolEquipmentId` varchar(36) NOT NULL,
  `ToolListId` varchar(36) NOT NULL,
  `ToolListName` varchar(350) DEFAULT NULL,
  `ToolListStatus` varchar(50) DEFAULT NULL,
  `TLActionNeeded1` varchar(50) DEFAULT NULL,
  `TLActionNeeded2` varchar(50) DEFAULT NULL,
  `CreatedBy` varchar(30) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  PRIMARY KEY (`TEToolListId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tetoollists`
--

LOCK TABLES `tetoollists` WRITE;
/*!40000 ALTER TABLE `tetoollists` DISABLE KEYS */;
/*!40000 ALTER TABLE `tetoollists` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `toolequipments`
--

DROP TABLE IF EXISTS `toolequipments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `toolequipments` (
  `ToolEquipmentId` varchar(36) NOT NULL,
  `DivisionId` varchar(36) DEFAULT NULL,
  `DistrictCode` varchar(15) DEFAULT NULL,
  `SchoolId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `VTId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) NOT NULL,
  `SectorId` varchar(36) NOT NULL,
  `JobRoleId` varchar(36) NOT NULL,
  `ReceiptDate` datetime DEFAULT NULL,
  `TEReceiveStatus` varchar(50) DEFAULT NULL,
  `TEStatus` varchar(50) DEFAULT NULL,
  `RMStatus` varchar(50) DEFAULT NULL,
  `RMFundStatus` varchar(50) DEFAULT NULL,
  `Details` varchar(350) DEFAULT NULL,
  `OATEStatus` varchar(50) DEFAULT NULL,
  `OFTEStatus` varchar(50) DEFAULT NULL,
  `Reason` varchar(50) DEFAULT NULL,
  `IsSelected` varchar(50) DEFAULT NULL,
  `IsSpecify` varchar(50) DEFAULT NULL,
  `RFNReceiveStatus` varchar(50) DEFAULT NULL,
  `IsCommunicated` varchar(50) DEFAULT NULL,
  `IsSetUpWorkShop` varchar(50) DEFAULT NULL,
  `RoomType` varchar(50) DEFAULT NULL,
  `AccommodateTools` varchar(50) DEFAULT NULL,
  `RoomSize` int DEFAULT NULL,
  `IsDoorLock` varchar(50) DEFAULT NULL,
  `Flooring` varchar(50) DEFAULT NULL,
  `RoomWindows` varchar(50) DEFAULT NULL,
  `TotalWindowCount` int DEFAULT NULL,
  `IsWindowGrills` varchar(50) DEFAULT NULL,
  `IsWindowLocked` varchar(50) DEFAULT NULL,
  `IsRoomActive` varchar(50) DEFAULT NULL,
  `REFInstalled` varchar(50) DEFAULT NULL,
  `WorkingSwitchBoard` varchar(50) DEFAULT NULL,
  `PSSCount` int DEFAULT NULL,
  `WLCount` int DEFAULT NULL,
  `WFCount` int DEFAULT NULL,
  `RawMaterialRequired` varchar(50) DEFAULT NULL,
  `ToolListId` varchar(36) DEFAULT NULL,
  `ToolListStatus` varchar(50) DEFAULT NULL,
  `TLActionNeeded1` varchar(50) DEFAULT NULL,
  `TLActionNeeded2` varchar(50) DEFAULT NULL,
  `RawMaterialId` varchar(36) DEFAULT NULL,
  `RawMaterialStatus` varchar(50) DEFAULT NULL,
  `RMLastReceivedDate` datetime DEFAULT NULL,
  `RawMaterialAction` varchar(50) DEFAULT NULL,
  `QuantityCount` int DEFAULT NULL,
  `TLFilePath` varchar(100) DEFAULT NULL,
  `LabFilePath` varchar(100) DEFAULT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `toolequipments`
--

LOCK TABLES `toolequipments` WRITE;
/*!40000 ALTER TABLE `toolequipments` DISABLE KEYS */;
/*!40000 ALTER TABLE `toolequipments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `toolequipmentsroomdamaged`
--

DROP TABLE IF EXISTS `toolequipmentsroomdamaged`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `toolequipmentsroomdamaged` (
  `ToolEquipmentRDId` varchar(36) NOT NULL,
  `ToolEquipmentId` varchar(36) NOT NULL,
  `RoomDamaged` varchar(50) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`ToolEquipmentRDId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `toolequipmentsroomdamaged`
--

LOCK TABLES `toolequipmentsroomdamaged` WRITE;
/*!40000 ALTER TABLE `toolequipmentsroomdamaged` DISABLE KEYS */;
/*!40000 ALTER TABLE `toolequipmentsroomdamaged` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `transactions`
--

DROP TABLE IF EXISTS `transactions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `transactions` (
  `TransactionId` varchar(36) NOT NULL,
  `Code` varchar(10) NOT NULL,
  `Name` varchar(70) NOT NULL,
  `PageTitle` varchar(200) NOT NULL,
  `PageDescription` varchar(500) DEFAULT NULL,
  `UrlAction` varchar(100) DEFAULT NULL,
  `UrlController` varchar(50) DEFAULT NULL,
  `UrlPara` varchar(300) DEFAULT NULL,
  `RouteUrl` varchar(150) DEFAULT NULL,
  `DisplayOrder` tinyint unsigned NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`TransactionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `transactions`
--

LOCK TABLES `transactions` WRITE;
/*!40000 ALTER TABLE `transactions` DISABLE KEYS */;
/*!40000 ALTER TABLE `transactions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `useracceptances`
--

DROP TABLE IF EXISTS `useracceptances`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `useracceptances` (
  `UserAcceptanceId` varchar(36) NOT NULL,
  `TermsConditionId` varchar(36) DEFAULT NULL,
  `UserMachineId` varchar(150) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`UserAcceptanceId`),
  KEY `FK_LmsAcceptances_TermsConditions_TermsConditionId` (`TermsConditionId`),
  CONSTRAINT `FK_LmsAcceptances_TermsConditions_TermsConditionId` FOREIGN KEY (`TermsConditionId`) REFERENCES `termsconditions` (`TermsConditionId`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `useracceptances`
--

LOCK TABLES `useracceptances` WRITE;
/*!40000 ALTER TABLE `useracceptances` DISABLE KEYS */;
/*!40000 ALTER TABLE `useracceptances` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `userotpdetails`
--

DROP TABLE IF EXISTS `userotpdetails`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `userotpdetails` (
  `OTPId` varchar(36) NOT NULL,
  `Mobile` varchar(10) NOT NULL,
  `OTPToken` varchar(15) NOT NULL,
  `ExpireOn` datetime(3) NOT NULL,
  `IsRedeemed` tinyint NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`OTPId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `userotpdetails`
--

LOCK TABLES `userotpdetails` WRITE;
/*!40000 ALTER TABLE `userotpdetails` DISABLE KEYS */;
/*!40000 ALTER TABLE `userotpdetails` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vcdailyreporting`
--

DROP TABLE IF EXISTS `vcdailyreporting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vcdailyreporting` (
  `VCDailyReportingId` varchar(36) NOT NULL,
  `VCSchoolSectorId` varchar(36) NOT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `ReportDate` datetime(3) DEFAULT NULL,
  `ReportType` varchar(50) DEFAULT NULL,
  `SchoolId` varchar(36) DEFAULT NULL,
  `WorkTypeDetails` varchar(250) DEFAULT NULL,
  `GeoLocation` varchar(50) DEFAULT NULL,
  `Latitude` varchar(20) DEFAULT NULL,
  `Longitude` varchar(20) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VCDailyReportingId`),
  KEY `FK_VCDailyReporting_VCSchoolSectors_idx` (`VCSchoolSectorId`),
  KEY `IX_VCDailyReporting_VCId_ReportType_ReportingDate` (`VCId`,`ReportType`,`ReportDate`),
  CONSTRAINT `FK_VCDailyReporting_VCSchoolSectors` FOREIGN KEY (`VCSchoolSectorId`) REFERENCES `vcschoolsectors` (`VCSchoolSectorId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vcdailyreporting`
--

LOCK TABLES `vcdailyreporting` WRITE;
/*!40000 ALTER TABLE `vcdailyreporting` DISABLE KEYS */;
/*!40000 ALTER TABLE `vcdailyreporting` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vcissuereporting`
--

DROP TABLE IF EXISTS `vcissuereporting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vcissuereporting` (
  `VCIssueReportingId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `IssueMappingId` varchar(36) DEFAULT NULL,
  `IssueReportDate` datetime(3) NOT NULL,
  `MainIssue` varchar(50) DEFAULT NULL,
  `SubIssue` varchar(50) DEFAULT NULL,
  `StudentClass` varchar(100) NOT NULL,
  `Month` varchar(100) NOT NULL,
  `StudentType` varchar(50) DEFAULT NULL,
  `NoOfStudents` int NOT NULL,
  `IssueDetails` varchar(350) DEFAULT NULL,
  `GeoLocation` varchar(50) DEFAULT NULL,
  `Latitude` varchar(20) DEFAULT NULL,
  `Longitude` varchar(20) DEFAULT NULL,
  `ApprovalStatus` varchar(50) DEFAULT NULL,
  `ApprovedDate` datetime DEFAULT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VCIssueReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vcissuereporting`
--

LOCK TABLES `vcissuereporting` WRITE;
/*!40000 ALTER TABLE `vcissuereporting` DISABLE KEYS */;
/*!40000 ALTER TABLE `vcissuereporting` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vcrholidays`
--

DROP TABLE IF EXISTS `vcrholidays`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vcrholidays` (
  `VCRHolidayId` varchar(36) NOT NULL,
  `VCDailyReportingId` varchar(36) NOT NULL,
  `HolidayTypeId` varchar(5) NOT NULL,
  `HolidayDetails` varchar(350) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VCRHolidayId`),
  KEY `FK_VCRHolidays_VCDailyReporting_idx` (`VCDailyReportingId`),
  CONSTRAINT `FK_VCRHolidays_VCDailyReporting` FOREIGN KEY (`VCDailyReportingId`) REFERENCES `vcdailyreporting` (`VCDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vcrholidays`
--

LOCK TABLES `vcrholidays` WRITE;
/*!40000 ALTER TABLE `vcrholidays` DISABLE KEYS */;
/*!40000 ALTER TABLE `vcrholidays` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vcrindustryexposurevisits`
--

DROP TABLE IF EXISTS `vcrindustryexposurevisits`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vcrindustryexposurevisits` (
  `VCRIndustryExposureVisitId` varchar(36) NOT NULL,
  `VCDailyReportingId` varchar(36) NOT NULL,
  `TypeOfIndustryLinkage` varchar(250) DEFAULT NULL,
  `ContactPersonName` varchar(100) NOT NULL,
  `ContactPersonMobile` varchar(15) NOT NULL,
  `ContactPersonEmail` varchar(100) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VCRIndustryExposureVisitId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vcrindustryexposurevisits`
--

LOCK TABLES `vcrindustryexposurevisits` WRITE;
/*!40000 ALTER TABLE `vcrindustryexposurevisits` DISABLE KEYS */;
/*!40000 ALTER TABLE `vcrindustryexposurevisits` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vcrleaves`
--

DROP TABLE IF EXISTS `vcrleaves`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vcrleaves` (
  `VCRLeaveId` varchar(36) NOT NULL,
  `VCDailyReportingId` varchar(36) NOT NULL,
  `LeaveTypeId` varchar(5) NOT NULL,
  `LeaveModeId` varchar(5) DEFAULT NULL,
  `LeaveApprovalStatus` varchar(20) NOT NULL,
  `LeaveApprover` varchar(5) NOT NULL,
  `LeaveReason` varchar(350) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VCRLeaveId`),
  KEY `FK_VCRLeaves_VCDailyReporting_idx` (`VCDailyReportingId`),
  CONSTRAINT `FK_VCRLeaves_VCDailyReporting` FOREIGN KEY (`VCDailyReportingId`) REFERENCES `vcdailyreporting` (`VCDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vcrleaves`
--

LOCK TABLES `vcrleaves` WRITE;
/*!40000 ALTER TABLE `vcrleaves` DISABLE KEYS */;
/*!40000 ALTER TABLE `vcrleaves` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vcrpraticals`
--

DROP TABLE IF EXISTS `vcrpraticals`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vcrpraticals` (
  `VTRPraticalId` varchar(36) NOT NULL,
  `VCDailyReportingId` varchar(36) DEFAULT NULL,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `IsPratical` varchar(36) NOT NULL,
  `SchoolId` varchar(36) NOT NULL,
  `VTId` varchar(36) NOT NULL,
  `SectorId` varchar(36) NOT NULL,
  `JobRoleId` varchar(36) NOT NULL,
  `ClassId` varchar(36) NOT NULL,
  `StudentCount` varchar(50) DEFAULT NULL,
  `VTPresent` varchar(15) DEFAULT NULL,
  `PresentStudentCount` int DEFAULT NULL,
  `AssesorName` varchar(100) DEFAULT NULL,
  `AssesorMobileNo` varchar(15) DEFAULT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) DEFAULT NULL,
  `CreatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  PRIMARY KEY (`VTRPraticalId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vcrpraticals`
--

LOCK TABLES `vcrpraticals` WRITE;
/*!40000 ALTER TABLE `vcrpraticals` DISABLE KEYS */;
/*!40000 ALTER TABLE `vcrpraticals` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vcrschoolvisits`
--

DROP TABLE IF EXISTS `vcrschoolvisits`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vcrschoolvisits` (
  `VCRSchoolVisitId` varchar(36) NOT NULL,
  `VCDailyReportingId` varchar(36) NOT NULL,
  `SchoolId` varchar(36) NOT NULL,
  `WorkDetails` varchar(350) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VCRSchoolVisitId`),
  KEY `FK_VCRSchoolVisits_VCDailyReporting_idx` (`VCDailyReportingId`),
  CONSTRAINT `FK_VCRSchoolVisits_VCDailyReporting` FOREIGN KEY (`VCDailyReportingId`) REFERENCES `vcdailyreporting` (`VCDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vcrschoolvisits`
--

LOCK TABLES `vcrschoolvisits` WRITE;
/*!40000 ALTER TABLE `vcrschoolvisits` DISABLE KEYS */;
/*!40000 ALTER TABLE `vcrschoolvisits` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vcrworkingdaytypes`
--

DROP TABLE IF EXISTS `vcrworkingdaytypes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vcrworkingdaytypes` (
  `VCRWorkingDayTypeId` varchar(36) NOT NULL,
  `VCDailyReportingId` varchar(36) NOT NULL,
  `WorkingTypeId` varchar(5) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VCRWorkingDayTypeId`),
  KEY `FK_VCRWorkingDayTypes_WorkingTypes_idx` (`WorkingTypeId`),
  KEY `FK_VCRHolidays_VCDailyReporting_idx` (`VCDailyReportingId`),
  CONSTRAINT `FK_VCRWorkingDayTypes_VCDailyReporting` FOREIGN KEY (`VCDailyReportingId`) REFERENCES `vcdailyreporting` (`VCDailyReportingId`),
  CONSTRAINT `FK_VCRWorkingDayTypes_WorkingTypes` FOREIGN KEY (`WorkingTypeId`) REFERENCES `datavalues` (`DataValueId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vcrworkingdaytypes`
--

LOCK TABLES `vcrworkingdaytypes` WRITE;
/*!40000 ALTER TABLE `vcrworkingdaytypes` DISABLE KEYS */;
/*!40000 ALTER TABLE `vcrworkingdaytypes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vcschoolsectors`
--

DROP TABLE IF EXISTS `vcschoolsectors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vcschoolsectors` (
  `VCSchoolSectorId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) NOT NULL,
  `VCId` varchar(36) NOT NULL,
  `SchoolVTPSectorId` varchar(36) NOT NULL,
  `DateOfAllocation` datetime(3) NOT NULL,
  `DateOfRemoval` datetime(3) DEFAULT NULL,
  `IsAYRollover` bit(1) DEFAULT (0),
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VCSchoolSectorId`),
  UNIQUE KEY `UC_VCSchoolSectors` (`AcademicYearId`,`VCId`,`SchoolVTPSectorId`,`IsActive`),
  KEY `FK_VCSchoolSectors_AcademicYears` (`AcademicYearId`),
  KEY `FK_VCSchoolSectors_VocationalCoordinators` (`VCId`),
  KEY `FK_VCSchoolSectors_SchoolVTPSectors_idx` (`SchoolVTPSectorId`),
  CONSTRAINT `FK_VCSchoolSectors_AcademicYears` FOREIGN KEY (`AcademicYearId`) REFERENCES `academicyears` (`AcademicYearId`),
  CONSTRAINT `FK_VCSchoolSectors_SchoolVTPSectors` FOREIGN KEY (`SchoolVTPSectorId`) REFERENCES `schoolvtpsectors` (`SchoolVTPSectorId`),
  CONSTRAINT `FK_VCSchoolSectors_VocationalCoordinators` FOREIGN KEY (`VCId`) REFERENCES `vocationalcoordinators` (`VCId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vcschoolsectors`
--

LOCK TABLES `vcschoolsectors` WRITE;
/*!40000 ALTER TABLE `vcschoolsectors` DISABLE KEYS */;
INSERT INTO `vcschoolsectors` VALUES ('38f74a25-b89f-4bb7-9527-0f11ed979d75','606ed468-fba1-46ac-ba70-ead58dc4ab29','4a9c17c7-dd9e-47ee-9ca6-84730396bb9b','99311d9e-8632-4167-aae6-2b789a6b70b9','2023-05-09 08:43:45.493',NULL,_binary '\0','someshAdmin','2023-05-09 14:15:03.401','someshAdmin','2023-05-09 14:15:03.401',_binary '');
/*!40000 ALTER TABLE `vcschoolsectors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vcschoolvisitreporting`
--

DROP TABLE IF EXISTS `vcschoolvisitreporting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vcschoolvisitreporting` (
  `VCSchoolVisitReportingId` varchar(36) NOT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `CompanyName` varchar(200) DEFAULT NULL,
  `Month` varchar(20) DEFAULT NULL,
  `VisitDate` datetime DEFAULT NULL,
  `SchoolId` varchar(36) DEFAULT NULL,
  `DistrictCode` varchar(15) DEFAULT NULL,
  `SchoolEmailId` varchar(150) DEFAULT NULL,
  `PrincipalName` varchar(150) DEFAULT NULL,
  `PrincipalPhoneNo` varchar(15) DEFAULT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `VTPhoneNo` varchar(15) DEFAULT NULL,
  `Labs` varchar(100) DEFAULT NULL,
  `Books` varchar(100) DEFAULT NULL,
  `NoOfGLConducted` int NOT NULL,
  `NoOfIndustrialVisits` int NOT NULL,
  `SVPhotoWithPrincipal` varchar(250) DEFAULT NULL,
  `SVPhotoWithStudents` varchar(250) DEFAULT NULL,
  `Class9Boys` int NOT NULL,
  `Class9Girls` int NOT NULL,
  `Class10Boys` int NOT NULL,
  `Class10Girls` int NOT NULL,
  `Class11Boys` int NOT NULL,
  `Class11Girls` int NOT NULL,
  `Class12Boys` int NOT NULL,
  `Class12Girls` int NOT NULL,
  `TotalBoys` int NOT NULL,
  `TotalGirls` int NOT NULL,
  `GeoLocation` varchar(30) DEFAULT NULL,
  `Latitude` varchar(15) DEFAULT NULL,
  `Longitude` varchar(15) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VCSchoolVisitReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vcschoolvisitreporting`
--

LOCK TABLES `vcschoolvisitreporting` WRITE;
/*!40000 ALTER TABLE `vcschoolvisitreporting` DISABLE KEYS */;
/*!40000 ALTER TABLE `vcschoolvisitreporting` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vcschoolvisits`
--

DROP TABLE IF EXISTS `vcschoolvisits`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vcschoolvisits` (
  `VCSchoolVisitId` varchar(36) NOT NULL,
  `VCSchoolSectorId` varchar(36) DEFAULT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `ReportDate` datetime(3) DEFAULT NULL,
  `GeoLocation` varchar(50) DEFAULT NULL,
  `Month` varchar(50) DEFAULT NULL,
  `VTReportSubmitted` varchar(50) DEFAULT NULL,
  `VTWorkingDays` int NOT NULL,
  `VTLeaveDays` int NOT NULL,
  `VTTeachingDays` int NOT NULL,
  `ClassVisited` varchar(50) NOT NULL,
  `ClassTeachingDays` int NOT NULL,
  `BoysEnrolledCheck` int NOT NULL,
  `GirlsEnrolledCheck` int NOT NULL,
  `AvgStudentAttendance` int NOT NULL,
  `CMAvailability` varchar(50) DEFAULT NULL,
  `CMDate` datetime(3) DEFAULT NULL,
  `TEAvailability` varchar(50) DEFAULT NULL,
  `TEDate` datetime(3) DEFAULT NULL,
  `NoOfGLConducted` int NOT NULL,
  `NoOfFVConducted` int NOT NULL,
  `SchoolHMVisited` varchar(50) DEFAULT NULL,
  `HMRatingVTattendance` int NOT NULL,
  `HMRatingSyllabuscompletion` int NOT NULL,
  `HMRatingVtreporting` int NOT NULL,
  `HMRatingVtqualityteaching` int NOT NULL,
  `HMRatingVtglfvquality` int NOT NULL,
  `HMRatingInitiativestaken` int NOT NULL,
  `Latitude` varchar(20) DEFAULT NULL,
  `Longitude` varchar(20) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VCSchoolVisitId`),
  KEY `FK_VCSchoolVisits_VCSchoolSectors` (`VCSchoolSectorId`),
  CONSTRAINT `FK_VCSchoolVisits_VCSchoolSectors` FOREIGN KEY (`VCSchoolSectorId`) REFERENCES `vcschoolsectors` (`VCSchoolSectorId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vcschoolvisits`
--

LOCK TABLES `vcschoolvisits` WRITE;
/*!40000 ALTER TABLE `vcschoolvisits` DISABLE KEYS */;
/*!40000 ALTER TABLE `vcschoolvisits` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vctrainersmap`
--

DROP TABLE IF EXISTS `vctrainersmap`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vctrainersmap` (
  `VCTrainerId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) NOT NULL,
  `VCId` varchar(36) NOT NULL,
  `VTId` varchar(36) NOT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `DateOfJoining` datetime NOT NULL,
  `DateOfResignation` datetime DEFAULT NULL,
  `NatureOfAppointment` varchar(100) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VCTrainerId`),
  UNIQUE KEY `UC_VCTrainersMap` (`AcademicYearId`,`VCId`,`VTId`,`VTPId`,`IsActive`),
  KEY `FK_VCTrainersMap_AY` (`AcademicYearId`),
  KEY `FK_VCTrainersMap_VC` (`VCId`),
  KEY `FK_VCTrainersMap_VT` (`VTId`),
  KEY `FK_VCTrainersMap_VTP` (`VTPId`),
  KEY `IX_VCTrainersMap_AY_VTP_VC_VT` (`AcademicYearId`,`VTPId`,`VCId`,`VTId`,`IsActive`),
  KEY `IX_VCTrainersMap_AY_VT` (`AcademicYearId`,`VTId`,`IsActive`),
  CONSTRAINT `FK_VCTrainersMap_AY` FOREIGN KEY (`AcademicYearId`) REFERENCES `academicyears` (`AcademicYearId`),
  CONSTRAINT `FK_VCTrainersMap_VC` FOREIGN KEY (`VCId`) REFERENCES `vocationalcoordinators` (`VCId`),
  CONSTRAINT `FK_VCTrainersMap_VT` FOREIGN KEY (`VTId`) REFERENCES `vocationaltrainers` (`VTId`),
  CONSTRAINT `FK_VCTrainersMap_VTP` FOREIGN KEY (`VTPId`) REFERENCES `vocationaltrainingproviders` (`VTPId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vctrainersmap`
--

LOCK TABLES `vctrainersmap` WRITE;
/*!40000 ALTER TABLE `vctrainersmap` DISABLE KEYS */;
INSERT INTO `vctrainersmap` VALUES ('04e751a1-c750-4cad-9d55-adc9e24944f3','606ed468-fba1-46ac-ba70-ead58dc4ab29','4a9c17c7-dd9e-47ee-9ca6-84730396bb9b','88c24a7c-e985-41ea-bc64-f49b4f5029ef','643142aa-574a-42b2-8f75-dfad884f5fc5','2023-05-10 10:16:48','2023-05-10 10:16:48','107','someshvc','2023-05-10 16:06:24','someshvc','2023-05-10 16:06:24',_binary '\0'),('42322a62-3d76-4b05-a1a4-24d36860f29e','606ed468-fba1-46ac-ba70-ead58dc4ab29','4a9c17c7-dd9e-47ee-9ca6-84730396bb9b','e005e0e6-3bd9-4e3e-92e3-4b72c99599df','643142aa-574a-42b2-8f75-dfad884f5fc5','2023-05-10 10:16:48','2023-05-10 10:16:48','107','','2023-05-10 16:55:34','','2023-05-10 16:55:34',_binary '\0'),('ebac1de4-eced-48c0-932a-59e2e5219b8f','606ed468-fba1-46ac-ba70-ead58dc4ab29','4a9c17c7-dd9e-47ee-9ca6-84730396bb9b','0cfb70ed-3196-40c4-95ae-4b0d92a0ccf9','643142aa-574a-42b2-8f75-dfad884f5fc5','2023-05-10 10:16:48','2023-05-10 10:16:48','107','someshvc','2023-05-10 16:10:05','someshvc','2023-05-10 16:10:05',_binary '\0');
/*!40000 ALTER TABLE `vctrainersmap` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vocationalcoordinators`
--

DROP TABLE IF EXISTS `vocationalcoordinators`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vocationalcoordinators` (
  `VCId` varchar(36) NOT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `FirstName` varchar(50) NOT NULL,
  `MiddleName` varchar(50) DEFAULT NULL,
  `LastName` varchar(50) NOT NULL,
  `FullName` varchar(150) NOT NULL,
  `Mobile` varchar(50) NOT NULL,
  `Mobile1` varchar(50) DEFAULT NULL,
  `EmailId` varchar(50) NOT NULL,
  `Gender` varchar(50) NOT NULL,
  `DateOfJoining` datetime(3) NOT NULL,
  `DateOfResignation` datetime(3) NOT NULL,
  `NatureOfAppointment` varchar(50) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VCId`),
  KEY `FK_VocationalCoordinators_VocationalTrainingProviders` (`VTPId`),
  CONSTRAINT `FK_VocationalCoordinators_VocationalTrainingProviders` FOREIGN KEY (`VTPId`) REFERENCES `vocationaltrainingproviders` (`VTPId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vocationalcoordinators`
--

LOCK TABLES `vocationalcoordinators` WRITE;
/*!40000 ALTER TABLE `vocationalcoordinators` DISABLE KEYS */;
INSERT INTO `vocationalcoordinators` VALUES ('4a9c17c7-dd9e-47ee-9ca6-84730396bb9b','643142aa-574a-42b2-8f75-dfad884f5fc5','Somesh',NULL,'Reddy','Somesh Reddy','9603071210',NULL,'someshvc@gmail.com','Male','2022-05-09 12:01:44.173','2023-05-09 12:01:44.173','Through VTP','someshAdmin','2023-05-09 12:01:44.173',NULL,'2023-05-09 12:01:44.173',_binary '');
/*!40000 ALTER TABLE `vocationalcoordinators` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vocationalcoordinatorshistory`
--

DROP TABLE IF EXISTS `vocationalcoordinatorshistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vocationalcoordinatorshistory` (
  `VCId` varchar(36) NOT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `FirstName` varchar(50) NOT NULL,
  `MiddleName` varchar(50) DEFAULT NULL,
  `LastName` varchar(50) NOT NULL,
  `FullName` varchar(150) NOT NULL,
  `Mobile` varchar(50) NOT NULL,
  `Mobile1` varchar(50) DEFAULT NULL,
  `EmailId` varchar(50) NOT NULL,
  `Gender` varchar(50) NOT NULL,
  `DateOfJoining` datetime(3) NOT NULL,
  `DateOfResignation` datetime(3) DEFAULT NULL,
  `NatureOfAppointment` varchar(50) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vocationalcoordinatorshistory`
--

LOCK TABLES `vocationalcoordinatorshistory` WRITE;
/*!40000 ALTER TABLE `vocationalcoordinatorshistory` DISABLE KEYS */;
/*!40000 ALTER TABLE `vocationalcoordinatorshistory` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vocationaltrainers`
--

DROP TABLE IF EXISTS `vocationaltrainers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vocationaltrainers` (
  `VTId` varchar(36) NOT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `FirstName` varchar(50) NOT NULL,
  `MiddleName` varchar(50) DEFAULT NULL,
  `LastName` varchar(50) NOT NULL,
  `FullName` varchar(150) NOT NULL,
  `Mobile` varchar(15) NOT NULL,
  `Mobile1` varchar(15) DEFAULT NULL,
  `Email` varchar(100) NOT NULL,
  `Gender` varchar(10) NOT NULL,
  `DateOfBirth` datetime(3) NOT NULL,
  `SocialCategory` varchar(100) NOT NULL,
  `NatureOfAppointment` varchar(100) DEFAULT NULL,
  `AcademicQualification` varchar(150) NOT NULL,
  `ProfessionalQualification` varchar(150) NOT NULL,
  `ProfessionalQualificationDetails` varchar(350) DEFAULT NULL,
  `IndustryExperienceMonths` int NOT NULL,
  `TrainingExperienceMonths` int NOT NULL,
  `AadhaarNumber` varchar(12) NOT NULL,
  `DateOfJoining` datetime(3) DEFAULT NULL,
  `DateOfResignation` datetime(3) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTId`),
  KEY `FK_VocationalTrainers_VocationalTrainingProviders_idx` (`VTPId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vocationaltrainers`
--

LOCK TABLES `vocationaltrainers` WRITE;
/*!40000 ALTER TABLE `vocationaltrainers` DISABLE KEYS */;
INSERT INTO `vocationaltrainers` VALUES ('0cfb70ed-3196-40c4-95ae-4b0d92a0ccf9',NULL,NULL,'Somesh','','Reddy','Somesh Reddy','9603071210','','someshvt@gmail.com','Male','1996-07-07 10:16:47.964','105',NULL,'606ed468-fba1-46ac-ba70-ead58dc4ab29','106','',3,6,'463534725265',NULL,NULL,'someshvc','2023-05-10 16:10:04.858','someshvc','2023-05-10 16:10:04.858',_binary '\0'),('88c24a7c-e985-41ea-bc64-f49b4f5029ef',NULL,NULL,'Somesh','','Reddy','Somesh Reddy','9603071210','','someshvt@gmail.com','Male','1996-07-07 10:16:47.964','105',NULL,'606ed468-fba1-46ac-ba70-ead58dc4ab29','106','',3,6,'463534725265',NULL,NULL,'someshvc','2023-05-10 16:06:24.175','someshvc','2023-05-10 16:06:24.175',_binary '\0'),('e005e0e6-3bd9-4e3e-92e3-4b72c99599df',NULL,NULL,'Someshwar','','Reddy','Someshwar Reddy','9603071210','','someshwarvt@gmail.com','Male','1996-07-07 10:16:47.964','105',NULL,'606ed468-fba1-46ac-ba70-ead58dc4ab29','106','',3,6,'463534725265',NULL,NULL,'','2023-05-10 16:55:33.955','','2023-05-10 16:55:33.955',_binary '\0');
/*!40000 ALTER TABLE `vocationaltrainers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vocationaltrainershistory`
--

DROP TABLE IF EXISTS `vocationaltrainershistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vocationaltrainershistory` (
  `VTId` varchar(36) NOT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `VTPId` varchar(36) NOT NULL,
  `FirstName` varchar(50) NOT NULL,
  `MiddleName` varchar(50) DEFAULT NULL,
  `LastName` varchar(50) NOT NULL,
  `FullName` varchar(150) NOT NULL,
  `Mobile` varchar(15) NOT NULL,
  `Mobile1` varchar(15) DEFAULT NULL,
  `Email` varchar(100) NOT NULL,
  `Gender` varchar(10) NOT NULL,
  `DateOfBirth` datetime(3) NOT NULL,
  `SocialCategory` varchar(100) NOT NULL,
  `NatureOfAppointment` varchar(100) NOT NULL,
  `AcademicQualification` varchar(150) NOT NULL,
  `ProfessionalQualification` varchar(150) NOT NULL,
  `ProfessionalQualificationDetails` varchar(350) DEFAULT NULL,
  `IndustryExperienceMonths` int NOT NULL,
  `TrainingExperienceMonths` int NOT NULL,
  `AadhaarNumber` varchar(12) NOT NULL,
  `DateOfJoining` datetime(3) NOT NULL,
  `DateOfResignation` datetime(3) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vocationaltrainershistory`
--

LOCK TABLES `vocationaltrainershistory` WRITE;
/*!40000 ALTER TABLE `vocationaltrainershistory` DISABLE KEYS */;
/*!40000 ALTER TABLE `vocationaltrainershistory` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vocationaltrainingproviders`
--

DROP TABLE IF EXISTS `vocationaltrainingproviders`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vocationaltrainingproviders` (
  `VTPId` varchar(36) NOT NULL,
  `VTPShortName` varchar(50) NOT NULL,
  `VTPName` varchar(150) NOT NULL,
  `ApprovalYear` varchar(15) DEFAULT NULL,
  `CertificationNo` varchar(30) DEFAULT NULL,
  `CertificationAgency` varchar(150) DEFAULT NULL,
  `VTPMobileNo` varchar(15) DEFAULT NULL,
  `VTPEmailId` varchar(100) DEFAULT NULL,
  `VTPAddress` varchar(350) DEFAULT NULL,
  `PrimaryContactPerson` varchar(100) DEFAULT NULL,
  `PrimaryMobileNumber` varchar(15) DEFAULT NULL,
  `PrimaryContactEmail` varchar(100) DEFAULT NULL,
  `VTPStateCoordinator` varchar(120) DEFAULT NULL,
  `VTPStateCoordinatorMobile` varchar(15) DEFAULT NULL,
  `VTPStateCoordinatorEmail` varchar(100) DEFAULT NULL,
  `ContractApprovalDate` datetime DEFAULT NULL,
  `ContractEndDate` datetime DEFAULT NULL,
  `MOUDocUpload` varchar(250) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTPId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vocationaltrainingproviders`
--

LOCK TABLES `vocationaltrainingproviders` WRITE;
/*!40000 ALTER TABLE `vocationaltrainingproviders` DISABLE KEYS */;
INSERT INTO `vocationaltrainingproviders` VALUES ('643142aa-574a-42b2-8f75-dfad884f5fc5','ACME','Acme India Mirosys Pvt.Ltd.','2022-2023','NSDC/2021-22/7014','National Skill Development Corporation (NSDC)','9603071210','allindiaacme@gmail.com','1st & 2nd floor Zunzarrao building,Zunzarrao market, behind anant   halwai, Kalyan(W), Thane-421301, Maharashtra.','Abhishek Dubey','9664203875','schoolprojects.acme@gmail.com','Abhishek Dubey','9664203875','schoolprojects.acme@gmail.com',NULL,NULL,NULL,'someshAdmin','2023-05-08 16:44:48.868',NULL,'2023-05-08 16:44:48.868',_binary '');
/*!40000 ALTER TABLE `vocationaltrainingproviders` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtclasses`
--

DROP TABLE IF EXISTS `vtclasses`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtclasses` (
  `VTClassId` varchar(36) NOT NULL,
  `VTId` varchar(36) NOT NULL,
  `SchoolId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) NOT NULL,
  `ClassId` varchar(36) NOT NULL,
  `SectionId` varchar(36) DEFAULT NULL,
  `IsAYRollover` bit(1) DEFAULT (0),
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTClassId`),
  KEY `FK_VTClasses_AcademicYears` (`AcademicYearId`),
  KEY `FK_VTClasses_VocationalTrainers` (`VTId`),
  KEY `FK_VTClasses_Classes` (`ClassId`),
  KEY `FK_VTClasses_Schools` (`SchoolId`),
  KEY `UC_VTClasses_AY_SCL_VT_CL` (`AcademicYearId`,`SchoolId`,`VTId`,`ClassId`,`IsActive`),
  KEY `IX_VTClasses_AY_School_VT_Class` (`AcademicYearId`,`SchoolId`,`ClassId`,`VTId`),
  CONSTRAINT `FK_VTClasses_AcademicYears` FOREIGN KEY (`AcademicYearId`) REFERENCES `academicyears` (`AcademicYearId`),
  CONSTRAINT `FK_VTClasses_Classes` FOREIGN KEY (`ClassId`) REFERENCES `schoolclasses` (`ClassId`),
  CONSTRAINT `FK_VTClasses_Schools` FOREIGN KEY (`SchoolId`) REFERENCES `schools` (`SchoolId`),
  CONSTRAINT `FK_VTClasses_VocationalTrainers` FOREIGN KEY (`VTId`) REFERENCES `vocationaltrainers` (`VTId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtclasses`
--

LOCK TABLES `vtclasses` WRITE;
/*!40000 ALTER TABLE `vtclasses` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtclasses` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtclasssections`
--

DROP TABLE IF EXISTS `vtclasssections`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtclasssections` (
  `VTClassSectionId` varchar(36) NOT NULL,
  `VTClassId` varchar(36) NOT NULL,
  `SectionId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTClassSectionId`),
  KEY `FK_VTClassSections_Sections_idx` (`SectionId`),
  CONSTRAINT `FK_VTClassSections_Sections` FOREIGN KEY (`SectionId`) REFERENCES `sections` (`SectionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtclasssections`
--

LOCK TABLES `vtclasssections` WRITE;
/*!40000 ALTER TABLE `vtclasssections` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtclasssections` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtclassstudents`
--

DROP TABLE IF EXISTS `vtclassstudents`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtclassstudents` (
  `VTClassStudentId` varchar(36) NOT NULL,
  `VTId` varchar(36) NOT NULL,
  `StudentId` varchar(36) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTClassStudentId`),
  KEY `FK_VTClassStudents_StudentClasses_idx` (`StudentId`),
  KEY `FK_VTClassStudents_VocationalTrainers_idx` (`VTId`),
  CONSTRAINT `FK_VTClassStudents_StudentClasses` FOREIGN KEY (`StudentId`) REFERENCES `studentclasses` (`StudentId`),
  CONSTRAINT `FK_VTClassStudents_VocationalTrainers` FOREIGN KEY (`VTId`) REFERENCES `vocationaltrainers` (`VTId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtclassstudents`
--

LOCK TABLES `vtclassstudents` WRITE;
/*!40000 ALTER TABLE `vtclassstudents` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtclassstudents` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtdailyreporting`
--

DROP TABLE IF EXISTS `vtdailyreporting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtdailyreporting` (
  `VTDailyReportingId` varchar(36) NOT NULL,
  `VTSchoolSectorId` varchar(36) NOT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `ReportingDate` datetime(3) NOT NULL,
  `ReportType` varchar(50) NOT NULL,
  `WorkingDayType` varchar(5) DEFAULT NULL,
  `SchoolEventCelebration` varchar(350) DEFAULT NULL,
  `WorkAssignedByHeadMaster` varchar(350) DEFAULT NULL,
  `SchoolExamDuty` varchar(350) DEFAULT NULL,
  `OtherWork` varchar(350) DEFAULT NULL,
  `ObservationDetails` varchar(350) DEFAULT NULL,
  `OBStudentCount` int NOT NULL,
  `GeoLocation` varchar(50) DEFAULT NULL,
  `Latitude` varchar(20) DEFAULT NULL,
  `Longitude` varchar(20) DEFAULT NULL,
  `ApprovalStatus` varchar(50) DEFAULT NULL,
  `ApprovedDate` datetime DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTDailyReportingId`),
  KEY `FK_VTDailyReporting_VTSchoolSectors` (`VTSchoolSectorId`),
  KEY `IX_VTDailyReporting_VTId_ReportType_ReportingDate` (`VTId`,`ReportType`,`ReportingDate`),
  KEY `IX_VTDailyReporting_VTSchoolSectorId_ReportType_ReportingDate` (`VTSchoolSectorId`,`ReportType`,`ReportingDate`),
  CONSTRAINT `FK_VTDailyReporting_VTSchoolSectors` FOREIGN KEY (`VTSchoolSectorId`) REFERENCES `vtschoolsectors` (`VTSchoolSectorId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtdailyreporting`
--

LOCK TABLES `vtdailyreporting` WRITE;
/*!40000 ALTER TABLE `vtdailyreporting` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtdailyreporting` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtfieldindustryvisitconducted`
--

DROP TABLE IF EXISTS `vtfieldindustryvisitconducted`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtfieldindustryvisitconducted` (
  `VTFieldIndustryVisitConductedId` varchar(36) NOT NULL,
  `VTSchoolSectorId` varchar(36) NOT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `ReportingDate` datetime(3) NOT NULL,
  `ClassTaughtId` varchar(36) NOT NULL,
  `SectionTaughtId` varchar(36) DEFAULT NULL,
  `FieldVisitTheme` varchar(150) DEFAULT NULL,
  `FieldVisitActivities` varchar(200) DEFAULT NULL,
  `FVOrganisation` varchar(150) DEFAULT NULL,
  `FVOrganisationAddress` varchar(350) DEFAULT NULL,
  `FVDistance` varchar(100) DEFAULT NULL,
  `FVPicture` varchar(250) DEFAULT NULL,
  `FVContactPersonName` varchar(150) DEFAULT NULL,
  `FVContactPersonMobile` varchar(15) DEFAULT NULL,
  `FVContactPersonEmail` varchar(100) DEFAULT NULL,
  `FVContactPersonDesignation` varchar(150) DEFAULT NULL,
  `FVOrganisationInterestStatus` varchar(10) DEFAULT NULL,
  `FVOrignisationOJTStatus` varchar(10) DEFAULT NULL,
  `FeedbackFromOrgnisation` varchar(350) DEFAULT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `GeoLocation` varchar(50) DEFAULT NULL,
  `Latitude` varchar(20) DEFAULT NULL,
  `Longitude` varchar(20) DEFAULT NULL,
  `ApprovalStatus` varchar(50) DEFAULT NULL,
  `ApprovedDate` datetime DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTFieldIndustryVisitConductedId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtfieldindustryvisitconducted`
--

LOCK TABLES `vtfieldindustryvisitconducted` WRITE;
/*!40000 ALTER TABLE `vtfieldindustryvisitconducted` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtfieldindustryvisitconducted` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtfsections`
--

DROP TABLE IF EXISTS `vtfsections`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtfsections` (
  `VTFSectionId` varchar(36) NOT NULL,
  `VTFieldIndustryVisitConductedId` varchar(36) NOT NULL,
  `SectionId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTFSectionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtfsections`
--

LOCK TABLES `vtfsections` WRITE;
/*!40000 ALTER TABLE `vtfsections` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtfsections` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtfstudentattendances`
--

DROP TABLE IF EXISTS `vtfstudentattendances`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtfstudentattendances` (
  `VTFStudentAttendanceId` varchar(36) NOT NULL,
  `VTFieldIndustryVisitConductedId` varchar(36) NOT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `ClassId` varchar(36) DEFAULT NULL,
  `StudentId` varchar(36) NOT NULL,
  `IsPresent` bit(1) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTFStudentAttendanceId`),
  KEY `FK_VTFStudentAttendances_VTFieldIndustryVisitConducted_idx` (`VTFieldIndustryVisitConductedId`),
  CONSTRAINT `FK_VTFStudentAttendances_VTFieldIndustryVisitConducted` FOREIGN KEY (`VTFieldIndustryVisitConductedId`) REFERENCES `vtfieldindustryvisitconducted` (`VTFieldIndustryVisitConductedId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtfstudentattendances`
--

LOCK TABLES `vtfstudentattendances` WRITE;
/*!40000 ALTER TABLE `vtfstudentattendances` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtfstudentattendances` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtfunitsessionstaught`
--

DROP TABLE IF EXISTS `vtfunitsessionstaught`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtfunitsessionstaught` (
  `VTFUnitSessionsTaughtId` varchar(36) NOT NULL,
  `VTFieldIndustryVisitConductedId` varchar(36) NOT NULL,
  `ModuleId` varchar(36) NOT NULL,
  `UnitId` varchar(36) NOT NULL,
  `SessionId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTFUnitSessionsTaughtId`),
  KEY `FK_VTFUnitSessionsTaught_VTFieldIndustryVisitConducted_idx` (`VTFieldIndustryVisitConductedId`),
  CONSTRAINT `FK_VTFUnitSessionsTaught_VTFieldIndustryVisitConducted` FOREIGN KEY (`VTFieldIndustryVisitConductedId`) REFERENCES `vtfieldindustryvisitconducted` (`VTFieldIndustryVisitConductedId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtfunitsessionstaught`
--

LOCK TABLES `vtfunitsessionstaught` WRITE;
/*!40000 ALTER TABLE `vtfunitsessionstaught` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtfunitsessionstaught` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtgmethodologies`
--

DROP TABLE IF EXISTS `vtgmethodologies`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtgmethodologies` (
  `VTGMethodologyId` varchar(36) NOT NULL,
  `VTGuestLectureId` varchar(36) NOT NULL,
  `MethodologyId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTGMethodologyId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtgmethodologies`
--

LOCK TABLES `vtgmethodologies` WRITE;
/*!40000 ALTER TABLE `vtgmethodologies` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtgmethodologies` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtgsections`
--

DROP TABLE IF EXISTS `vtgsections`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtgsections` (
  `VTGSectionId` varchar(36) NOT NULL,
  `VTGuestLectureId` varchar(36) NOT NULL,
  `SectionId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTGSectionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtgsections`
--

LOCK TABLES `vtgsections` WRITE;
/*!40000 ALTER TABLE `vtgsections` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtgsections` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtgstudentattendances`
--

DROP TABLE IF EXISTS `vtgstudentattendances`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtgstudentattendances` (
  `VTGStudentAttendanceId` varchar(36) NOT NULL,
  `VTGuestLectureId` varchar(36) NOT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `ClassId` varchar(36) DEFAULT NULL,
  `StudentId` varchar(36) NOT NULL,
  `IsPresent` bit(1) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTGStudentAttendanceId`),
  KEY `FK_VTGStudentAttendances_VTGuestLectureConducted_idx` (`VTGuestLectureId`),
  CONSTRAINT `FK_VTGStudentAttendances_VTGuestLectureConducted` FOREIGN KEY (`VTGuestLectureId`) REFERENCES `vtguestlectureconducted` (`VTGuestLectureId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtgstudentattendances`
--

LOCK TABLES `vtgstudentattendances` WRITE;
/*!40000 ALTER TABLE `vtgstudentattendances` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtgstudentattendances` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtguestlectureconducted`
--

DROP TABLE IF EXISTS `vtguestlectureconducted`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtguestlectureconducted` (
  `VTGuestLectureId` varchar(36) NOT NULL,
  `VTSchoolSectorId` varchar(36) NOT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `ClassTaughtId` varchar(36) NOT NULL,
  `SectionTaughtId` varchar(36) DEFAULT NULL,
  `ReportingDate` datetime(3) NOT NULL,
  `GLType` varchar(36) NOT NULL,
  `GLTopic` varchar(150) NOT NULL,
  `ClassTime` int NOT NULL,
  `GLMethodologyDetails` varchar(350) DEFAULT NULL,
  `GLPhotoInClass` varchar(350) DEFAULT NULL,
  `GLConductedBy` varchar(100) DEFAULT NULL,
  `GLPersonDetails` varchar(350) DEFAULT NULL,
  `GLName` varchar(150) DEFAULT NULL,
  `GLMobile` varchar(15) DEFAULT NULL,
  `GLEmail` varchar(100) DEFAULT NULL,
  `GLQualification` varchar(100) DEFAULT NULL,
  `GLWorkExperience` varchar(50) DEFAULT NULL,
  `GLAddress` varchar(350) DEFAULT NULL,
  `GLWorkStatus` varchar(36) DEFAULT NULL,
  `GLCompany` varchar(200) DEFAULT NULL,
  `GLDesignation` varchar(100) DEFAULT NULL,
  `GLPhoto` varchar(350) DEFAULT NULL,
  `GeoLocation` varchar(50) DEFAULT NULL,
  `Latitude` varchar(20) DEFAULT NULL,
  `Longitude` varchar(20) DEFAULT NULL,
  `ApprovalStatus` varchar(50) DEFAULT NULL,
  `ApprovedDate` datetime DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTGuestLectureId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtguestlectureconducted`
--

LOCK TABLES `vtguestlectureconducted` WRITE;
/*!40000 ALTER TABLE `vtguestlectureconducted` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtguestlectureconducted` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtgunitsessionstaught`
--

DROP TABLE IF EXISTS `vtgunitsessionstaught`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtgunitsessionstaught` (
  `VTGUnitSessionsTaughtId` varchar(36) NOT NULL,
  `VTGuestLectureId` varchar(36) NOT NULL,
  `ModuleId` varchar(36) NOT NULL,
  `UnitId` varchar(36) NOT NULL,
  `SessionId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTGUnitSessionsTaughtId`),
  KEY `FK_VTGUnitSessionsTaught_VTGuestLectureConducted_idx` (`VTGuestLectureId`),
  CONSTRAINT `FK_VTGUnitSessionsTaught_VTGuestLectureConducted` FOREIGN KEY (`VTGuestLectureId`) REFERENCES `vtguestlectureconducted` (`VTGuestLectureId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtgunitsessionstaught`
--

LOCK TABLES `vtgunitsessionstaught` WRITE;
/*!40000 ALTER TABLE `vtgunitsessionstaught` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtgunitsessionstaught` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtissuereporting`
--

DROP TABLE IF EXISTS `vtissuereporting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtissuereporting` (
  `VTIssueReportingId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) DEFAULT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `IssueMappingId` varchar(36) DEFAULT NULL,
  `IssueReportDate` datetime(3) NOT NULL,
  `MainIssue` varchar(50) DEFAULT NULL,
  `SubIssue` varchar(50) DEFAULT NULL,
  `StudentClass` varchar(100) NOT NULL,
  `Month` varchar(100) NOT NULL,
  `StudentType` varchar(50) DEFAULT NULL,
  `NoOfStudents` int NOT NULL,
  `IssueDetails` varchar(350) DEFAULT NULL,
  `GeoLocation` varchar(50) DEFAULT NULL,
  `Latitude` varchar(20) DEFAULT NULL,
  `Longitude` varchar(20) DEFAULT NULL,
  `ApprovalStatus` varchar(50) DEFAULT NULL,
  `ApprovedDate` datetime DEFAULT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTIssueReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtissuereporting`
--

LOCK TABLES `vtissuereporting` WRITE;
/*!40000 ALTER TABLE `vtissuereporting` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtissuereporting` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtmonthlyteachingplans`
--

DROP TABLE IF EXISTS `vtmonthlyteachingplans`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtmonthlyteachingplans` (
  `VTMonthlyTeachingPlanId` varchar(36) NOT NULL,
  `VTClassId` varchar(36) DEFAULT NULL,
  `Month` varchar(20) DEFAULT NULL,
  `WeekStartDate` datetime(3) DEFAULT NULL,
  `WeekendDate` datetime(3) DEFAULT NULL,
  `ModulesPlanned` varchar(100) DEFAULT NULL,
  `IVPlannedDate` datetime(3) DEFAULT NULL,
  `IVVCAttend` varchar(50) DEFAULT NULL,
  `FVPlannedDate` datetime(3) DEFAULT NULL,
  `FVPurpose` varchar(150) DEFAULT NULL,
  `FVLocation` varchar(100) DEFAULT NULL,
  `GLPlannedDate` datetime(3) DEFAULT NULL,
  `OtherDetails` varchar(50) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTMonthlyTeachingPlanId`),
  KEY `FK_VTMonthlyTeachingPlans_VTClasses` (`VTClassId`),
  CONSTRAINT `FK_VTMonthlyTeachingPlans_VTClasses` FOREIGN KEY (`VTClassId`) REFERENCES `vtclasses` (`VTClassId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtmonthlyteachingplans`
--

LOCK TABLES `vtmonthlyteachingplans` WRITE;
/*!40000 ALTER TABLE `vtmonthlyteachingplans` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtmonthlyteachingplans` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtpacademicyearsmap`
--

DROP TABLE IF EXISTS `vtpacademicyearsmap`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtpacademicyearsmap` (
  `VTPAcademicYearId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) NOT NULL,
  `VTPId` varchar(36) NOT NULL,
  `DateOfJoining` datetime DEFAULT NULL,
  `DateOfResignation` datetime DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  PRIMARY KEY (`VTPAcademicYearId`),
  UNIQUE KEY `UC_VTPAcademicYearsMap` (`AcademicYearId`,`VTPId`,`IsActive`),
  KEY `FK_VTPAcademicYearsMap_AY` (`AcademicYearId`),
  KEY `FK_VTPAcademicYearsMap_VTP` (`VTPId`),
  KEY `IX_AY_VTP` (`AcademicYearId`,`VTPId`,`IsActive`),
  CONSTRAINT `FK_VTPAcademicYearsMap_AY` FOREIGN KEY (`AcademicYearId`) REFERENCES `academicyears` (`AcademicYearId`),
  CONSTRAINT `FK_VTPAcademicYearsMap_VTP` FOREIGN KEY (`VTPId`) REFERENCES `vocationaltrainingproviders` (`VTPId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtpacademicyearsmap`
--

LOCK TABLES `vtpacademicyearsmap` WRITE;
/*!40000 ALTER TABLE `vtpacademicyearsmap` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtpacademicyearsmap` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtpcoordinatorsmap`
--

DROP TABLE IF EXISTS `vtpcoordinatorsmap`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtpcoordinatorsmap` (
  `VTPCoordinatorId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) NOT NULL,
  `VTPId` varchar(36) NOT NULL,
  `VCId` varchar(36) NOT NULL,
  `DateOfJoining` datetime DEFAULT NULL,
  `DateOfResignation` datetime DEFAULT NULL,
  `NatureOfAppointment` varchar(50) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  PRIMARY KEY (`VTPCoordinatorId`),
  KEY `FK_VTPCoordinatorsMap_AY` (`AcademicYearId`),
  KEY `FK_VTPCoordinatorsMap_VTP` (`VTPId`),
  KEY `FK_VTPCoordinatorsMap_VC` (`VCId`),
  CONSTRAINT `FK_VTPCoordinatorsMap_AY` FOREIGN KEY (`AcademicYearId`) REFERENCES `academicyears` (`AcademicYearId`),
  CONSTRAINT `FK_VTPCoordinatorsMap_VC` FOREIGN KEY (`VCId`) REFERENCES `vocationalcoordinators` (`VCId`),
  CONSTRAINT `FK_VTPCoordinatorsMap_VTP` FOREIGN KEY (`VTPId`) REFERENCES `vocationaltrainingproviders` (`VTPId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtpcoordinatorsmap`
--

LOCK TABLES `vtpcoordinatorsmap` WRITE;
/*!40000 ALTER TABLE `vtpcoordinatorsmap` DISABLE KEYS */;
INSERT INTO `vtpcoordinatorsmap` VALUES ('a76625e7-b2a0-48b4-bdad-418c6bdc9393','606ed468-fba1-46ac-ba70-ead58dc4ab29','643142aa-574a-42b2-8f75-dfad884f5fc5','4a9c17c7-dd9e-47ee-9ca6-84730396bb9b','2022-05-09 12:01:44','2023-05-09 12:01:44','Through VTP','kranthiND','2023-05-09 12:01:44',NULL,'2023-05-09 12:01:44',_binary '');
/*!40000 ALTER TABLE `vtpcoordinatorsmap` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtpmonthlybillsubmissionstatus`
--

DROP TABLE IF EXISTS `vtpmonthlybillsubmissionstatus`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtpmonthlybillsubmissionstatus` (
  `VTPMonthlyBillSubmissionStatusId` varchar(36) NOT NULL,
  `VCId` varchar(36) DEFAULT NULL,
  `Month` varchar(50) NOT NULL,
  `DateSubmission` datetime(3) DEFAULT NULL,
  `Incorrect` varchar(50) DEFAULT NULL,
  `IncorrectDetails` varchar(50) DEFAULT NULL,
  `Final` varchar(50) NOT NULL,
  `ApprovedPMU` varchar(50) DEFAULT NULL,
  `Amount` int NOT NULL,
  `DiaryentryDone` varchar(50) DEFAULT NULL,
  `DiaryentryNumber` varchar(50) DEFAULT NULL,
  `Details` varchar(50) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTPMonthlyBillSubmissionStatusId`),
  KEY `FK_VTPMonthlyBillSubmissionStatus_VocationalCoordinators` (`VCId`),
  CONSTRAINT `FK_VTPMonthlyBillSubmissionStatus_VocationalCoordinators` FOREIGN KEY (`VCId`) REFERENCES `vocationalcoordinators` (`VCId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtpmonthlybillsubmissionstatus`
--

LOCK TABLES `vtpmonthlybillsubmissionstatus` WRITE;
/*!40000 ALTER TABLE `vtpmonthlybillsubmissionstatus` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtpmonthlybillsubmissionstatus` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtpracticalassessments`
--

DROP TABLE IF EXISTS `vtpracticalassessments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtpracticalassessments` (
  `VTPracticalAssessmentId` varchar(36) NOT NULL,
  `VTClassId` varchar(36) DEFAULT NULL,
  `AssessmentDate` datetime(3) NOT NULL,
  `BoysPresent` int DEFAULT NULL,
  `GirlsPresent` int DEFAULT NULL,
  `AssessorName` varchar(100) NOT NULL,
  `AssessorMobile` varchar(15) DEFAULT NULL,
  `AssessorEmail` varchar(100) DEFAULT NULL,
  `AssessorQualification` varchar(150) DEFAULT NULL,
  `AssessorTimeReached` datetime(3) DEFAULT NULL,
  `AssessorIdCheck` varchar(50) DEFAULT NULL,
  `AssessorIdType` varchar(100) DEFAULT NULL,
  `AssessorSSCLetter` varchar(50) DEFAULT NULL,
  `AssessorBehaviour` varchar(50) DEFAULT NULL,
  `AssessorDemands` varchar(50) DEFAULT NULL,
  `AssessorBehaiourFormality` varchar(50) DEFAULT NULL,
  `AssessorGroupPhoto` varchar(350) DEFAULT NULL,
  `VCPMUNameVisit` varchar(50) DEFAULT NULL,
  `RemarksDetails` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTPracticalAssessmentId`),
  KEY `FK_VTPracticalAssessment_VTClasses` (`VTClassId`),
  CONSTRAINT `FK_VTPracticalAssessment_VTClasses` FOREIGN KEY (`VTClassId`) REFERENCES `vtclasses` (`VTClassId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtpracticalassessments`
--

LOCK TABLES `vtpracticalassessments` WRITE;
/*!40000 ALTER TABLE `vtpracticalassessments` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtpracticalassessments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtpsectorjobroles`
--

DROP TABLE IF EXISTS `vtpsectorjobroles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtpsectorjobroles` (
  `VTPSectorJobRoleId` varchar(36) NOT NULL,
  `VTPId` varchar(36) DEFAULT NULL,
  `SectorId` varchar(36) DEFAULT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `VTPSectorJobRoleName` varchar(100) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTPSectorJobRoleId`),
  KEY `FK_VTPSectorJobRoles_JobRoles` (`JobRoleId`),
  KEY `FK_VTPSectorJobRoles_Sectors` (`SectorId`),
  KEY `FK_VTPSectorJobRoles_VocationalTrainingProviders` (`VTPId`),
  CONSTRAINT `FK_VTPSectorJobRoles_JobRoles` FOREIGN KEY (`JobRoleId`) REFERENCES `jobroles` (`JobRoleId`),
  CONSTRAINT `FK_VTPSectorJobRoles_Sectors` FOREIGN KEY (`SectorId`) REFERENCES `sectors` (`SectorId`),
  CONSTRAINT `FK_VTPSectorJobRoles_VocationalTrainingProviders` FOREIGN KEY (`VTPId`) REFERENCES `vocationaltrainingproviders` (`VTPId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtpsectorjobroles`
--

LOCK TABLES `vtpsectorjobroles` WRITE;
/*!40000 ALTER TABLE `vtpsectorjobroles` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtpsectorjobroles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtpsectors`
--

DROP TABLE IF EXISTS `vtpsectors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtpsectors` (
  `VTPSectorId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) NOT NULL,
  `VTPId` varchar(36) NOT NULL,
  `SectorId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `IsAYRollover` bit(1) DEFAULT (0),
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTPSectorId`),
  UNIQUE KEY `UC_VTPSectors_AY_VTP_SE` (`AcademicYearId`,`VTPId`,`SectorId`,`IsActive`),
  KEY `FK_VTPSectors_AcademicYears` (`AcademicYearId`),
  KEY `FK_VTPSectors_Sectors` (`SectorId`),
  KEY `FK_VTPSectors_VocationalTrainingProviders` (`VTPId`),
  KEY `IX_VTPSectors_AY_VTP_SE` (`AcademicYearId`,`VTPId`,`SectorId`,`IsActive`),
  CONSTRAINT `FK_VTPSectors_AcademicYears` FOREIGN KEY (`AcademicYearId`) REFERENCES `academicyears` (`AcademicYearId`),
  CONSTRAINT `FK_VTPSectors_SectorJobRoles` FOREIGN KEY (`SectorId`) REFERENCES `sectors` (`SectorId`),
  CONSTRAINT `FK_VTPSectors_VocationalTrainingProviders` FOREIGN KEY (`VTPId`) REFERENCES `vocationaltrainingproviders` (`VTPId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtpsectors`
--

LOCK TABLES `vtpsectors` WRITE;
/*!40000 ALTER TABLE `vtpsectors` DISABLE KEYS */;
INSERT INTO `vtpsectors` VALUES ('bbe2d111-d065-4c77-a18f-9f84258212fd','606ed468-fba1-46ac-ba70-ead58dc4ab29','643142aa-574a-42b2-8f75-dfad884f5fc5','844ee4d3-1867-453b-873e-26e1654782f2','',_binary '\0','','2023-05-09 11:59:11.026','','2023-05-09 11:59:11.026',_binary '');
/*!40000 ALTER TABLE `vtpsectors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtractivitytypes`
--

DROP TABLE IF EXISTS `vtractivitytypes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtractivitytypes` (
  `VTRActivityTypeId` varchar(36) NOT NULL,
  `VTRTeachingVocationalEducationId` varchar(36) NOT NULL,
  `ActivityTypeId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRActivityTypeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtractivitytypes`
--

LOCK TABLES `vtractivitytypes` WRITE;
/*!40000 ALTER TABLE `vtractivitytypes` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtractivitytypes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrassessorinotherschoolforexams`
--

DROP TABLE IF EXISTS `vtrassessorinotherschoolforexams`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrassessorinotherschoolforexams` (
  `VTRAssessorInOtherSchoolForExamId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `SchoolName` varchar(200) NOT NULL,
  `UDISE` varchar(11) NOT NULL,
  `ClassId` varchar(36) NOT NULL,
  `BoysPresent` int NOT NULL,
  `GirlsPresent` int NOT NULL,
  `ExamDetails` varchar(350) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRAssessorInOtherSchoolForExamId`),
  KEY `FK_VTRAssessorInOtherSchoolForExams_VTDailyReporting_idx` (`VTDailyReportingId`),
  CONSTRAINT `FK_VTRAssessorInOtherSchoolForExams_VTDailyReporting` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrassessorinotherschoolforexams`
--

LOCK TABLES `vtrassessorinotherschoolforexams` WRITE;
/*!40000 ALTER TABLE `vtrassessorinotherschoolforexams` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrassessorinotherschoolforexams` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrassignmentfromvocationaldepartments`
--

DROP TABLE IF EXISTS `vtrassignmentfromvocationaldepartments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrassignmentfromvocationaldepartments` (
  `VTRAssignmentFromVocationalDepartmentId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `AssigmentNumber` varchar(30) DEFAULT NULL,
  `AssignmentDetails` varchar(350) NOT NULL,
  `AssignmentPhoto` varchar(250) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRAssignmentFromVocationalDepartmentId`),
  KEY `FK_VTRAssignmentFromVocationalDepartments_VTDailyReporting_idx` (`VTDailyReportingId`),
  CONSTRAINT `FK_VTRAssignmentFromVocationalDepartments_VTDailyReporting` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrassignmentfromvocationaldepartments`
--

LOCK TABLES `vtrassignmentfromvocationaldepartments` WRITE;
/*!40000 ALTER TABLE `vtrassignmentfromvocationaldepartments` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrassignmentfromvocationaldepartments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrclasssectionstaught`
--

DROP TABLE IF EXISTS `vtrclasssectionstaught`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrclasssectionstaught` (
  `VTRClassSectionsTaughtId` varchar(36) NOT NULL,
  `VTRTeachingVocationalEducationId` varchar(36) DEFAULT NULL,
  `ClassId` varchar(36) NOT NULL,
  `SectionId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRClassSectionsTaughtId`),
  KEY `VTRClassSectionsTaught_Sections_idx` (`SectionId`),
  KEY `VTRClassSectionsTaught_SchoolClasses_idx` (`ClassId`),
  KEY `VTRClassSectionsTaught_VTRTeachingVocationalEducations_idx` (`VTRTeachingVocationalEducationId`),
  CONSTRAINT `VTRClassSectionsTaught_SchoolClasses` FOREIGN KEY (`ClassId`) REFERENCES `schoolclasses` (`ClassId`),
  CONSTRAINT `VTRClassSectionsTaught_Sections` FOREIGN KEY (`SectionId`) REFERENCES `sections` (`SectionId`),
  CONSTRAINT `VTRClassSectionsTaught_VTRTeachingVocationalEducations` FOREIGN KEY (`VTRTeachingVocationalEducationId`) REFERENCES `vtrteachingvocationaleducations` (`VTRTeachingVocationalEducationId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrclasssectionstaught`
--

LOCK TABLES `vtrclasssectionstaught` WRITE;
/*!40000 ALTER TABLE `vtrclasssectionstaught` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrclasssectionstaught` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrcommunityhomevisits`
--

DROP TABLE IF EXISTS `vtrcommunityhomevisits`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrcommunityhomevisits` (
  `VTRCommunityHomeVisitId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `VocationalParentsCount` int NOT NULL,
  `OtherParentsCount` int NOT NULL,
  `CommunityVisitDetails` varchar(350) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRCommunityHomeVisitId`),
  KEY `FK_VTRCommunityHomeVisits_VTDailyReporting_idx` (`VTDailyReportingId`),
  CONSTRAINT `FK_VTRCommunityHomeVisits_VTDailyReporting` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrcommunityhomevisits`
--

LOCK TABLES `vtrcommunityhomevisits` WRITE;
/*!40000 ALTER TABLE `vtrcommunityhomevisits` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrcommunityhomevisits` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtreportsubmissions`
--

DROP TABLE IF EXISTS `vtreportsubmissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtreportsubmissions` (
  `VTReportSubmissionId` int NOT NULL AUTO_INCREMENT,
  `VTSchoolSectorId` varchar(36) NOT NULL,
  `VTId` varchar(36) NOT NULL,
  `ReportingDate` date NOT NULL,
  `IsReportSubmitted` bit(1) NOT NULL DEFAULT (0),
  `IsHoliday` bit(1) NOT NULL DEFAULT (0),
  PRIMARY KEY (`VTReportSubmissionId`)
) ENGINE=InnoDB AUTO_INCREMENT=1147678 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtreportsubmissions`
--

LOCK TABLES `vtreportsubmissions` WRITE;
/*!40000 ALTER TABLE `vtreportsubmissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtreportsubmissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrholidays`
--

DROP TABLE IF EXISTS `vtrholidays`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrholidays` (
  `VTRHolidayId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `HolidayTypeId` varchar(5) NOT NULL,
  `HolidayDetails` varchar(350) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRHolidayId`),
  KEY `FK_VTRHolidays_VTDailyReporting_idx` (`VTDailyReportingId`),
  CONSTRAINT `FK_VTRHolidays_VTDailyReporting` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrholidays`
--

LOCK TABLES `vtrholidays` WRITE;
/*!40000 ALTER TABLE `vtrholidays` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrholidays` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrleaves`
--

DROP TABLE IF EXISTS `vtrleaves`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrleaves` (
  `VTRLeaveId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `LeaveTypeId` varchar(5) NOT NULL,
  `LeaveModeId` varchar(5) DEFAULT NULL,
  `LeaveApprovalStatus` varchar(20) NOT NULL,
  `LeaveApprover` varchar(5) NOT NULL,
  `LeaveReason` varchar(350) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRLeaveId`),
  KEY `FK_VTRLeaves_VTDailyReporting_idx` (`VTDailyReportingId`),
  CONSTRAINT `FK_VTRLeaves_VTDailyReporting` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrleaves`
--

LOCK TABLES `vtrleaves` WRITE;
/*!40000 ALTER TABLE `vtrleaves` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrleaves` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrobservationdays`
--

DROP TABLE IF EXISTS `vtrobservationdays`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrobservationdays` (
  `VTRObservationDayId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `VTId` varchar(36) NOT NULL,
  `ClassId` varchar(36) NOT NULL,
  `StudentId` varchar(36) NOT NULL,
  `IsPresent` bit(1) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRObservationDayId`),
  KEY `FK_VTRObservationDays_VTDailyReporting_idx` (`VTDailyReportingId`),
  KEY `FK_VTRObservationDays_VocationalTrainers_idx` (`VTId`),
  KEY `FK_VTRObservationDays_SchoolClasses_idx` (`ClassId`),
  KEY `FK_VTRObservationDays_StudentClasses_idx` (`StudentId`),
  CONSTRAINT `FK_VTRObservationDays_SchoolClasses` FOREIGN KEY (`ClassId`) REFERENCES `schoolclasses` (`ClassId`),
  CONSTRAINT `FK_VTRObservationDays_StudentClasses` FOREIGN KEY (`StudentId`) REFERENCES `studentclasses` (`StudentId`),
  CONSTRAINT `FK_VTRObservationDays_VocationalTrainers` FOREIGN KEY (`VTId`) REFERENCES `vocationaltrainers` (`VTId`),
  CONSTRAINT `FK_VTRObservationDays_VTDailyReporting` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrobservationdays`
--

LOCK TABLES `vtrobservationdays` WRITE;
/*!40000 ALTER TABLE `vtrobservationdays` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrobservationdays` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtronjobtrainingcoordinations`
--

DROP TABLE IF EXISTS `vtronjobtrainingcoordinations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtronjobtrainingcoordinations` (
  `VTROnJobTrainingCoordinationId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `OnJobTrainingActivityId` varchar(5) NOT NULL,
  `IndustryName` varchar(150) DEFAULT NULL,
  `IndustryContactPerson` varchar(100) DEFAULT NULL,
  `IndustryContactNumber` varchar(15) DEFAULT NULL,
  `OJTActivityDetails` varchar(350) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTROnJobTrainingCoordinationId`),
  KEY `FK_VTROnJobTrainingCoordinations_VTDailyReporting_idx` (`VTDailyReportingId`),
  CONSTRAINT `FK_VTRTrainingOfTeachers_VTROnJobTrainingCoordinations` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtronjobtrainingcoordinations`
--

LOCK TABLES `vtronjobtrainingcoordinations` WRITE;
/*!40000 ALTER TABLE `vtronjobtrainingcoordinations` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtronjobtrainingcoordinations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrparentteachersmeetings`
--

DROP TABLE IF EXISTS `vtrparentteachersmeetings`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrparentteachersmeetings` (
  `VTRParentTeachersMeetingId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `VocationalParentsCount` int NOT NULL,
  `OtherParentsCount` int NOT NULL,
  `PTADetails` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRParentTeachersMeetingId`),
  KEY `FK_VTRParentTeachersMeetings_VTDailyReporting_idx` (`VTDailyReportingId`),
  CONSTRAINT `FK_VTRParentTeachersMeetings_VTDailyReporting` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrparentteachersmeetings`
--

LOCK TABLES `vtrparentteachersmeetings` WRITE;
/*!40000 ALTER TABLE `vtrparentteachersmeetings` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrparentteachersmeetings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrreasonofnotconductingtheclasses`
--

DROP TABLE IF EXISTS `vtrreasonofnotconductingtheclasses`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrreasonofnotconductingtheclasses` (
  `VTRReasonOfNotConductingTheClassId` varchar(36) NOT NULL,
  `VTRTeachingVocationalEducationId` varchar(36) NOT NULL,
  `ReasonTypeId` varchar(5) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRReasonOfNotConductingTheClassId`),
  KEY `FK_VTRReasonOfNotConductingTheClasses_ReasonTypes_idx` (`ReasonTypeId`),
  CONSTRAINT `FK_VTRReasonOfNotConductingTheClasses_ReasonTypes` FOREIGN KEY (`ReasonTypeId`) REFERENCES `datavalues` (`DataValueId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrreasonofnotconductingtheclasses`
--

LOCK TABLES `vtrreasonofnotconductingtheclasses` WRITE;
/*!40000 ALTER TABLE `vtrreasonofnotconductingtheclasses` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrreasonofnotconductingtheclasses` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrstudentattendances`
--

DROP TABLE IF EXISTS `vtrstudentattendances`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrstudentattendances` (
  `VTRStudentAttendanceId` varchar(36) NOT NULL,
  `VTRTeachingVocationalEducationId` varchar(36) NOT NULL,
  `VTId` varchar(36) DEFAULT NULL,
  `ClassId` varchar(36) DEFAULT NULL,
  `StudentId` varchar(36) NOT NULL,
  `IsPresent` bit(1) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRStudentAttendanceId`),
  KEY `FK_VTRStudentAttendances_VTRTeachingVocationalEducations_idx` (`VTRTeachingVocationalEducationId`),
  CONSTRAINT `FK_VTRStudentAttendances_VTRTeachingVocationalEducations` FOREIGN KEY (`VTRTeachingVocationalEducationId`) REFERENCES `vtrteachingvocationaleducations` (`VTRTeachingVocationalEducationId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrstudentattendances`
--

LOCK TABLES `vtrstudentattendances` WRITE;
/*!40000 ALTER TABLE `vtrstudentattendances` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrstudentattendances` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrteachingnonvocationalsubjects`
--

DROP TABLE IF EXISTS `vtrteachingnonvocationalsubjects`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrteachingnonvocationalsubjects` (
  `VTRTeachingNonVocationalSubjectId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `OtherClassTakenDetails` varchar(350) NOT NULL,
  `OtherClassTime` int NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRTeachingNonVocationalSubjectId`),
  KEY `FK_VTRTeachingNonVocationalSubjects_VTDailyReporting_idx` (`VTDailyReportingId`),
  CONSTRAINT `FK_VTRTeachingNonVocationalSubjects_VTDailyReporting` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrteachingnonvocationalsubjects`
--

LOCK TABLES `vtrteachingnonvocationalsubjects` WRITE;
/*!40000 ALTER TABLE `vtrteachingnonvocationalsubjects` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrteachingnonvocationalsubjects` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrteachingvocationaleducations`
--

DROP TABLE IF EXISTS `vtrteachingvocationaleducations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrteachingvocationaleducations` (
  `VTRTeachingVocationalEducationId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `ClassTaughtId` varchar(36) NOT NULL,
  `SectionTaughtId` varchar(36) DEFAULT NULL,
  `ClassTypeId` varchar(50) DEFAULT NULL,
  `ClassTime` varchar(36) DEFAULT NULL,
  `ClassPicture` varchar(350) DEFAULT NULL,
  `LessonPlanPicture` varchar(350) DEFAULT NULL,
  `ReasonDetails` varchar(36) DEFAULT NULL,
  `IsTeachToday` bit(1) NOT NULL,
  `SequenceNo` int DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRTeachingVocationalEducationId`),
  KEY `FK_VTRTeachingVocationalEducations_VTDailyReporting_idx` (`VTDailyReportingId`),
  CONSTRAINT `FK_VTRTeachingVocationalEducations_VTDailyReporting` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrteachingvocationaleducations`
--

LOCK TABLES `vtrteachingvocationaleducations` WRITE;
/*!40000 ALTER TABLE `vtrteachingvocationaleducations` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrteachingvocationaleducations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrtrainingofteachers`
--

DROP TABLE IF EXISTS `vtrtrainingofteachers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrtrainingofteachers` (
  `VTRTrainingOfTeacherId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `TrainingTypeId` varchar(5) NOT NULL,
  `TrainingBy` varchar(100) DEFAULT NULL,
  `TrainingDetails` varchar(36) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRTrainingOfTeacherId`),
  KEY `FK_VTRTrainingOfTeachers_VTDailyReporting_idx` (`VTDailyReportingId`),
  KEY `FK_VTRTrainingOfTeachers_TrainingTypes_idx` (`TrainingTypeId`),
  CONSTRAINT `FK_VTRTrainingOfTeachers_VTDailyReporting` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrtrainingofteachers`
--

LOCK TABLES `vtrtrainingofteachers` WRITE;
/*!40000 ALTER TABLE `vtrtrainingofteachers` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrtrainingofteachers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrtrainingtopics`
--

DROP TABLE IF EXISTS `vtrtrainingtopics`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrtrainingtopics` (
  `VTRTrainingTopicId` varchar(36) NOT NULL,
  `VTRTrainingOfTeacherId` varchar(36) NOT NULL,
  `TrainingTopicId` varchar(50) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRTrainingTopicId`),
  KEY `FK_VTRTrainingTopic_TrainingTopics_idx` (`TrainingTopicId`),
  KEY `FK_VTRTrainingTopic_VTRTrainingOfTeachers_idx` (`VTRTrainingOfTeacherId`),
  CONSTRAINT `FK_VTRTrainingTopic_TrainingTopics` FOREIGN KEY (`TrainingTopicId`) REFERENCES `datavalues` (`DataValueId`),
  CONSTRAINT `FK_VTRTrainingTopic_VTRTrainingOfTeachers` FOREIGN KEY (`VTRTrainingOfTeacherId`) REFERENCES `vtrtrainingofteachers` (`VTRTrainingOfTeacherId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrtrainingtopics`
--

LOCK TABLES `vtrtrainingtopics` WRITE;
/*!40000 ALTER TABLE `vtrtrainingtopics` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrtrainingtopics` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrunitsessionstaught`
--

DROP TABLE IF EXISTS `vtrunitsessionstaught`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrunitsessionstaught` (
  `VTRUnitSessionsTaughtId` varchar(36) NOT NULL,
  `VTRTeachingVocationalEducationId` varchar(36) NOT NULL,
  `ModuleId` varchar(50) NOT NULL,
  `UnitId` varchar(36) NOT NULL,
  `SessionId` varchar(36) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRUnitSessionsTaughtId`),
  KEY `FK_VTRUnitsTaughts_CourseUnitSessions_idx` (`SessionId`),
  CONSTRAINT `FK_VTRUnitsTaughts_CourseUnitSessions` FOREIGN KEY (`SessionId`) REFERENCES `courseunitsessions` (`CourseUnitSessionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrunitsessionstaught`
--

LOCK TABLES `vtrunitsessionstaught` WRITE;
/*!40000 ALTER TABLE `vtrunitsessionstaught` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrunitsessionstaught` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrvisittoeducationalinstitutions`
--

DROP TABLE IF EXISTS `vtrvisittoeducationalinstitutions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrvisittoeducationalinstitutions` (
  `VTRVisitToEducationalInstitutionId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `EducationalInstituteVisitCount` int NOT NULL,
  `EducationalInstitute` varchar(150) NOT NULL,
  `InstituteContactPerson` varchar(100) NOT NULL,
  `InstituteContactNumber` varchar(15) NOT NULL,
  `InstituteVisitDetails` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRVisitToEducationalInstitutionId`),
  KEY `FK_VTRVisitToEducationalInstitutions_VTDailyReporting_idx` (`VTDailyReportingId`),
  CONSTRAINT `FK_VTRVisitToEducationalInstitutions_VTDailyReporting` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrvisittoeducationalinstitutions`
--

LOCK TABLES `vtrvisittoeducationalinstitutions` WRITE;
/*!40000 ALTER TABLE `vtrvisittoeducationalinstitutions` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrvisittoeducationalinstitutions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrvisittoindustries`
--

DROP TABLE IF EXISTS `vtrvisittoindustries`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrvisittoindustries` (
  `VTRVisitToIndustryId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `IndustryVisitCount` int NOT NULL,
  `IndustryName` varchar(150) NOT NULL,
  `IndustryContactPerson` varchar(100) NOT NULL,
  `IndustryContactNumber` varchar(15) NOT NULL,
  `IndustryVisitDetails` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRVisitToIndustryId`),
  KEY `FK_VTRVisitToIndustries_VTDailyReporting_idx` (`VTDailyReportingId`),
  CONSTRAINT `FK_VTRVisitToIndustries_VTDailyReporting` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrvisittoindustries`
--

LOCK TABLES `vtrvisittoindustries` WRITE;
/*!40000 ALTER TABLE `vtrvisittoindustries` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrvisittoindustries` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrworkassignedbyheadmasters`
--

DROP TABLE IF EXISTS `vtrworkassignedbyheadmasters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrworkassignedbyheadmasters` (
  `VTRWorkAssignedByHeadMasterId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `TypeOfWork` varchar(5) NOT NULL,
  `OtherWork` varchar(350) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRWorkAssignedByHeadMasterId`),
  KEY `FK_VTRWorkAssignedByHeadMasters_VTDailyReporting_idx` (`VTDailyReportingId`),
  CONSTRAINT `FK_VTRWorkAssignedByHeadMasters_VTDailyReporting` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrworkassignedbyheadmasters`
--

LOCK TABLES `vtrworkassignedbyheadmasters` WRITE;
/*!40000 ALTER TABLE `vtrworkassignedbyheadmasters` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrworkassignedbyheadmasters` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtrworkingdaytypes`
--

DROP TABLE IF EXISTS `vtrworkingdaytypes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtrworkingdaytypes` (
  `VTRWorkingDayTypeId` varchar(36) NOT NULL,
  `VTDailyReportingId` varchar(36) NOT NULL,
  `WorkingTypeId` varchar(5) NOT NULL,
  `Remarks` varchar(350) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTRWorkingDayTypeId`),
  KEY `FK_VTRWorkingDayTypes_WorkingTypes_idx` (`WorkingTypeId`),
  KEY `FK_VTRHolidays_VTDailyReporting_idx` (`VTDailyReportingId`),
  CONSTRAINT `FK_VTRWorkingDayTypes_VTDailyReporting` FOREIGN KEY (`VTDailyReportingId`) REFERENCES `vtdailyreporting` (`VTDailyReportingId`),
  CONSTRAINT `FK_VTRWorkingDayTypes_WorkingTypes` FOREIGN KEY (`WorkingTypeId`) REFERENCES `datavalues` (`DataValueId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtrworkingdaytypes`
--

LOCK TABLES `vtrworkingdaytypes` WRITE;
/*!40000 ALTER TABLE `vtrworkingdaytypes` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtrworkingdaytypes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtschoolclasses`
--

DROP TABLE IF EXISTS `vtschoolclasses`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtschoolclasses` (
  `VTSchoolClassId` varchar(36) NOT NULL,
  `VTId` varchar(36) NOT NULL,
  `SchoolId` varchar(36) NOT NULL,
  `ClassId` varchar(36) NOT NULL,
  `SectionId` varchar(36) NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTSchoolClassId`),
  KEY `FK_VTSchoolClasses_VocationalTrainers_idx` (`VTId`),
  KEY `FK_VTSchoolClasses_Schools_idx` (`SchoolId`),
  KEY `FK_VTSchoolClasses_Classes_idx` (`ClassId`),
  CONSTRAINT `FK_VTSchoolClasses_Classes` FOREIGN KEY (`ClassId`) REFERENCES `schoolclasses` (`ClassId`),
  CONSTRAINT `FK_VTSchoolClasses_Schools` FOREIGN KEY (`SchoolId`) REFERENCES `schools` (`SchoolId`),
  CONSTRAINT `FK_VTSchoolClasses_VocationalTrainers` FOREIGN KEY (`VTId`) REFERENCES `vocationaltrainers` (`VTId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtschoolclasses`
--

LOCK TABLES `vtschoolclasses` WRITE;
/*!40000 ALTER TABLE `vtschoolclasses` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtschoolclasses` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtschoolsectorjobroles`
--

DROP TABLE IF EXISTS `vtschoolsectorjobroles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtschoolsectorjobroles` (
  `VTSchoolSectorJobRoleId` varchar(36) NOT NULL,
  `VTSchoolSectorId` varchar(36) NOT NULL,
  `JobRoleId` varchar(36) NOT NULL,
  `Remarks` varchar(35) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTSchoolSectorJobRoleId`),
  KEY `FK_VTSchoolSectorJobRoles_VTSchoolSectors_idx` (`VTSchoolSectorId`),
  CONSTRAINT `FK_VTSchoolSectorJobRoles_VTSchoolSectors` FOREIGN KEY (`VTSchoolSectorId`) REFERENCES `vtschoolsectors` (`VTSchoolSectorId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtschoolsectorjobroles`
--

LOCK TABLES `vtschoolsectorjobroles` WRITE;
/*!40000 ALTER TABLE `vtschoolsectorjobroles` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtschoolsectorjobroles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtschoolsectors`
--

DROP TABLE IF EXISTS `vtschoolsectors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtschoolsectors` (
  `VTSchoolSectorId` varchar(36) NOT NULL,
  `AcademicYearId` varchar(36) NOT NULL,
  `VTId` varchar(36) NOT NULL,
  `SchoolId` varchar(36) NOT NULL,
  `SectorId` varchar(36) NOT NULL,
  `JobRoleId` varchar(36) DEFAULT NULL,
  `DateOfAllocation` datetime NOT NULL,
  `DateOfRemoval` datetime DEFAULT NULL,
  `IsAYRollover` bit(1) DEFAULT (0),
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTSchoolSectorId`),
  UNIQUE KEY `UC_VTSchoolSectors` (`AcademicYearId`,`SchoolId`,`SectorId`,`VTId`,`IsActive`),
  UNIQUE KEY `UC_VTSchoolSectorJobRoles` (`AcademicYearId`,`SchoolId`,`SectorId`,`JobRoleId`,`VTId`,`IsActive`),
  KEY `FK_VTSchoolSectors_AcademicYears` (`AcademicYearId`),
  KEY `FK_VTSchoolSectors_Schools` (`SchoolId`),
  KEY `FK_VTSchoolSectors_Sectors` (`SectorId`),
  KEY `FK_VTSchoolSectors_VocationalTrainers` (`VTId`),
  CONSTRAINT `FK_VTSchoolSectors_AcademicYears` FOREIGN KEY (`AcademicYearId`) REFERENCES `academicyears` (`AcademicYearId`),
  CONSTRAINT `FK_VTSchoolSectors_Schools` FOREIGN KEY (`SchoolId`) REFERENCES `schools` (`SchoolId`),
  CONSTRAINT `FK_VTSchoolSectors_Sectors` FOREIGN KEY (`SectorId`) REFERENCES `sectors` (`SectorId`),
  CONSTRAINT `FK_VTSchoolSectors_VocationalTrainers` FOREIGN KEY (`VTId`) REFERENCES `vocationaltrainers` (`VTId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtschoolsectors`
--

LOCK TABLES `vtschoolsectors` WRITE;
/*!40000 ALTER TABLE `vtschoolsectors` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtschoolsectors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtstatusofinductioninservicetraining`
--

DROP TABLE IF EXISTS `vtstatusofinductioninservicetraining`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtstatusofinductioninservicetraining` (
  `VTStatusOfInductionInserviceTrainingId` varchar(36) NOT NULL,
  `VTSchoolSectorId` varchar(36) DEFAULT NULL,
  `IndustryTrainingStatus` varchar(50) DEFAULT NULL,
  `InserviceTrainingStatus` varchar(50) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTStatusOfInductionInserviceTrainingId`),
  KEY `FK_VTStatusOfInductionInserviceTraining_VTSchoolSectors` (`VTSchoolSectorId`),
  CONSTRAINT `FK_VTStatusOfInductionInserviceTraining_VTSchoolSectors` FOREIGN KEY (`VTSchoolSectorId`) REFERENCES `vtschoolsectors` (`VTSchoolSectorId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtstatusofinductioninservicetraining`
--

LOCK TABLES `vtstatusofinductioninservicetraining` WRITE;
/*!40000 ALTER TABLE `vtstatusofinductioninservicetraining` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtstatusofinductioninservicetraining` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtstudentassessments`
--

DROP TABLE IF EXISTS `vtstudentassessments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtstudentassessments` (
  `VTStudentAssessmentId` varchar(36) NOT NULL,
  `VTClassId` varchar(36) DEFAULT NULL,
  `TestimonialType` varchar(50) NOT NULL,
  `StudentName` varchar(100) NOT NULL,
  `StudentGender` varchar(10) NOT NULL,
  `StudentPhoto` varchar(200) DEFAULT NULL,
  `OJTCompany` varchar(150) DEFAULT NULL,
  `OJTCompanyAddress` varchar(350) DEFAULT NULL,
  `OJTFieldSuperName` varchar(150) DEFAULT NULL,
  `OJTFieldSuperMobile` varchar(15) DEFAULT NULL,
  `OJTFieldSuperEmail` varchar(100) DEFAULT NULL,
  `GroupPhoto` varchar(200) DEFAULT NULL,
  `TestimonialTitle` varchar(150) DEFAULT NULL,
  `TestimonialDetails` varchar(250) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTStudentAssessmentId`),
  KEY `FK_VTStudentAssessment_VTClasses` (`VTClassId`),
  CONSTRAINT `FK_VTStudentAssessment_VTClasses` FOREIGN KEY (`VTClassId`) REFERENCES `vtclasses` (`VTClassId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtstudentassessments`
--

LOCK TABLES `vtstudentassessments` WRITE;
/*!40000 ALTER TABLE `vtstudentassessments` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtstudentassessments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtstudentplacementdetails`
--

DROP TABLE IF EXISTS `vtstudentplacementdetails`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtstudentplacementdetails` (
  `VTStudentPlacementDetailId` varchar(36) NOT NULL,
  `VTClassId` varchar(36) DEFAULT NULL,
  `StudentId` varchar(36) DEFAULT NULL,
  `PlacementApplyStatus` varchar(50) NOT NULL,
  `PlacementStatus` varchar(50) NOT NULL,
  `ApprenticeshipApplyStatus` varchar(50) DEFAULT NULL,
  `ApprenticeshipStatus` varchar(50) DEFAULT NULL,
  `HigherEducationVE` varchar(50) DEFAULT NULL,
  `HigherEductaionOther` varchar(50) DEFAULT NULL,
  `StudentPlacementStatus` varchar(50) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTStudentPlacementDetailId`),
  KEY `FK_VTStudentPlacementDetails_StudentClasses` (`StudentId`),
  KEY `FK_VTStudentPlacementDetails_VTClasses` (`VTClassId`),
  CONSTRAINT `FK_VTStudentPlacementDetails_StudentClasses` FOREIGN KEY (`StudentId`) REFERENCES `studentclasses` (`StudentId`),
  CONSTRAINT `FK_VTStudentPlacementDetails_VTClasses` FOREIGN KEY (`VTClassId`) REFERENCES `vtclasses` (`VTClassId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtstudentplacementdetails`
--

LOCK TABLES `vtstudentplacementdetails` WRITE;
/*!40000 ALTER TABLE `vtstudentplacementdetails` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtstudentplacementdetails` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtstudentresultothersubjects`
--

DROP TABLE IF EXISTS `vtstudentresultothersubjects`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtstudentresultothersubjects` (
  `VTStudentResultOtherSubjectId` varchar(36) NOT NULL,
  `VTClassId` varchar(36) DEFAULT NULL,
  `StudentId` varchar(36) DEFAULT NULL,
  `SubjectName` varchar(150) NOT NULL,
  `SubjectNumber` int NOT NULL,
  `SubjectMarks` int NOT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTStudentResultOtherSubjectId`),
  KEY `FK_VTStudentResultsOtherSubjects_StudentClasses` (`StudentId`),
  KEY `FK_VTStudentResultsOtherSubjects_VTClasses` (`VTClassId`),
  CONSTRAINT `FK_VTStudentResultsOtherSubjects_StudentClasses` FOREIGN KEY (`StudentId`) REFERENCES `studentclasses` (`StudentId`),
  CONSTRAINT `FK_VTStudentResultsOtherSubjects_VTClasses` FOREIGN KEY (`VTClassId`) REFERENCES `vtclasses` (`VTClassId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtstudentresultothersubjects`
--

LOCK TABLES `vtstudentresultothersubjects` WRITE;
/*!40000 ALTER TABLE `vtstudentresultothersubjects` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtstudentresultothersubjects` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vtstudentveresults`
--

DROP TABLE IF EXISTS `vtstudentveresults`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vtstudentveresults` (
  `VTStudentVEResultId` varchar(36) NOT NULL,
  `VTClassId` varchar(36) DEFAULT NULL,
  `StudentId` varchar(36) DEFAULT NULL,
  `DateIssuence` datetime DEFAULT NULL,
  `ExternalMarks` int NOT NULL,
  `TheoryMarks` int NOT NULL,
  `InternalMarks` int NOT NULL,
  `TotalMarks` int NOT NULL,
  `Grade` varchar(50) DEFAULT NULL,
  `CreatedBy` varchar(30) NOT NULL,
  `CreatedOn` datetime(3) NOT NULL,
  `UpdatedBy` varchar(30) DEFAULT NULL,
  `UpdatedOn` datetime(3) DEFAULT NULL,
  `IsActive` bit(1) NOT NULL,
  PRIMARY KEY (`VTStudentVEResultId`),
  KEY `FK_VTStudentVEResults_StudentClasses` (`StudentId`),
  KEY `FK_VTStudentVEResults_VTClasses` (`VTClassId`),
  CONSTRAINT `FK_VTStudentVEResults_StudentClasses` FOREIGN KEY (`StudentId`) REFERENCES `studentclasses` (`StudentId`),
  CONSTRAINT `FK_VTStudentVEResults_VTClasses` FOREIGN KEY (`VTClassId`) REFERENCES `vtclasses` (`VTClassId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vtstudentveresults`
--

LOCK TABLES `vtstudentveresults` WRITE;
/*!40000 ALTER TABLE `vtstudentveresults` DISABLE KEYS */;
/*!40000 ALTER TABLE `vtstudentveresults` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Temporary view structure for view `vtvc_issue_reporting_for_dashboard`
--

DROP TABLE IF EXISTS `vtvc_issue_reporting_for_dashboard`;
/*!50001 DROP VIEW IF EXISTS `vtvc_issue_reporting_for_dashboard`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `vtvc_issue_reporting_for_dashboard` AS SELECT 
 1 AS `MainIssueId`,
 1 AS `SubIssueId`,
 1 AS `VCId`,
 1 AS `Type`,
 1 AS `Name`,
 1 AS `IssuePriority`,
 1 AS `IssueReportDate`,
 1 AS `VCIssueReportingId`,
 1 AS `ApprovalStatus`,
 1 AS `SubIssueName`,
 1 AS `IsActive`*/;
SET character_set_client = @saved_cs_client;

--
-- Temporary view structure for view `vwvocationaltrainerdetails`
--

DROP TABLE IF EXISTS `vwvocationaltrainerdetails`;
/*!50001 DROP VIEW IF EXISTS `vwvocationaltrainerdetails`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `vwvocationaltrainerdetails` AS SELECT 
 1 AS `AcademicYearId`,
 1 AS `VTSchoolSectorId`,
 1 AS `VTPId`,
 1 AS `VCId`,
 1 AS `VTId`,
 1 AS `VTPName`,
 1 AS `VCName`,
 1 AS `VCMobile`,
 1 AS `VCEmail`,
 1 AS `VTName`,
 1 AS `VTMobile`,
 1 AS `VTEmail`,
 1 AS `VTDateOfJoining`,
 1 AS `HMName`,
 1 AS `HMMobile`,
 1 AS `HMEmail`,
 1 AS `SectorName`,
 1 AS `JobRoleName`,
 1 AS `UDISE`,
 1 AS `SchoolName`*/;
SET character_set_client = @saved_cs_client;

--
-- Dumping routines for database 'lighthousemh19d'
--
/*!50003 DROP FUNCTION IF EXISTS `GetNoOfSunday` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `GetNoOfSunday`(currentDate DATE) RETURNS int
    DETERMINISTIC
BEGIN
 DECLARE noOfSunday INT;
 
 SET noOfSunday = (CASE DAYOFMONTH(LAST_DAY(currentDate))
        WHEN 31 THEN
            CASE DAYOFWEEK(LAST_DAY(currentDate))
                WHEN 1 THEN 5
                WHEN 2 THEN 5
                WHEN 3 THEN 5
                ELSE 4
            END 
        WHEN 30 THEN
            CASE DAYOFWEEK(LAST_DAY(currentDate))
                WHEN 1 THEN 5
                WHEN 2 THEN 5
                ELSE 4
            END 
        WHEN 29 THEN
            CASE DAYOFWEEK(LAST_DAY(currentDate))
                WHEN 1 THEN 5
                ELSE 4
            END 
        ELSE 4
    END);
    
  RETURN noOfSunday;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetNoOfSundayOld` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `GetNoOfSundayOld`(currentDate DATE) RETURNS int
    DETERMINISTIC
BEGIN
	
	
    WITH RECURSIVE offdays as(
		SELECT 
			LAST_DAY(currentDate-INTERVAL 1 MONTH) + INTERVAL 1 DAY AS `Date`,
			DAYNAME(LAST_DAY(currentDate-INTERVAL 1 MONTH) + INTERVAL 1 DAY) AS `DayName`
		UNION ALL
		SELECT `Date` + INTERVAL 1 DAY, DAYNAME(`Date` + INTERVAL 1 DAY) 
		FROM offdays WHERE `DATE` < LAST_DAY(currentDate) 
	) 
    SELECT COUNT(*) INTO @noOfSunday FROM offdays WHERE DAYNAME(DATE) = 'Sunday';
    
	RETURN @noOfSunday;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetNoOfSundaysFromDateRange` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` FUNCTION `GetNoOfSundaysFromDateRange`(startDate DATE, endDate DATE) RETURNS int
    DETERMINISTIC
BEGIN    
    DECLARE currentDate DATE DEFAULT startDate;    
    DECLARE noOfSundays INT DEFAULT 0;
    
	WHILE currentDate <= endDate DO
		IF(DAYNAME(currentDate) = 'Sunday') THEN
			SET noOfSundays = noOfSundays + 1;
		END IF;
		
		SET currentDate = ADDDATE(currentDate, INTERVAL 1 DAY);
	END WHILE;
    
	RETURN noOfSundays;    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetNoOfSundaysFromDates` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` FUNCTION `GetNoOfSundaysFromDates`(startDate DATE, endDate DATE) RETURNS int
    DETERMINISTIC
BEGIN    
    DECLARE noOfSundays INT DEFAULT 0;
    
	WHILE startDate <= endDate DO
		IF(DAYNAME(startDate) = 'Sunday') THEN
			SET noOfSundays = noOfSundays + 1;
		END IF;
		
		SET startDate = ADDDATE(startDate, INTERVAL 1 DAY);
	END WHILE;
    
	RETURN noOfSundays;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetNoOfSundaysNew` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` FUNCTION `GetNoOfSundaysNew`(currentDate DATE) RETURNS int
    DETERMINISTIC
BEGIN    
    DECLARE startDate DATE DEFAULT DATE(DATE_FORMAT(currentDate,'%Y/%m/01')); 
    DECLARE endDate DATE;
    DECLARE noOfSundays INT DEFAULT 0;
 
	IF (DATE(CURRENT_DATE()) < LAST_DAY(currentDate)) THEN
		SET endDate = DATE(CURRENT_DATE());
	ELSE 
		SET endDate = LAST_DAY(currentDate);
    END IF;
    
	SET currentDate = startDate;
	WHILE currentDate <= endDate DO
		IF(DAYNAME(currentDate) = 'Sunday') THEN
			SET noOfSundays = noOfSundays + 1;
		END IF;
		
		SET currentDate = ADDDATE(currentDate, INTERVAL 1 DAY);
	END WHILE;
    
	RETURN noOfSundays;
    
    # SELECT FLOOR((DATEDIFF(LAST_DAY(DATE('2022/04/30 11:59')), DATE('2022/04/01') + INTERVAL LENGTH(SUBSTRING_INDEX('654321', WEEKDAY(DATE('2022/04/01')), 1)) DAY) + 1)/7) + 1;
    # SELECT GetNoOfSundaysNew(DATE('2022/05/16'));
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetWorkingDays` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `GetWorkingDays`(reportDate DATE) RETURNS int
    DETERMINISTIC
BEGIN
	DECLARE workingDays INT;
	SELECT GetNoOfSunday(reportDate) INTO @noOfSunday;
	
    SET workingDays = DAY(LAST_DAY(reportDate)) - @noOfSunday;
  
	RETURN workingDays;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetWorkingDaysOld` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `GetWorkingDaysOld`(reportDate DATE) RETURNS int
    DETERMINISTIC
BEGIN
 DECLARE workingDays INT;
 SELECT LAST_DAY(now()) INTO @endDate;
 SELECT DATE_FORMAT(NOW() ,'%Y-%m-01') INTO @startDate;

 SET workingDays = ABS(DATEDIFF(@endDate, @startDate)) + 1
     - ABS(DATEDIFF(ADDDATE(@endDate, INTERVAL 1 - DAYOFWEEK(@endDate) DAY),
                    ADDDATE(@startDate, INTERVAL 1 - DAYOFWEEK(@startDate) DAY))) / 7 * 2
     - (DAYOFWEEK(IF(@startDate < @endDate, @startDate, @endDate)) = 1)
     - (DAYOFWEEK(IF(@startDate > @endDate, @startDate, @endDate)) = 7);
    
  RETURN workingDays;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `TrimSpaces` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `TrimSpaces`(inputText VARCHAR(250)) RETURNS varchar(250) CHARSET utf8mb4
    DETERMINISTIC
BEGIN
    DECLARE outputText VARCHAR(250);
    SET outputText = REPLACE( inputText, '  ', ' ' );
    WHILE (outputText <> inputText) DO 
        SET inputText = outputText;
        SET outputText = REPLACE( inputText, '  ', ' ' );
    END WHILE;
    RETURN outputText;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ChangeUserLoginId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `ChangeUserLoginId`(
	IN roleIdValue  VARCHAR(36),
	IN loginId VARCHAR(36),
	IN newLoginId VARCHAR(100)
	)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
	
	START TRANSACTION;
	SELECT Code INTO @roleCode FROM Roles WHERE RoleId = roleIdValue;

	UPDATE Accounts SET LoginId = newLoginId, EmailId = newLoginId WHERE AccountId = loginId;
	 
	IF(@roleCode = 'VT') THEN
	BEGIN
		UPDATE VocationalTrainers SET Email = newLoginId WHERE VTId = loginId;
	END;
	ELSEIF(@roleCode = 'VC') THEN
	BEGIN
		UPDATE VocationalCoordinators SET EmailId = newLoginId WHERE VCId = loginId;
	END;
	ELSEIF(@roleCode = 'HM') THEN
	BEGIN
		UPDATE HeadMasters SET Email = newLoginId WHERE HMId = loginId;
	END; 
	END IF;
   
	COMMIT WORK;
	
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckIfVTClassExists` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `CheckIfVTClassExists`( 
	IN vtId VARCHAR(150), 
    IN classId VARCHAR(150))
BEGIN
	SELECT ay.AcademicYearId INTO @NextAcademicYearId
    FROM AcademicYears ay
    WHERE CAST(CONCAT(YEAR(NOW()),'/10/01') AS DATE) BETWEEN ay.StartMonth AND ay.EndMonth;

	SELECT vtc.* 
    FROM VTClasses vtc
	WHERE vtc.IsActive = 1 
		AND vtc.AcademicYearId = @NextAcademicYearId
        AND vtc.VTId = vtId
		AND vtc.ClassId = CASE WHEN classId='ef71e220-ed0a-4cec-a5b0-e06325d3dbf4' THEN '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc' 
		   WHEN classId='3d99b3d3-f955-4e8f-9f2e-ec697a774bbc' THEN '69257ab5-e836-46f1-b888-dfae5da5489c' 
		   WHEN classId='69257ab5-e836-46f1-b888-dfae5da5489c' THEN 'e0302e36-a8a7-49a0-b621-21d48986c43e'  
		END;	
	
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckVTPAlreadyTransferred` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `CheckVTPAlreadyTransferred`(
    IN LoginUserId    VARCHAR(1000), 
	IN OldVTPId VARCHAR(150), 
    IN NewVTPId VARCHAR(150),
    IN isCurrentYear bit
    )
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
        
    START TRANSACTION;

	SELECT UserId INTO @userId FROM Accounts WHERE LoginId = LoginUserId;
 
	SELECT AcademicYearId INTO @NewAcademicYearId 
    FROM AcademicYears WHERE CAST(CONCAT(YEAR(NOW()),'/10/01') AS DATE) BETWEEN StartMonth AND EndMonth; 
	
	IF(isCurrentYear = false) THEN 
		BEGIN
			SELECT IF(EXISTS(SELECT * FROM VTPSectors WHERE VTPId=OldVTPId 
			AND AcademicYearId=@NewAcademicYearId), 1, 0) TEST;
		END;
	END IF;

	COMMIT; 
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteSchoolById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `DeleteSchoolById`(
	IN emailId  VARCHAR(150)	 
	)
BEGIN	
	DECLARE vtIndex INT DEFAULT 1;
    DECLARE vtCount INT DEFAULT 0;
	DECLARE schoolIndex INT DEFAULT 1;
    DECLARE schoolCount INT DEFAULT 0;
    
    DROP TEMPORARY TABLE IF EXISTS  VTSchools;
    DROP TEMPORARY TABLE IF EXISTS  VCSchools;
    
    CREATE TEMPORARY TABLE VTSchools
    SELECT ROW_NUMBER() OVER (ORDER BY v.VTId) AS RowIndex, v.VTId
    FROM (
		SELECT DISTINCT vtc.VTId, vtc.SchoolId
		FROM VTSchoolSectors vtc
		INNER JOIN Schools s ON vtc.SchoolId = s.SchoolId AND s.IsActive = 0        
        
        
    ) AS v;
    	
    SET vtCount = (SELECT COUNT(*) FROM VTSchools);
    
	WHILE vtIndex <= vtCount DO		
        SELECT VTId INTO @accountId FROM VTSchools WHERE RowIndex = vtIndex;
		CALL DeleteVTTransactionByVTId(@accountId);
        
        SET vtIndex = vtIndex + 1;        
    END WHILE;
	
    CREATE TEMPORARY TABLE VCSchools
    SELECT ROW_NUMBER() OVER (ORDER BY v.SchoolId) AS RowIndex, v.SchoolId
    FROM (
		SELECT DISTINCT vtc.SchoolId
		FROM VTClasses vtc
		INNER JOIN Schools s ON vtc.SchoolId = s.SchoolId AND s.IsActive = 0
        
        
    ) AS v;
    	
    SET schoolCount = (SELECT COUNT(*) FROM VCSchools);
    
	WHILE schoolIndex <= schoolCount DO		
        SELECT SchoolId INTO @schoolId FROM VCSchools WHERE RowIndex = schoolIndex;
		CALL DeleteVCTransactionBySchoolId(@schoolId);
        
        DELETE FROM SchoolVEIncharges WHERE SchoolId = @schoolId;
        DELETE FROM HeadMasters WHERE SchoolId = @schoolId;
        DELETE FROM Schools WHERE SchoolId = @schoolId;
        
        SET schoolIndex = schoolIndex + 1;        
    END WHILE;
	
	DROP TEMPORARY TABLE IF EXISTS  VTSchools;
    DROP TEMPORARY TABLE IF EXISTS  VCSchools;
    
	
	
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteTransactionDataByVTId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `DeleteTransactionDataByVTId`(
	IN emailId  VARCHAR(150)	 
	)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
	
	START TRANSACTION;
    
	SELECT AccountId INTO @accountId FROM Accounts WHERE LoginId=emailId;
 
	
	DELETE cm 
	FROM CourseMaterials cm
	INNER JOIN VocationalTrainers vt ON cm.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE cm 
	FROM CourseMaterials cm WHERE cm.VTId = @accountId;
  
	
	DELETE scd
	FROM StudentClassDetails scd 
	INNER JOIN StudentClasses sc ON scd.StudentId = sc.StudentId
	INNER JOIN VocationalTrainers vt ON sc.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE scd
	FROM StudentClassDetails scd 
	INNER JOIN StudentClasses sc ON scd.StudentId = sc.StudentId
	WHERE sc.VTId = @accountId;

	
	DELETE vts
	FROM VTClassStudents vts
	INNER JOIN StudentClasses sc ON vts.VTId = sc.VTId AND vts.StudentId = sc.StudentId
	INNER JOIN VocationalTrainers vt ON sc.VTId = vt.VTId
	WHERE vt.VTId = @accountId;
	 
	DELETE vts
	FROM VTClassStudents vts
	INNER JOIN StudentClasses sc ON vts.VTId = sc.VTId AND vts.StudentId = sc.StudentId
	WHERE sc.VTId = @accountId;

	DELETE sc
	FROM StudentClasses sc 
	INNER JOIN VocationalTrainers vt ON sc.VTId = vt.VTId
	WHERE vt.VTId = @accountId;
	 
	DELETE sc
	FROM StudentClasses sc 
	INNER JOIN VTClasses vtc ON sc.VTId = vtc.VTId AND sc.ClassId = vtc.ClassId AND sc.SectionId = vtc.SectionId
	WHERE vtc.VTId = @accountId;

	DELETE sc
	FROM StudentClasses sc WHERE sc.VTId = @accountId;
	 
	
	DELETE vti 
	FROM VTIssueReporting vti
	INNER JOIN VocationalTrainers vt ON vti.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vti 
	FROM VTIssueReporting vti WHERE vti.VTId = @accountId;
	
	
	DELETE te 
	FROM ToolEquipments te
	INNER JOIN VocationalTrainers vt ON te.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE te 
	FROM ToolEquipments te WHERE te.VTId = @accountId;
 
	
	DELETE gls 
	FROM VTGSections gls
	INNER JOIN VTGuestLectureConducted gl ON gls.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE glm 
	FROM VTGMethodologies glm
	INNER JOIN VTGuestLectureConducted gl ON glm.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE glu 
	FROM VTGUnitSessionsTaught glu
	INNER JOIN VTGuestLectureConducted gl ON glu.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE gls 
	FROM VTGStudentAttendances gls
	INNER JOIN VTGuestLectureConducted gl ON gls.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE gl 
	FROM VTGuestLectureConducted gl
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE gl 
	FROM VTGuestLectureConducted gl WHERE gl.VTId = @accountId;

	

	DELETE fvs 
	FROM VTFSections fvs
	INNER JOIN VTFieldIndustryVisitConducted fv ON fvs.VTFieldIndustryVisitConductedId = fv.VTFieldIndustryVisitConductedId
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = @accountId;
	 
	DELETE fvu 
	FROM VTFUnitSessionsTaught fvu
	INNER JOIN VTFieldIndustryVisitConducted fv ON fvu.VTFieldIndustryVisitConductedId = fv.VTFieldIndustryVisitConductedId
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE fvs 
	FROM VTFStudentAttendances fvs
	INNER JOIN VTFieldIndustryVisitConducted fv ON fvs.VTFieldIndustryVisitConductedId = fv.VTFieldIndustryVisitConductedId
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE fv
	FROM VTFieldIndustryVisitConducted fv
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE fv
	FROM VTFieldIndustryVisitConducted fv WHERE fv.VTId = @accountId;

	
	DELETE vdrw
	FROM VTRWorkingDayTypes vdrw
	INNER JOIN VTDailyReporting vdr ON vdrw.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdrw
	FROM VTRWorkingDayTypes vdrw
	INNER JOIN VTDailyReporting vdr ON vdrw.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE drcs 
	FROM VTRClassSectionsTaught drcs
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drcs.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE drcs 
	FROM VTRClassSectionsTaught drcs
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drcs.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE drat 
	FROM VTRActivityTypes drat
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drat.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE drat 
	FROM VTRActivityTypes drat
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drat.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE drus 
	FROM VTRUnitSessionsTaught drus
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drus.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE drus 
	FROM VTRUnitSessionsTaught drus
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drus.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE drsa 
	FROM VTRStudentAttendances drsa
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drsa.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE drsa 
	FROM VTRStudentAttendances drsa
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drsa.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE drnc 
	FROM VTRReasonOfNotConductingTheClasses drnc
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drnc.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE drnc 
	FROM VTRReasonOfNotConductingTheClasses drnc
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drnc.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE vdrt 
	FROM VTRTeachingVocationalEducations vdrt
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdrt 
	FROM VTRTeachingVocationalEducations vdrt
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE drtp 
	FROM VTRTrainingTopics drtp
	INNER JOIN VTRTrainingOfTeachers vdtt ON drtp.VTRTrainingOfTeacherId = vdtt.VTRTrainingOfTeacherId
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE drtp 
	FROM VTRTrainingTopics drtp
	INNER JOIN VTRTrainingOfTeachers vdtt ON drtp.VTRTrainingOfTeacherId = vdtt.VTRTrainingOfTeacherId
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE vdtt 
	FROM VTRTrainingOfTeachers vdtt
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdtt 
	FROM VTRTrainingOfTeachers vdtt
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE vdjt 
	FROM VTROnJobTrainingCoordinations vdjt
	INNER JOIN VTDailyReporting vdr ON vdjt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdjt 
	FROM VTROnJobTrainingCoordinations vdjt
	INNER JOIN VTDailyReporting vdr ON vdjt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE vdas 
	FROM VTRAssessorInOtherSchoolForExams vdas
	INNER JOIN VTDailyReporting vdr ON vdas.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdas 
	FROM VTRAssessorInOtherSchoolForExams vdas
	INNER JOIN VTDailyReporting vdr ON vdas.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE vdpt 
	FROM VTRParentTeachersMeetings vdpt
	INNER JOIN VTDailyReporting vdr ON vdpt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdpt 
	FROM VTRParentTeachersMeetings vdpt
	INNER JOIN VTDailyReporting vdr ON vdpt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE vdhv 
	FROM VTRCommunityHomeVisits vdhv
	INNER JOIN VTDailyReporting vdr ON vdhv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdhv 
	FROM VTRCommunityHomeVisits vdhv
	INNER JOIN VTDailyReporting vdr ON vdhv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE vdvi 
	FROM VTRVisitToIndustries vdvi
	INNER JOIN VTDailyReporting vdr ON vdvi.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdvi 
	FROM VTRVisitToIndustries vdvi
	INNER JOIN VTDailyReporting vdr ON vdvi.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE vdve 
	FROM VTRVisitToEducationalInstitutions vdve
	INNER JOIN VTDailyReporting vdr ON vdve.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdve 
	FROM VTRVisitToEducationalInstitutions vdve
	INNER JOIN VTDailyReporting vdr ON vdve.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE vdav 
	FROM VTRAssignmentFromVocationalDepartments vdav
	INNER JOIN VTDailyReporting vdr ON vdav.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdav 
	FROM VTRAssignmentFromVocationalDepartments vdav
	INNER JOIN VTDailyReporting vdr ON vdav.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE vdnv 
	FROM VTRTeachingNonVocationalSubjects vdnv
	INNER JOIN VTDailyReporting vdr ON vdnv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdnv 
	FROM VTRTeachingNonVocationalSubjects vdnv
	INNER JOIN VTDailyReporting vdr ON vdnv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE vdl 
	FROM VTRLeaves vdl
	INNER JOIN VTDailyReporting vdr ON vdl.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdl 
	FROM VTRLeaves vdl
	INNER JOIN VTDailyReporting vdr ON vdl.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE vdh 
	FROM VTRHolidays vdh
	INNER JOIN VTDailyReporting vdr ON vdh.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdh 
	FROM VTRHolidays vdh
	INNER JOIN VTDailyReporting vdr ON vdh.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE vdod 
	FROM VTRObservationDays vdod
	INNER JOIN VTDailyReporting vdr ON vdod.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdod 
	FROM VTRObservationDays vdod
	INNER JOIN VTDailyReporting vdr ON vdod.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;

	DELETE vdr
	FROM VTDailyReporting vdr
	INNER JOIN VTSchoolSectors vts ON vdr.VTSchoolSectorId = vts.VTSchoolSectorId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdr
	FROM VTDailyReporting vdr
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = @accountId;
	 
	DELETE vdr
	FROM VTDailyReporting vdr
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vdr
	FROM VTDailyReporting vdr WHERE vdr.VTId = @accountId;

	
	DELETE vcs
	FROM VTClassSections vcs
	INNER JOIN VTClasses vtc ON vcs.VTClassId = vtc.VTClassId
	INNER JOIN VocationalTrainers vt ON vtc.VTId = vt.VTId
	WHERE vt.VTId = @accountId;
	  
	DELETE vtc
	FROM VTClasses vtc
	INNER JOIN VocationalTrainers vt ON vtc.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vtc
	FROM VTClasses vtc WHERE vtc.VTId = @accountId;
    
	
    DELETE vssj
	FROM VTSchoolSectorJobRoles vssj
	INNER JOIN VTSchoolSectors vts ON vssj.VTSchoolSectorId = vts.VTSchoolSectorId
    INNER JOIN VocationalTrainers vt ON vts.VTId = vt.VTId
	WHERE vt.VTId = @accountId;
    
	DELETE vts
	FROM VTSchoolSectors vts
	INNER JOIN VocationalTrainers vt ON vts.VTId = vt.VTId
	WHERE vt.VTId = @accountId;

	DELETE vts
	FROM VTSchoolSectors vts WHERE vts.VTId = @accountId;
 
	
	DELETE vt
	FROM VocationalTrainers vt WHERE vt.VTId = @accountId;
 
	
	DELETE ar
	FROM AccountRoles ar WHERE ar.AccountId = @accountId;

	DELETE a
	FROM Accounts a WHERE a.AccountId = @accountId;
		
	COMMIT WORK;
	
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteVCDailyReportingDataBySchoolId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `DeleteVCDailyReportingDataBySchoolId`(
	IN schoolId VARCHAR(36)	 
	)
BEGIN	
	START TRANSACTION;        
    
	
	DELETE vci 
	FROM VCIssueReporting vci
	INNER JOIN VCSchoolSectors vcss ON vci.VCSchoolSectorId = vcss.VCSchoolSectorId
    INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
    INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
	WHERE s.schoolId = schoolId;
	
	
	
	DELETE vcsv 
	FROM VCRSchoolVisits vcsv
	INNER JOIN VCDailyReporting vcdr  ON vcsv.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vch 
	FROM VCRHolidays vch
	INNER JOIN VCDailyReporting vcdr  ON vch.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vcl 
	FROM VCRLeaves vcl
	INNER JOIN VCDailyReporting vcdr  ON vcl.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vciv 
	FROM VCRIndustryExposureVisits vciv
	INNER JOIN VCDailyReporting vcdr  ON vciv.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vcwt 
	FROM VCRWorkingDayTypes vcwt
	INNER JOIN VCDailyReporting vcdr  ON vcwt.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vcdr 
	FROM VCDailyReporting vcdr 
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;
	
    
    DELETE vcss 
	FROM VCSchoolSectors vcss 	
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	 
    DELETE svs 
	FROM SchoolVTPSectors svs 	
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;
    
	COMMIT; 
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteVCDailyReportingDataByVCId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `DeleteVCDailyReportingDataByVCId`(
	IN accountId  VARCHAR(36)	 
	)
BEGIN	
	START TRANSACTION;        
    
	
	DELETE vci 
	FROM VCIssueReporting vci
	INNER JOIN VocationalCoordinators vc ON vci.VCId = vc.VCId
	WHERE vc.VCId = accountId;

	DELETE vci 
	FROM VTIssueReporting vci WHERE vci.VCId = accountId;
	 	 
	
	
	DELETE vcsv 
	FROM VCRSchoolVisits vcsv
	INNER JOIN VCDailyReporting vcdr  ON vcsv.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0;

	
	DELETE vch 
	FROM VCRHolidays vch
	INNER JOIN VCDailyReporting vcdr  ON vch.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0;

	
	DELETE vcl 
	FROM VCRLeaves vcl
	INNER JOIN VCDailyReporting vcdr  ON vcl.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0;

	
	DELETE vciv 
	FROM VCRIndustryExposureVisits vciv
	INNER JOIN VCDailyReporting vcdr  ON vciv.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0;

	
	DELETE vcwt 
	FROM VCRWorkingDayTypes vcwt
	INNER JOIN VCDailyReporting vcdr  ON vcwt.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0;

	
	DELETE vcdr 
	FROM VCDailyReporting vcdr 
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0;
	
	COMMIT; 
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteVCTransactionBySchoolId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `DeleteVCTransactionBySchoolId`(
	IN schoolId VARCHAR(36)	 
	)
BEGIN	
	START TRANSACTION;        
    
	
	DELETE vci 
	FROM VCIssueReporting vci
	INNER JOIN VCSchoolSectors vcss ON vci.VCId = vcss.VCId
    INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
    INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
	WHERE s.schoolId = schoolId;
	 	 
	
	
	DELETE vcsv 
	FROM VCRSchoolVisits vcsv
	INNER JOIN VCDailyReporting vcdr  ON vcsv.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vch 
	FROM VCRHolidays vch
	INNER JOIN VCDailyReporting vcdr  ON vch.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vcl 
	FROM VCRLeaves vcl
	INNER JOIN VCDailyReporting vcdr  ON vcl.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vciv 
	FROM VCRIndustryExposureVisits vciv
	INNER JOIN VCDailyReporting vcdr  ON vciv.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vcwt 
	FROM VCRWorkingDayTypes vcwt
	INNER JOIN VCDailyReporting vcdr  ON vcwt.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vcdr 
	FROM VCDailyReporting vcdr 
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;
	
    
    DELETE vcss 
	FROM VCSchoolSectors vcss 	
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
    DELETE svs 
	FROM SchoolVTPSectors svs 	
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;
	 
	COMMIT; 
	
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteVCTransactionsByDate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `DeleteVCTransactionsByDate`(ReportingDate DATE)
BEGIN		
	
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
        
    START TRANSACTION;
     
	
	
	DELETE vcsv
	FROM VCRSchoolVisits vcsv
	INNER JOIN VCDailyReporting vcdr  ON vcsv.VCDailyReportingId = vcdr.VCDailyReportingId	
    WHERE DATE(vcdr.ReportDate) = ReportingDate;

	
	DELETE vch
	FROM VCRHolidays vch
	INNER JOIN VCDailyReporting vcdr  ON vch.VCDailyReportingId = vcdr.VCDailyReportingId 
    WHERE DATE(vcdr.ReportDate) = ReportingDate;

	
	DELETE vcl
	FROM VCRLeaves vcl
	INNER JOIN VCDailyReporting vcdr  ON vcl.VCDailyReportingId = vcdr.VCDailyReportingId	
    WHERE DATE(vcdr.ReportDate) = ReportingDate;

	
	DELETE vciv
	FROM VCRIndustryExposureVisits vciv
	INNER JOIN VCDailyReporting vcdr  ON vciv.VCDailyReportingId = vcdr.VCDailyReportingId	
    WHERE DATE(vcdr.ReportDate) = ReportingDate;

	
	DELETE vcwt
	FROM VCRWorkingDayTypes vcwt
	INNER JOIN VCDailyReporting vcdr  ON vcwt.VCDailyReportingId = vcdr.VCDailyReportingId	
    WHERE DATE(vcdr.ReportDate) = ReportingDate;
   
   
	DELETE vcdr
	FROM VCDailyReporting vcdr
	WHERE DATE(vcdr.ReportDate) = ReportingDate;
	 
	COMMIT; 
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteVCTransactionsByVCId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `DeleteVCTransactionsByVCId`(vcId VARCHAR(36))
BEGIN		
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
        
    START TRANSACTION;
     
	
	
	DELETE vcsv
	FROM VCRSchoolVisits vcsv
	INNER JOIN VCDailyReporting vcdr  ON vcsv.VCDailyReportingId = vcdr.VCDailyReportingId	
    WHERE vcdr.VCId = vcId;

	
	DELETE vch
	FROM VCRHolidays vch
	INNER JOIN VCDailyReporting vcdr  ON vch.VCDailyReportingId = vcdr.VCDailyReportingId 
    WHERE vcdr.VCId = vcId;

	
	DELETE vcl
	FROM VCRLeaves vcl
	INNER JOIN VCDailyReporting vcdr  ON vcl.VCDailyReportingId = vcdr.VCDailyReportingId	
    WHERE vcdr.VCId = vcId;

	
	DELETE vciv
	FROM VCRIndustryExposureVisits vciv
	INNER JOIN VCDailyReporting vcdr  ON vciv.VCDailyReportingId = vcdr.VCDailyReportingId	
    WHERE vcdr.VCId = vcId;

	
	DELETE vcwt
	FROM VCRWorkingDayTypes vcwt
	INNER JOIN VCDailyReporting vcdr  ON vcwt.VCDailyReportingId = vcdr.VCDailyReportingId	
    WHERE vcdr.VCId = vcId;
   
   
	DELETE vcdr
	FROM VCDailyReporting vcdr
	WHERE vcdr.VCId = vcId;

    UPDATE VCSchoolSectors 
	SET IsActive = 0, UpdatedOn = NOW() 
	WHERE VCId = vcId;
    
    IF NOT EXISTS (SELECT * FROM VCSchoolSectors WHERE VCId = vcId) THEN
	BEGIN
		DELETE vc
		FROM VocationalCoordinators vc
		WHERE vc.VCId = vcId;
	END;
    ELSE 
    BEGIN
		UPDATE VocationalCoordinators
        SET IsActive = 0, UpdatedOn = NOW() 
		WHERE vc.VCId = vcId;
    END;
	END IF;
 
	COMMIT; 
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteVocationalTrainerByVTId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `DeleteVocationalTrainerByVTId`(
	IN accountId  VARCHAR(36)	 
	)
BEGIN
	START TRANSACTION;
     
	
	DELETE cm 
	FROM CourseMaterials cm
	INNER JOIN VocationalTrainers vt ON cm.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE cm 
	FROM CourseMaterials cm WHERE cm.VTId = accountId;    
  
	
	DELETE te 
	FROM ToolEquipments te
	INNER JOIN VocationalTrainers vt ON te.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE te 
	FROM ToolEquipments te WHERE te.VTId = accountId;
    
	
	DELETE vti 
	FROM VTIssueReporting vti
	INNER JOIN VocationalTrainers vt ON vti.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vti 
	FROM VTIssueReporting vti WHERE vti.VTId = accountId;	
     
	
	DELETE vts
	FROM VTClassStudents vts
	INNER JOIN StudentClasses sc ON vts.VTId = sc.VTId AND vts.StudentId = sc.StudentId
	WHERE sc.VTId = accountId;

	
	DELETE gls 
	FROM VTGSections gls
	INNER JOIN VTGuestLectureConducted gl ON gls.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE glm 
	FROM VTGMethodologies glm
	INNER JOIN VTGuestLectureConducted gl ON glm.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE glu 
	FROM VTGUnitSessionsTaught glu
	INNER JOIN VTGuestLectureConducted gl ON glu.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE gls 
	FROM VTGStudentAttendances gls
	INNER JOIN VTGuestLectureConducted gl ON gls.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE gl 
	FROM VTGuestLectureConducted gl
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE gl 
	FROM VTGuestLectureConducted gl WHERE gl.VTId = accountId;

	
	DELETE fvs 
	FROM VTFSections fvs
	INNER JOIN VTFieldIndustryVisitConducted fv ON fvs.VTFieldIndustryVisitConductedId = fv.VTFieldIndustryVisitConductedId
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = accountId;
	 
	DELETE fvu 
	FROM VTFUnitSessionsTaught fvu
	INNER JOIN VTFieldIndustryVisitConducted fv ON fvu.VTFieldIndustryVisitConductedId = fv.VTFieldIndustryVisitConductedId
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE fvs 
	FROM VTFStudentAttendances fvs
	INNER JOIN VTFieldIndustryVisitConducted fv ON fvs.VTFieldIndustryVisitConductedId = fv.VTFieldIndustryVisitConductedId
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE fv
	FROM VTFieldIndustryVisitConducted fv
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE fv
	FROM VTFieldIndustryVisitConducted fv WHERE fv.VTId = accountId;

	
	DELETE vdrw
	FROM VTRWorkingDayTypes vdrw
	INNER JOIN VTDailyReporting vdr ON vdrw.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdrw
	FROM VTRWorkingDayTypes vdrw
	INNER JOIN VTDailyReporting vdr ON vdrw.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drcs 
	FROM VTRClassSectionsTaught drcs
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drcs.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drcs 
	FROM VTRClassSectionsTaught drcs
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drcs.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drat 
	FROM VTRActivityTypes drat
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drat.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drat 
	FROM VTRActivityTypes drat
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drat.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drus 
	FROM VTRUnitSessionsTaught drus
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drus.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drus 
	FROM VTRUnitSessionsTaught drus
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drus.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drsa 
	FROM VTRStudentAttendances drsa
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drsa.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drsa 
	FROM VTRStudentAttendances drsa
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drsa.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drnc 
	FROM VTRReasonOfNotConductingTheClasses drnc
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drnc.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drnc 
	FROM VTRReasonOfNotConductingTheClasses drnc
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drnc.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdrt 
	FROM VTRTeachingVocationalEducations vdrt
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdrt 
	FROM VTRTeachingVocationalEducations vdrt
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drtp 
	FROM VTRTrainingTopics drtp
	INNER JOIN VTRTrainingOfTeachers vdtt ON drtp.VTRTrainingOfTeacherId = vdtt.VTRTrainingOfTeacherId
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drtp 
	FROM VTRTrainingTopics drtp
	INNER JOIN VTRTrainingOfTeachers vdtt ON drtp.VTRTrainingOfTeacherId = vdtt.VTRTrainingOfTeacherId
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdtt 
	FROM VTRTrainingOfTeachers vdtt
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdtt 
	FROM VTRTrainingOfTeachers vdtt
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdjt 
	FROM VTROnJobTrainingCoordinations vdjt
	INNER JOIN VTDailyReporting vdr ON vdjt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdjt 
	FROM VTROnJobTrainingCoordinations vdjt
	INNER JOIN VTDailyReporting vdr ON vdjt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdas 
	FROM VTRAssessorInOtherSchoolForExams vdas
	INNER JOIN VTDailyReporting vdr ON vdas.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdas 
	FROM VTRAssessorInOtherSchoolForExams vdas
	INNER JOIN VTDailyReporting vdr ON vdas.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdpt 
	FROM VTRParentTeachersMeetings vdpt
	INNER JOIN VTDailyReporting vdr ON vdpt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdpt 
	FROM VTRParentTeachersMeetings vdpt
	INNER JOIN VTDailyReporting vdr ON vdpt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdhv 
	FROM VTRCommunityHomeVisits vdhv
	INNER JOIN VTDailyReporting vdr ON vdhv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdhv 
	FROM VTRCommunityHomeVisits vdhv
	INNER JOIN VTDailyReporting vdr ON vdhv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdvi 
	FROM VTRVisitToIndustries vdvi
	INNER JOIN VTDailyReporting vdr ON vdvi.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdvi 
	FROM VTRVisitToIndustries vdvi
	INNER JOIN VTDailyReporting vdr ON vdvi.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdve 
	FROM VTRVisitToEducationalInstitutions vdve
	INNER JOIN VTDailyReporting vdr ON vdve.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdve 
	FROM VTRVisitToEducationalInstitutions vdve
	INNER JOIN VTDailyReporting vdr ON vdve.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdav 
	FROM VTRAssignmentFromVocationalDepartments vdav
	INNER JOIN VTDailyReporting vdr ON vdav.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdav 
	FROM VTRAssignmentFromVocationalDepartments vdav
	INNER JOIN VTDailyReporting vdr ON vdav.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdnv 
	FROM VTRTeachingNonVocationalSubjects vdnv
	INNER JOIN VTDailyReporting vdr ON vdnv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdnv 
	FROM VTRTeachingNonVocationalSubjects vdnv
	INNER JOIN VTDailyReporting vdr ON vdnv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdl 
	FROM VTRLeaves vdl
	INNER JOIN VTDailyReporting vdr ON vdl.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdl 
	FROM VTRLeaves vdl
	INNER JOIN VTDailyReporting vdr ON vdl.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdh 
	FROM VTRHolidays vdh
	INNER JOIN VTDailyReporting vdr ON vdh.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdh 
	FROM VTRHolidays vdh
	INNER JOIN VTDailyReporting vdr ON vdh.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdod 
	FROM VTRObservationDays vdod
	INNER JOIN VTDailyReporting vdr ON vdod.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdod 
	FROM VTRObservationDays vdod
	INNER JOIN VTDailyReporting vdr ON vdod.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdr
	FROM VTDailyReporting vdr
	INNER JOIN VTSchoolSectors vts ON vdr.VTSchoolSectorId = vts.VTSchoolSectorId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdr
	FROM VTDailyReporting vdr
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;
	 
	DELETE vdr
	FROM VTDailyReporting vdr
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdr
	FROM VTDailyReporting vdr WHERE vdr.VTId = accountId;

	
	DELETE vcs
	FROM VTClassSections vcs
	INNER JOIN VTClasses vtc ON vcs.VTClassId = vtc.VTClassId
	INNER JOIN VocationalTrainers vt ON vtc.VTId = vt.VTId
	WHERE vt.VTId = accountId;
	  
	DELETE vtc
	FROM VTClasses vtc
	INNER JOIN VocationalTrainers vt ON vtc.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vtc
	FROM VTClasses vtc WHERE vtc.VTId = accountId;
    
	
    DELETE vssj
	FROM VTSchoolSectorJobRoles vssj
	INNER JOIN VTSchoolSectors vts ON vssj.VTSchoolSectorId = vts.VTSchoolSectorId
    INNER JOIN VocationalTrainers vt ON vts.VTId = vt.VTId
	WHERE vt.VTId = accountId;
    
	DELETE vts
	FROM VTSchoolSectors vts
	INNER JOIN VocationalTrainers vt ON vts.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vts
	FROM VTSchoolSectors vts WHERE vts.VTId = accountId;
	    
	COMMIT; 
	
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteVTDailyReportingDataByVTId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `DeleteVTDailyReportingDataByVTId`(
	IN accountId  VARCHAR(36)	 
	)
BEGIN	
        
	
	DELETE vti 
	FROM VTIssueReporting vti
	INNER JOIN VocationalTrainers vt ON vti.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vti 
	FROM VTIssueReporting vti WHERE vti.VTId = accountId;
	 
	
	DELETE cm 
	FROM CourseMaterials cm
	INNER JOIN VocationalTrainers vt ON cm.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE cm 
	FROM CourseMaterials cm WHERE cm.VTId = accountId;

	
	DELETE te 
	FROM ToolEquipments te
	INNER JOIN VocationalTrainers vt ON te.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE te 
	FROM ToolEquipments te WHERE te.VTId = accountId;

	
	DELETE gls 
	FROM VTGSections gls
	INNER JOIN VTGuestLectureConducted gl ON gls.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE glm 
	FROM VTGMethodologies glm
	INNER JOIN VTGuestLectureConducted gl ON glm.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE glu 
	FROM VTGUnitSessionsTaught glu
	INNER JOIN VTGuestLectureConducted gl ON glu.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE gls 
	FROM VTGStudentAttendances gls
	INNER JOIN VTGuestLectureConducted gl ON gls.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE gl 
	FROM VTGuestLectureConducted gl
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE gl 
	FROM VTGuestLectureConducted gl WHERE gl.VTId = accountId;

	

	DELETE fvs 
	FROM VTFSections fvs
	INNER JOIN VTFieldIndustryVisitConducted fv ON fvs.VTFieldIndustryVisitConductedId = fv.VTFieldIndustryVisitConductedId
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = accountId;
	 
	DELETE fvu 
	FROM VTFUnitSessionsTaught fvu
	INNER JOIN VTFieldIndustryVisitConducted fv ON fvu.VTFieldIndustryVisitConductedId = fv.VTFieldIndustryVisitConductedId
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE fvs 
	FROM VTFStudentAttendances fvs
	INNER JOIN VTFieldIndustryVisitConducted fv ON fvs.VTFieldIndustryVisitConductedId = fv.VTFieldIndustryVisitConductedId
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE fv
	FROM VTFieldIndustryVisitConducted fv
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE fv
	FROM VTFieldIndustryVisitConducted fv WHERE fv.VTId = accountId;

	
	DELETE vdrw
	FROM VTRWorkingDayTypes vdrw
	INNER JOIN VTDailyReporting vdr ON vdrw.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdrw
	FROM VTRWorkingDayTypes vdrw
	INNER JOIN VTDailyReporting vdr ON vdrw.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drcs 
	FROM VTRClassSectionsTaught drcs
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drcs.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drcs 
	FROM VTRClassSectionsTaught drcs
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drcs.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drat 
	FROM VTRActivityTypes drat
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drat.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drat 
	FROM VTRActivityTypes drat
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drat.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drus 
	FROM VTRUnitSessionsTaught drus
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drus.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drus 
	FROM VTRUnitSessionsTaught drus
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drus.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drsa 
	FROM VTRStudentAttendances drsa
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drsa.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drsa 
	FROM VTRStudentAttendances drsa
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drsa.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drnc 
	FROM VTRReasonOfNotConductingTheClasses drnc
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drnc.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drnc 
	FROM VTRReasonOfNotConductingTheClasses drnc
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drnc.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdrt 
	FROM VTRTeachingVocationalEducations vdrt
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdrt 
	FROM VTRTeachingVocationalEducations vdrt
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drtp 
	FROM VTRTrainingTopics drtp
	INNER JOIN VTRTrainingOfTeachers vdtt ON drtp.VTRTrainingOfTeacherId = vdtt.VTRTrainingOfTeacherId
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drtp 
	FROM VTRTrainingTopics drtp
	INNER JOIN VTRTrainingOfTeachers vdtt ON drtp.VTRTrainingOfTeacherId = vdtt.VTRTrainingOfTeacherId
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdtt 
	FROM VTRTrainingOfTeachers vdtt
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdtt 
	FROM VTRTrainingOfTeachers vdtt
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdjt 
	FROM VTROnJobTrainingCoordinations vdjt
	INNER JOIN VTDailyReporting vdr ON vdjt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdjt 
	FROM VTROnJobTrainingCoordinations vdjt
	INNER JOIN VTDailyReporting vdr ON vdjt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdas 
	FROM VTRAssessorInOtherSchoolForExams vdas
	INNER JOIN VTDailyReporting vdr ON vdas.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdas 
	FROM VTRAssessorInOtherSchoolForExams vdas
	INNER JOIN VTDailyReporting vdr ON vdas.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdpt 
	FROM VTRParentTeachersMeetings vdpt
	INNER JOIN VTDailyReporting vdr ON vdpt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdpt 
	FROM VTRParentTeachersMeetings vdpt
	INNER JOIN VTDailyReporting vdr ON vdpt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdhv 
	FROM VTRCommunityHomeVisits vdhv
	INNER JOIN VTDailyReporting vdr ON vdhv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdhv 
	FROM VTRCommunityHomeVisits vdhv
	INNER JOIN VTDailyReporting vdr ON vdhv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdvi 
	FROM VTRVisitToIndustries vdvi
	INNER JOIN VTDailyReporting vdr ON vdvi.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdvi 
	FROM VTRVisitToIndustries vdvi
	INNER JOIN VTDailyReporting vdr ON vdvi.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdve 
	FROM VTRVisitToEducationalInstitutions vdve
	INNER JOIN VTDailyReporting vdr ON vdve.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdve 
	FROM VTRVisitToEducationalInstitutions vdve
	INNER JOIN VTDailyReporting vdr ON vdve.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdav 
	FROM VTRAssignmentFromVocationalDepartments vdav
	INNER JOIN VTDailyReporting vdr ON vdav.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdav 
	FROM VTRAssignmentFromVocationalDepartments vdav
	INNER JOIN VTDailyReporting vdr ON vdav.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdnv 
	FROM VTRTeachingNonVocationalSubjects vdnv
	INNER JOIN VTDailyReporting vdr ON vdnv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdnv 
	FROM VTRTeachingNonVocationalSubjects vdnv
	INNER JOIN VTDailyReporting vdr ON vdnv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdl 
	FROM VTRLeaves vdl
	INNER JOIN VTDailyReporting vdr ON vdl.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdl 
	FROM VTRLeaves vdl
	INNER JOIN VTDailyReporting vdr ON vdl.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdh 
	FROM VTRHolidays vdh
	INNER JOIN VTDailyReporting vdr ON vdh.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdh 
	FROM VTRHolidays vdh
	INNER JOIN VTDailyReporting vdr ON vdh.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdod 
	FROM VTRObservationDays vdod
	INNER JOIN VTDailyReporting vdr ON vdod.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdod 
	FROM VTRObservationDays vdod
	INNER JOIN VTDailyReporting vdr ON vdod.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdr
	FROM VTDailyReporting vdr
	INNER JOIN VTSchoolSectors vts ON vdr.VTSchoolSectorId = vts.VTSchoolSectorId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdr
	FROM VTDailyReporting vdr
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;
	 
	DELETE vdr
	FROM VTDailyReporting vdr
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdr
	FROM VTDailyReporting vdr WHERE vdr.VTId = accountId;
	 
	COMMIT; 
	
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteVTTransactionBySchoolId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `DeleteVTTransactionBySchoolId`(
	IN schoolId VARCHAR(36)	 
	)
BEGIN	
	START TRANSACTION;        
    
	
	DELETE vci 
	FROM VCIssueReporting vci
	INNER JOIN VCSchoolSectors vcss ON vci.VCSchoolSectorId = vcss.VCSchoolSectorId
    INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
    INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
	WHERE s.schoolId = schoolId;
	 	 
	
	
	DELETE vcsv 
	FROM VCRSchoolVisits vcsv
	INNER JOIN VCDailyReporting vcdr  ON vcsv.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vch 
	FROM VCRHolidays vch
	INNER JOIN VCDailyReporting vcdr  ON vch.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vcl 
	FROM VCRLeaves vcl
	INNER JOIN VCDailyReporting vcdr  ON vcl.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vciv 
	FROM VCRIndustryExposureVisits vciv
	INNER JOIN VCDailyReporting vcdr  ON vciv.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vcwt 
	FROM VCRWorkingDayTypes vcwt
	INNER JOIN VCDailyReporting vcdr  ON vcwt.VCDailyReportingId = vcdr.VCDailyReportingId
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	
	DELETE vcdr 
	FROM VCDailyReporting vcdr 
	INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;
	
    
    DELETE vcss 
	FROM VCSchoolSectors vcss 	
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;

	 
    DELETE svs 
	FROM SchoolVTPSectors svs 	
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 0
    WHERE s.schoolId = schoolId;
    
	COMMIT; 
	
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteVTTransactionByVTId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `DeleteVTTransactionByVTId`(
	IN accountId  VARCHAR(36)	 
	)
BEGIN
	START TRANSACTION;
     
	
	DELETE cm 
	FROM CourseMaterials cm
	INNER JOIN VocationalTrainers vt ON cm.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE cm 
	FROM CourseMaterials cm WHERE cm.VTId = accountId;    
  
	
	DELETE te 
	FROM ToolEquipments te
	INNER JOIN VocationalTrainers vt ON te.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE te 
	FROM ToolEquipments te WHERE te.VTId = accountId;
    
	
	DELETE vti 
	FROM VTIssueReporting vti
	INNER JOIN VocationalTrainers vt ON vti.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vti 
	FROM VTIssueReporting vti WHERE vti.VTId = accountId;	
     
	
	DELETE vts
	FROM VTClassStudents vts
	INNER JOIN StudentClasses sc ON vts.VTId = sc.VTId AND vts.StudentId = sc.StudentId
	WHERE sc.VTId = accountId;

	
	DELETE gls 
	FROM VTGSections gls
	INNER JOIN VTGuestLectureConducted gl ON gls.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE glm 
	FROM VTGMethodologies glm
	INNER JOIN VTGuestLectureConducted gl ON glm.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE glu 
	FROM VTGUnitSessionsTaught glu
	INNER JOIN VTGuestLectureConducted gl ON glu.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE gls 
	FROM VTGStudentAttendances gls
	INNER JOIN VTGuestLectureConducted gl ON gls.VTGuestLectureId = gl.VTGuestLectureId
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE gl 
	FROM VTGuestLectureConducted gl
	INNER JOIN VocationalTrainers vt ON gl.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE gl 
	FROM VTGuestLectureConducted gl WHERE gl.VTId = accountId;

	

	DELETE fvs 
	FROM VTFSections fvs
	INNER JOIN VTFieldIndustryVisitConducted fv ON fvs.VTFieldIndustryVisitConductedId = fv.VTFieldIndustryVisitConductedId
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = accountId;
	 
	DELETE fvu 
	FROM VTFUnitSessionsTaught fvu
	INNER JOIN VTFieldIndustryVisitConducted fv ON fvu.VTFieldIndustryVisitConductedId = fv.VTFieldIndustryVisitConductedId
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE fvs 
	FROM VTFStudentAttendances fvs
	INNER JOIN VTFieldIndustryVisitConducted fv ON fvs.VTFieldIndustryVisitConductedId = fv.VTFieldIndustryVisitConductedId
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE fv
	FROM VTFieldIndustryVisitConducted fv
	INNER JOIN VocationalTrainers vt ON fv.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE fv
	FROM VTFieldIndustryVisitConducted fv WHERE fv.VTId = accountId;

	
	DELETE vdrw
	FROM VTRWorkingDayTypes vdrw
	INNER JOIN VTDailyReporting vdr ON vdrw.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdrw
	FROM VTRWorkingDayTypes vdrw
	INNER JOIN VTDailyReporting vdr ON vdrw.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drcs 
	FROM VTRClassSectionsTaught drcs
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drcs.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drcs 
	FROM VTRClassSectionsTaught drcs
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drcs.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drat 
	FROM VTRActivityTypes drat
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drat.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drat 
	FROM VTRActivityTypes drat
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drat.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drus 
	FROM VTRUnitSessionsTaught drus
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drus.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drus 
	FROM VTRUnitSessionsTaught drus
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drus.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drsa 
	FROM VTRStudentAttendances drsa
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drsa.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drsa 
	FROM VTRStudentAttendances drsa
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drsa.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drnc 
	FROM VTRReasonOfNotConductingTheClasses drnc
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drnc.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drnc 
	FROM VTRReasonOfNotConductingTheClasses drnc
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drnc.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdrt 
	FROM VTRTeachingVocationalEducations vdrt
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdrt 
	FROM VTRTeachingVocationalEducations vdrt
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE drtp 
	FROM VTRTrainingTopics drtp
	INNER JOIN VTRTrainingOfTeachers vdtt ON drtp.VTRTrainingOfTeacherId = vdtt.VTRTrainingOfTeacherId
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE drtp 
	FROM VTRTrainingTopics drtp
	INNER JOIN VTRTrainingOfTeachers vdtt ON drtp.VTRTrainingOfTeacherId = vdtt.VTRTrainingOfTeacherId
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdtt 
	FROM VTRTrainingOfTeachers vdtt
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdtt 
	FROM VTRTrainingOfTeachers vdtt
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdjt 
	FROM VTROnJobTrainingCoordinations vdjt
	INNER JOIN VTDailyReporting vdr ON vdjt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdjt 
	FROM VTROnJobTrainingCoordinations vdjt
	INNER JOIN VTDailyReporting vdr ON vdjt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdas 
	FROM VTRAssessorInOtherSchoolForExams vdas
	INNER JOIN VTDailyReporting vdr ON vdas.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdas 
	FROM VTRAssessorInOtherSchoolForExams vdas
	INNER JOIN VTDailyReporting vdr ON vdas.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdpt 
	FROM VTRParentTeachersMeetings vdpt
	INNER JOIN VTDailyReporting vdr ON vdpt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdpt 
	FROM VTRParentTeachersMeetings vdpt
	INNER JOIN VTDailyReporting vdr ON vdpt.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdhv 
	FROM VTRCommunityHomeVisits vdhv
	INNER JOIN VTDailyReporting vdr ON vdhv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdhv 
	FROM VTRCommunityHomeVisits vdhv
	INNER JOIN VTDailyReporting vdr ON vdhv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdvi 
	FROM VTRVisitToIndustries vdvi
	INNER JOIN VTDailyReporting vdr ON vdvi.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdvi 
	FROM VTRVisitToIndustries vdvi
	INNER JOIN VTDailyReporting vdr ON vdvi.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdve 
	FROM VTRVisitToEducationalInstitutions vdve
	INNER JOIN VTDailyReporting vdr ON vdve.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdve 
	FROM VTRVisitToEducationalInstitutions vdve
	INNER JOIN VTDailyReporting vdr ON vdve.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdav 
	FROM VTRAssignmentFromVocationalDepartments vdav
	INNER JOIN VTDailyReporting vdr ON vdav.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdav 
	FROM VTRAssignmentFromVocationalDepartments vdav
	INNER JOIN VTDailyReporting vdr ON vdav.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdnv 
	FROM VTRTeachingNonVocationalSubjects vdnv
	INNER JOIN VTDailyReporting vdr ON vdnv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdnv 
	FROM VTRTeachingNonVocationalSubjects vdnv
	INNER JOIN VTDailyReporting vdr ON vdnv.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdl 
	FROM VTRLeaves vdl
	INNER JOIN VTDailyReporting vdr ON vdl.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdl 
	FROM VTRLeaves vdl
	INNER JOIN VTDailyReporting vdr ON vdl.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdh 
	FROM VTRHolidays vdh
	INNER JOIN VTDailyReporting vdr ON vdh.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdh 
	FROM VTRHolidays vdh
	INNER JOIN VTDailyReporting vdr ON vdh.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdod 
	FROM VTRObservationDays vdod
	INNER JOIN VTDailyReporting vdr ON vdod.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdod 
	FROM VTRObservationDays vdod
	INNER JOIN VTDailyReporting vdr ON vdod.VTDailyReportingId = vdr.VTDailyReportingId
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;

	DELETE vdr
	FROM VTDailyReporting vdr
	INNER JOIN VTSchoolSectors vts ON vdr.VTSchoolSectorId = vts.VTSchoolSectorId
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdr
	FROM VTDailyReporting vdr
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
	WHERE vss.VTId = accountId;
	 
	DELETE vdr
	FROM VTDailyReporting vdr
	INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vdr
	FROM VTDailyReporting vdr WHERE vdr.VTId = accountId;

	
	DELETE vcs
	FROM VTClassSections vcs
	INNER JOIN VTClasses vtc ON vcs.VTClassId = vtc.VTClassId
	INNER JOIN VocationalTrainers vt ON vtc.VTId = vt.VTId
	WHERE vt.VTId = accountId;
	  
	DELETE vtc
	FROM VTClasses vtc
	INNER JOIN VocationalTrainers vt ON vtc.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vtc
	FROM VTClasses vtc WHERE vtc.VTId = accountId;
    
	
    DELETE vssj
	FROM VTSchoolSectorJobRoles vssj
	INNER JOIN VTSchoolSectors vts ON vssj.VTSchoolSectorId = vts.VTSchoolSectorId
    INNER JOIN VocationalTrainers vt ON vts.VTId = vt.VTId
	WHERE vt.VTId = accountId;
    
	DELETE vts
	FROM VTSchoolSectors vts
	INNER JOIN VocationalTrainers vt ON vts.VTId = vt.VTId
	WHERE vt.VTId = accountId;

	DELETE vts
	FROM VTSchoolSectors vts WHERE vts.VTId = accountId;
	    
	COMMIT; 
	
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteVTTransactionsByDate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `DeleteVTTransactionsByDate`(ReportingDate DATE)
BEGIN		
	
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
        
    START TRANSACTION;
    
	
	DELETE gls
	FROM VTGSections gls
	INNER JOIN VTGuestLectureConducted glc ON gls.VTGuestLectureId = glc.VTGuestLectureId
	WHERE DATE(glc.ReportingDate) = ReportingDate;

	DELETE glm
	FROM VTGMethodologies glm
	INNER JOIN VTGuestLectureConducted glc ON glm.VTGuestLectureId = glc.VTGuestLectureId
	WHERE DATE(glc.ReportingDate) = ReportingDate;

	DELETE glu
	FROM VTGUnitSessionsTaught glu
	INNER JOIN VTGuestLectureConducted glc ON glu.VTGuestLectureId = glc.VTGuestLectureId
	WHERE DATE(glc.ReportingDate) = ReportingDate;

	DELETE gls
	FROM VTGStudentAttendances gls
	INNER JOIN VTGuestLectureConducted glc ON gls.VTGuestLectureId = glc.VTGuestLectureId
	WHERE DATE(glc.ReportingDate) = ReportingDate;

	DELETE glc
	FROM VTGuestLectureConducted glc
	WHERE DATE(glc.ReportingDate) = ReportingDate;
	 
	
	DELETE fvs 
	FROM VTFSections fvs
	INNER JOIN VTFieldIndustryVisitConducted fvc ON fvs.VTFieldIndustryVisitConductedId = fvc.VTFieldIndustryVisitConductedId
	WHERE DATE(fvc.ReportingDate) = ReportingDate;
	 
	DELETE fvu 
	FROM VTFUnitSessionsTaught fvu
	INNER JOIN VTFieldIndustryVisitConducted fvc ON fvu.VTFieldIndustryVisitConductedId = fvc.VTFieldIndustryVisitConductedId
	WHERE DATE(fvc.ReportingDate) = ReportingDate;

	DELETE fvs 
	FROM VTFStudentAttendances fvs
	INNER JOIN VTFieldIndustryVisitConducted fvc ON fvs.VTFieldIndustryVisitConductedId = fvc.VTFieldIndustryVisitConductedId
	WHERE DATE(fvc.ReportingDate) = ReportingDate;

	DELETE fvc
	FROM VTFieldIndustryVisitConducted fvc
	WHERE DATE(fvc.ReportingDate) = ReportingDate;

	
	DELETE vdrw
	FROM VTRWorkingDayTypes vdrw
	INNER JOIN VTDailyReporting vdr ON vdrw.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdrw
	FROM VTRWorkingDayTypes vdrw
	INNER JOIN VTDailyReporting vdr ON vdrw.VTDailyReportingId = vdr.VTDailyReportingId	
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE drcs 
	FROM VTRClassSectionsTaught drcs
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drcs.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE drcs 
	FROM VTRClassSectionsTaught drcs
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drcs.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE drat 
	FROM VTRActivityTypes drat
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drat.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE drat 
	FROM VTRActivityTypes drat
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drat.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE drus 
	FROM VTRUnitSessionsTaught drus
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drus.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE drus 
	FROM VTRUnitSessionsTaught drus
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drus.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE drsa 
	FROM VTRStudentAttendances drsa
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drsa.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE drsa 
	FROM VTRStudentAttendances drsa
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drsa.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE drnc 
	FROM VTRReasonOfNotConductingTheClasses drnc
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drnc.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE drnc 
	FROM VTRReasonOfNotConductingTheClasses drnc
	INNER JOIN VTRTeachingVocationalEducations vdrt ON drnc.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdrt 
	FROM VTRTeachingVocationalEducations vdrt
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdrt 
	FROM VTRTeachingVocationalEducations vdrt
	INNER JOIN VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE drtp 
	FROM VTRTrainingTopics drtp
	INNER JOIN VTRTrainingOfTeachers vdtt ON drtp.VTRTrainingOfTeacherId = vdtt.VTRTrainingOfTeacherId
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE drtp 
	FROM VTRTrainingTopics drtp
	INNER JOIN VTRTrainingOfTeachers vdtt ON drtp.VTRTrainingOfTeacherId = vdtt.VTRTrainingOfTeacherId
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdtt 
	FROM VTRTrainingOfTeachers vdtt
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdtt 
	FROM VTRTrainingOfTeachers vdtt
	INNER JOIN VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdjt 
	FROM VTROnJobTrainingCoordinations vdjt
	INNER JOIN VTDailyReporting vdr ON vdjt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdjt 
	FROM VTROnJobTrainingCoordinations vdjt
	INNER JOIN VTDailyReporting vdr ON vdjt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdas 
	FROM VTRAssessorInOtherSchoolForExams vdas
	INNER JOIN VTDailyReporting vdr ON vdas.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdas 
	FROM VTRAssessorInOtherSchoolForExams vdas
	INNER JOIN VTDailyReporting vdr ON vdas.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdpt 
	FROM VTRParentTeachersMeetings vdpt
	INNER JOIN VTDailyReporting vdr ON vdpt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdpt 
	FROM VTRParentTeachersMeetings vdpt
	INNER JOIN VTDailyReporting vdr ON vdpt.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdhv 
	FROM VTRCommunityHomeVisits vdhv
	INNER JOIN VTDailyReporting vdr ON vdhv.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdhv 
	FROM VTRCommunityHomeVisits vdhv
	INNER JOIN VTDailyReporting vdr ON vdhv.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdvi 
	FROM VTRVisitToIndustries vdvi
	INNER JOIN VTDailyReporting vdr ON vdvi.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdvi 
	FROM VTRVisitToIndustries vdvi
	INNER JOIN VTDailyReporting vdr ON vdvi.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdve 
	FROM VTRVisitToEducationalInstitutions vdve
	INNER JOIN VTDailyReporting vdr ON vdve.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdve 
	FROM VTRVisitToEducationalInstitutions vdve
	INNER JOIN VTDailyReporting vdr ON vdve.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdav 
	FROM VTRAssignmentFromVocationalDepartments vdav
	INNER JOIN VTDailyReporting vdr ON vdav.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdav 
	FROM VTRAssignmentFromVocationalDepartments vdav
	INNER JOIN VTDailyReporting vdr ON vdav.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdnv 
	FROM VTRTeachingNonVocationalSubjects vdnv
	INNER JOIN VTDailyReporting vdr ON vdnv.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdnv 
	FROM VTRTeachingNonVocationalSubjects vdnv
	INNER JOIN VTDailyReporting vdr ON vdnv.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdl 
	FROM VTRLeaves vdl
	INNER JOIN VTDailyReporting vdr ON vdl.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdl 
	FROM VTRLeaves vdl
	INNER JOIN VTDailyReporting vdr ON vdl.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdh 
	FROM VTRHolidays vdh
	INNER JOIN VTDailyReporting vdr ON vdh.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdh 
	FROM VTRHolidays vdh
	INNER JOIN VTDailyReporting vdr ON vdh.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdod 
	FROM VTRObservationDays vdod
	INNER JOIN VTDailyReporting vdr ON vdod.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdod 
	FROM VTRObservationDays vdod
	INNER JOIN VTDailyReporting vdr ON vdod.VTDailyReportingId = vdr.VTDailyReportingId
	WHERE DATE(vdr.ReportingDate) = ReportingDate;

	DELETE vdr
	FROM VTDailyReporting vdr
	WHERE DATE(vdr.ReportingDate) = ReportingDate;
	 
	COMMIT; 
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ExecuteDashboardJobs` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `ExecuteDashboardJobs`(
	IN SyncData DATE
)
BEGIN
	DECLARE JobName VARCHAR(300);    
    SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	CALL GenSchoolsDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', SyncData);
	SET JobName = 'Schools, ';
    
	CALL GenTrainersDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', SyncData);
	SET JobName = CONCAT(JobName, 'Trainers, ');

	CALL GenClassesDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', SyncData);
	SET JobName = CONCAT(JobName, 'Classes, ');
    
	CALL GenStudentsDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', SyncData);
	SET JobName = CONCAT(JobName, 'Students, ');
    
	CALL GenSchoolClassesDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', SyncData);
	SET JobName = CONCAT(JobName, 'SchoolClasses, ');
    
	CALL GenCourseMaterialDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', SyncData);
	SET JobName = CONCAT(JobName, 'CourseMaterials, ');
    
	CALL GenSectorJobRoleDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', SyncData);
	SET JobName = CONCAT(JobName, 'SectorJobRoles, ');
    
	CALL GenToolsAndEquipmentDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', SyncData);
	SET JobName = CONCAT(JobName, 'ToolsAndEquipments, ');
    
	CALL GenFieldVisitDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', SyncData);
	SET JobName = CONCAT(JobName, 'FieldVisits, ');
    
	CALL GenGuestLectureDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', SyncData);
	SET JobName = CONCAT(JobName, 'GuestLectures, ');
    
	CALL GenTrainerAttendanceDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', SyncData);
	SET JobName = CONCAT(JobName, 'TrainerAttendances, ');
    
	CALL GenCoordinatorAttendanceDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', SyncData);
	SET JobName = CONCAT(JobName, 'CoordinatorAttendances, ');
    
	CALL GenStudentAttendanceDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', SyncData);
	SET JobName = CONCAT(JobName, 'StudentAttendances, ');
    
    SELECT JobName;
    
    SELECT COUNT(1) AS Schools FROM DsSchools WHERE DATE(CreatedOn) = SyncData;
    SELECT COUNT(1) AS Trainers FROM DsTrainers WHERE DATE(CreatedOn) = SyncData;
    SELECT COUNT(1) AS Classes FROM DsClasses WHERE DATE(CreatedOn) = SyncData;
    SELECT COUNT(1) AS Students FROM DsStudents WHERE DATE(CreatedOn) = SyncData;
    SELECT COUNT(1) AS SchoolClasses FROM DsSchoolClasses WHERE DATE(CreatedOn) = SyncData;
    SELECT COUNT(1) AS CourseMaterials FROM DsCourseMaterials WHERE DATE(CreatedOn) = SyncData;
    SELECT COUNT(1) AS SectorJobRoles FROM DsSectorJobRoles WHERE DATE(CreatedOn) = SyncData;
    SELECT COUNT(1) AS ToolsAndEquipments FROM DsToolsAndEquipments WHERE DATE(CreatedOn) = SyncData;
    SELECT COUNT(1) AS FieldVisits FROM DsFieldVisits WHERE DATE(CreatedOn) = SyncData;
    SELECT COUNT(1) AS GuestLectures FROM DsGuestLectures WHERE DATE(CreatedOn) = SyncData;
    SELECT COUNT(1) AS TrainerAttendances FROM DsTrainerAttendances WHERE DATE(CreatedOn) = SyncData;
    SELECT COUNT(1) AS CoordinatorAttendances FROM DsCoordinatorAttendances WHERE DATE(CreatedOn) = SyncData;
    SELECT COUNT(1) AS StudentAttendances FROM DsStudentAttendances WHERE DATE(CreatedOn) = SyncData;
    
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenClassesData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenClassesData`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
        
	START TRANSACTION;
    
	DELETE FROM DsClasses dc WHERE dc.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'Classes' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsClasses (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, TotalClasses, Class9, Class10, Class11, Class12, VCId, ClassId, JobRoleId, CreatedOn)
    SELECT svs.AcademicYearId, svs.VTPId, svs.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId,  
		COUNT(DISTINCT vtc.SchoolId, vtc.VTClassId) AS Total,
		COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = 'ef71e220-ed0a-4cec-a5b0-e06325d3dbf4', vtc.VTClassId, NULL)) AS Class9,
		COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', vtc.VTClassId, NULL)) AS Class10,
		COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = '69257ab5-e836-46f1-b888-dfae5da5489c', vtc.VTClassId, NULL)) AS Class11,
		COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = 'e0302e36-a8a7-49a0-b621-21d48986c43e', vtc.VTClassId, NULL)) AS Class12,
        vt.VCId, vtc.ClassId, vtss.JobRoleId, NOW()
	FROM SchoolVTPSectors svs
	INNER JOIN VTPSectors vs ON svs.VTPId = vs.VTPId AND svs.SectorId = vs.SectorId AND vs.IsActive = 1
	INNER JOIN VCSchoolSectors vcss ON svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1
	INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND svs.VTPId = vc.VTPId AND vc.IsActive = 1
	INNER JOIN VocationalTrainers vt ON vc.VCId = vt.VCId AND vc.VTPId = vt.VTPId AND vt.IsActive = 1
	INNER JOIN VTSchoolSectors vtss ON svs.SchoolId = vtss.SchoolId AND svs.SectorId = vtss.SectorId AND vt.VTId = vtss.VTId AND vtss.IsActive = 1
	INNER JOIN VTClasses vtc ON vtss.SchoolId = vtc.SchoolId AND vtss.VTId = vtc.VTId AND vtc.IsActive = 1
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1         
	WHERE svs.IsActive = 1    
		AND (AcademicYearId IS NULL OR svs.AcademicYearId = AcademicYearId) 	        
    GROUP BY svs.AcademicYearId, svs.VTPId, svs.SectorId, vtc.SchoolId, s.DivisionId, s.DistrictCode, s.SchoolManagementId;
    
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'Classes', @AffectedRows, NOW();
    
    COMMIT WORK;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenClassesDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GenClassesDataV2`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
        
		ROLLBACK;
    END;
        
	START TRANSACTION;
    
	DELETE FROM DsClasses dc WHERE dc.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'Classes' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsClasses (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, TotalClasses, Class9, Class10, Class11, Class12, VCId, ClassId, JobRoleId, CreatedOn)
    SELECT svs.AcademicYearId, svs.VTPId, svs.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId,  
		COUNT(DISTINCT vtc.SchoolId, vtc.VTClassId) AS Total,
		COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = 'ef71e220-ed0a-4cec-a5b0-e06325d3dbf4', vtc.VTClassId, NULL)) AS Class9,
		COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', vtc.VTClassId, NULL)) AS Class10,
		COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = '69257ab5-e836-46f1-b888-dfae5da5489c', vtc.VTClassId, NULL)) AS Class11,
		COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = 'e0302e36-a8a7-49a0-b621-21d48986c43e', vtc.VTClassId, NULL)) AS Class12,
        vtm.VCId, vtc.ClassId, vtss.JobRoleId, NOW()
	FROM SchoolVTPSectors svs
	INNER JOIN VTPSectors vs ON svs.AcademicYearId = vs.AcademicYearId AND svs.VTPId = vs.VTPId AND svs.SectorId = vs.SectorId AND vs.IsActive = 1
	INNER JOIN VCSchoolSectors vcss ON vcss.AcademicYearId = vs.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1
    INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND svs.VTPId = vcm.VTPId AND vcm.IsActive = 1 		
    INNER JOIN VCTrainersMap vtm ON vcm.AcademicYearId = vtm.AcademicYearId AND vcm.VCId = vtm.VCId AND vcm.VTPId = vtm.VTPId AND vtm.IsActive = 1 
	INNER JOIN VTSchoolSectors vtss ON svs.AcademicYearId = vtss.AcademicYearId AND svs.SchoolId = vtss.SchoolId AND svs.SectorId = vtss.SectorId AND vtm.VTId = vtss.VTId AND vtss.IsActive = 1
	INNER JOIN VTClasses vtc ON vtss.AcademicYearId = vtc.AcademicYearId AND vtss.SchoolId = vtc.SchoolId AND vtss.VTId = vtc.VTId AND vtc.IsActive = 1
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1         
	WHERE svs.IsActive = 1    
		AND (AcademicYearId IS NULL OR svs.AcademicYearId = AcademicYearId) 	        
    GROUP BY svs.AcademicYearId, svs.VTPId, svs.SectorId, vtc.SchoolId, s.DivisionId, s.DistrictCode, s.SchoolManagementId;
    
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'Classes', @AffectedRows, NOW();
    
    COMMIT WORK;
    # CALL GenClassesDataV2 ('fda59df6-729e-493c-8d48-fc65b90008fe', CAST('2022/04/12 00:00:00' AS DATE));
    # CALL GenClassesDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', CAST('2022/11/30 00:00:00' AS DATE));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenCoordinatorAttendanceData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenCoordinatorAttendanceData`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
	DECLARE vcIndex INT DEFAULT 1;
    DECLARE vcCount INT DEFAULT 0;
    DECLARE vcAttendanceCount INT DEFAULT 0;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;

	DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'CoordinatorAttendances' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	DROP TEMPORARY TABLE IF EXISTS  VCSchools;    
    
    CREATE TEMPORARY TABLE VCSchools
    SELECT ROW_NUMBER() OVER (ORDER BY v.VCId) AS RowIndex, v.VCId, v.SchoolId, v.SectorId
    FROM (
		SELECT DISTINCT vss.VCId, svs.SchoolId, svs.SectorId
		FROM VCSchoolSectors vss
        INNER JOIN SchoolVTPSectors svs ON vss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
        WHERE vss.AcademicYearId = AcademicYearId 
			
    ) AS v;
	
    SET vcCount = (SELECT COUNT(*) FROM VCSchools);
    
    WHILE vcIndex <= vcCount DO		
        SELECT VCId INTO @coordinatorId FROM VCSchools WHERE RowIndex = vcIndex;
        
		START TRANSACTION;
		
		DELETE FROM DsCoordinatorAttendances 
		WHERE AcademicYearId = AcademicYearId 
			AND VCId = @coordinatorId
			AND DATE(ReportingMonth) BETWEEN DATE_FORMAT(ReportDate ,'%Y-%m-01') AND ReportDate;
		
		INSERT INTO DsCoordinatorAttendances (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, VCSchoolSectorId, SchoolId, VCId, ReportingMonth, VCReporting, WorkingDays, CreatedOn)
		SELECT DISTINCT svs.AcademicYearId, svs.VTPId, svs.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, 
			vss.VCSchoolSectorId, svs.SchoolId, vdr.VCId, DATE_FORMAT(vdr.ReportDate, '%Y/%m/01') AS ReportingMonth, 
			COUNT(DISTINCT VCDailyReportingId) AS VCReportingCount, (DAY(LAST_DAY(vdr.ReportDate)) - GetNoOfSunday(vdr.ReportDate)) AS TotalWorkingDays,
			NOW()
		FROM VCDailyReporting vdr
		INNER JOIN VCSchoolSectors vss ON vdr.VCSchoolSectorId = vss.VCSchoolSectorId
        INNER JOIN SchoolVTPSectors svs ON vss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
		INNER JOIN AcademicYears ay ON svs.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1		
        INNER JOIN Schools s ON svs.SchoolId = s.SchoolId
		WHERE vdr.IsActive = 1 AND vdr.ReportType = '49' 
			AND vss.AcademicYearId = AcademicYearId
			AND (DATE(vdr.ReportDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth))			
			AND MONTH(vdr.ReportDate) = MONTH(ReportDate)
			
			AND vdr.VCId = @coordinatorId
		GROUP BY svs.AcademicYearId, svs.VTPId, svs.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, vss.VCSchoolSectorId, svs.SchoolId, vdr.VCId, ReportingMonth;

		SET vcAttendanceCount = vcAttendanceCount + ROW_COUNT();
		COMMIT WORK;
		SET vcIndex = vcIndex + 1;        
    END WHILE;
        
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'CoordinatorAttendances', vcAttendanceCount, NOW();
    
    
    
    
    
    
    
    
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenCoordinatorAttendanceDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GenCoordinatorAttendanceDataV2`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
	DECLARE vcIndex INT DEFAULT 1;
    DECLARE vcCount INT DEFAULT 0;
        
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
        GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
        
		ROLLBACK;
    END;

	DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'CoordinatorAttendances' AND DATE_FORMAT(dm.ReportDate, '%Y/%m/01') = DATE_FORMAT(ReportDate, '%Y/%m/01');

	DROP TEMPORARY TABLE IF EXISTS  VCSchools;    
    
    CREATE TEMPORARY TABLE VCSchools
    SELECT ROW_NUMBER() OVER (ORDER BY v.VCId) AS RowIndex, v.VCId#, v.SchoolId, v.SectorId
    FROM (
		SELECT DISTINCT vss.VCId#, svs.SchoolId, svs.SectorId
		FROM VCSchoolSectors vss
        INNER JOIN SchoolVTPSectors svs ON vss.AcademicYearId = svs.AcademicYearId AND vss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
        WHERE vss.AcademicYearId = AcademicYearId AND vss.IsActive = 1       
			#AND vss.VCId = '426e89d4-b502-4e51-a153-2c26d0ba75ae'
    ) AS v;
	
    SET vcCount = (SELECT COUNT(*) FROM VCSchools);
	
    WHILE vcIndex <= vcCount DO		
        SELECT VCId INTO @coordinatorId FROM VCSchools WHERE RowIndex = vcIndex;
        
		START TRANSACTION;

		DELETE ca
        FROM DsCoordinatorAttendances ca 
		WHERE ca.AcademicYearId = AcademicYearId 
			AND ca.VCId = @coordinatorId
			AND DATE_FORMAT(ca.ReportingMonth, '%Y/%m/01') = DATE_FORMAT(ReportDate, '%Y/%m/01');
         
		INSERT INTO DsCoordinatorAttendances (AcademicYearId, VTPId, VCId, ReportingMonth, VCReporting, WorkingDays, CreatedOn, SectorId, DivisionId, DistrictId, SchoolManagementId, VCSchoolSectorId, SchoolId)
        SELECT DISTINCT svs.AcademicYearId, svs.VTPId, vcss.VCId, DATE_FORMAT(vdr.ReportDate, '%Y/%m/01') AS ReportingMonth, 
			COUNT(DISTINCT DATE(vdr.ReportDate)) AS VCReportingCount, (DAY(LAST_DAY(vdr.ReportDate)) - GetNoOfSunday(vdr.ReportDate)) AS TotalWorkingDays, NOW(),
            NULL AS SectorId, NULL AS DivisionId, NULL AS DistrictCode, NULL AS SchoolManagementId, NULL AS VCSchoolSectorId, NULL AS SchoolId
		FROM VCSchoolSectors vcss
		INNER JOIN SchoolVTPSectors svs ON vcss.AcademicYearId = svs.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
		INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1
		INNER JOIN AcademicYears ay ON svs.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1		
		LEFT JOIN VCDailyReporting vdr ON vcss.VCId = vdr.VCId AND vdr.ReportType = '49' 
		WHERE vcss.IsActive = 1 
			AND vcss.AcademicYearId = AcademicYearId
			AND (DATE(vdr.ReportDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth))
			AND MONTH(vdr.ReportDate) = MONTH(ReportDate)			
			AND vdr.VCId = @coordinatorId
		GROUP BY svs.AcademicYearId, svs.VTPId, vcss.VCId, ReportingMonth;
        
		COMMIT WORK;
		SET vcIndex = vcIndex + 1;        
    END WHILE;
        
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'CoordinatorAttendances', vcCount, NOW();
    
    # CALL GenCoordinatorAttendanceDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', CAST('2022-08-15 00:00:00' AS DATE));
    # CALL GenCoordinatorAttendanceDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', CAST('2022-06-20 00:00:00' AS DATE));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenCourseMaterialData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenCourseMaterialData`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
        
	START TRANSACTION;
    	
    DELETE FROM DsCourseMaterials dc WHERE dc.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'CourseMaterials' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsCourseMaterials (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, VTClassId, CourseMaterialId, CMClassId, ReceiptDate, CMStatus, VCId, ClassId, JobRoleId, CreatedOn)
	SELECT DISTINCT vtc.AcademicYearId, vt.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, vtc.VTClassId, cm.CourseMaterialId, cm.ClassId AS CMClassId, cm.ReceiptDate, cm.CMStatus, vt.VCId, vtc.ClassId, vss.JobRoleId, NOW() 
	FROM CourseMaterials cm
	INNER JOIN VTClasses vtc ON cm.ClassId = vtc.VTClassId AND vtc.IsActive = 1
	INNER JOIN AcademicYears ay ON vtc.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	
	INNER JOIN VocationalTrainers vt ON cm.VTId = vt.VTId AND vt.IsActive = 1
	INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId AND vc.IsActive = 1
	INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1    	
	INNER JOIN Schools s ON vtc.SchoolId = s.SchoolId AND vtc.IsActive = 1    
	INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1	
	INNER JOIN SchoolClasses scs ON vtc.ClassId = scs.ClassId
	INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
	INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode
	INNER JOIN Phases ph ON ay.PhaseId = ph.PhaseId
	INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 	
	LEFT JOIN HeadMasters hm ON s.SchoolId = hm.SchoolId AND hm.IsActive = 1     
	LEFT JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1			
	LEFT JOIN Sectors se ON vss.SectorId = se.SectorId
	LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId	AND vss.JobRoleId = jr.JobRoleId	
	WHERE cm.IsActive = 1
		AND AcademicYearId IS NULL OR vtc.AcademicYearId = AcademicYearId;
        
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'CourseMaterials', @AffectedRows, NOW();
    
    COMMIT WORK;	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenCourseMaterialDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenCourseMaterialDataV2`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
        
		ROLLBACK;
    END;
        
	START TRANSACTION;
    
	DELETE FROM DsCourseMaterials dc WHERE dc.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'CourseMaterials' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsCourseMaterials (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, VTClassId, CourseMaterialId, CMClassId, ReceiptDate, CMStatus, VCId, ClassId, JobRoleId, CreatedOn)
	SELECT DISTINCT vtc.AcademicYearId, vtm.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, vtc.VTClassId, cm.CourseMaterialId, cm.ClassId AS CMClassId, cm.ReceiptDate, cm.CMStatus, vtm.VCId, vtc.ClassId, vss.JobRoleId, NOW() 
	FROM CourseMaterials cm
	INNER JOIN VTClasses vtc ON cm.ClassId = vtc.VTClassId AND vtc.IsActive = 1
	INNER JOIN AcademicYears ay ON vtc.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1		 
    INNER JOIN VCTrainersMap vtm ON cm.VTId = vtm.VTId 
    INNER JOIN VTPCoordinatorsMap vcm ON vtm.VTPId = vcm.VTPId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1	
    INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1    	     
	INNER JOIN Schools s ON vtc.SchoolId = s.SchoolId AND vtc.IsActive = 1    
	INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1	
	INNER JOIN SchoolClasses scs ON vtc.ClassId = scs.ClassId
	INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
	INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode
	INNER JOIN Phases ph ON ay.PhaseId = ph.PhaseId
	INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 	
	LEFT JOIN HeadMasters hm ON s.SchoolId = hm.SchoolId AND hm.IsActive = 1     
	LEFT JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1			
	LEFT JOIN Sectors se ON vss.SectorId = se.SectorId
	LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId	AND vss.JobRoleId = jr.JobRoleId	
	WHERE cm.IsActive = 1
		AND AcademicYearId IS NULL OR vtc.AcademicYearId = AcademicYearId;
        
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'CourseMaterials', @AffectedRows, NOW();
    
    COMMIT WORK;	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenerateVTNotSubmittedDailyReportingData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GenerateVTNotSubmittedDailyReportingData`(
	IN StartDate DATE, 
	IN EndDate DATE,
    IN VTId VARCHAR(36)
)
BEGIN
	DECLARE currentDate DATE;
	DECLARE isHoliday BIT DEFAULT 0;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
        
		ROLLBACK;
    END;
        
	START TRANSACTION;
    SELECT AcademicYearId INTO @AcademicYearId FROM AcademicYears WHERE startDate BETWEEN StartMonth AND EndMonth;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = @AcademicYearId AND dm.DataType = 'VTNotSubmitted' AND MONTH(CreatedOn) = MONTH(StartDate);
    
	SET currentDate = startDate;
	WHILE currentDate <= endDate DO
    
		SELECT COUNT(1) INTO @VTReportingCount 
        FROM VTReportSubmissions vs 
        WHERE DATE(vs.ReportingDate) = DATE(currentDate)
			AND (VTId IS NULL OR vs.VTId = VTId);

		IF(@VTReportingCount = 0) THEN  
			SET isHoliday = 0;
			IF(DAYNAME(currentDate) = 'Sunday') THEN
				SET isHoliday = 1;
			END IF;
			
            IF(VTId IS NOT NULL) THEN
            BEGIN
				DELETE FROM VTReportSubmissions vs WHERE vs.VTId = VTId AND DATE(vs.ReportingDate) = DATE(currentDate);
            END;
            END IF;
            
			INSERT INTO VTReportSubmissions (VTSchoolSectorId, VTId, ReportingDate, IsReportSubmitted, IsHoliday) 
			SELECT DISTINCT vss.VTSchoolSectorId, vss.VTId, currentDate, 0, isHoliday
			FROM VTSchoolSectors vss
			INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1 
            INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vtm.VTPId = vcm.VTPId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1 		 
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
			INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
			INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1            
			WHERE vss.IsActive = 1 AND vss.AcademicYearId = @AcademicYearId
				AND (VTId IS NULL OR vss.VTId = VTId);
		END IF;

		SET currentDate = ADDDATE(currentDate, INTERVAL 1 DAY);
	END WHILE;
  																							   
	INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT @AcademicYearId, startDate, 'VTNotSubmitted', @VTReportingCount, NOW();
    
	COMMIT WORK;
	# CALL GenerateVTNotSubmittedDailyReportingData ('2023/02/25', '2023/02/28', '8cb4494b-cb75-42da-99c8-2dfee7d88a9d');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenFieldVisitData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenFieldVisitData`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
        
	START TRANSACTION;
    	
    DELETE FROM DsFieldVisits dc WHERE dc.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'FieldVisits' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsFieldVisits (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, ClassTaughtId, SchoolId, VTId, QuarterInYear, ReportMonth, NoOfSchoolClasses, FieldIndustryCount, VCId, ClassId, JobRoleId, CreatedOn)
	SELECT DISTINCT vss.AcademicYearId, vt.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, fv.ClassTaughtId, vss.SchoolId, vss.VTId, 
		QUARTER(fv.ReportingDate) AS QuarterInYear, DATE_FORMAT(fv.ReportingDate, "%Y/%m/01") AS ReportMonth, 
		COUNT(DISTINCT vtc.SchoolId, vtc.ClassId) AS NoOfSchoolClasses, 
		COUNT(DISTINCT fv.VTFieldIndustryVisitConductedId) AS FieldIndustryCount,
        vt.VCId, vtc.ClassId, vss.JobRoleId, NOW()
	FROM VTFieldIndustryVisitConducted fv
	INNER JOIN VTSchoolSectors vss ON fv.VTSchoolSectorId = vss.VTSchoolSectorId AND fv.VTId = vss.VTId AND vss.IsActive = 1
	INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	        
	INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1		
	INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1		
	LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1
	WHERE DATE(fv.ReportingDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth)   
		AND fv.ReportingDate BETWEEN ay.StartMonth AND ay.EndMonth
		AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
	GROUP BY vss.AcademicYearId, vss.SectorId, fv.ClassTaughtId, vt.VTPId, s.SchoolManagementId, s.DivisionId, s.DistrictCode, vss.SchoolId, vss.VTId, QuarterInYear, ReportMonth;
    
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'FieldVisits', @AffectedRows, NOW();
    
    COMMIT WORK;	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenFieldVisitDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenFieldVisitDataV2`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
        
		ROLLBACK;
    END;
        
	START TRANSACTION;
    
	DELETE FROM DsFieldVisits df WHERE df.AcademicYearId = AcademicYearId;	
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'FieldVisits' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsFieldVisits (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, ClassTaughtId, SchoolId, VTId, QuarterInYear, ReportMonth, NoOfSchoolClasses, FieldIndustryCount, VCId, ClassId, JobRoleId, CreatedOn)
	SELECT DISTINCT vtc.AcademicYearId, vtm.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, fv.ClassTaughtId, vss.SchoolId, vss.VTId, 
		QUARTER(fv.ReportingDate) AS QuarterInYear, DATE_FORMAT(fv.ReportingDate, "%Y/%m/01") AS ReportMonth, 
		COUNT(DISTINCT vtc.SchoolId, vtc.ClassId) AS NoOfSchoolClasses, 
		COUNT(DISTINCT fv.VTFieldIndustryVisitConductedId) AS FieldIndustryCount,
        vtm.VCId, vtc.ClassId, vss.JobRoleId, NOW()
	FROM VTFieldIndustryVisitConducted fv
	INNER JOIN VTSchoolSectors vss ON fv.VTSchoolSectorId = vss.VTSchoolSectorId AND fv.VTId = vss.VTId AND vss.IsActive = 1
	INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1
    INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	        
																			 
	INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1			
    INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.IsActive = 1        
	WHERE DATE(fv.ReportingDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth)   
		AND fv.ReportingDate BETWEEN ay.StartMonth AND ay.EndMonth
		AND (AcademicYearId IS NULL OR vtc.AcademicYearId = AcademicYearId)
	GROUP BY vtc.AcademicYearId, vss.SectorId, fv.ClassTaughtId, vtm.VTPId, s.SchoolManagementId, s.DivisionId, s.DistrictCode, vss.SchoolId, vss.VTId, QuarterInYear, ReportMonth;
    
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'FieldVisits', @AffectedRows, NOW();
    
    COMMIT WORK;	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenGuestLectureData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenGuestLectureData`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
        
	START TRANSACTION;
    
	DELETE FROM DsGuestLectures dg WHERE dg.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'GuestLectures' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsGuestLectures (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, ClassTaughtId, SchoolId, VTId, ReportMonth, NoOfSchoolClasses, GuestLectureCount, VCId, ClassId, JobRoleId, CreatedOn)
	SELECT DISTINCT vss.AcademicYearId, vt.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, gl.ClassTaughtId, vss.SchoolId, vss.VTId, 
		DATE_FORMAT(gl.ReportingDate, "%Y/%m/01") AS ReportMonth, COUNT(DISTINCT vtc.SchoolId, vtc.ClassId) AS NoOfSchoolClasses, 
        COUNT(DISTINCT gl.VTGuestLectureId) AS GuestLectureCount, vt.VCId, vtc.ClassId, vss.JobRoleId, NOW()        
	FROM VTGuestLectureConducted gl
	INNER JOIN VTSchoolSectors vss ON gl.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
	INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1
	INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1		
	INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
	INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId        
	WHERE gl.IsActive = 1 AND DATE(gl.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
		AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
	GROUP BY vss.AcademicYearId, vt.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, gl.ClassTaughtId, vss.SchoolId, vss.VTId, ReportMonth;
     
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'GuestLectures', @AffectedRows, NOW();
    
    COMMIT WORK;	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenGuestLectureDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GenGuestLectureDataV2`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
    	GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
        
		ROLLBACK;
    END;
        
	START TRANSACTION;
    
	DELETE FROM DsGuestLectures dg WHERE dg.AcademicYearId = AcademicYearId;    
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'GuestLectures' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsGuestLectures (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, ClassTaughtId, SchoolId, VTId, ReportMonth, NoOfSchoolClasses, GuestLectureCount, VCId, ClassId, JobRoleId, CreatedOn)
	SELECT DISTINCT vss.AcademicYearId, vtm.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, gl.ClassTaughtId, vss.SchoolId, vss.VTId, 
		DATE_FORMAT(gl.ReportingDate, "%Y/%m/01") AS ReportMonth, COUNT(DISTINCT vtc.SchoolId, vtc.ClassId) AS NoOfSchoolClasses, 
        COUNT(DISTINCT gl.VTGuestLectureId) AS GuestLectureCount, vtm.VCId, vtc.ClassId, vss.JobRoleId, NOW()        
	FROM VTGuestLectureConducted gl
	INNER JOIN VTSchoolSectors vss ON gl.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
	INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
	INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1        
	INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1        
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1			
	LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1     
	WHERE gl.IsActive = 1 AND DATE(gl.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
		AND vss.AcademicYearId = AcademicYearId
	GROUP BY vss.AcademicYearId, vtm.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, gl.ClassTaughtId, vss.SchoolId, vss.VTId, ReportMonth;
     
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'GuestLectures', @AffectedRows, NOW();
    
    COMMIT WORK;	
    # CALL GenGuestLectureDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', '2023/01/20');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenSchoolClassesData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenSchoolClassesData`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
        
	START TRANSACTION;
    
	DELETE FROM DsSchoolClasses dc WHERE dc.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'SchoolClasses' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsSchoolClasses (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, VTClassId, VCId, ClassId, JobRoleId, CreatedOn)    
	SELECT DISTINCT svs.AcademicYearId, svs.VTPId, svs.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, vtc.VTClassId, vt.VCId, vtc.ClassId, vtss.JobRoleId, NOW()
	FROM SchoolVTPSectors svs
	INNER JOIN VTPSectors vs ON svs.VTPId = vs.VTPId AND svs.SectorId = vs.SectorId AND vs.IsActive = 1
	INNER JOIN VCSchoolSectors vcss ON svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1
	INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND svs.VTPId = vc.VTPId AND vc.IsActive = 1
	INNER JOIN VocationalTrainers vt ON vc.VCId = vt.VCId AND vc.VTPId = vt.VTPId AND vt.IsActive = 1
	INNER JOIN VTSchoolSectors vtss ON svs.SchoolId = vtss.SchoolId AND svs.SectorId = vtss.SectorId AND vt.VTId = vtss.VTId AND vtss.IsActive = 1
	INNER JOIN VTClasses vtc ON vtss.SchoolId = vtc.SchoolId AND vtss.VTId = vtc.VTId AND vtc.IsActive = 1
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1         
	WHERE svs.IsActive = 1    
		AND (AcademicYearId IS NULL OR svs.AcademicYearId = AcademicYearId);
            
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'SchoolClasses', @AffectedRows, NOW();
    
    COMMIT WORK;	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenSchoolClassesDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenSchoolClassesDataV2`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
        
		ROLLBACK;
    END;
        
	START TRANSACTION;
    
	DELETE FROM DsSchoolClasses dc WHERE dc.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'SchoolClasses' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsSchoolClasses (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, VTClassId, VCId, ClassId, JobRoleId, CreatedOn)    
	SELECT DISTINCT svs.AcademicYearId, svs.VTPId, svs.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, vtc.VTClassId, vtm.VCId, vtc.ClassId, vtss.JobRoleId, NOW()	
	FROM SchoolVTPSectors svs
	INNER JOIN VTPSectors vs ON svs.VTPId = vs.VTPId AND svs.SectorId = vs.SectorId AND vs.IsActive = 1
	INNER JOIN VCSchoolSectors vcss ON svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1	
    INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND svs.VTPId = vcm.VTPId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1	
    INNER JOIN VCTrainersMap vtm ON vcm.AcademicYearId = vtm.AcademicYearId AND vcm.VTPId = vtm.VTPId AND vcm.VCId = vtm.VCId AND vtm.IsActive = 1
	INNER JOIN VTSchoolSectors vtss ON svs.SchoolId = vtss.SchoolId AND svs.SectorId = vtss.SectorId AND vtm.VTId = vtss.VTId AND vtss.IsActive = 1
	INNER JOIN VTClasses vtc ON vtss.SchoolId = vtc.SchoolId AND vtss.VTId = vtc.VTId AND vtc.IsActive = 1
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1         
	WHERE svs.IsActive = 1   
		AND (AcademicYearId IS NULL OR svs.AcademicYearId = AcademicYearId);
            
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'SchoolClasses', @AffectedRows, NOW();
    
    COMMIT WORK;	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenSchoolsData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenSchoolsData`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
        
	START TRANSACTION;
 
	DELETE FROM DsSchools ds WHERE ds.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'Schools' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsSchools (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, ApprovedSchoolId, ImplementedSchoolId, VCId, ClassId, JobRoleId, CreatedOn)	
	SELECT DISTINCT svtps.AcademicYearId, svtps.VTPId, svtps.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, 
		s.SchoolId AS ApprovedSchoolId, IF(s.IsImplemented = 1, s.SchoolId, NULL) AS ImplementedSchoolId, vcss.VCId, vtc.ClassId, vss.JobRoleId, NOW()
	FROM Schools s  
	LEFT JOIN SchoolVTPSectors svtps ON s.SchoolId = svtps.SchoolId AND svtps.IsActive = 1
	LEFT JOIN AcademicYears ar ON svtps.AcademicYearId = ar.AcademicYearId AND ar.IsActive = 1 
	LEFT JOIN VocationalTrainingProviders vtp ON svtps.VTPId = vtp.VTPId AND vtp.IsActive = 1
	LEFT JOIN VCSchoolSectors vcss ON svtps.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1
	LEFT JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1
	LEFT JOIN VocationalTrainers vt ON vc.VCId = vt.VCId AND vt.IsActive = 1
	LEFT JOIN VTSchoolSectors vss ON svtps.AcademicYearId = vss.AcademicYearId AND svtps.SchoolId = vss.SchoolId AND svtps.SectorId = vss.SectorId AND vt.VTId= vss.VTId AND vss.IsActive = 1				
	LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.VTId = vtc.VTId AND vss.SchoolId = vtc.SchoolId AND vtc.IsActive = 1 				                
	WHERE s.IsActive = 1
		AND (svtps.AcademicYearId = AcademicYearId OR svtps.AcademicYearId IS NULL);
	
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'Schools', @AffectedRows, NOW();
    
	COMMIT WORK;     
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenSchoolsDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenSchoolsDataV2`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
        
		ROLLBACK;
    END;
        
	START TRANSACTION;
 
	DELETE FROM DsSchools ds WHERE ds.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'Schools' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsSchools (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, ApprovedSchoolId, ImplementedSchoolId, VCId, ClassId, JobRoleId, CreatedOn)	
	SELECT DISTINCT svtps.AcademicYearId, svtps.VTPId, svtps.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, 
		s.SchoolId AS ApprovedSchoolId, IF(s.IsImplemented = 1, s.SchoolId, NULL) AS ImplementedSchoolId, vcss.VCId, vtc.ClassId, vss.JobRoleId, NOW()
	FROM Schools s  
	LEFT JOIN SchoolVTPSectors svtps ON s.SchoolId = svtps.SchoolId AND svtps.IsActive = 1
	LEFT JOIN AcademicYears ar ON svtps.AcademicYearId = ar.AcademicYearId AND ar.IsActive = 1 
	LEFT JOIN VCSchoolSectors vcss ON svtps.AcademicYearId = vcss.AcademicYearId AND svtps.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1
	LEFT JOIN VTSchoolSectors vss ON svtps.AcademicYearId = vss.AcademicYearId AND svtps.SchoolId = vss.SchoolId AND svtps.SectorId = vss.SectorId AND vss.IsActive = 1				
	LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.VTId = vtc.VTId AND vss.SchoolId = vtc.SchoolId AND vtc.IsActive = 1 				                
	LEFT JOIN VTPAcademicYearsMap vtpm ON svtps.AcademicYearId = vtpm.AcademicYearId AND svtps.VTPId = vtpm.VTPId AND vtpm.IsActive = 1     
    LEFT JOIN VTPCoordinatorsMap vcm ON vtpm.AcademicYearId = vcm.AcademicYearId AND vtpm.VTPId = vcm.VTPId  AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1
    LEFT JOIN VCTrainersMap vtm ON vcm.AcademicYearId = vtm.AcademicYearId AND vcm.VCId = vtm.VCId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1         
    LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1    
    LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1    
    LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
	WHERE s.IsActive = 1
		AND (svtps.AcademicYearId = AcademicYearId OR svtps.AcademicYearId IS NULL);
	
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'Schools', @AffectedRows, NOW();
    
	COMMIT WORK;     
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenSectorJobRoleData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenSectorJobRoleData`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
        
	START TRANSACTION;
    	
    DELETE FROM DsSectorJobRoles dc WHERE dc.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'SectorJobRoles' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsSectorJobRoles (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, VTSchoolSectorId, VTId, SchoolId, VCId, JobRoleId, CreatedOn)
	SELECT DISTINCT vss.AcademicYearId, vt.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, vss.VTSchoolSectorId, vss.VTId, vss.SchoolId, vt.VCId, vss.JobRoleId, NOW()	
	FROM VTSchoolSectors vss
	INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1			
	INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
	INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND jr.IsActive = 1
	WHERE vss.IsActive = 1 AND vss.JobRoleId IS NOT NULL	
		AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId);
        
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'SectorJobRoles', @AffectedRows, NOW();
    
    COMMIT WORK;	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenSectorJobRoleDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenSectorJobRoleDataV2`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
        
		ROLLBACK;
    END;
        
	START TRANSACTION;
    
	DELETE FROM DsSectorJobRoles WHERE AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'SectorJobRoles' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsSectorJobRoles (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, VTSchoolSectorId, VTId, SchoolId, VCId, JobRoleId, CreatedOn)
	SELECT DISTINCT vss.AcademicYearId, vtm.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, vss.VTSchoolSectorId, vss.VTId, vss.SchoolId, vtm.VCId, vss.JobRoleId, NOW()	
	FROM VTSchoolSectors vss
    INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vss.IsActive = 1	
	INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
	INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND jr.IsActive = 1
	WHERE vss.IsActive = 1 AND vss.JobRoleId IS NOT NULL	
		AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId);
        
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'SectorJobRoles', @AffectedRows, NOW();
    
    COMMIT WORK;	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenStudentAttendanceData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenStudentAttendanceData`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
	DECLARE vtIndex INT DEFAULT 1;
    DECLARE vtCount INT DEFAULT 0;
    DECLARE vtAttendanceCount INT DEFAULT 0;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;

	DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'StudentAttendances' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	DROP TEMPORARY TABLE IF EXISTS  VTSchools;    
    
    CREATE TEMPORARY TABLE VTSchools
    SELECT ROW_NUMBER() OVER (ORDER BY v.VTId) AS RowIndex, v.VTSchoolSectorId, v.VTId, v.SchoolId, v.SectorId
    FROM (
		SELECT DISTINCT vss.VTSchoolSectorId, vss.VTId, vss.SchoolId, vss.SectorId
		FROM VTSchoolSectors vss
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
        WHERE vss.AcademicYearId = AcademicYearId 
			
    ) AS v;
	
    SET vtCount = (SELECT COUNT(*) FROM VTSchools);
    
    WHILE vtIndex <= vtCount DO		        
        SELECT VTSchoolSectorId INTO @vtSchoolSectorId FROM VTSchools WHERE RowIndex = vtIndex;
        
		START TRANSACTION;
		
		DELETE FROM DsStudentAttendances 
		WHERE AcademicYearId = AcademicYearId 
			AND VTSchoolSectorId = @vtSchoolSectorId
			AND MONTH(ReportingMonth) = MONTH(ReportDate);
		
		INSERT INTO DsStudentAttendances (AcademicYearId, VTSchoolSectorId, ClassId, ReportingMonth, VTWorkingDays, AttendanceDays, EnrolledBoys, EnrolledGirls, EnrolledStudents, AttendanceBoys, AttendanceGirls, StudentAttendances, AttendanceBoysInPerc, AttendanceGirlsInPerc, AttendancesInPerc, CreatedOn)
		SELECT DISTINCT sda.AcademicYearId, sda.VTSchoolSectorId, sda.ClassId, DATE_FORMAT(sda.ReportingDate ,'%Y-%m-01') AS ReportingMonth, 
			COUNT(DISTINCT sda.ReportingDate) AS VTWorkingDays, COUNT(DISTINCT sda.ReportingDate) AS AttendanceDays, 
			AVG(sda.Boys) AS EnrolledBoys, AVG(sda.Girls) AS EnrolledGirls, AVG(sda.EnrolledStudents) AS EnrolledStudents,
			AVG(sda.AttendanceBoys) AS AttendanceBoys, AVG(sda.AttendanceGirls) AS AttendanceGirls, 
			AVG(sda.StudentAttendances) AS StudentAttendances, 
            SUM(sda.AttendanceBoysInPerc)/COUNT(DISTINCT sda.ReportingDate) AS AttendanceBoysInPerc,
            SUM(sda.AttendanceGirlsInPerc)/COUNT(DISTINCT sda.ReportingDate) AS AttendanceGirlsInPerc,
            SUM(sda.AttendancesInPerc)/COUNT(DISTINCT sda.ReportingDate) AS AttendancesInPerc, NOW()
		FROM (
			SELECT DISTINCT sc.AcademicYearId, vdr.VTSchoolSectorId, DATE(vdr.ReportingDate) AS ReportingDate, tve.ClassTaughtId AS ClassId, tve.SectionTaughtId, 	
				COUNT(DISTINCT IF(sc.Gender = '207', sc.StudentId, NULL)) AS Boys, 
				COUNT(DISTINCT IF(sc.Gender = '208', sc.StudentId, NULL)) AS Girls, 	
				COUNT(DISTINCT sc.StudentId) AS EnrolledStudents, 	
				COUNT(DISTINCT IF(sc.Gender = '207' AND vsa.IsPresent = 1, sc.StudentId, NULL)) AS AttendanceBoys, 
				COUNT(DISTINCT IF(sc.Gender = '208' AND vsa.IsPresent = 1, sc.StudentId, NULL)) AS AttendanceGirls,
				COUNT(DISTINCT IF(vsa.IsPresent = 1, sc.StudentId, NULL)) AS StudentAttendances,
				(COUNT(DISTINCT IF(sc.Gender = '207' AND vsa.IsPresent = 1, sc.StudentId, NULL)) / COUNT(DISTINCT IF(sc.Gender = '207', sc.StudentId, NULL)) * 100) AS AttendanceBoysInPerc,
                (COUNT(DISTINCT IF(sc.Gender = '208' AND vsa.IsPresent = 1, sc.StudentId, NULL)) / COUNT(DISTINCT IF(sc.Gender = '208', sc.StudentId, NULL)) * 100) AS AttendanceGirlsInPerc,
                (COUNT(DISTINCT IF(vsa.IsPresent = 1, sc.StudentId, NULL)) / COUNT(DISTINCT sc.StudentId) * 100) AS AttendancesInPerc
			FROM VTRTeachingVocationalEducations tve
			INNER JOIN VTDailyReporting vdr ON tve.VTDailyReportingId = vdr.VTDailyReportingId 
			INNER JOIN VTRStudentAttendances vsa ON tve.VTRTeachingVocationalEducationId = vsa.VTRTeachingVocationalEducationId 			
			INNER JOIN StudentClassMapping scm ON vsa.VTId = scm.VTId AND vsa.ClassId = scm.ClassId AND vsa.StudentId = scm.StudentId 
            INNER JOIN StudentClasses sc ON scm.SchoolId = sc.SchoolId AND scm.ClassId = sc.ClassId AND scm.SectionId = sc.SectionId AND scm.StudentId = sc.StudentId
			INNER JOIN AcademicYears ay ON sc.AcademicYearId = ay.AcademicYearId
			WHERE vdr.ReportType = '37' 
				AND (DATE(vdr.ReportingDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth))			
				
				AND vdr.VTSchoolSectorId = @vtSchoolSectorId
				AND MONTH(vdr.ReportingDate) = MONTH(ReportDate)		
				
			GROUP BY vdr.VTSchoolSectorId, ReportingDate, tve.ClassTaughtId, tve.SectionTaughtId
			ORDER BY vdr.ReportingDate DESC
		) sda
        GROUP BY sda.VTSchoolSectorId, ReportingMonth, sda.ClassId;

		SET vtAttendanceCount = vtAttendanceCount + ROW_COUNT();
		COMMIT WORK;
		SET vtIndex = vtIndex + 1;        
    END WHILE;
        
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'StudentAttendances', vtAttendanceCount, NOW();
    
    
    
    
    
    
    
    
	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenStudentAttendanceDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GenStudentAttendanceDataV2`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
	DECLARE vtIndex INT DEFAULT 1;
    DECLARE vtCount INT DEFAULT 0;
    DECLARE vtAttendanceCount INT DEFAULT 0;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
        
		ROLLBACK;
    END;

	DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'StudentAttendances' AND DATE(dm.ReportDate) = DATE(ReportDate);

	DROP TEMPORARY TABLE IF EXISTS  VTSchools;    
    
    CREATE TEMPORARY TABLE VTSchools
    SELECT ROW_NUMBER() OVER (ORDER BY v.VTId) AS RowIndex, v.VTSchoolSectorId, v.VTId, v.SchoolId, v.SectorId
    FROM (
		SELECT DISTINCT vss.VTSchoolSectorId, vss.VTId, vss.SchoolId, vss.SectorId
		FROM VTSchoolSectors vss
        INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
        WHERE vss.AcademicYearId = AcademicYearId 			
   
    ) AS v;
	
    SET vtCount = (SELECT COUNT(*) FROM VTSchools);
    
    WHILE vtIndex <= vtCount DO		        
        SELECT VTSchoolSectorId INTO @vtSchoolSectorId FROM VTSchools WHERE RowIndex = vtIndex;
        
		START TRANSACTION;
		
		DELETE FROM DsStudentAttendances dsa
		WHERE dsa.AcademicYearId = AcademicYearId 
			AND dsa.VTSchoolSectorId = @vtSchoolSectorId
			AND MONTH(dsa.ReportingMonth) = MONTH(ReportDate);
		
		INSERT INTO DsStudentAttendances (AcademicYearId, VTSchoolSectorId, ClassId, ReportingMonth, VTWorkingDays, AttendanceDays, EnrolledBoys, EnrolledGirls, EnrolledStudents, AttendanceBoys, AttendanceGirls, StudentAttendances, AttendanceBoysInPerc, AttendanceGirlsInPerc, AttendancesInPerc, CreatedOn)
		SELECT DISTINCT sda.AcademicYearId, sda.VTSchoolSectorId, sda.ClassId, DATE_FORMAT(sda.ReportingDate ,'%Y-%m-01') AS ReportingMonth, 
			COUNT(DISTINCT sda.ReportingDate) AS VTWorkingDays, COUNT(DISTINCT sda.ReportingDate) AS AttendanceDays, 
			AVG(sda.Boys) AS EnrolledBoys, AVG(sda.Girls) AS EnrolledGirls, AVG(sda.EnrolledStudents) AS EnrolledStudents,
			AVG(sda.AttendanceBoys) AS AttendanceBoys, AVG(sda.AttendanceGirls) AS AttendanceGirls, 
			AVG(sda.StudentAttendances) AS StudentAttendances, 
            SUM(sda.AttendanceBoysInPerc)/COUNT(DISTINCT sda.ReportingDate) AS AttendanceBoysInPerc,
            SUM(sda.AttendanceGirlsInPerc)/COUNT(DISTINCT sda.ReportingDate) AS AttendanceGirlsInPerc,
            SUM(sda.AttendancesInPerc)/COUNT(DISTINCT sda.ReportingDate) AS AttendancesInPerc, NOW()
		FROM (
			SELECT DISTINCT sc.AcademicYearId, vdr.VTSchoolSectorId, DATE(vdr.ReportingDate) AS ReportingDate, tve.ClassTaughtId AS ClassId, tve.SectionTaughtId, 	
				COUNT(DISTINCT IF(sc.Gender = '207', sc.StudentId, NULL)) AS Boys, 
				COUNT(DISTINCT IF(sc.Gender = '208', sc.StudentId, NULL)) AS Girls, 	
				COUNT(DISTINCT sc.StudentId) AS EnrolledStudents, 	
				COUNT(DISTINCT IF(sc.Gender = '207' AND vsa.IsPresent = 1, sc.StudentId, NULL)) AS AttendanceBoys, 
				COUNT(DISTINCT IF(sc.Gender = '208' AND vsa.IsPresent = 1, sc.StudentId, NULL)) AS AttendanceGirls,
				COUNT(DISTINCT IF(vsa.IsPresent = 1, sc.StudentId, NULL)) AS StudentAttendances,
				(COUNT(DISTINCT IF(sc.Gender = '207' AND vsa.IsPresent = 1, sc.StudentId, NULL)) / COUNT(DISTINCT IF(sc.Gender = '207', sc.StudentId, NULL)) * 100) AS AttendanceBoysInPerc,
                (COUNT(DISTINCT IF(sc.Gender = '208' AND vsa.IsPresent = 1, sc.StudentId, NULL)) / COUNT(DISTINCT IF(sc.Gender = '208', sc.StudentId, NULL)) * 100) AS AttendanceGirlsInPerc,
                (COUNT(DISTINCT IF(vsa.IsPresent = 1, sc.StudentId, NULL)) / COUNT(DISTINCT sc.StudentId) * 100) AS AttendancesInPerc
			FROM VTRTeachingVocationalEducations tve
			INNER JOIN VTDailyReporting vdr ON tve.VTDailyReportingId = vdr.VTDailyReportingId 
            INNER JOIN VTRStudentAttendances vsa ON tve.VTRTeachingVocationalEducationId = vsa.VTRTeachingVocationalEducationId 			            
			INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId AND vdr.VTId = vss.VTId AND vss.IsActive = 1 
            INNER JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1 
            INNER JOIN StudentClasses sc ON scm.SchoolId = sc.SchoolId AND scm.ClassId = sc.ClassId AND scm.SectionId = sc.SectionId AND scm.StudentId = sc.StudentId AND sc.IsActive = 1 
			INNER JOIN VCTrainersMap vtm ON scm.AcademicYearId = vtm.AcademicYearId AND scm.VTId = vtm.VTId AND vtm.IsActive = 1 
            INNER JOIN AcademicYears ay ON sc.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1 
			WHERE vdr.ReportType = '37' AND vss.AcademicYearId = AcademicYearId
				AND (DATE(vdr.ReportingDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth))			
	
				AND vdr.VTSchoolSectorId = @vtSchoolSectorId
				AND MONTH(vdr.ReportingDate) = MONTH(ReportDate)		
	
			GROUP BY vdr.VTSchoolSectorId, ReportingDate, tve.ClassTaughtId, tve.SectionTaughtId
			ORDER BY vdr.ReportingDate DESC
		) sda
        GROUP BY sda.VTSchoolSectorId, ReportingMonth, sda.ClassId;

		SET vtAttendanceCount = vtAttendanceCount + ROW_COUNT();
		COMMIT WORK;
		SET vtIndex = vtIndex + 1;        
    END WHILE;
        
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'StudentAttendances', vtAttendanceCount, NOW();
 
    # CALL GenStudentAttendanceDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', DATE('2022/03/15));
    # CALL GenStudentAttendanceDataV2 ('fda59df6-729e-493c-8d48-fc65b90008fe', DATE('2022/04/12));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenStudentsData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenStudentsData`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
        
	START TRANSACTION;
    
	DELETE FROM DsStudents ds WHERE ds.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'Students' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsStudents (AcademicYearId, VTPId, SectorId, SchoolId, DivisionId, DistrictId, SchoolManagementId, Boys, Girls, Total, VCId, ClassId, JobRoleId, CreatedOn)
	SELECT DISTINCT vss.AcademicYearId, vt.VTPId, vss.SectorId, vss.SchoolId, s.DivisionId, s.DistrictCode, s.SchoolManagementId,
		COUNT(DISTINCT IF(sc.Gender = '207', sc.StudentId, NULL)) AS Boys,
		COUNT(DISTINCT IF(sc.Gender = '208', sc.StudentId, NULL)) AS Girls,			
		COUNT(DISTINCT sc.StudentId) AS Total,
        vt.VCId, vtc.ClassId, vss.JobRoleId, NOW()
	FROM StudentClassMapping scm
	INNER JOIN StudentClasses sc ON scm.SchoolId = sc.SchoolId AND scm.StudentId = sc.StudentId AND sc.DeletedBy IS NULL AND sc.DateOfDropout IS NULL AND sc.IsActive = 1
	INNER JOIN VTClasses vtc ON scm.AcademicYearId = vtc.AcademicYearId AND scm.SchoolId = vtc.SchoolId AND scm.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1	
	INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1   				
	INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1 
	INNER JOIN Schools s ON scm.SchoolId = s.SchoolId AND s.IsActive = 1 
	WHERE scm.IsActive = 1
		AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
        
	GROUP BY vss.AcademicYearId, vt.VTPId, vss.SectorId, sc.ClassId, s.DivisionId, s.DistrictCode, s.SchoolManagementId;
	
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'Students', @AffectedRows, NOW();
    
    COMMIT WORK;	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenStudentsDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GenStudentsDataV2`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
        
		ROLLBACK;
    END;
        
	START TRANSACTION;
    
	DELETE FROM DsStudents ds WHERE ds.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'Students' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsStudents (AcademicYearId, VTPId, SectorId, SchoolId, DivisionId, DistrictId, SchoolManagementId, Boys, Girls, Total, VCId, ClassId, JobRoleId, CreatedOn)
	SELECT DISTINCT scm.AcademicYearId, vtm.VTPId, vss.SectorId, scm.SchoolId, s.DivisionId, s.DistrictCode, s.SchoolManagementId,
		COUNT(DISTINCT IF(sc.Gender = '207', sc.StudentId, NULL)) AS Boys,
		COUNT(DISTINCT IF(sc.Gender = '208', sc.StudentId, NULL)) AS Girls,			
		COUNT(DISTINCT sc.StudentId) AS Total,
        vtm.VCId, vtc.ClassId, vss.JobRoleId, NOW()
	FROM StudentClassMapping scm
	INNER JOIN StudentClasses sc ON scm.SchoolId = sc.SchoolId AND scm.StudentId = sc.StudentId AND sc.DeletedBy IS NULL AND sc.DateOfDropout IS NULL AND sc.IsActive = 1
	INNER JOIN VTClasses vtc ON scm.AcademicYearId = vtc.AcademicYearId AND scm.SchoolId = vtc.SchoolId AND scm.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1	
	INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1   				
    INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1        
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1        
	INNER JOIN Schools s ON scm.SchoolId = s.SchoolId AND s.IsActive = 1 
	WHERE scm.IsActive = 1
		AND (AcademicYearId IS NULL OR scm.AcademicYearId = AcademicYearId) 
  
	GROUP BY vss.AcademicYearId, vtm.VTPId, vss.SectorId, sc.ClassId, s.DivisionId, s.DistrictCode, s.SchoolManagementId;
	
    SELECT ROW_COUNT() INTO @AffectedRows;
    
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'Students', @AffectedRows, NOW();
    
    COMMIT WORK;	
    # CALL GenStudentsDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', CAST('2023/01/09' AS DATE));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenToolsAndEquipmentData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenToolsAndEquipmentData`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
        
	START TRANSACTION;
    	
    DELETE FROM DsToolsAndEquipments dc WHERE dc.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'ToolsAndEquipments' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsToolsAndEquipments (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, TESectorId, TEJobRoleId, ToolEquipmentId, ReceiptDate, TEReceiveStatus, VCId, JobRoleId, CreatedOn)
	SELECT DISTINCT vss.AcademicYearId, vt.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, te.SectorId AS TESectorId, 
		te.JobRoleId AS TEJobRoleId, te.ToolEquipmentId, te.ReceiptDate, te.TEReceiveStatus, vt.VCId, vss.JobRoleId, NOW()	
    FROM ToolEquipments te
	INNER JOIN VTSchoolSectors vss ON te.SectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
	INNER JOIN VocationalTrainers vt ON te.VTId = vt.VTId AND vt.IsActive = 1			    
	INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1	
	WHERE te.IsActive = 1	
		AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId);
        
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'ToolsAndEquipments', @AffectedRows, NOW();
    
    COMMIT WORK;	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenToolsAndEquipmentDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenToolsAndEquipmentDataV2`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
        
		ROLLBACK;
    END;
        
	START TRANSACTION;
    
	DELETE FROM DsToolsAndEquipments dt WHERE dt.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'ToolsAndEquipments' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsToolsAndEquipments (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, TESectorId, TEJobRoleId, ToolEquipmentId, ReceiptDate, TEReceiveStatus, VCId, JobRoleId, CreatedOn)
	SELECT DISTINCT vss.AcademicYearId, vtm.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, te.SectorId AS TESectorId, 
		te.JobRoleId AS TEJobRoleId, te.ToolEquipmentId, te.ReceiptDate, te.TEReceiveStatus, vtm.VCId, vss.JobRoleId, NOW()	
    FROM ToolEquipments te
	INNER JOIN VTSchoolSectors vss ON te.SectorId = vss.VTSchoolSectorId AND vss.IsActive = 1	
    INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vss.IsActive = 1	
	INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1	
	WHERE te.IsActive = 1	
		AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId);
        
    SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'ToolsAndEquipments', @AffectedRows, NOW();
    
    COMMIT WORK;	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenTrainerAttendanceData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenTrainerAttendanceData`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
	DECLARE vtIndex INT DEFAULT 1;
    DECLARE vtCount INT DEFAULT 0;
        
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;

	DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'TrainerAttendances' AND DATE(dm.ReportDate) = DATE(ReportDate);
	DROP TEMPORARY TABLE IF EXISTS  VTSchools;    
    
    CREATE TEMPORARY TABLE VTSchools
    SELECT ROW_NUMBER() OVER (ORDER BY v.VTId) AS RowIndex, v.VTId, v.SchoolId, v.SectorId
    FROM (
		SELECT DISTINCT vss.VTId, vss.SchoolId, vss.SectorId
		FROM VTSchoolSectors vss
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1
        INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
        WHERE vss.IsActive = 1
			AND vss.AcademicYearId = AcademicYearId
    ) AS v;
	
    SET vtCount = (SELECT COUNT(*) FROM VTSchools);
	
    WHILE vtIndex <= vtCount DO		
        SELECT VTId INTO @trainerId FROM VTSchools WHERE RowIndex = vtIndex;
        
		START TRANSACTION;
        
		DELETE ta 
        FROM DsTrainerAttendances ta
		WHERE ta.AcademicYearId = AcademicYearId 
			AND ta.VTId = @trainerId
			AND MONTH(ta.ReportingMonth) = MONTH(ReportDate);            
		 
		INSERT INTO DsTrainerAttendances (AcademicYearId, VTPId, VTId, VTSchoolSectorId, ReportingMonth, VTReporting, OnLeave, Holiday, ObservationDay, WorkingDays, CreatedOn)
		SELECT DISTINCT vss.AcademicYearId, vt.VTPId, vss.VTId, vss.VTSchoolSectorId, DATE_FORMAT(vdr.ReportingDate, '%Y/%m/01') AS ReportingMonth, 	
			COUNT(DISTINCT IF(vdr.ReportType = '37', VTDailyReportingId, NULL)) AS VTReportingCount, 
			COUNT(DISTINCT IF(vdr.ReportType = 38, vdr.VTDailyReportingId, NULL)) AS OnLeave, 
			COUNT(DISTINCT IF(vdr.ReportType = 40, vdr.VTDailyReportingId, NULL)) AS Holiday, 
			COUNT(DISTINCT IF(vdr.ReportType = 123, vdr.VTDailyReportingId, NULL)) AS ObservationDay,
			(DAY(LAST_DAY(vdr.ReportingDate)) - GetNoOfSunday(vdr.ReportingDate)) AS TotalWorkingDays,
			NOW() AS CreatedOn
		FROM VTDailyReporting vdr
		INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId AND vt.IsActive = 1
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE vdr.IsActive = 1 
			AND (DATE(vdr.ReportingDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth))
			AND MONTH(vdr.ReportingDate) = MONTH(ReportDate)			
			AND vdr.VTId = @trainerId
		GROUP BY vss.AcademicYearId, vt.VTPId, vss.VTSchoolSectorId, ReportingMonth;

		COMMIT WORK;
		SET vtIndex = vtIndex + 1;        
    END WHILE;
        
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'TrainerAttendances', vtCount, NOW();
    
    
    
    
    
    
    
    
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenTrainerAttendanceDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GenTrainerAttendanceDataV2`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
	DECLARE vtIndex INT DEFAULT 1;
    DECLARE vtCount INT DEFAULT 0;
        
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
        GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
        
		ROLLBACK;
    END;

	DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'TrainerAttendances' AND DATE(dm.ReportDate) = DATE(ReportDate);

	DROP TEMPORARY TABLE IF EXISTS  VTSchools;    
    
    CREATE TEMPORARY TABLE VTSchools
    SELECT ROW_NUMBER() OVER (ORDER BY v.VTId) AS RowIndex, v.VTId, v.SchoolId, v.SectorId
    FROM (
		SELECT DISTINCT vss.VTId, vss.SchoolId, vss.SectorId
		FROM VTSchoolSectors vss
		INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
        INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
        INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
        WHERE vss.IsActive = 1
			AND vss.AcademicYearId = AcademicYearId
    ) AS v;
	
    SET vtCount = (SELECT COUNT(*) FROM VTSchools);
	
    WHILE vtIndex <= vtCount DO		
        SELECT VTId INTO @trainerId FROM VTSchools WHERE RowIndex = vtIndex;
        
		START TRANSACTION;
        
		DELETE ta 
        FROM DsTrainerAttendances ta
		WHERE ta.AcademicYearId = AcademicYearId 
			AND ta.VTId = @trainerId
			AND MONTH(ta.ReportingMonth) = MONTH(ReportDate);            
		 
		INSERT INTO DsTrainerAttendances (AcademicYearId, VTPId, VTId, VTSchoolSectorId, ReportingMonth, VTReporting, OnLeave, Holiday, ObservationDay, WorkingDays, CreatedOn)
		SELECT DISTINCT vss.AcademicYearId, vtm.VTPId, vss.VTId, vss.VTSchoolSectorId, DATE_FORMAT(vdr.ReportingDate, '%Y/%m/01') AS ReportingMonth, 	
			COUNT(DISTINCT IF(vdr.ReportType = '37', VTDailyReportingId, NULL)) AS VTReportingCount, 
			COUNT(DISTINCT IF(vdr.ReportType = 38, vdr.VTDailyReportingId, NULL)) AS OnLeave, 
			COUNT(DISTINCT IF(vdr.ReportType = 40, vdr.VTDailyReportingId, NULL)) AS Holiday, 
			COUNT(DISTINCT IF(vdr.ReportType = 123, vdr.VTDailyReportingId, NULL)) AS ObservationDay,
			(DAY(LAST_DAY(vdr.ReportingDate)) - GetNoOfSunday(vdr.ReportingDate)) AS TotalWorkingDays,
			NOW() AS CreatedOn
		FROM VTDailyReporting vdr
		INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1		
        INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1   
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE vdr.IsActive = 1 
			AND (DATE(vdr.ReportingDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth))
			AND MONTH(vdr.ReportingDate) = MONTH(ReportDate)			
			AND vdr.VTId = @trainerId            
		GROUP BY vss.AcademicYearId, vtm.VTPId, vss.VTSchoolSectorId, ReportingMonth;

		COMMIT WORK;
		SET vtIndex = vtIndex + 1;        
    END WHILE;
        
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'TrainerAttendances', vtCount, NOW();
    
    # CALL GenTrainerAttendanceDataV2 ('fda59df6-729e-493c-8d48-fc65b90008fe', CAST('2022-03-15 00:00:00' AS DATE));
    # CALL GenTrainerAttendanceDataV2 ('fda59df6-729e-493c-8d48-fc65b90008fe', CAST('2022-07-12 00:00:00' AS DATE));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenTrainersData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GenTrainersData`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;
        
	START TRANSACTION;
    
	DELETE FROM DsTrainers dt WHERE dt.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'Trainers' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsTrainers (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, TotalVT, PlacedVT, ReportedVT, VCId, ClassId, JobRoleId, CreatedOn)
	SELECT DISTINCT vss.AcademicYearId, vt.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, 
		COUNT(DISTINCT vt.VTId) AS TotalVT,             
		COUNT(DISTINCT vss.VTId) AS PlacedVT, 
        COUNT(DISTINCT vdr.VTId) AS ReportedVT,
        vt.VCId, vtc.ClassId, vss.JobRoleId, NOW()
	FROM VocationalTrainers vt
	LEFT JOIN VTSchoolSectors vss ON vt.VTId = vss.VTId AND vss.IsActive = 1
	LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1
	LEFT JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId         
	LEFT JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1    
	LEFT JOIN VTDailyReporting vdr ON vss.VTId = vdr.VTId AND DATE(vdr.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
	WHERE vt.IsActive = 1
		AND (AcademicYearId IS NULL OR (vss.AcademicYearId = AcademicYearId OR vss.AcademicYearId IS NULL))	
	GROUP BY vss.AcademicYearId, vt.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId;
        
	SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'Trainers', @AffectedRows, NOW();
    
    COMMIT WORK;    	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GenTrainersDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GenTrainersDataV2`(
	IN AcademicYearId VARCHAR(36),
    IN ReportDate DATETIME
)
BEGIN	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
        
		ROLLBACK;
    END;
        
	START TRANSACTION;
    
	DELETE FROM DsTrainers dt WHERE dt.AcademicYearId = AcademicYearId;
    DELETE FROM DsDataManagement dm WHERE dm.AcademicYearId = AcademicYearId AND dm.DataType = 'Trainers' AND DATE(dm.ReportDate) = DATE(ReportDate);
    
	INSERT INTO DsTrainers (AcademicYearId, VTPId, SectorId, DivisionId, DistrictId, SchoolManagementId, TotalVT, PlacedVT, ReportedVT, VCId, ClassId, JobRoleId, CreatedOn)
	SELECT DISTINCT vtm.AcademicYearId, vtm.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, 
		COUNT(DISTINCT vtm.VTId) AS TotalVT,             
		COUNT(DISTINCT vss.VTId) AS PlacedVT, 
        COUNT(DISTINCT vdr.VTId) AS ReportedVT,
        vtm.VCId, vtc.ClassId, vss.JobRoleId, NOW()	
    FROM VCTrainersMap vtm 
    INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VTPId = vcm.VTPId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
    LEFT JOIN VTSchoolSectors vss ON vtm.AcademicYearId = vss.AcademicYearId AND vtm.VTId = vss.VTId AND vss.IsActive = 1
	LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1	
    LEFT JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId         
	LEFT JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1    
	LEFT JOIN VTDailyReporting vdr ON vss.VTSchoolSectorId = vdr.VTSchoolSectorId AND vss.VTId = vdr.VTId AND DATE(vdr.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
	WHERE vtm.IsActive = 1 
		AND vtm.AcademicYearId = AcademicYearId
	GROUP BY vtm.AcademicYearId, vtm.VTPId, vss.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, vtm.VCId;
        
	SELECT ROW_COUNT() INTO @AffectedRows;
    INSERT INTO DsDataManagement (AcademicYearId, ReportDate, DataType, RowCount, CreatedOn)
	SELECT AcademicYearId, ReportDate, 'Trainers', @AffectedRows, NOW();
    
    COMMIT WORK;    	
																										   
    # CALL GenTrainersDataV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', '2023/01/13');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetAcademicYearsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetAcademicYearsByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT a.AcademicYearId, p.PhaseName, a.YearName, a.Description, a.IsActive
	FROM AcademicYears a
    LEFT JOIN Phases p ON a.PhaseId = p.PhaseId
	WHERE (name IS NULL OR (a.YearName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (a.YearName LIKE CONCAT(charBy, '%')))
	ORDER BY p.DisplayOrder, a.YearName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetAccountRolesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetAccountRolesByCriteria`(

	IN name  VARCHAR(100),

	IN charBy VARCHAR(5),

	IN pageIndex INT,

	IN pageSize INT

	)
BEGIN

	DECLARE offSetValue INT DEFAULT 0;

	SET offSetValue = (pageIndex-1) * pageSize;



	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;



	SELECT a.AccountRoleId, a.AccountId, a.RoleId, a.Remarks, a.IsActive
	FROM AccountRoles a

	WHERE (name IS NULL OR (a.Remarks LIKE CONCAT(name, '%')))

		AND ((charBy IS NULL OR charBy = 'All') OR (a.Remarks LIKE CONCAT(charBy, '%')))

	ORDER BY a.Remarks

	LIMIT pageSize

	OFFSET offSetValue;



    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;



    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetAccountsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetAccountsByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT a.AccountId, a.LoginId, a.UserName, a.EmailId, a.Mobile, a.AccountType, r.Code AS RoleCode, a.LastLoginDate, a.IsLocked, a.IsActive
	FROM Accounts a
    INNER JOIN AccountRoles ar ON a.AccountId = ar.AccountId
    INNER JOIN Roles r ON ar.RoleId = r.RoleId
	WHERE (name IS NULL OR (a.UserName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (a.UserName LIKE CONCAT(charBy, '%')))
	ORDER BY a.UserName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetAccountTransactionsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetAccountTransactionsByCriteria`(
	IN accountId VARCHAR(36),
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT ut.AccountTransactionId, a.UserName, t.Name AS TransactionName, ut.Rights, ut.CanAdd, ut.CanEdit, ut.CanDelete, ut.CanView, ut.CanExport, ut.ListView, ut.BasicView, ut.DetailView, ut.IsPublic, ut.Remarks, ut.IsActive
	FROM AccountTransactions ut
    INNER JOIN Accounts a ON ut.AccountId = a.AccountId
    INNER JOIN Transactions t ON ut.TransactionId = t.TransactionId
	WHERE 
		(name IS NULL OR (t.Name LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (t.Name LIKE CONCAT(charBy, '%')))
	ORDER BY t.Name
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetAccountWorkLocationsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetAccountWorkLocationsByCriteria`(
	IN AccountId VARCHAR(36)	
	)
BEGIN
	SELECT awl.AccountWorkLocationId, awl.AccountId, awl.StateCode, s.StateName, awl.DivisionId, dv.DivisionName, awl.DistrictId, d.DistrictName, 
		awl.BlockId, awl.BlockId AS BlockName, awl.ClusterId, awl.ClusterId AS ClusterName, awl.Remarks, awl.IsActive, 4 AS RequestType
	FROM AccountWorkLocations awl
	INNER JOIN States s ON awl.StateCode = s.StateCode 
	INNER JOIN Divisions dv ON awl.DivisionId = dv.DivisionId AND dv.IsActive = 1
	INNER JOIN Districts d ON awl.DistrictId = d.DistrictCode AND d.IsActive = 1
	LEFT JOIN Blocks b ON awl.BlockId = b.BlockId AND b.IsActive = 1
	LEFT JOIN Clusters c ON awl.ClusterId = c.ClusterId AND c.IsActive = 1
	WHERE awl.AccountId = AccountId;

	# CALL GetAccountWorkLocationsByCriteria ('280dd9a6-1cae-4542-85d6-0372d4b61d1b')
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetBlocksByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetBlocksByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT b.BlockId, d.DistrictName, b.BlockName, b.Description, b.IsActive
	FROM Blocks b
    INNER JOIN Districts d ON b.DistrictId = d.DistrictCode
	WHERE (name IS NULL OR (b.BlockName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (b.BlockName LIKE CONCAT(charBy, '%')))
	ORDER BY d.DistrictName, b.BlockName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetBroadcastMessagesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetBroadcastMessagesByCriteria`(
	IN userId VARCHAR(36),
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    SELECT b.BroadcastMessageId, b.MessageText, b.FromDate, b.ToDate, b.ApplicableFor, b.IsActive
	FROM BroadcastMessages b
	WHERE (name IS NULL OR (b.MessageText LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (b.ApplicableFor LIKE CONCAT(charBy, '%')))
	ORDER BY b.MessageText
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetClassesByVTId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetClassesByVTId`(
	IN userId VARCHAR(150),
    IN vtId VARCHAR(36)	 
	)
BEGIN 	
	SELECT DISTINCT vtc.ClassId AS Id, sc.Name AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo    
	FROM VTClasses vtc	
    INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.IsActive = 1
    INNER JOIN AcademicYears ay ON vtc.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
    INNER JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId
	WHERE vtc.VTId = vtId
	ORDER BY sc.DisplayOrder, sc.Name;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetClassSectionsByVTId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetClassSectionsByVTId`(
	IN userId VARCHAR(150),
    IN vtId VARCHAR(36)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;

	SELECT DISTINCT vtc.VTId, vtc.ClassId, sc.Name AS ClassName, vcs.SectionId, s.Name AS SectionName, sc.DisplayOrder, s.DisplayOrder
	FROM VTClasses vtc
    INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.IsActive = 1
	INNER JOIN VTClassSections vcs ON vtc.VTClassId = vcs.VTClassId
	INNER JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId
	INNER JOIN Sections s ON vcs.SectionId = s.SectionId
	WHERE vtc.IsActive = 1 AND vtc.VTId = vtId
	ORDER BY sc.DisplayOrder, s.DisplayOrder;
    
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetClustersByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetClustersByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT c.ClusterId, dv.DivisionName, d.DistrictName, b.BlockName, c.ClusterName, c.Description, c.IsActive
	FROM Clusters c
    INNER JOIN Blocks b ON c.BlockId = b.BlockId
    INNER JOIN Districts d ON b.DistrictId = d.DistrictCode
    INNER JOIN Divisions dv ON d.DivisionId = dv.DivisionId
	WHERE (name IS NULL OR (c.ClusterName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (c.ClusterName LIKE CONCAT(charBy, '%')))
	ORDER BY dv.DivisionName, d.DistrictName, b.BlockName, c.ClusterName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCommonMasterData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCommonMasterData`(
	IN userId VARCHAR(150)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;

	SELECT DISTINCT dv.DataValueId, dv.DataTypeId, dv.ParentId, dv.Code, dv.Name, dv.Description, dv.DisplayOrder 
	FROM DataValues dv
	WHERE dv.IsActive = 1
		
	ORDER BY dv.DataTypeId, dv.ParentId, dv.DisplayOrder, dv.Name;
    
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareCoordinatorsData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetCompareCoordinatorsData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
        IF(DataType = 'ByVTP') THEN
        BEGIN
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName) AS Id,
				vtp.VTPShortName AS Name,                
				COUNT(DISTINCT s.DistrictCode) Districts,
				COUNT(DISTINCT si.ImplementedSchoolId) SchoolsCovered,
				COUNT(DISTINCT vc.VCId) CoordinatorsPlaced,
				COUNT(DISTINCT vdr.VCId) CoordinatorsReporting,
				COUNT(DISTINCT vcsv.VCRSchoolVisitId) AS NoOfSchoolVisits,
				0 as NoOfMeetingsHeld,
				0 as NoOfOutreachActivities
			FROM SchoolsByVTPSectorInfo si
            INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1            
            LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
			LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
            LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
            LEFT JOIN VocationalCoordinators vc ON vt.VCId	= vc.VCId AND vc.IsActive = 1
			LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1                        
            LEFT JOIN VCDailyReporting vdr ON vc.VCId = vdr.VCId AND vdr.IsActive = 1 
            LEFT JOIN VCRSchoolVisits vcsv ON vdr.VCDailyReportingId = vcsv.VCDailyReportingId AND vcsv.IsActive = 1 	 
            WHERE (UserId IS NULL OR vt.VCId = @accountId)
				AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
				AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR si.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
            GROUP BY vtp.VTPShortName
            ORDER BY vtp.VTPShortName;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName) AS Id,
					se.SectorName AS Name,					
					COUNT(DISTINCT s.DistrictCode) Districts,
					COUNT(DISTINCT si.ImplementedSchoolId) SchoolsCovered,
					COUNT(DISTINCT vc.VCId) CoordinatorsPlaced,
					COUNT(DISTINCT vdr.VCId) CoordinatorsReporting,
					COUNT(DISTINCT vcsv.VCRSchoolVisitId) AS NoOfSchoolVisits,
					0 as NoOfMeetingsHeld,
					0 as NoOfOutreachActivities
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
                LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
				LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
				LEFT JOIN VocationalCoordinators vc ON vt.VCId	= vc.VCId AND vc.IsActive = 1
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1                        
				LEFT JOIN VCDailyReporting vdr ON vc.VCId = vdr.VCId AND vdr.IsActive = 1      
                LEFT JOIN VCRSchoolVisits vcsv ON vdr.VCDailyReportingId = vcsv.VCDailyReportingId AND vcsv.IsActive = 1 	 
				WHERE (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY se.SectorName
				ORDER BY se.SectorName;            
			END;
		END IF;   
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareCoordinatorsDataTmp` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetCompareCoordinatorsDataTmp`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
        DROP TEMPORARY TABLE IF EXISTS VocationalCoordinatorData;
   
		CREATE TEMPORARY TABLE VocationalCoordinatorData AS        	 
		SELECT DISTINCT ta.VTPId, ta.SectorId, ta.VCId, 
			AVG(ta.VCReportingCount) AS VCReporting, AVG(ta.TotalWorkingDays) AS WorkingDays,
			((AVG(ta.VCReportingCount) / AVG(ta.TotalWorkingDays)) * 100) AS VCAttendance
		FROM (
			SELECT DISTINCT svs.VTPId, svs.SectorId, vdr.VCId, DATE_FORMAT(vdr.ReportDate, '%Y/%m/01') AS ReportingMonth, 
				COUNT(DISTINCT DATE(vdr.ReportDate)) AS VCReportingCount, (DAY(LAST_DAY(vdr.ReportDate)) - GetNoOfSunday(vdr.ReportDate)) AS TotalWorkingDays
			FROM VCDailyReporting vdr
			INNER JOIN VCSchoolSectors vss ON vdr.VCSchoolSectorId = vss.VCSchoolSectorId
			INNER JOIN SchoolVTPSectors svs ON vss.SchoolVTPSectorId = svs.SchoolVTPSectorId
			INNER JOIN VocationalCoordinators vc ON vss.VCId = vc.VCId
			INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	
			INNER JOIN Schools s ON svs.SchoolId = s.SchoolId
            INNER JOIN JobRoles jr ON svs.SectorId = jr.SectorId
			WHERE vdr.IsActive = 1 AND vdr.ReportType = '49' 
				AND DATE(vdr.ReportDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth)
				AND MONTH(vdr.ReportDate) <= MONTH(LAST_DAY(NOW() - INTERVAL 1 MONTH))
                
				AND (UserId IS NULL OR vc.VCId = @accountId)
				AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
				AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
				AND (SectorId IS NULL OR svs.SectorId = SectorId)
				AND (JobRoleId IS NULL OR jr.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vc.VTPId = VTPId)
				
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				
			GROUP BY svs.VTPId, svs.SectorId, vdr.VCId, ReportingMonth
			ORDER BY vdr.VCId, ReportingMonth
		) AS ta  				
		GROUP BY ta.VTPId, ta.SectorId, ta.VCId;  
 
        IF(DataType = 'ByVTP') THEN
        BEGIN        
			DROP TEMPORARY TABLE IF EXISTS VocationalCoordinatorDataByVTP;
			CREATE TEMPORARY TABLE VocationalCoordinatorDataByVTP AS
			SELECT DISTINCT vtp.VTPId,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 				
				COUNT(DISTINCT vcd.VCId) AS CoordinatorsReporting,   	
				AVG(vcd.VCReporting) AS VCReporting,
                AVG(vcd.WorkingDays) AS WorkingDays,
                AVG(vcd.VCAttendance) AS VCAttendance                
			FROM SchoolsByVTPSectorGLFV si
			INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1       
			LEFT JOIN VocationalCoordinatorData vcd ON si.VTPId = vcd.VTPId AND si.SectorId = vcd.SectorId AND si.VCId = vcd.VCId
			GROUP BY si.VTPId;
	        
			SELECT ROW_NUMBER() OVER (ORDER BY vcr.Name) AS Id,
				vcr.Name,
                vcr.ImplementedSchools,                
                vcr.CoordinatorsPlaced,
                vcr.CoordinatorsReporting,                                                
                IF(vcr.CoordinatorAttendance IS NOT NULL, vcr.CoordinatorAttendance, 0) AS CoordinatorAttendance 
            FROM (
				SELECT DISTINCT vtp.VTPShortName AS Name,                
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools,
					COUNT(DISTINCT si.VCId) AS CoordinatorsPlaced,               			
                    SUM(DISTINCT vcd.CoordinatorsReporting) AS CoordinatorsReporting,               			
					AVG(vcd.VCReporting) AS VCReporting,
					AVG(vcd.WorkingDays) AS WorkingDays,                    
                    ROUND((vcd.VCAttendance / COUNT(DISTINCT si.VCId)), 2) AS CoordinatorAttendance
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1
				LEFT JOIN VocationalCoordinatorDataByVTP vcd ON si.VTPId = vcd.VTPId              
				GROUP BY vtp.VTPShortName
            ) AS vcr
            ORDER BY vcr.Name;
            
            DROP TEMPORARY TABLE IF EXISTS VocationalCoordinatorDataByVTP;
        END;
		ELSEIF(DataType = 'BySector') THEN
		BEGIN  
			DROP TEMPORARY TABLE IF EXISTS VocationalCoordinatorsBySector;
			CREATE TEMPORARY TABLE VocationalCoordinatorsBySector AS
			SELECT DISTINCT se.SectorId,                
				COUNT(DISTINCT si.ImplementedSchoolId, se.SectorId) AS ImplementedSchools, 				
				COUNT(DISTINCT vcd.VCId) AS CoordinatorsReporting,   	
				AVG(vcd.VCReporting) AS VCReporting,
				AVG(vcd.WorkingDays) AS WorkingDays,
				AVG(vcd.VCAttendance) AS VCAttendance
			FROM SchoolsByVTPSectorGLFV si				
			INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
			LEFT JOIN VocationalCoordinatorData vcd ON si.VTPId = vcd.VTPId AND si.SectorId = vcd.SectorId AND si.VCId = vcd.VCId
			GROUP BY se.SectorId;
		
			SELECT ROW_NUMBER() OVER (ORDER BY vcr.Name) AS Id,
				vcr.Name,
				vcr.ImplementedSchools,                
				vcr.CoordinatorsPlaced,
				vcr.CoordinatorsReporting,                                                
				IF(vcr.CoordinatorAttendance IS NOT NULL, vcr.CoordinatorAttendance, 0) AS CoordinatorAttendance 
			FROM (
				SELECT DISTINCT se.SectorName AS Name,                
					COUNT(DISTINCT si.ImplementedSchoolId, si.SectorId) AS ImplementedSchools, 				
					COUNT(DISTINCT si.VCId) AS CoordinatorsPlaced,               			
					SUM(DISTINCT vcd.CoordinatorsReporting) AS CoordinatorsReporting,               			
					AVG(vcd.VCReporting) AS VCReporting,
					AVG(vcd.WorkingDays) AS WorkingDays,                    
					ROUND((vcd.VCAttendance / COUNT(DISTINCT si.VCId)), 2) AS CoordinatorAttendance
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
				LEFT JOIN VocationalCoordinatorsBySector vcd ON si.SectorId = vcd.SectorId              
				GROUP BY se.SectorName
			) AS vcr
			ORDER BY vcr.Name;	
			
			DROP TEMPORARY TABLE IF EXISTS VocationalCoordinatorDataBySector;
		END;
		END IF;   
	END;
	
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareCoordinatorsDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareCoordinatorsDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
        IF(DataType = 'ByVTP') THEN
        BEGIN
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName) AS Id,
				vtp.VTPShortName AS Name,                
				COUNT(DISTINCT s.DistrictCode) Districts,
				COUNT(DISTINCT si.ImplementedSchoolId) SchoolsCovered,
				COUNT(DISTINCT vc.VCId) CoordinatorsPlaced,
				COUNT(DISTINCT vdr.VCId) CoordinatorsReporting,
				COUNT(DISTINCT vcsv.VCRSchoolVisitId) AS NoOfSchoolVisits,
				0 as NoOfMeetingsHeld,
				0 as NoOfOutreachActivities
			FROM SchoolsByVTPSectorInfo si
            INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1            
            LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
			LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
            LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
            LEFT JOIN VocationalCoordinators vc ON vt.VCId	= vc.VCId AND vc.IsActive = 1
			LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1                        
            LEFT JOIN VCDailyReporting vdr ON vc.VCId = vdr.VCId AND vdr.IsActive = 1 
            LEFT JOIN VCRSchoolVisits vcsv ON vdr.VCDailyReportingId = vcsv.VCDailyReportingId AND vcsv.IsActive = 1 	 
            WHERE (UserId IS NULL OR vt.VCId = @accountId)
				AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)				
                AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR si.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
            GROUP BY vtp.VTPShortName
            ORDER BY vtp.VTPShortName;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName) AS Id,
					se.SectorName AS Name,					
					COUNT(DISTINCT s.DistrictCode) Districts,
					COUNT(DISTINCT si.ImplementedSchoolId) SchoolsCovered,
					COUNT(DISTINCT vc.VCId) CoordinatorsPlaced,
					COUNT(DISTINCT vdr.VCId) CoordinatorsReporting,
					COUNT(DISTINCT vcsv.VCRSchoolVisitId) AS NoOfSchoolVisits,
					0 as NoOfMeetingsHeld,
					0 as NoOfOutreachActivities
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
                LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
				LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
				LEFT JOIN VocationalCoordinators vc ON vt.VCId	= vc.VCId AND vc.IsActive = 1
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1                        
				LEFT JOIN VCDailyReporting vdr ON vc.VCId = vdr.VCId AND vdr.IsActive = 1      
                LEFT JOIN VCRSchoolVisits vcsv ON vdr.VCDailyReportingId = vcsv.VCDailyReportingId AND vcsv.IsActive = 1 	 
				WHERE (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)					
                    AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY se.SectorName
				ORDER BY se.SectorName;            
			END;
		END IF;   
	END;
														 
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareCoordinatorsDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareCoordinatorsDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
        IF(DataType = 'ByVTP') THEN
        BEGIN
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName) AS Id,
				vtp.VTPShortName AS Name,                
				COUNT(DISTINCT s.DistrictCode) Districts,
				COUNT(DISTINCT si.ImplementedSchoolId) SchoolsCovered,
				COUNT(DISTINCT vcm.VCId) CoordinatorsPlaced,
				COUNT(DISTINCT vdr.VCId) CoordinatorsReporting,
				COUNT(DISTINCT vcsv.VCRSchoolVisitId) AS NoOfSchoolVisits,
				0 as NoOfMeetingsHeld,
				0 as NoOfOutreachActivities
			FROM SchoolsByVTPSectorInfo si
            INNER JOIN VTPAcademicYearsMap vtpm ON si.AcademicYearId = vtpm.AcademicYearId AND si.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
			INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId       
            LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
			LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
            LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1
            LEFT JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VTPId = vcm.VTPId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1            
			LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1                        
            LEFT JOIN VCDailyReporting vdr ON vcm.VCId = vdr.VCId AND vdr.IsActive = 1 
            LEFT JOIN VCRSchoolVisits vcsv ON vdr.VCDailyReportingId = vcsv.VCDailyReportingId AND vcsv.IsActive = 1 	 
            WHERE (UserId IS NULL OR vtm.VCId = @accountId)
				AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)				
                AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR si.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
            GROUP BY vtp.VTPShortName
            ORDER BY vtp.VTPShortName;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName) AS Id,
					se.SectorName AS Name,					
					COUNT(DISTINCT s.DistrictCode) Districts,
					COUNT(DISTINCT si.ImplementedSchoolId) SchoolsCovered,
					COUNT(DISTINCT vcm.VCId) CoordinatorsPlaced,
					COUNT(DISTINCT vdr.VCId) CoordinatorsReporting,
					COUNT(DISTINCT vcsv.VCRSchoolVisitId) AS NoOfSchoolVisits,
					0 as NoOfMeetingsHeld,
					0 as NoOfOutreachActivities
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
                LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
				LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1
				LEFT JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VTPId = vcm.VTPId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1                        
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1                        
				LEFT JOIN VCDailyReporting vdr ON vcm.VCId = vdr.VCId AND vdr.IsActive = 1      
                LEFT JOIN VCRSchoolVisits vcsv ON vdr.VCDailyReportingId = vcsv.VCDailyReportingId AND vcsv.IsActive = 1 	 
				WHERE (UserId IS NULL OR vtm.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)					
                    AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY se.SectorName
				ORDER BY se.SectorName;            
			END;
		END IF;   
	END;
			
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareCourseMaterialsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetCompareCourseMaterialsByCriteria`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code INTO @roleName
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
  
		DROP TEMPORARY TABLE IF EXISTS CompareCourseMaterialsTemp;

		CREATE TEMPORARY TABLE CompareCourseMaterialsTemp
		SELECT vtp.VTPShortName AS VTPName, 
			jr.JobRoleName AS JobRoleTaught,
			SUM(IF(ISNULL(svts.SchoolId),0,1)) AS ImplementedSchools,
			SUM(IF(ISNULL(jr.JobRoleId),0,1)) AS JobRoleUnits,
			SUM(IF(ISNULL(scs.ClassId),0,1)) AS Classes,
			SUM(IF(cm.CMStatus='Yes',1,0)) AS ClassesWithCourseMaterial,
			SUM(IF(cm.CMStatus='No',1,0)) AS ClassesWithoutCourseMaterial
		FROM SchoolVTPSectors svts
        LEFT JOIN VCSchoolSectors vcss ON svts.SchoolVTPSectorId = vcss.SchoolVTPSectorId 
		LEFT JOIN VocationalCoordinators vc ON svts.VTPId = vc.VTPId AND vcss.VCId = vc.VCId
        LEFT JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId 		
		LEFT JOIN VocationalTrainers vt ON vc.VCId = vt.VCId AND vc.VTPId = vt.VTPId  
		LEFT JOIN Sectors s on svts.SectorId = s.SectorId 
        LEFT JOIN JobRoles jr ON s.SectorId = jr.SectorId 
		LEFT JOIN StudentClasses sc ON vcss.AcademicYearId = sc.AcademicYearId AND svts.SchoolId = sc.SchoolId AND sc.IsActive = 1
		LEFT JOIN SchoolClasses scs ON sc.ClassId = scs.ClassId AND scs.IsActive=1
		LEFT JOIN CourseMaterials cm on sc.ClassId=cm.ClassId AND cm.IsActive=1
		WHERE svts.IsActive=1
		GROUP BY vtp.VTPShortName
		ORDER BY vtp.VTPShortName;
	    
		IF(dataType = 'ByVTP') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY VTPName ASC) AS SrNo, VTPName, JobRoleTaught, ImplementedSchools, JobRoleUnits, Classes, ClassesWithCourseMaterial, ClassesWithoutCourseMaterial, 0 AS StatusNotReported
				FROM CompareCourseMaterialsTemp
				GROUP BY VTPName
                ORDER BY VTPName;
			END;	 
		ELSEIF(dataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY SectorName ASC) AS SrNo, SectorName, JobRoleTaught, ImplementedSchools, JobRoleUnits, Classes, ClassesWithCourseMaterial, ClassesWithoutCourseMaterial, 0 AS StatusNotReported
				FROM CompareCourseMaterialsTemp
                WHERE SectorName IS NOT NULL
				GROUP BY SectorName
                ORDER BY SectorName;
			END;
		END IF;
        
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareCourseMaterialsData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetCompareCourseMaterialsData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
        IF(DataType = 'ByVTP') THEN
        BEGIN
			SELECT ROW_NUMBER() OVER (ORDER BY cmr.Name, cmr.JobroleTaught) AS Id,
				cmr.Name,
				cmr.JobroleTaught,
				cmr.ImplementedSchools,
				cmr.JobRoleUnits,
				cmr.Classes,
				cmr.ClassesWithCM,
				cmr.ClassesWithoutCM,
				(cmr.Classes - cmr.ClassesWithCM - cmr.ClassesWithoutCM) AS StatusNotReported            
			FROM (SELECT vtp.VTPShortName AS Name,
					jr.JobRoleName AS JobroleTaught,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,
					COUNT(DISTINCT si.VTClassId) AS Classes,               			
					SUM(IF(cm.CMStatus='Yes', 1, 0)) AS ClassesWithCM,
					SUM(IF(cm.CMStatus='No', 1, 0)) AS ClassesWithoutCM					
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1            
				LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
				LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
				LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
				LEFT JOIN CourseMaterials cm ON vtc.VTId = cm.VTId AND vtc.VTClassId = cm.ClassId AND cm.IsActive = 1                    
				WHERE jr.JobRoleName IS NOT NULL
					AND (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY vtp.VTPShortName, jr.JobRoleName
            ) AS cmr
            ORDER BY cmr.Name, cmr.JobroleTaught;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY cmr.Name, cmr.JobroleTaught) AS Id,
					cmr.Name,
					cmr.JobroleTaught,
					cmr.ImplementedSchools,
					cmr.JobRoleUnits,
					cmr.Classes,
					cmr.ClassesWithCM,
					cmr.ClassesWithoutCM,
					(cmr.Classes - cmr.ClassesWithCM - cmr.ClassesWithoutCM) AS StatusNotReported 
                FROM (SELECT se.SectorName AS Name,
						jr.JobRoleName AS JobroleTaught,
						COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
						COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,
						COUNT(DISTINCT si.VTClassId) AS Classes,               			
						SUM(IF(cm.CMStatus='Yes', 1, 0)) AS ClassesWithCM,
						SUM(IF(cm.CMStatus='No', 1, 0)) AS ClassesWithoutCM,             
						(COUNT(DISTINCT si.VTClassId) - SUM(IF(cm.CMStatus='Yes', 1, 0)) - SUM(IF(cm.CMStatus='No', 1, 0))) AS StatusNotReported
					FROM SchoolsByVTPSectorInfo si
					INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
					LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
					LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
					LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
					LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
					LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
					LEFT JOIN CourseMaterials cm ON vtc.VTId = cm.VTId AND vtc.VTClassId = cm.ClassId AND cm.IsActive = 1                    
					WHERE jr.JobRoleName IS NOT NULL
						AND (UserId IS NULL OR vt.VCId = @accountId)
						AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR si.VTPId = VTPId)
						AND (ClassId IS NULL OR vtc.ClassId = ClassId)
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					GROUP BY se.SectorName, jr.JobRoleName
				 ) AS cmr
				ORDER BY cmr.Name, cmr.JobroleTaught;
			END;
		END IF;   
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareCourseMaterialsDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareCourseMaterialsDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
        IF(DataType = 'ByVTP') THEN
        BEGIN
			SELECT ROW_NUMBER() OVER (ORDER BY cmr.Name, cmr.JobroleTaught) AS Id,
				cmr.Name,
				cmr.JobroleTaught,
				cmr.ImplementedSchools,
				cmr.JobRoleUnits,
				cmr.Classes,
				cmr.ClassesWithCM,
				cmr.ClassesWithoutCM,
				(cmr.Classes - cmr.ClassesWithCM - cmr.ClassesWithoutCM) AS StatusNotReported            
			FROM (SELECT vtp.VTPShortName AS Name,
					jr.JobRoleName AS JobroleTaught,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,
					COUNT(DISTINCT si.VTClassId) AS Classes,               			
					SUM(IF(cm.CMStatus='Yes', 1, 0)) AS ClassesWithCM,
					SUM(IF(cm.CMStatus='No', 1, 0)) AS ClassesWithoutCM					
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1            
				LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
				LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
				LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
				LEFT JOIN CourseMaterials cm ON vtc.VTId = cm.VTId AND vtc.VTClassId = cm.ClassId AND cm.IsActive = 1                    
				WHERE jr.JobRoleName IS NOT NULL
					AND (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)					
                    AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY vtp.VTPShortName, jr.JobRoleName
            ) AS cmr
            ORDER BY cmr.Name, cmr.JobroleTaught;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY cmr.Name, cmr.JobroleTaught) AS Id,
					cmr.Name,
					cmr.JobroleTaught,
					cmr.ImplementedSchools,
					cmr.JobRoleUnits,
					cmr.Classes,
					cmr.ClassesWithCM,
					cmr.ClassesWithoutCM,
					(cmr.Classes - cmr.ClassesWithCM - cmr.ClassesWithoutCM) AS StatusNotReported 
                FROM (SELECT se.SectorName AS Name,
						jr.JobRoleName AS JobroleTaught,
						COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
						COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,
						COUNT(DISTINCT si.VTClassId) AS Classes,               			
						SUM(IF(cm.CMStatus='Yes', 1, 0)) AS ClassesWithCM,
						SUM(IF(cm.CMStatus='No', 1, 0)) AS ClassesWithoutCM,             
						(COUNT(DISTINCT si.VTClassId) - SUM(IF(cm.CMStatus='Yes', 1, 0)) - SUM(IF(cm.CMStatus='No', 1, 0))) AS StatusNotReported
					FROM SchoolsByVTPSectorInfo si
					INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
					LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
					LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
					LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
					LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
					LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
					LEFT JOIN CourseMaterials cm ON vtc.VTId = cm.VTId AND vtc.VTClassId = cm.ClassId AND cm.IsActive = 1                    
					WHERE jr.JobRoleName IS NOT NULL
						AND (UserId IS NULL OR vt.VCId = @accountId)
						AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
                        AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR si.VTPId = VTPId)
						AND (ClassId IS NULL OR vtc.ClassId = ClassId)
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					GROUP BY se.SectorName, jr.JobRoleName
				 ) AS cmr
				ORDER BY cmr.Name, cmr.JobroleTaught;
			END;
		END IF;   
	END;
														 
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareCourseMaterialsDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareCourseMaterialsDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
        IF(DataType = 'ByVTP') THEN
        BEGIN
			SELECT ROW_NUMBER() OVER (ORDER BY cmr.Name, cmr.JobroleTaught) AS Id,
				cmr.Name,
				cmr.JobroleTaught,
				cmr.ImplementedSchools,
				cmr.JobRoleUnits,
				cmr.Classes,
				cmr.ClassesWithCM,
				cmr.ClassesWithoutCM,
				(cmr.Classes - cmr.ClassesWithCM - cmr.ClassesWithoutCM) AS StatusNotReported            
			FROM (SELECT vtp.VTPShortName AS Name,
					jr.JobRoleName AS JobroleTaught,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,
					COUNT(DISTINCT si.VTClassId) AS Classes,               			
					SUM(IF(cm.CMStatus='Yes', 1, 0)) AS ClassesWithCM,
					SUM(IF(cm.CMStatus='No', 1, 0)) AS ClassesWithoutCM					
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN VTPAcademicYearsMap vtpm ON si.AcademicYearId = vtpm.AcademicYearId AND si.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
				INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId        
				LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
				LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1                
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
				LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
				LEFT JOIN CourseMaterials cm ON vtc.VTId = cm.VTId AND vtc.VTClassId = cm.ClassId AND cm.IsActive = 1                    
				WHERE jr.JobRoleName IS NOT NULL
					AND (UserId IS NULL OR vtm.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)					
                    AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY vtp.VTPShortName, jr.JobRoleName
            ) AS cmr
            ORDER BY cmr.Name, cmr.JobroleTaught;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY cmr.Name, cmr.JobroleTaught) AS Id,
					cmr.Name,
					cmr.JobroleTaught,
					cmr.ImplementedSchools,
					cmr.JobRoleUnits,
					cmr.Classes,
					cmr.ClassesWithCM,
					cmr.ClassesWithoutCM,
					(cmr.Classes - cmr.ClassesWithCM - cmr.ClassesWithoutCM) AS StatusNotReported 
                FROM (SELECT se.SectorName AS Name,
						jr.JobRoleName AS JobroleTaught,
						COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
						COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,
						COUNT(DISTINCT si.VTClassId) AS Classes,               			
						SUM(IF(cm.CMStatus='Yes', 1, 0)) AS ClassesWithCM,
						SUM(IF(cm.CMStatus='No', 1, 0)) AS ClassesWithoutCM,             
						(COUNT(DISTINCT si.VTClassId) - SUM(IF(cm.CMStatus='Yes', 1, 0)) - SUM(IF(cm.CMStatus='No', 1, 0))) AS StatusNotReported
					FROM SchoolsByVTPSectorInfo si
					INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
					LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
					LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1					
                    LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1
					LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
					LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
					LEFT JOIN CourseMaterials cm ON vtc.VTId = cm.VTId AND vtc.VTClassId = cm.ClassId AND cm.IsActive = 1                    
					WHERE jr.JobRoleName IS NOT NULL
						AND (UserId IS NULL OR vtm.VCId = @accountId)
						AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
                        AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR si.VTPId = VTPId)
						AND (ClassId IS NULL OR vtc.ClassId = ClassId)
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					GROUP BY se.SectorName, jr.JobRoleName
				 ) AS cmr
				ORDER BY cmr.Name, cmr.JobroleTaught;
			END;
		END IF;   
	END;
			
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareFieldVisitsData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetCompareFieldVisitsData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
        DROP TEMPORARY TABLE IF EXISTS FieldVisits;
   
		CREATE TEMPORARY TABLE FieldVisits AS
        SELECT DISTINCT sc.VTPId, sc.SectorId, COUNT(sc.ClassTaughtId) AS Classes, SUM(sc.NoOfFVConducted) AS FieldVisitCount
		FROM (
			SELECT DISTINCT vt.VTPId, vss.SectorId,
				fvc.ClassTaughtId,  
				DATE_FORMAT(fvc.ReportingDate, "%M-%Y") AS MonthYear,		
				COUNT(fvc.VTFieldIndustryVisitConductedId) AS NoOfFVConducted
			FROM VTFieldIndustryVisitConducted fvc 
			INNER JOIN VTSchoolSectors vss ON fvc.VTSchoolSectorId = vss.VTSchoolSectorId AND fvc.VTId = vss.VTId AND vss.IsActive = 1
			INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	            
			INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1
			INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1        
			WHERE fvc.ReportingDate BETWEEN ay.StartMonth AND ay.EndMonth
				AND (UserId IS NULL OR vt.VCId = @accountId)
				AND DATE(fvc.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
				AND DATE(fvc.ReportingDate) <= DATE(LAST_DAY(NOW() - INTERVAL 1 MONTH))
				AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
				AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vt.VTPId = VTPId)
				AND (ClassId IS NULL OR fvc.ClassTaughtId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				
			GROUP BY vt.VTPId, vss.SectorId, fvc.ClassTaughtId, MonthYear
		) AS sc
		GROUP BY sc.VTPId, sc.SectorId;
 
        IF(DataType = 'ByVTP') THEN
        BEGIN        
			DROP TEMPORARY TABLE IF EXISTS SchoolDataByVTP;
			CREATE TEMPORARY TABLE SchoolDataByVTP AS			
			SELECT DISTINCT si.VTPId,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 				
				COUNT(DISTINCT si.VTClassId) AS Classes
			FROM SchoolsByVTPSectorInfo si			
			GROUP BY si.VTPId;
 
			SELECT ROW_NUMBER() OVER (ORDER BY fvr.Name) AS Id, fvr.Name, fvr.ImplementedSchools, fvr.Classes, 
				IF(fvr.FieldVisitCount IS NOT NULL, fvr.FieldVisitCount, 0) AS TotalFVConductedCount, 
                IF(fvr.FieldVisitCount IS NOT NULL, ROUND(fvr.FieldVisitCount / fvr.Classes * 100, 2), 0) AS AverageFVConductedPerClass                
            FROM (
				SELECT DISTINCT 
					vtp.VTPShortName AS Name,
					sd.ImplementedSchools,                
					sd.Classes,					
					SUM(fvc.FieldVisitCount) AS FieldVisitCount
				FROM SchoolDataByVTP sd
				LEFT JOIN VocationalTrainingProviders vtp ON sd.VTPId = vtp.VTPId
				LEFT JOIN FieldVisits fvc ON sd.VTPId = fvc.VTPId            
				GROUP BY vtp.VTPShortName
            ) AS fvr
            GROUP BY fvr.Name
            ORDER BY fvr.Name;
            
            DROP TEMPORARY TABLE IF EXISTS SchoolDataByVTP;
        END;
		ELSEIF(DataType = 'BySector') THEN
		BEGIN  
			DROP TEMPORARY TABLE IF EXISTS SchoolDataBySector;
			CREATE TEMPORARY TABLE SchoolDataBySector AS			
			SELECT DISTINCT si.SectorId,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.SectorId) AS ImplementedSchools, 				
				COUNT(DISTINCT si.VTClassId) AS Classes
			FROM SchoolsByVTPSectorInfo si			
			GROUP BY si.SectorId;
 
			SELECT ROW_NUMBER() OVER (ORDER BY fvr.Name) AS Id, fvr.Name, fvr.ImplementedSchools, fvr.Classes, 
				IF(fvr.FieldVisitCount IS NOT NULL, fvr.FieldVisitCount, 0) AS TotalFVConductedCount, 
				IF(fvr.FieldVisitCount IS NOT NULL, ROUND(fvr.FieldVisitCount / fvr.Classes * 100, 2), 0) AS AverageFVConductedPerClass                
			FROM (
				SELECT DISTINCT 
					se.SectorName AS Name,
					sd.ImplementedSchools,                
					sd.Classes,					
					SUM(fvc.FieldVisitCount) AS FieldVisitCount
				FROM SchoolDataBySector sd
				INNER JOIN Sectors se ON sd.SectorId = se.SectorId AND se.IsActive = 1
				LEFT JOIN FieldVisits fvc ON sd.SectorId = fvc.SectorId            
				GROUP BY se.SectorName
			) AS fvr
			GROUP BY fvr.Name
			ORDER BY fvr.Name;
			
			DROP TEMPORARY TABLE IF EXISTS SchoolDataBySector;				 
		END;
		END IF;   
	END;
	
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareFieldVisitsDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareFieldVisitsDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
        DROP TEMPORARY TABLE IF EXISTS FieldVisits;
   
		CREATE TEMPORARY TABLE FieldVisits AS
        SELECT DISTINCT dfv.VTPId, dfv.SectorId, COUNT(dfv.ClassTaughtId) AS Classes, SUM(dfv.FieldIndustryCount) AS FieldVisitCount
        FROM DsFieldVisits dfv	 
		WHERE (UserId IS NULL OR dfv.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR dfv.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR dfv.DivisionId = DivisionId)			
            AND (DistrictCode IS NULL OR dfv.DistrictId IN (SELECT DistrictId FROM tblDistricts))
			AND (SectorId IS NULL OR dfv.SectorId = SectorId)
			AND (JobRoleId IS NULL OR dfv.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dfv.VTPId = VTPId)
			AND (ClassId IS NULL OR dfv.ClassTaughtId = ClassId)
			AND (SchoolManagementId IS NULL OR dfv.SchoolManagementId = SchoolManagementId)
		GROUP BY dfv.VTPId, dfv.SectorId;
 
        IF(DataType = 'ByVTP') THEN
        BEGIN        
			DROP TEMPORARY TABLE IF EXISTS SchoolDataByVTP;
			CREATE TEMPORARY TABLE SchoolDataByVTP AS			
			SELECT DISTINCT si.VTPId,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 				
				COUNT(DISTINCT si.VTClassId) AS Classes
			FROM SchoolsByVTPSectorInfo si			
			GROUP BY si.VTPId;
 
			SELECT ROW_NUMBER() OVER (ORDER BY fvr.Name) AS Id, fvr.Name, fvr.ImplementedSchools, fvr.Classes, 
				IF(fvr.FieldVisitCount IS NOT NULL, fvr.FieldVisitCount, 0) AS TotalFVConductedCount, 
                IF(fvr.FieldVisitCount IS NOT NULL, ROUND(fvr.FieldVisitCount / fvr.Classes * 100, 2), 0) AS AverageFVConductedPerClass                
            FROM (
				SELECT DISTINCT 
					vtp.VTPShortName AS Name,
					sd.ImplementedSchools,                
					sd.Classes,					
					SUM(fvc.FieldVisitCount) AS FieldVisitCount
				FROM SchoolDataByVTP sd
				LEFT JOIN VocationalTrainingProviders vtp ON sd.VTPId = vtp.VTPId
				LEFT JOIN FieldVisits fvc ON sd.VTPId = fvc.VTPId            
				GROUP BY vtp.VTPShortName
            ) AS fvr
            GROUP BY fvr.Name
            ORDER BY fvr.Name;
            
            DROP TEMPORARY TABLE IF EXISTS SchoolDataByVTP;
        END;
		ELSEIF(DataType = 'BySector') THEN
		BEGIN  
			DROP TEMPORARY TABLE IF EXISTS SchoolDataBySector;
			CREATE TEMPORARY TABLE SchoolDataBySector AS			
			SELECT DISTINCT si.SectorId,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.SectorId) AS ImplementedSchools, 				
				COUNT(DISTINCT si.VTClassId) AS Classes
			FROM SchoolsByVTPSectorInfo si			
			GROUP BY si.SectorId;
 
			SELECT ROW_NUMBER() OVER (ORDER BY fvr.Name) AS Id, fvr.Name, fvr.ImplementedSchools, fvr.Classes, 
				IF(fvr.FieldVisitCount IS NOT NULL, fvr.FieldVisitCount, 0) AS TotalFVConductedCount, 
				IF(fvr.FieldVisitCount IS NOT NULL, ROUND(fvr.FieldVisitCount / fvr.Classes * 100, 2), 0) AS AverageFVConductedPerClass                
			FROM (
				SELECT DISTINCT 
					se.SectorName AS Name,
					sd.ImplementedSchools,                
					sd.Classes,					
					SUM(fvc.FieldVisitCount) AS FieldVisitCount
				FROM SchoolDataBySector sd
				INNER JOIN Sectors se ON sd.SectorId = se.SectorId AND se.IsActive = 1
				LEFT JOIN FieldVisits fvc ON sd.SectorId = fvc.SectorId            
				GROUP BY se.SectorName
			) AS fvr
			GROUP BY fvr.Name
			ORDER BY fvr.Name;
			
			DROP TEMPORARY TABLE IF EXISTS SchoolDataBySector;				 
		END;
		END IF;   
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareFieldVisitsDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareFieldVisitsDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
        DROP TEMPORARY TABLE IF EXISTS FieldVisits;
   
		CREATE TEMPORARY TABLE FieldVisits AS
        SELECT DISTINCT dfv.VTPId, dfv.SectorId, COUNT(dfv.ClassTaughtId) AS Classes, SUM(dfv.FieldIndustryCount) AS FieldVisitCount
        FROM DsFieldVisits dfv	 
		WHERE (UserId IS NULL OR dfv.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR dfv.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR dfv.DivisionId = DivisionId)			
            AND (DistrictCode IS NULL OR dfv.DistrictId IN (SELECT DistrictId FROM tblDistricts))
			AND (SectorId IS NULL OR dfv.SectorId = SectorId)
			AND (JobRoleId IS NULL OR dfv.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dfv.VTPId = VTPId)
			AND (ClassId IS NULL OR dfv.ClassTaughtId = ClassId)
			AND (SchoolManagementId IS NULL OR dfv.SchoolManagementId = SchoolManagementId)
		GROUP BY dfv.VTPId, dfv.SectorId;
 
        IF(DataType = 'ByVTP') THEN
        BEGIN        
			DROP TEMPORARY TABLE IF EXISTS SchoolDataByVTP;
			CREATE TEMPORARY TABLE SchoolDataByVTP AS			
			SELECT DISTINCT si.VTPId,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 				
				COUNT(DISTINCT si.VTClassId) AS Classes
			FROM SchoolsByVTPSectorInfo si			
			GROUP BY si.VTPId;
 
			SELECT ROW_NUMBER() OVER (ORDER BY fvr.Name) AS Id, fvr.Name, fvr.ImplementedSchools, fvr.Classes, 
				IF(fvr.FieldVisitCount IS NOT NULL, fvr.FieldVisitCount, 0) AS TotalFVConductedCount, 
                IF(fvr.FieldVisitCount IS NOT NULL, ROUND(fvr.FieldVisitCount / fvr.Classes * 100, 2), 0) AS AverageFVConductedPerClass                
            FROM (
				SELECT DISTINCT 
					vtp.VTPShortName AS Name,
					sd.ImplementedSchools,                
					sd.Classes,					
					SUM(fvc.FieldVisitCount) AS FieldVisitCount
				FROM SchoolDataByVTP sd
				LEFT JOIN VocationalTrainingProviders vtp ON sd.VTPId = vtp.VTPId
				LEFT JOIN FieldVisits fvc ON sd.VTPId = fvc.VTPId            
				GROUP BY vtp.VTPShortName
            ) AS fvr
            GROUP BY fvr.Name
            ORDER BY fvr.Name;
            
            DROP TEMPORARY TABLE IF EXISTS SchoolDataByVTP;
        END;
		ELSEIF(DataType = 'BySector') THEN
		BEGIN  
			DROP TEMPORARY TABLE IF EXISTS SchoolDataBySector;
			CREATE TEMPORARY TABLE SchoolDataBySector AS			
			SELECT DISTINCT si.SectorId,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.SectorId) AS ImplementedSchools, 				
				COUNT(DISTINCT si.VTClassId) AS Classes
			FROM SchoolsByVTPSectorInfo si			
			GROUP BY si.SectorId;
 
			SELECT ROW_NUMBER() OVER (ORDER BY fvr.Name) AS Id, fvr.Name, fvr.ImplementedSchools, fvr.Classes, 
				IF(fvr.FieldVisitCount IS NOT NULL, fvr.FieldVisitCount, 0) AS TotalFVConductedCount, 
				IF(fvr.FieldVisitCount IS NOT NULL, ROUND(fvr.FieldVisitCount / fvr.Classes * 100, 2), 0) AS AverageFVConductedPerClass                
			FROM (
				SELECT DISTINCT 
					se.SectorName AS Name,
					sd.ImplementedSchools,                
					sd.Classes,					
					SUM(fvc.FieldVisitCount) AS FieldVisitCount
				FROM SchoolDataBySector sd
				INNER JOIN Sectors se ON sd.SectorId = se.SectorId AND se.IsActive = 1
				LEFT JOIN FieldVisits fvc ON sd.SectorId = fvc.SectorId            
				GROUP BY se.SectorName
			) AS fvr
			GROUP BY fvr.Name
			ORDER BY fvr.Name;
			
			DROP TEMPORARY TABLE IF EXISTS SchoolDataBySector;				 
		END;
		END IF;   
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareGuestLecturesData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetCompareGuestLecturesData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
        DROP TEMPORARY TABLE IF EXISTS GuestLectures;
   
		CREATE TEMPORARY TABLE GuestLectures AS
		SELECT DISTINCT gls.VTPId, gls.SectorId, COUNT(gls.ClassTaughtId) AS Classes, SUM(gls.GuestLectureCount) AS GuestLectureCount
		FROM (
			SELECT DISTINCT vss.SectorId, vt.VTPId, glc.ClassTaughtId, DATE_FORMAT(glc.ReportingDate, '%Y/%m/01') AS ReportingMonth, COUNT(DISTINCT glc.VTGuestLectureId) AS GuestLectureCount
			FROM VTGuestLectureConducted glc
			INNER JOIN VTSchoolSectors vss ON glc.VTSchoolSectorId = vss.VTSchoolSectorId
			INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1
			INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1		
			INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
			INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId        
			WHERE DATE(glc.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth	            
					AND (UserId IS NULL OR vt.VCId = @accountId)
					AND DATE(glc.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
					AND DATE(glc.ReportingDate) <= DATE(LAST_DAY(NOW() - INTERVAL 1 MONTH))
					AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR vt.VTPId = VTPId)
					AND (ClassId IS NULL OR glc.ClassTaughtId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					
			GROUP BY vss.SectorId, vt.VTPId, ReportingMonth, glc.ClassTaughtId            
		) AS gls
        GROUP BY gls.VTPId, gls.SectorId;
			 	 
        IF(DataType = 'ByVTP') THEN
        BEGIN        
			DROP TEMPORARY TABLE IF EXISTS SchoolDataByVTP;
			CREATE TEMPORARY TABLE SchoolDataByVTP AS			
			SELECT DISTINCT si.VTPId,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 				
				COUNT(DISTINCT si.VTClassId) AS Classes
			FROM SchoolsByVTPSectorInfo si			
			GROUP BY si.VTPId;
 
			SELECT ROW_NUMBER() OVER (ORDER BY glr.Name) AS Id, glr.Name, glr.ImplementedSchools, glr.Classes, 
				IF(glr.GuestLectureCount IS NOT NULL, glr.GuestLectureCount, 0) AS TotalGLConductedCount, 
                IF(glr.GuestLectureCount IS NOT NULL, ROUND(glr.GuestLectureCount / glr.Classes * 100, 2), 0) AS AverageGLConductedPerClass                
            FROM (
				SELECT DISTINCT 
					vtp.VTPShortName AS Name,
					sd.ImplementedSchools,                
					sd.Classes,					
					SUM(glc.GuestLectureCount) AS GuestLectureCount
				FROM SchoolDataByVTP sd
				LEFT JOIN VocationalTrainingProviders vtp ON sd.VTPId = vtp.VTPId
				LEFT JOIN GuestLectures glc ON sd.VTPId = glc.VTPId            
				GROUP BY vtp.VTPShortName
            ) AS glr
            GROUP BY glr.Name
            ORDER BY glr.Name;
            
            DROP TEMPORARY TABLE IF EXISTS SchoolDataByVTP;
        END;
		ELSEIF(DataType = 'BySector') THEN
		BEGIN  
			DROP TEMPORARY TABLE IF EXISTS SchoolDataBySector;
			CREATE TEMPORARY TABLE SchoolDataBySector AS			
			SELECT DISTINCT si.SectorId,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.SectorId) AS ImplementedSchools, 				
				COUNT(DISTINCT si.VTClassId) AS Classes
			FROM SchoolsByVTPSectorInfo si			
			GROUP BY si.SectorId;
 
			SELECT ROW_NUMBER() OVER (ORDER BY glr.Name) AS Id, glr.Name, glr.ImplementedSchools, glr.Classes, 
				IF(glr.GuestLectureCount IS NOT NULL, glr.GuestLectureCount, 0) AS TotalGLConductedCount, 
				IF(glr.GuestLectureCount IS NOT NULL, ROUND(glr.GuestLectureCount / glr.Classes * 100, 2), 0) AS AverageGLConductedPerClass                
			FROM (
				SELECT DISTINCT 
					se.SectorName AS Name,
					sd.ImplementedSchools,                
					sd.Classes,					
					SUM(glc.GuestLectureCount) AS GuestLectureCount
				FROM SchoolDataBySector sd
				INNER JOIN Sectors se ON sd.SectorId = se.SectorId AND se.IsActive = 1
				LEFT JOIN GuestLectures glc ON sd.SectorId = glc.SectorId            
				GROUP BY se.SectorName
			) AS glr
			GROUP BY glr.Name
			ORDER BY glr.Name;
			
			DROP TEMPORARY TABLE IF EXISTS SchoolDataBySector;				 
		END;
		END IF;   
	END;
	
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareGuestLecturesDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareGuestLecturesDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
        DROP TEMPORARY TABLE IF EXISTS GuestLectures;
   
		CREATE TEMPORARY TABLE GuestLectures AS
		SELECT DISTINCT dgl.VTPId, dgl.SectorId, COUNT(dgl.ClassTaughtId) AS Classes, SUM(dgl.GuestLectureCount) AS GuestLectureCount		 
		FROM DsGuestLectures dgl	 
		WHERE (UserId IS NULL OR dgl.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR dgl.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR dgl.DivisionId = DivisionId)			
            AND (DistrictCode IS NULL OR dgl.DistrictId IN (SELECT DistrictId FROM tblDistricts))
			AND (SectorId IS NULL OR dgl.SectorId = SectorId)
			AND (JobRoleId IS NULL OR dgl.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dgl.VTPId = VTPId)
			AND (ClassId IS NULL OR dgl.ClassTaughtId = ClassId)
			AND (SchoolManagementId IS NULL OR dgl.SchoolManagementId = SchoolManagementId)			
																									  
        GROUP BY dgl.VTPId, dgl.SectorId;
			 	 
        IF(DataType = 'ByVTP') THEN
        BEGIN        
			DROP TEMPORARY TABLE IF EXISTS SchoolDataByVTP;
			CREATE TEMPORARY TABLE SchoolDataByVTP AS			
			SELECT DISTINCT si.VTPId,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 				
				COUNT(DISTINCT si.VTClassId) AS Classes
			FROM SchoolsByVTPSectorInfo si			
			GROUP BY si.VTPId;
 
			SELECT ROW_NUMBER() OVER (ORDER BY glr.Name) AS Id, glr.Name, glr.ImplementedSchools, glr.Classes, 
				IF(glr.GuestLectureCount IS NOT NULL, glr.GuestLectureCount, 0) AS TotalGLConductedCount, 
                IF(glr.GuestLectureCount IS NOT NULL, ROUND(glr.GuestLectureCount / glr.Classes * 100, 2), 0) AS AverageGLConductedPerClass                
            FROM (
				SELECT DISTINCT 
					vtp.VTPShortName AS Name,
					sd.ImplementedSchools,                
					sd.Classes,					
					SUM(glc.GuestLectureCount) AS GuestLectureCount
				FROM SchoolDataByVTP sd
				LEFT JOIN VocationalTrainingProviders vtp ON sd.VTPId = vtp.VTPId
				LEFT JOIN GuestLectures glc ON sd.VTPId = glc.VTPId            
				GROUP BY vtp.VTPShortName
            ) AS glr
            GROUP BY glr.Name
            ORDER BY glr.Name;
            
            DROP TEMPORARY TABLE IF EXISTS SchoolDataByVTP;
        END;
		ELSEIF(DataType = 'BySector') THEN
		BEGIN  
			DROP TEMPORARY TABLE IF EXISTS SchoolDataBySector;
			CREATE TEMPORARY TABLE SchoolDataBySector AS			
			SELECT DISTINCT si.SectorId,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.SectorId) AS ImplementedSchools, 				
				COUNT(DISTINCT si.VTClassId) AS Classes
			FROM SchoolsByVTPSectorInfo si			
			GROUP BY si.SectorId;
 
			SELECT ROW_NUMBER() OVER (ORDER BY glr.Name) AS Id, glr.Name, glr.ImplementedSchools, glr.Classes, 
				IF(glr.GuestLectureCount IS NOT NULL, glr.GuestLectureCount, 0) AS TotalGLConductedCount, 
				IF(glr.GuestLectureCount IS NOT NULL, ROUND(glr.GuestLectureCount / glr.Classes * 100, 2), 0) AS AverageGLConductedPerClass                
			FROM (
				SELECT DISTINCT 
					se.SectorName AS Name,
					sd.ImplementedSchools,                
					sd.Classes,					
					SUM(glc.GuestLectureCount) AS GuestLectureCount
				FROM SchoolDataBySector sd
				INNER JOIN Sectors se ON sd.SectorId = se.SectorId AND se.IsActive = 1
				LEFT JOIN GuestLectures glc ON sd.SectorId = glc.SectorId            
				GROUP BY se.SectorName
			) AS glr
			GROUP BY glr.Name
			ORDER BY glr.Name;
			
			DROP TEMPORARY TABLE IF EXISTS SchoolDataBySector;				 
		END;
		END IF;   
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareGuestLecturesDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareGuestLecturesDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(350),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
        DROP TEMPORARY TABLE IF EXISTS GuestLectures;
   
		CREATE TEMPORARY TABLE GuestLectures AS
		SELECT DISTINCT dgl.VTPId, dgl.SectorId, COUNT(dgl.ClassTaughtId) AS Classes, SUM(dgl.GuestLectureCount) AS GuestLectureCount		 
		FROM DsGuestLectures dgl	 
		WHERE (UserId IS NULL OR dgl.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR dgl.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR dgl.DivisionId = DivisionId)			
            AND (DistrictCode IS NULL OR dgl.DistrictId IN (SELECT DistrictId FROM tblDistricts))
			AND (SectorId IS NULL OR dgl.SectorId = SectorId)
			AND (JobRoleId IS NULL OR dgl.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dgl.VTPId = VTPId)
			AND (ClassId IS NULL OR dgl.ClassTaughtId = ClassId)
			AND (SchoolManagementId IS NULL OR dgl.SchoolManagementId = SchoolManagementId)			
																									  
        GROUP BY dgl.VTPId, dgl.SectorId;
			 	 
        IF(DataType = 'ByVTP') THEN
        BEGIN        
			DROP TEMPORARY TABLE IF EXISTS SchoolDataByVTP;
			CREATE TEMPORARY TABLE SchoolDataByVTP AS			
			SELECT DISTINCT si.VTPId,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 				
				COUNT(DISTINCT si.VTClassId) AS Classes
			FROM SchoolsByVTPSectorInfo si			
			GROUP BY si.VTPId;
 
			SELECT ROW_NUMBER() OVER (ORDER BY glr.Name) AS Id, glr.Name, glr.ImplementedSchools, glr.Classes, 
				IF(glr.GuestLectureCount IS NOT NULL, glr.GuestLectureCount, 0) AS TotalGLConductedCount, 
                IF(glr.GuestLectureCount IS NOT NULL, ROUND(glr.GuestLectureCount / glr.Classes * 100, 2), 0) AS AverageGLConductedPerClass                
            FROM (
				SELECT DISTINCT 
					vtp.VTPShortName AS Name,
					sd.ImplementedSchools,                
					sd.Classes,					
					SUM(glc.GuestLectureCount) AS GuestLectureCount
				FROM SchoolDataByVTP sd                
				LEFT JOIN VocationalTrainingProviders vtp ON sd.VTPId = vtp.VTPId
				LEFT JOIN GuestLectures glc ON sd.VTPId = glc.VTPId            
				GROUP BY vtp.VTPShortName
            ) AS glr
            GROUP BY glr.Name
            ORDER BY glr.Name;
            
            DROP TEMPORARY TABLE IF EXISTS SchoolDataByVTP;
        END;
		ELSEIF(DataType = 'BySector') THEN
		BEGIN  
			DROP TEMPORARY TABLE IF EXISTS SchoolDataBySector;
			CREATE TEMPORARY TABLE SchoolDataBySector AS			
			SELECT DISTINCT si.SectorId,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.SectorId) AS ImplementedSchools, 				
				COUNT(DISTINCT si.VTClassId) AS Classes
			FROM SchoolsByVTPSectorInfo si			
			GROUP BY si.SectorId;
 
			SELECT ROW_NUMBER() OVER (ORDER BY glr.Name) AS Id, glr.Name, glr.ImplementedSchools, glr.Classes, 
				IF(glr.GuestLectureCount IS NOT NULL, glr.GuestLectureCount, 0) AS TotalGLConductedCount, 
				IF(glr.GuestLectureCount IS NOT NULL, ROUND(glr.GuestLectureCount / glr.Classes * 100, 2), 0) AS AverageGLConductedPerClass                
			FROM (
				SELECT DISTINCT 
					se.SectorName AS Name,
					sd.ImplementedSchools,                
					sd.Classes,					
					SUM(glc.GuestLectureCount) AS GuestLectureCount
				FROM SchoolDataBySector sd
				INNER JOIN Sectors se ON sd.SectorId = se.SectorId AND se.IsActive = 1
				LEFT JOIN GuestLectures glc ON sd.SectorId = glc.SectorId            
				GROUP BY se.SectorName
			) AS glr
			GROUP BY glr.Name
			ORDER BY glr.Name;
			
			DROP TEMPORARY TABLE IF EXISTS SchoolDataBySector;				 
		END;
		END IF;   
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareNewEnrolmentAndDropoutStudentsData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareNewEnrolmentAndDropoutStudentsData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
		IF(DataType = 'ByVTP') THEN
        BEGIN        
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id,
				vtp.VTPShortName AS Name,
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
				COUNT(DISTINCT si.VTClassId) AS Classes,       
                COUNT(DISTINCT IF(std.IsActive = 1 AND std.DateOfDropout IS NULL, std.StudentId, NULL)) NewEnrolments,
                COUNT(DISTINCT IF(std.IsActive = 0 AND DateOfDropout IS NOT NULL, std.StudentId, NULL)) AS Dropouts,
				COUNT(DISTINCT IF(std.IsActive = 1 AND std.DateOfDropout IS NULL, std.StudentId, NULL)) AS CurrentStudents
			FROM SchoolsByVTPSectorInfo si
			INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1
            LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
			LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
            LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
			LEFT JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1
			LEFT JOIN StudentClasses std ON scm.SchoolId = std.SchoolId AND scm.StudentId = std.StudentId AND std.DeletedBy IS NULL AND std.IsActive = 1
            LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1			            
			WHERE (UserId IS NULL OR vt.VCId = @accountId)
				AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)				
                AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR si.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			GROUP BY vtp.VTPShortName
            ORDER BY vtp.VTPShortName;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName ASC) AS Id,
					se.SectorName AS Name,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.VTClassId) AS Classes,       
					COUNT(DISTINCT IF(std.IsActive = 1 AND std.DateOfDropout IS NULL, std.StudentId, NULL)) NewEnrolments,
					COUNT(DISTINCT IF(DateOfDropout IS NOT NULL, std.StudentId, NULL)) AS Dropouts,
					COUNT(DISTINCT IF(std.IsActive = 1 AND std.DateOfDropout IS NULL, std.StudentId, NULL)) AS CurrentStudents
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
                LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
				LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1																				
				LEFT JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1
				LEFT JOIN StudentClasses std ON scm.SchoolId = std.SchoolId AND scm.StudentId = std.StudentId AND std.DeletedBy IS NULL AND std.IsActive = 1
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1			            
				WHERE (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY se.SectorName
				ORDER BY se.SectorName;             
			END;
		END IF;   
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    
    
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareNewEnrolmentAndDropoutStudentsDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareNewEnrolmentAndDropoutStudentsDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
		IF(DataType = 'ByVTP') THEN
        BEGIN        
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id,
				vtp.VTPShortName AS Name,
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
				COUNT(DISTINCT si.VTClassId) AS Classes,       
                COUNT(DISTINCT IF(std.IsActive = 1 AND std.DateOfDropout IS NULL, std.StudentId, NULL)) NewEnrolments,
                COUNT(DISTINCT IF(std.IsActive = 0 AND DateOfDropout IS NOT NULL, std.StudentId, NULL)) AS Dropouts,
				COUNT(DISTINCT IF(std.IsActive = 1 AND std.DateOfDropout IS NULL, std.StudentId, NULL)) AS CurrentStudents
			FROM SchoolsByVTPSectorInfo si
			INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1
            LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
			LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
            LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
			LEFT JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1
			LEFT JOIN StudentClasses std ON scm.SchoolId = std.SchoolId AND scm.StudentId = std.StudentId AND std.DeletedBy IS NULL AND std.IsActive = 1
            LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1
			WHERE (UserId IS NULL OR vt.VCId = @accountId)
				AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)				
                AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR si.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			GROUP BY vtp.VTPShortName
            ORDER BY vtp.VTPShortName;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName ASC) AS Id,
					se.SectorName AS Name,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.VTClassId) AS Classes,       
					COUNT(DISTINCT IF(std.IsActive = 1 AND std.DateOfDropout IS NULL, std.StudentId, NULL)) NewEnrolments,
					COUNT(DISTINCT IF(DateOfDropout IS NOT NULL, std.StudentId, NULL)) AS Dropouts,
					COUNT(DISTINCT IF(std.IsActive = 1 AND std.DateOfDropout IS NULL, std.StudentId, NULL)) AS CurrentStudents
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
                LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
				LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
				LEFT JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1
				LEFT JOIN StudentClasses std ON scm.SchoolId = std.SchoolId AND scm.StudentId = std.StudentId AND std.DeletedBy IS NULL AND std.IsActive = 1
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1
				WHERE (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY se.SectorName
				ORDER BY se.SectorName;             
			END;
		END IF;   
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    
    
	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareNewEnrolmentAndDropoutStudentsDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareNewEnrolmentAndDropoutStudentsDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
		IF(DataType = 'ByVTP') THEN
        BEGIN        
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id,
				vtp.VTPShortName AS Name,
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
				COUNT(DISTINCT si.VTClassId) AS Classes,       
                COUNT(DISTINCT IF(std.IsActive = 1 AND std.DateOfDropout IS NULL, std.StudentId, NULL)) NewEnrolments,
                COUNT(DISTINCT IF(std.IsActive = 0 AND DateOfDropout IS NOT NULL, std.StudentId, NULL)) AS Dropouts,
				COUNT(DISTINCT IF(std.IsActive = 1 AND std.DateOfDropout IS NULL, std.StudentId, NULL)) AS CurrentStudents
			FROM SchoolsByVTPSectorInfo si
			INNER JOIN VTPAcademicYearsMap vtpm ON si.AcademicYearId = vtpm.AcademicYearId AND si.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
			INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId
            LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
			LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
            LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1
			LEFT JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1
			LEFT JOIN StudentClasses std ON scm.SchoolId = std.SchoolId AND scm.StudentId = std.StudentId AND std.DeletedBy IS NULL AND std.IsActive = 1
            LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1
			WHERE (UserId IS NULL OR vtm.VCId = @accountId)
				AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)				
                AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR si.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			GROUP BY vtp.VTPShortName
            ORDER BY vtp.VTPShortName;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName ASC) AS Id,
					se.SectorName AS Name,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.VTClassId) AS Classes,       
					COUNT(DISTINCT IF(std.IsActive = 1 AND std.DateOfDropout IS NULL, std.StudentId, NULL)) NewEnrolments,
					COUNT(DISTINCT IF(DateOfDropout IS NOT NULL, std.StudentId, NULL)) AS Dropouts,
					COUNT(DISTINCT IF(std.IsActive = 1 AND std.DateOfDropout IS NULL, std.StudentId, NULL)) AS CurrentStudents
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
                LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
				LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1
				LEFT JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1
				LEFT JOIN StudentClasses std ON scm.SchoolId = std.SchoolId AND scm.StudentId = std.StudentId AND std.DeletedBy IS NULL AND std.IsActive = 1
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1
				WHERE (UserId IS NULL OR vtm.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY se.SectorName
				ORDER BY se.SectorName;             
			END;
		END IF;   
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareSchoolsData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetCompareSchoolsData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
		IF(DataType = 'ByVTP') THEN
        BEGIN        
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id,
				vtp.VTPShortName AS Name,
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
				COUNT(DISTINCT si.ApprovedSchoolId) AS ApprovedSchools,
				COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,    
				COUNT(DISTINCT IF(vtc.ClassId = 'ef71e220-ed0a-4cec-a5b0-e06325d3dbf4', vtc.VTClassId, NULL), vtc.SchoolId) AS Class09,
				COUNT(DISTINCT IF(vtc.ClassId = '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', vtc.VTClassId, NULL), vtc.SchoolId) AS Class10,
				COUNT(DISTINCT IF(vtc.ClassId = '69257ab5-e836-46f1-b888-dfae5da5489c', vtc.VTClassId, NULL), vtc.SchoolId) AS Class11,
				COUNT(DISTINCT IF(vtc.ClassId = 'e0302e36-a8a7-49a0-b621-21d48986c43e', vtc.VTClassId, NULL), vtc.SchoolId) AS Class12,
				SUM(IF(std.Gender = 207, 1, 0)) AS StudentMale,
				SUM(IF(std.Gender = 208, 1, 0)) AS StudentFemale				
			FROM SchoolsByVTPSectorInfo si
			INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1
			LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
			LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
			LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
			LEFT JOIN VTClassStudents vcs ON vss.VTId = vcs.VTId AND vcs.IsActive = 1  
			LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
			LEFT JOIN StudentClasses std ON vtc.AcademicYearId = std.AcademicYearId AND vtc.SchoolId = std.SchoolId AND vtc.ClassId = std.ClassId AND vcs.StudentId = std.StudentId AND std.IsActive = 1 AND std.DeletedBy IS NULL		 
			WHERE (UserId IS NULL OR vt.VCId = @accountId)				 
                AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
				AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR si.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			GROUP BY vtp.VTPShortName
            ORDER BY vtp.VTPShortName;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName ASC) AS Id,
					se.SectorName AS Name,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.ApprovedSchoolId) AS ApprovedSchools,
					COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,    
					COUNT(DISTINCT IF(vtc.ClassId = 'ef71e220-ed0a-4cec-a5b0-e06325d3dbf4', vtc.VTClassId, NULL), vtc.SchoolId) AS Class09,
					COUNT(DISTINCT IF(vtc.ClassId = '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', vtc.VTClassId, NULL), vtc.SchoolId) AS Class10,
					COUNT(DISTINCT IF(vtc.ClassId = '69257ab5-e836-46f1-b888-dfae5da5489c', vtc.VTClassId, NULL), vtc.SchoolId) AS Class11,
					COUNT(DISTINCT IF(vtc.ClassId = 'e0302e36-a8a7-49a0-b621-21d48986c43e', vtc.VTClassId, NULL), vtc.SchoolId) AS Class12,
					SUM(IF(std.Gender = 207, 1, 0)) AS StudentMale,
					SUM(IF(std.Gender = 208, 1, 0)) AS StudentFemale
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
                LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
				LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
				LEFT JOIN VTClassStudents vcs ON vss.VTId = vcs.VTId AND vcs.IsActive = 1  
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
				LEFT JOIN StudentClasses std ON vtc.AcademicYearId = std.AcademicYearId AND vtc.SchoolId = std.SchoolId AND vtc.ClassId = std.ClassId AND vcs.StudentId = std.StudentId AND std.IsActive = 1 AND std.DeletedBy IS NULL		 
                WHERE (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY se.SectorName
				ORDER BY se.SectorName;             
			END;
		END IF;   
        
		DROP TEMPORARY TABLE IF EXISTS SchoolData;
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareSchoolsDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareSchoolsDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
		IF(DataType = 'ByVTP') THEN
        BEGIN        
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id,
				vtp.VTPShortName AS Name,
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
				COUNT(DISTINCT si.ApprovedSchoolId) AS ApprovedSchools,
				COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,    
				COUNT(DISTINCT IF(vtc.ClassId = 'ef71e220-ed0a-4cec-a5b0-e06325d3dbf4', vtc.VTClassId, NULL), vtc.SchoolId) AS Class09,
				COUNT(DISTINCT IF(vtc.ClassId = '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', vtc.VTClassId, NULL), vtc.SchoolId) AS Class10,
				COUNT(DISTINCT IF(vtc.ClassId = '69257ab5-e836-46f1-b888-dfae5da5489c', vtc.VTClassId, NULL), vtc.SchoolId) AS Class11,
				COUNT(DISTINCT IF(vtc.ClassId = 'e0302e36-a8a7-49a0-b621-21d48986c43e', vtc.VTClassId, NULL), vtc.SchoolId) AS Class12,
				COUNT(DISTINCT IF(std.StudentId IS NOT NULL AND std.Gender = 207, std.StudentId, NULL)) AS StudentMale,
				COUNT(DISTINCT IF(std.StudentId IS NOT NULL AND std.Gender = 208, std.StudentId, NULL)) AS StudentFemale	
			FROM SchoolsByVTPSectorInfo si
			INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1
			LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
			LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
			LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
			LEFT JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1
			LEFT JOIN StudentClasses std ON scm.SchoolId = std.SchoolId AND scm.StudentId = std.StudentId AND std.DeletedBy IS NULL AND std.IsActive = 1			
			LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
			WHERE (UserId IS NULL OR vt.VCId = @accountId)				 
                AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
				AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))                
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR si.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)                
			GROUP BY vtp.VTPShortName
            ORDER BY vtp.VTPShortName;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName ASC) AS Id,
					se.SectorName AS Name,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.ApprovedSchoolId) AS ApprovedSchools,
					COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,    
					COUNT(DISTINCT IF(vtc.ClassId = 'ef71e220-ed0a-4cec-a5b0-e06325d3dbf4', vtc.VTClassId, NULL), vtc.SchoolId) AS Class09,
					COUNT(DISTINCT IF(vtc.ClassId = '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', vtc.VTClassId, NULL), vtc.SchoolId) AS Class10,
					COUNT(DISTINCT IF(vtc.ClassId = '69257ab5-e836-46f1-b888-dfae5da5489c', vtc.VTClassId, NULL), vtc.SchoolId) AS Class11,
					COUNT(DISTINCT IF(vtc.ClassId = 'e0302e36-a8a7-49a0-b621-21d48986c43e', vtc.VTClassId, NULL), vtc.SchoolId) AS Class12,					
                    COUNT(DISTINCT IF(std.StudentId IS NOT NULL AND std.Gender = 207, std.StudentId, NULL)) AS StudentMale,
					COUNT(DISTINCT IF(std.StudentId IS NOT NULL AND std.Gender = 208, std.StudentId, NULL)) AS StudentFemale	
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
                LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
				LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
				LEFT JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1
				LEFT JOIN StudentClasses std ON scm.SchoolId = std.SchoolId AND scm.StudentId = std.StudentId AND std.DeletedBy IS NULL AND std.IsActive = 1
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
                WHERE (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)					
                    AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY se.SectorName
				ORDER BY se.SectorName;             
			END;
		END IF;   
        
		DROP TEMPORARY TABLE IF EXISTS SchoolData;
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareSchoolsDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareSchoolsDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
		IF(DataType = 'ByVTP') THEN
        BEGIN        
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id,
				vtp.VTPShortName AS Name,
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
				COUNT(DISTINCT si.ApprovedSchoolId) AS ApprovedSchools,
				COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,    
				COUNT(DISTINCT IF(vtc.ClassId = 'ef71e220-ed0a-4cec-a5b0-e06325d3dbf4', vtc.VTClassId, NULL), vtc.SchoolId) AS Class09,
				COUNT(DISTINCT IF(vtc.ClassId = '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', vtc.VTClassId, NULL), vtc.SchoolId) AS Class10,
				COUNT(DISTINCT IF(vtc.ClassId = '69257ab5-e836-46f1-b888-dfae5da5489c', vtc.VTClassId, NULL), vtc.SchoolId) AS Class11,
				COUNT(DISTINCT IF(vtc.ClassId = 'e0302e36-a8a7-49a0-b621-21d48986c43e', vtc.VTClassId, NULL), vtc.SchoolId) AS Class12,
				COUNT(DISTINCT IF(std.StudentId IS NOT NULL AND std.Gender = 207, std.StudentId, NULL)) AS StudentMale,
				COUNT(DISTINCT IF(std.StudentId IS NOT NULL AND std.Gender = 208, std.StudentId, NULL)) AS StudentFemale	
			FROM SchoolsByVTPSectorInfo si
			INNER JOIN VTPAcademicYearsMap vtpm ON si.AcademicYearId = vtpm.AcademicYearId AND si.VTPId = vtpm.VTPId AND vtpm.IsActive = 1                        
            INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId
			LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
			LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
			LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1            
			LEFT JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1
			LEFT JOIN StudentClasses std ON scm.SchoolId = std.SchoolId AND scm.StudentId = std.StudentId AND std.DeletedBy IS NULL AND std.IsActive = 1			
			LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
			WHERE (UserId IS NULL OR vtm.VCId = @accountId)				 
                AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
				AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))                
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR si.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)                
			GROUP BY vtp.VTPShortName
            ORDER BY vtp.VTPShortName;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName ASC) AS Id,
					se.SectorName AS Name,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.ApprovedSchoolId) AS ApprovedSchools,
					COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,    
					COUNT(DISTINCT IF(vtc.ClassId = 'ef71e220-ed0a-4cec-a5b0-e06325d3dbf4', vtc.VTClassId, NULL), vtc.SchoolId) AS Class09,
					COUNT(DISTINCT IF(vtc.ClassId = '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', vtc.VTClassId, NULL), vtc.SchoolId) AS Class10,
					COUNT(DISTINCT IF(vtc.ClassId = '69257ab5-e836-46f1-b888-dfae5da5489c', vtc.VTClassId, NULL), vtc.SchoolId) AS Class11,
					COUNT(DISTINCT IF(vtc.ClassId = 'e0302e36-a8a7-49a0-b621-21d48986c43e', vtc.VTClassId, NULL), vtc.SchoolId) AS Class12,					
                    COUNT(DISTINCT IF(std.StudentId IS NOT NULL AND std.Gender = 207, std.StudentId, NULL)) AS StudentMale,
					COUNT(DISTINCT IF(std.StudentId IS NOT NULL AND std.Gender = 208, std.StudentId, NULL)) AS StudentFemale	
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
                LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
				LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1
				LEFT JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1
				LEFT JOIN StudentClasses std ON scm.SchoolId = std.SchoolId AND scm.StudentId = std.StudentId AND std.DeletedBy IS NULL AND std.IsActive = 1
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
                WHERE (UserId IS NULL OR vtm.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)					
                    AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY se.SectorName
				ORDER BY se.SectorName;             
			END;
		END IF;   
        
		DROP TEMPORARY TABLE IF EXISTS SchoolData;
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareStudentsData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareStudentsData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
		IF(DataType = 'ByVTP') THEN
        BEGIN      
			DROP TEMPORARY TABLE IF EXISTS StudentAttendanceByVTP;
			
            CREATE TEMPORARY TABLE StudentAttendanceByVTP AS
			SELECT vt.VTPId, ROUND(AVG(dsa.AttendancesInPerc), 2) AS StudentAttendance
			FROM DsStudentAttendances dsa
			INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
			INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
			INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
			INNER JOIN VocationalTrainingProviders vtp ON vt.VTPId = vtp.VTPId
			WHERE (UserId IS NULL OR vt.VCId = @accountId)
				AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
				AND (DistrictId IS NULL OR s.DistrictCode = DistrictId)
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vt.VTPId = VTPId)
				AND (ClassId IS NULL OR dsa.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			GROUP BY vt.VTPId;
        
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id,
				vtp.VTPShortName AS Name,
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
				COUNT(DISTINCT si.VTClassId) AS Classes,       
                COUNT(DISTINCT std.StudentId) AS EnrollmentStudents,
				CAST(sas.StudentAttendance AS SIGNED) AS StudentAttendance
			FROM SchoolsByVTPSectorInfo si
			INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1
            LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
			LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
            LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
			LEFT JOIN VTClassStudents vcs ON vss.VTId = vcs.VTId AND vcs.IsActive = 1  
			LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vcs.VTId = vtc.VTId AND vtc.IsActive = 1
			LEFT JOIN StudentClasses std ON vtc.AcademicYearId = std.AcademicYearId AND vtc.SchoolId = std.SchoolId AND vtc.ClassId = std.ClassId AND vcs.StudentId = std.StudentId AND std.IsActive = 1 AND std.DateOfDropout IS NULL AND std.DeletedBy IS NULL
            LEFT JOIN StudentAttendanceByVTP sas ON si.VTPId = sas.VTPId
			WHERE (UserId IS NULL OR vt.VCId = @accountId)
				AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
				AND (DistrictId IS NULL OR s.DistrictCode = DistrictId)
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR si.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			GROUP BY vtp.VTPShortName
            ORDER BY vtp.VTPShortName;
            
            DROP TEMPORARY TABLE IF EXISTS StudentAttendanceByVTP;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				DROP TEMPORARY TABLE IF EXISTS StudentAttendanceBySector;
            	CREATE TEMPORARY TABLE StudentAttendanceBySector AS
				SELECT vss.SectorId, 				 
					ROUND(AVG(dsa.AttendancesInPerc), 2) AS StudentAttendance
				FROM DsStudentAttendances dsa
				INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
				INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
				INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
				INNER JOIN Sectors se ON vss.SectorId = se.SectorId
				WHERE (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictId IS NULL OR s.DistrictCode = DistrictId)
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR vt.VTPId = VTPId)
					AND (ClassId IS NULL OR dsa.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY vss.SectorId;

				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName ASC) AS Id,
					se.SectorName AS Name,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.VTClassId) AS Classes,       
					COUNT(DISTINCT std.StudentId) AS EnrollmentStudents,
					CAST(sas.StudentAttendance AS SIGNED) AS StudentAttendance
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
                LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
                LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
				LEFT JOIN VTClassStudents vcs ON vss.VTId = vcs.VTId AND vcs.IsActive = 1  
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vcs.VTId = vtc.VTId AND vtc.IsActive = 1
				LEFT JOIN StudentClasses std ON vtc.AcademicYearId = std.AcademicYearId AND vtc.SchoolId = std.SchoolId AND vtc.ClassId = std.ClassId AND vcs.StudentId = std.StudentId AND std.IsActive = 1 AND std.DeletedBy IS NULL
                LEFT JOIN StudentAttendanceBySector sas ON se.SectorId = sas.SectorId
                WHERE (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictId IS NULL OR s.DistrictCode = DistrictId)
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY se.SectorName
				ORDER BY se.SectorName;    
                
                DROP TEMPORARY TABLE IF EXISTS StudentAttendanceBySector;
			END;
		END IF;   
        
		DROP TEMPORARY TABLE IF EXISTS SchoolData;
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareStudentsDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareStudentsDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
		IF(DataType = 'ByVTP') THEN
        BEGIN      
			DROP TEMPORARY TABLE IF EXISTS StudentAttendanceByVTP;
			
            CREATE TEMPORARY TABLE StudentAttendanceByVTP AS
			SELECT vt.VTPId, ROUND(AVG(dsa.AttendancesInPerc), 2) AS StudentAttendance
			FROM DsStudentAttendances dsa
			INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
			INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
			INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
			INNER JOIN VocationalTrainingProviders vtp ON vt.VTPId = vtp.VTPId
			WHERE (UserId IS NULL OR vt.VCId = @accountId)
				AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)				
                AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vt.VTPId = VTPId)
				AND (ClassId IS NULL OR dsa.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			GROUP BY vt.VTPId;
        
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id,
				vtp.VTPShortName AS Name,
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
				COUNT(DISTINCT si.VTClassId) AS Classes,       
                COUNT(DISTINCT std.StudentId) AS EnrollmentStudents,
				CAST(sas.StudentAttendance AS SIGNED) AS StudentAttendance
			FROM SchoolsByVTPSectorInfo si
			INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1
            LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
			LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
            LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
			LEFT JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1
			LEFT JOIN StudentClasses std ON scm.SchoolId = std.SchoolId AND scm.StudentId = std.StudentId AND std.DeletedBy IS NULL AND std.IsActive = 1
			LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1            
            LEFT JOIN StudentAttendanceByVTP sas ON si.VTPId = sas.VTPId
			WHERE (UserId IS NULL OR vt.VCId = @accountId)
				AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
				AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR si.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			GROUP BY vtp.VTPShortName
            ORDER BY vtp.VTPShortName;
            
            DROP TEMPORARY TABLE IF EXISTS StudentAttendanceByVTP;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				DROP TEMPORARY TABLE IF EXISTS StudentAttendanceBySector;
            	CREATE TEMPORARY TABLE StudentAttendanceBySector AS
				SELECT vss.SectorId, 				 
					ROUND(AVG(dsa.AttendancesInPerc), 2) AS StudentAttendance
				FROM DsStudentAttendances dsa
				INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
				INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
				INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
				INNER JOIN Sectors se ON vss.SectorId = se.SectorId
				WHERE (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR vt.VTPId = VTPId)
					AND (ClassId IS NULL OR dsa.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY vss.SectorId;

				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName ASC) AS Id,
					se.SectorName AS Name,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.VTClassId) AS Classes,       
					COUNT(DISTINCT std.StudentId) AS EnrollmentStudents,
					CAST(sas.StudentAttendance AS SIGNED) AS StudentAttendance
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
                LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
                LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
                LEFT JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1				
                LEFT JOIN StudentClasses std ON scm.SchoolId = std.SchoolId AND scm.StudentId = std.StudentId AND std.DeletedBy IS NULL AND std.IsActive = 1
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1
                LEFT JOIN StudentAttendanceBySector sas ON se.SectorId = sas.SectorId
                WHERE (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY se.SectorName
				ORDER BY se.SectorName;    
                
                DROP TEMPORARY TABLE IF EXISTS StudentAttendanceBySector;
			END;
		END IF;      
	END;

	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareStudentsDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareStudentsDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
		IF(DataType = 'ByVTP') THEN
        BEGIN      
			DROP TEMPORARY TABLE IF EXISTS StudentAttendanceByVTP;
			
            CREATE TEMPORARY TABLE StudentAttendanceByVTP AS
			SELECT vtm.VTPId, ROUND(AVG(dsa.AttendancesInPerc), 2) AS StudentAttendance
			FROM DsStudentAttendances dsa
			INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
            LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1
			INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
			INNER JOIN VocationalTrainingProviders vtp ON vtm.VTPId = vtp.VTPId
			WHERE (UserId IS NULL OR vtm.VCId = @accountId)
				AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)				
                AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vtm.VTPId = VTPId)
				AND (ClassId IS NULL OR dsa.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			GROUP BY vtm.VTPId;
        
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id,
				vtp.VTPShortName AS Name,
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
				COUNT(DISTINCT si.VTClassId) AS Classes,       
                COUNT(DISTINCT std.StudentId) AS EnrollmentStudents,
				CAST(IFNULL(sas.StudentAttendance, 0) AS SIGNED) AS StudentAttendance
			FROM SchoolsByVTPSectorInfo si
            INNER JOIN VTPAcademicYearsMap vtpm ON si.AcademicYearId = vtpm.AcademicYearId AND si.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
			INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
            LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
			LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1            
            LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1
			LEFT JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1
			LEFT JOIN StudentClasses std ON scm.SchoolId = std.SchoolId AND scm.StudentId = std.StudentId AND std.DeletedBy IS NULL AND std.IsActive = 1
			LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1            
            LEFT JOIN StudentAttendanceByVTP sas ON si.VTPId = sas.VTPId
			WHERE (UserId IS NULL OR vtm.VCId = @accountId)
				AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
				AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR si.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			GROUP BY vtp.VTPShortName
            ORDER BY vtp.VTPShortName;
            
            DROP TEMPORARY TABLE IF EXISTS StudentAttendanceByVTP;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				DROP TEMPORARY TABLE IF EXISTS StudentAttendanceBySector;
            	CREATE TEMPORARY TABLE StudentAttendanceBySector AS
				SELECT vss.SectorId, 				 
					ROUND(AVG(dsa.AttendancesInPerc), 2) AS StudentAttendance
				FROM DsStudentAttendances dsa
				INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
                LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1
				INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
				INNER JOIN Sectors se ON vss.SectorId = se.SectorId
				WHERE (UserId IS NULL OR vtm.VCId = @accountId)
					AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR vtm.VTPId = VTPId)
					AND (ClassId IS NULL OR dsa.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY vss.SectorId;

				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName ASC) AS Id,
					se.SectorName AS Name,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.VTClassId) AS Classes,       
					COUNT(DISTINCT std.StudentId) AS EnrollmentStudents,
					CAST(IFNULL(sas.StudentAttendance, 0) AS SIGNED) AS StudentAttendance
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
                LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
                LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1
                LEFT JOIN StudentClassMapping scm ON vss.AcademicYearId = scm.AcademicYearId AND vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1				
                LEFT JOIN StudentClasses std ON scm.SchoolId = std.SchoolId AND scm.StudentId = std.StudentId AND std.DeletedBy IS NULL AND std.IsActive = 1
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1
                LEFT JOIN StudentAttendanceBySector sas ON se.SectorId = sas.SectorId
                WHERE (UserId IS NULL OR vtm.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY se.SectorName
				ORDER BY se.SectorName;    
                
                DROP TEMPORARY TABLE IF EXISTS StudentAttendanceBySector;
			END;
		END IF;   
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareToolsAndEquipmentsData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetCompareToolsAndEquipmentsData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
        IF(DataType = 'ByVTP') THEN
        BEGIN
			SELECT ROW_NUMBER() OVER (ORDER BY ter.Name, ter.JobroleTaught) AS Id,
					ter.Name,
					ter.JobroleTaught,
					ter.ImplementedSchools,
					ter.JobRoleUnits,
					ter.Classes,
					ter.JobroleUnitsWithTE,
					ter.JobroleUnitsWithoutTE,
					(ter.JobRoleUnits - ter.JobroleUnitsWithTE - ter.JobroleUnitsWithoutTE) AS StatusNotReported            
			FROM (SELECT vtp.VTPShortName AS Name,
					jr.JobRoleName AS JobroleTaught,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,
					COUNT(DISTINCT si.VTClassId) AS Classes,    
					COUNT(DISTINCT IF(te.TEReceiveStatus='Yes', te.ToolEquipmentId, NULL)) JobroleUnitsWithTE,
					COUNT(DISTINCT IF(te.TEReceiveStatus='No', te.ToolEquipmentId, NULL)) JobroleUnitsWithoutTE            				
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1            
				LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
				LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
				LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
				LEFT JOIN ToolEquipments te ON vss.VTSchoolSectorId = te.SectorId AND vss.VTId = te.VTId AND te.IsActive = 1        
				WHERE jr.JobRoleName IS NOT NULL
					AND (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY vtp.VTPShortName, jr.JobRoleName
			) AS ter
            ORDER BY ter.Name, ter.JobroleTaught;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY ter.Name, ter.JobroleTaught) AS Id,
					ter.Name,
					ter.JobroleTaught,
					ter.ImplementedSchools,
					ter.JobRoleUnits,
					ter.Classes,
					ter.JobroleUnitsWithTE,
					ter.JobroleUnitsWithoutTE,
					(ter.JobRoleUnits - ter.JobroleUnitsWithTE - ter.JobroleUnitsWithoutTE) AS StatusNotReported            
				FROM (SELECT se.SectorName AS Name,
						jr.JobRoleName AS JobroleTaught,
						COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
						COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,
						COUNT(DISTINCT si.VTClassId) AS Classes,               			
						COUNT(DISTINCT IF(te.TEReceiveStatus='Yes', te.ToolEquipmentId, NULL)) JobroleUnitsWithTE,
						COUNT(DISTINCT IF(te.TEReceiveStatus='No', te.ToolEquipmentId, NULL)) JobroleUnitsWithoutTE						
					FROM SchoolsByVTPSectorInfo si
					INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
					LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
					LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
					LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
					LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
					LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
					LEFT JOIN ToolEquipments te ON vss.VTSchoolSectorId = te.SectorId AND vss.VTId = te.VTId AND te.IsActive = 1        
					WHERE jr.JobRoleName IS NOT NULL
						AND (UserId IS NULL OR vt.VCId = @accountId)
						AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR si.VTPId = VTPId)
						AND (ClassId IS NULL OR vtc.ClassId = ClassId)
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					GROUP BY se.SectorName, jr.JobRoleName
				) AS ter
				ORDER BY ter.Name, ter.JobroleTaught;            
			END;
		END IF;   
	END;
	
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareToolsAndEquipmentsDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareToolsAndEquipmentsDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
        IF(DataType = 'ByVTP') THEN
        BEGIN
			SELECT ROW_NUMBER() OVER (ORDER BY ter.Name, ter.JobroleTaught) AS Id,
				ter.Name,
				ter.JobroleTaught,
				ter.ImplementedSchools,
				ter.JobRoleUnits,
				ter.Classes,
				ter.JobroleUnitsWithTE,
				ter.JobroleUnitsWithoutTE,
				(ter.JobRoleUnits - ter.JobroleUnitsWithTE - ter.JobroleUnitsWithoutTE) AS StatusNotReported            
			FROM (SELECT vtp.VTPShortName AS Name,
					jr.JobRoleName AS JobroleTaught,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,
					COUNT(DISTINCT si.VTClassId) AS Classes,    
					COUNT(DISTINCT IF(te.TEReceiveStatus='Yes', te.ToolEquipmentId, NULL)) JobroleUnitsWithTE,
					COUNT(DISTINCT IF(te.TEReceiveStatus='No', te.ToolEquipmentId, NULL)) JobroleUnitsWithoutTE            				
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1            
				LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
				LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
				LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
				LEFT JOIN ToolEquipments te ON vss.VTSchoolSectorId = te.SectorId AND vss.VTId = te.VTId AND te.IsActive = 1        
				WHERE jr.JobRoleName IS NOT NULL
					AND (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
                    AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY vtp.VTPShortName, jr.JobRoleName
			) AS ter
            ORDER BY ter.Name, ter.JobroleTaught;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY ter.Name, ter.JobroleTaught) AS Id,
					ter.Name,
					ter.JobroleTaught,
					ter.ImplementedSchools,
					ter.JobRoleUnits,
					ter.Classes,
					ter.JobroleUnitsWithTE,
					ter.JobroleUnitsWithoutTE,
					(ter.JobRoleUnits - ter.JobroleUnitsWithTE - ter.JobroleUnitsWithoutTE) AS StatusNotReported            
				FROM (SELECT se.SectorName AS Name,
						jr.JobRoleName AS JobroleTaught,
						COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
						COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,
						COUNT(DISTINCT si.VTClassId) AS Classes,               			
						COUNT(DISTINCT IF(te.TEReceiveStatus='Yes', te.ToolEquipmentId, NULL)) JobroleUnitsWithTE,
						COUNT(DISTINCT IF(te.TEReceiveStatus='No', te.ToolEquipmentId, NULL)) JobroleUnitsWithoutTE						
					FROM SchoolsByVTPSectorInfo si
					INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
					LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
					LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
					LEFT JOIN VocationalTrainers vt ON vss.VTId	= vt.VTId AND vt.IsActive = 1
					LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
					LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
					LEFT JOIN ToolEquipments te ON vss.VTSchoolSectorId = te.SectorId AND vss.VTId = te.VTId AND te.IsActive = 1        
					WHERE jr.JobRoleName IS NOT NULL
						AND (UserId IS NULL OR vt.VCId = @accountId)
						AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR si.VTPId = VTPId)
						AND (ClassId IS NULL OR vtc.ClassId = ClassId)
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					GROUP BY se.SectorName, jr.JobRoleName
				) AS ter
				ORDER BY ter.Name, ter.JobroleTaught;            
			END;
		END IF;   
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareToolsAndEquipmentsDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareToolsAndEquipmentsDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
        IF(DataType = 'ByVTP') THEN
        BEGIN
			SELECT ROW_NUMBER() OVER (ORDER BY ter.Name, ter.JobroleTaught) AS Id,
				ter.Name,
				ter.JobroleTaught,
				ter.ImplementedSchools,
				ter.JobRoleUnits,
				ter.Classes,
				ter.JobroleUnitsWithTE,
				ter.JobroleUnitsWithoutTE,
				(ter.JobRoleUnits - ter.JobroleUnitsWithTE - ter.JobroleUnitsWithoutTE) AS StatusNotReported            
			FROM (SELECT vtp.VTPShortName AS Name,
					jr.JobRoleName AS JobroleTaught,
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
					COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,
					COUNT(DISTINCT si.VTClassId) AS Classes,    
					COUNT(DISTINCT IF(te.TEReceiveStatus='Yes', te.ToolEquipmentId, NULL)) JobroleUnitsWithTE,
					COUNT(DISTINCT IF(te.TEReceiveStatus='No', te.ToolEquipmentId, NULL)) JobroleUnitsWithoutTE            				
				FROM SchoolsByVTPSectorInfo si
                INNER JOIN VTPAcademicYearsMap vtpm ON si.AcademicYearId = vtpm.AcademicYearId AND si.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
				INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId       
				LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1				
                LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1
				LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
				LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
				LEFT JOIN ToolEquipments te ON vss.VTSchoolSectorId = te.SectorId AND vss.VTId = te.VTId AND te.IsActive = 1        
				WHERE jr.JobRoleName IS NOT NULL
					AND (UserId IS NULL OR vtm.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
                    AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY vtp.VTPShortName, jr.JobRoleName
			) AS ter
            ORDER BY ter.Name, ter.JobroleTaught;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY ter.Name, ter.JobroleTaught) AS Id,
					ter.Name,
					ter.JobroleTaught,
					ter.ImplementedSchools,
					ter.JobRoleUnits,
					ter.Classes,
					ter.JobroleUnitsWithTE,
					ter.JobroleUnitsWithoutTE,
					(ter.JobRoleUnits - ter.JobroleUnitsWithTE - ter.JobroleUnitsWithoutTE) AS StatusNotReported            
				FROM (SELECT se.SectorName AS Name,
						jr.JobRoleName AS JobroleTaught,
						COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools, 
						COUNT(DISTINCT si.VTSchoolSectorId) AS JobRoleUnits,
						COUNT(DISTINCT si.VTClassId) AS Classes,               			
						COUNT(DISTINCT IF(te.TEReceiveStatus='Yes', te.ToolEquipmentId, NULL)) JobroleUnitsWithTE,
						COUNT(DISTINCT IF(te.TEReceiveStatus='No', te.ToolEquipmentId, NULL)) JobroleUnitsWithoutTE						
					FROM SchoolsByVTPSectorInfo si
					INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
					LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1
					LEFT JOIN VTSchoolSectors vss ON si.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1					
                    LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1
					LEFT JOIN VTClasses vtc ON si.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
					LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
					LEFT JOIN ToolEquipments te ON vss.VTSchoolSectorId = te.SectorId AND vss.VTId = te.VTId AND te.IsActive = 1        
					WHERE jr.JobRoleName IS NOT NULL
						AND (UserId IS NULL OR vtm.VCId = @accountId)
						AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR si.VTPId = VTPId)
						AND (ClassId IS NULL OR vtc.ClassId = ClassId)
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					GROUP BY se.SectorName, jr.JobRoleName
				) AS ter
				ORDER BY ter.Name, ter.JobroleTaught;            
			END;
		END IF;   
	END;
 
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareTrainersData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetCompareTrainersData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
		
		DROP TABLE IF EXISTS TrainerAttendanceData;
       
        CREATE TEMPORARY TABLE TrainerAttendanceData
        SELECT DISTINCT dta.ReportingMonth, dta.VTPId, dta.VTId, vss.SectorId, 
			dta.VTReporting AS VTWorkingDays, 
			dta.WorkingDays AS WorkingDays,
			(dta.WorkingDays - dta.Holiday - dta.OnLeave) AS VTReportingDays, 
			((dta.WorkingDays - dta.Holiday - dta.OnLeave) / dta.WorkingDays * 100) AS VTAttendance    
		FROM DsTrainerAttendances dta
		INNER JOIN VTSchoolSectors vss ON dta.VTSchoolSectorId = vss.VTSchoolSectorId
		INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId
		INNER JOIN VocationalTrainers vt ON dta.VTId = vt.VTId
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
		WHERE (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dta.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			
            AND (MonthId IS NULL OR MONTH(dta.ReportingMonth) = CAST(MonthId AS UNSIGNED))
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		GROUP BY dta.ReportingMonth, dta.VTPId, dta.VTId, vss.SectorId;
        
        IF(DataType = 'ByVTP') THEN
        BEGIN        			 
			SELECT ROW_NUMBER() OVER (ORDER BY vtr.Name) AS Id,
				vtr.Name,
                vtr.ImplementedSchools,                
                vtr.TrainersPlaced,
                vtr.TrainersReporting,                                
                IF(vtr.TrainerAttendance IS NOT NULL, ROUND(vtr.TrainerAttendance, 2), 0) AS TrainerAttendance 
            FROM (
				SELECT DISTINCT vtp.VTPShortName AS Name,                
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools,
					COUNT(DISTINCT si.VTId) AS TrainersPlaced,               			                    
                    COUNT(DISTINCT vtd.VTId) AS TrainersReporting, 
                    AVG(vtd.VTAttendance) AS TrainerAttendance
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1
				LEFT JOIN TrainerAttendanceData vtd ON si.VTPId = vtd.VTPId              
				GROUP BY vtp.VTPShortName
            ) AS vtr
            ORDER BY vtr.Name;
            
            DROP TEMPORARY TABLE IF EXISTS VocationalTrainerDataByVTP;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				DROP TEMPORARY TABLE IF EXISTS VocationalTrainersBySector;
                 
				SELECT ROW_NUMBER() OVER (ORDER BY vtr.Name) AS Id,
					vtr.Name,
					vtr.ImplementedSchools,                
					vtr.TrainersPlaced,
					vtr.TrainersReporting,                    
					IF(vtr.TrainerAttendance IS NOT NULL, ROUND(vtr.TrainerAttendance, 2), 0) AS TrainerAttendance 
				FROM (
					SELECT DISTINCT se.SectorName AS Name,                
						COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools,
						COUNT(DISTINCT si.VTId) AS TrainersPlaced,               			                    
						COUNT(DISTINCT vtd.VTId) AS TrainersReporting, 
						AVG(vtd.VTAttendance) AS TrainerAttendance
					FROM SchoolsByVTPSectorInfo si
					INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
					LEFT JOIN TrainerAttendanceData vtd ON si.SectorId = vtd.SectorId              
					GROUP BY se.SectorName
				) AS vtr
				ORDER BY vtr.Name;	
                
                DROP TEMPORARY TABLE IF EXISTS VocationalTrainerDataBySector;
			END;
		END IF;   
	END;
	
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareTrainersDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareTrainersDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
		
		DROP TABLE IF EXISTS TrainerAttendanceData;
       
        CREATE TEMPORARY TABLE TrainerAttendanceData
        SELECT DISTINCT dta.ReportingMonth, dta.VTPId, dta.VTId, vss.SectorId, 
			dta.VTReporting AS VTWorkingDays, 
			dta.WorkingDays AS WorkingDays,
			(dta.WorkingDays - dta.Holiday - dta.OnLeave) AS VTReportingDays, 
			((dta.WorkingDays - dta.Holiday - dta.OnLeave) / dta.WorkingDays * 100) AS VTAttendance    
		FROM DsTrainerAttendances dta
		INNER JOIN VTSchoolSectors vss ON dta.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
		INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vtc.IsActive = 1
		INNER JOIN VocationalTrainers vt ON dta.VTId = vt.VTId AND vt.IsActive = 1
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR dta.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dta.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)			
            AND (MonthId IS NULL OR MONTH(dta.ReportingMonth) = CAST(MonthId AS UNSIGNED))
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)            
		GROUP BY dta.ReportingMonth, dta.VTPId, dta.VTId, vss.SectorId;
        
        IF(DataType = 'ByVTP') THEN
        BEGIN        			 
			SELECT ROW_NUMBER() OVER (ORDER BY vtr.Name) AS Id,
				vtr.Name,
                vtr.ImplementedSchools,                
                vtr.TrainersPlaced,
                vtr.TrainersReporting,                                
                IF(vtr.TrainerAttendance IS NOT NULL, ROUND(vtr.TrainerAttendance, 2), 0) AS TrainerAttendance 
            FROM (
				SELECT DISTINCT vtp.VTPShortName AS Name,                
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools,
					COUNT(DISTINCT si.VTId) AS TrainersPlaced,               			                    
                    COUNT(DISTINCT vtd.VTId) AS TrainersReporting, 
                    AVG(vtd.VTAttendance) AS TrainerAttendance
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1
				LEFT JOIN TrainerAttendanceData vtd ON si.VTPId = vtd.VTPId AND si.VTId = vtd.VTId                      
				GROUP BY vtp.VTPShortName
            ) AS vtr
            ORDER BY vtr.Name;
            
            DROP TEMPORARY TABLE IF EXISTS VocationalTrainerDataByVTP;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				DROP TEMPORARY TABLE IF EXISTS VocationalTrainersBySector;
                 
				SELECT ROW_NUMBER() OVER (ORDER BY vtr.Name) AS Id,
					vtr.Name,
					vtr.ImplementedSchools,                
					vtr.TrainersPlaced,
					vtr.TrainersReporting,                    
					IF(vtr.TrainerAttendance IS NOT NULL, ROUND(vtr.TrainerAttendance, 2), 0) AS TrainerAttendance 
				FROM (
					SELECT DISTINCT se.SectorName AS Name,                
						COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools,
						COUNT(DISTINCT si.VTId) AS TrainersPlaced,               			                    
						COUNT(DISTINCT vtd.VTId) AS TrainersReporting, 
						AVG(vtd.VTAttendance) AS TrainerAttendance
					FROM SchoolsByVTPSectorInfo si
					INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
					LEFT JOIN TrainerAttendanceData vtd ON si.SectorId = vtd.SectorId AND si.VTId = vtd.VTId
					GROUP BY se.SectorName
				) AS vtr
				ORDER BY vtr.Name;	
                
                DROP TEMPORARY TABLE IF EXISTS VocationalTrainerDataBySector;
			END;
		END IF;   
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareTrainersDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetCompareTrainersDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
		
		DROP TABLE IF EXISTS TrainerAttendanceData;
       
        CREATE TEMPORARY TABLE TrainerAttendanceData
        SELECT DISTINCT dta.AcademicYearId, dta.ReportingMonth, dta.VTPId, dta.VTId, vss.SectorId, 
			dta.VTReporting AS VTWorkingDays, 
			dta.WorkingDays AS WorkingDays,
			(dta.WorkingDays - dta.Holiday - dta.OnLeave) AS VTReportingDays, 
			((dta.WorkingDays - dta.Holiday - dta.OnLeave) / dta.WorkingDays * 100) AS VTAttendance    
		FROM DsTrainerAttendances dta
		INNER JOIN VTSchoolSectors vss ON dta.AcademicYearId = vss.AcademicYearId AND dta.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
		LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vtc.IsActive = 1
		LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId	= vtm.VTId AND vtm.IsActive = 1
		LEFT JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE (UserId IS NULL OR vtm.VCId = @accountId)
			AND (AcademicYearId IS NULL OR dta.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dta.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)			            
            AND (MonthId IS NULL OR MONTH(dta.ReportingMonth) = CAST(MonthId AS UNSIGNED))
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)            
		GROUP BY dta.ReportingMonth, dta.VTPId, dta.VTId, vss.SectorId;
        
        IF(DataType = 'ByVTP') THEN
        BEGIN        			 
			SELECT ROW_NUMBER() OVER (ORDER BY vtr.Name) AS Id,
				vtr.Name,
                vtr.ImplementedSchools,                
                vtr.TrainersPlaced,
                vtr.TrainersReporting,                                
                IF(vtr.TrainerAttendance IS NOT NULL, ROUND(vtr.TrainerAttendance, 2), 0) AS TrainerAttendance 
            FROM (
				SELECT DISTINCT vtp.VTPShortName AS Name,                
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools,
					COUNT(DISTINCT si.VTId) AS TrainersPlaced,               			                    
                    COUNT(DISTINCT vtd.VTId) AS TrainersReporting, 
                    AVG(vtd.VTAttendance) AS TrainerAttendance
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN VCTrainersMap vtm ON si.AcademicYearId = vtm.AcademicYearId AND si.VTId = vtm.VTId AND vtm.IsActive = 1
				INNER JOIN VTPAcademicYearsMap vtpm ON vtm.AcademicYearId = vtpm.AcademicYearId AND vtm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
				INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
				LEFT JOIN TrainerAttendanceData vtd ON si.AcademicYearId = vtd.AcademicYearId AND si.VTPId = vtd.VTPId AND si.VTId = vtd.VTId                                      
				WHERE si.AcademicYearId = AcademicYearId
				GROUP BY vtp.VTPShortName
            ) AS vtr
            ORDER BY vtr.Name;
            
            DROP TEMPORARY TABLE IF EXISTS VocationalTrainerDataByVTP;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				DROP TEMPORARY TABLE IF EXISTS VocationalTrainersBySector;
                 
				SELECT ROW_NUMBER() OVER (ORDER BY vtr.Name) AS Id,
					vtr.Name,
					vtr.ImplementedSchools,                
					vtr.TrainersPlaced,
					vtr.TrainersReporting,                    
					IF(vtr.TrainerAttendance IS NOT NULL, ROUND(vtr.TrainerAttendance, 2), 0) AS TrainerAttendance 
				FROM (
					SELECT DISTINCT se.SectorName AS Name,                
						COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools,
						COUNT(DISTINCT si.VTId) AS TrainersPlaced,               			                    
						COUNT(DISTINCT vtd.VTId) AS TrainersReporting, 
						AVG(vtd.VTAttendance) AS TrainerAttendance
					FROM SchoolsByVTPSectorInfo si
					INNER JOIN VCTrainersMap vtm ON si.AcademicYearId = vtm.AcademicYearId AND si.VTId = vtm.VTId AND vtm.IsActive = 1
					INNER JOIN VTPAcademicYearsMap vtpm ON vtm.AcademicYearId = vtpm.AcademicYearId AND vtm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
					INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
					LEFT JOIN TrainerAttendanceData vtd ON si.AcademicYearId = vtd.AcademicYearId AND si.SectorId = vtd.SectorId AND si.VTId = vtd.VTId                                      
					WHERE si.AcademicYearId = AcademicYearId
					GROUP BY se.SectorName
				) AS vtr
				ORDER BY vtr.Name;	
                
                DROP TEMPORARY TABLE IF EXISTS VocationalTrainerDataBySector;
			END;
		END IF;   
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    
    
    # CALL GetCompareTrainersDataV2 ('ByVTP', 'rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);    
	# CALL GetCompareTrainersDataV2 ('BySector', 'rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);       
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareVTVCReportingData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetCompareVTVCReportingData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
		
        DROP TABLE IF EXISTS TrainerAttendanceData;
       
        CREATE TEMPORARY TABLE TrainerAttendanceData
        SELECT DISTINCT dta.ReportingMonth, dta.VTPId, dta.VTId, vss.SectorId, 
			dta.VTReporting AS VTWorkingDays, 
			dta.WorkingDays AS WorkingDays,
			(dta.WorkingDays - dta.Holiday - dta.OnLeave) AS VTReportingDays, 
			((dta.WorkingDays - dta.Holiday - dta.OnLeave) / dta.WorkingDays * 100) AS VTAttendance    
		FROM DsTrainerAttendances dta
		INNER JOIN VTSchoolSectors vss ON dta.VTSchoolSectorId = vss.VTSchoolSectorId
		INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId
		INNER JOIN VocationalTrainers vt ON dta.VTId = vt.VTId
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
		WHERE (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dta.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			
            AND (MonthId IS NULL OR MONTH(dta.ReportingMonth) = CAST(MonthId AS UNSIGNED))
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		GROUP BY dta.ReportingMonth, dta.VTPId, dta.VTId, vss.SectorId;
        
        IF(DataType = 'ByVTP') THEN
        BEGIN             
            DROP TEMPORARY TABLE IF EXISTS VocationalCoordinatorDataByVTP;
            CREATE TEMPORARY TABLE VocationalCoordinatorDataByVTP AS      
            SELECT DISTINCT vc.VTPId,
				COUNT(DISTINCT vc.VCId) AS CoordinatorsReporting,   					
				COUNT(DISTINCT dca.VCId) AS VCReporting, 
				AVG(dca.WorkingDays) AS WorkingDays,
				((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
			FROM VCSchoolSectors vcss            
            INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
            INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1			
            INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1            
			LEFT JOIN DsCoordinatorAttendances dca ON dca.VCId = vc.VCId 
			WHERE vc.IsActive = 1
				AND (UserId IS NULL OR vcss.VCId = @accountId)
				AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
				AND (DistrictId IS NULL OR s.DistrictCode = DistrictId)
				AND (SectorId IS NULL OR svs.SectorId = SectorId)
				
				AND (VTPId IS NULL OR svs.VTPId = VTPId)
				
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			GROUP BY vc.VTPId;
			
			SELECT ROW_NUMBER() OVER (ORDER BY crd.Name) AS Id,
				crd.Name,
				crd.ImplementedSchools,
				crd.TrainersPlaced,
				crd.TotalVT,
				ROUND(crd.TrainersReporting, 2) AS TrainersReporting,
				crd.CoordinatorsPlaced,
				crd.TotalVC,
				crd.CoordinatorsReporting
            FROM (
				SELECT vtp.VTPShortName AS Name,                
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools,
					COUNT(DISTINCT si.VTId) AS TrainersPlaced,               								
					COUNT(DISTINCT vtd.VTId) AS TotalVT, 
					AVG(vtd.VTAttendance) AS TrainersReporting,                    
					vcd.VCReporting AS CoordinatorsPlaced,
					vcd.CoordinatorsReporting AS TotalVC,
					IF(vcd.VCAttendance IS NOT NULL, ROUND(AVG(vcd.VCAttendance), 2), 0) AS CoordinatorsReporting                                
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1            
				LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1			
				LEFT JOIN VocationalCoordinatorDataByVTP vcd ON si.VTPId = vcd.VTPId              
				LEFT JOIN TrainerAttendanceData vtd ON si.VTPId = vtd.VTPId              
				WHERE (UserId IS NULL OR si.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
					AND (SectorId IS NULL OR si.SectorId = SectorId)
					
					AND (VTPId IS NULL OR si.VTPId = VTPId)
					
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY vtp.VTPShortName
			) AS crd
            ORDER BY crd.Name;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
                DROP TEMPORARY TABLE IF EXISTS VocationalCoordinatorsBySector;
                
				CREATE TEMPORARY TABLE VocationalCoordinatorsBySector AS
                SELECT DISTINCT svs.SectorId,
					COUNT(DISTINCT vc.VCId) AS CoordinatorsReporting,   	
					COUNT(DISTINCT dca.VCId) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
				FROM VCSchoolSectors vcss            
				INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
				INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1			
				INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1            
				LEFT JOIN DsCoordinatorAttendances dca ON dca.VCId = vc.VCId 
                WHERE (UserId IS NULL OR vcss.VCId = @accountId)
					AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictId IS NULL OR s.DistrictCode = DistrictId)
					AND (SectorId IS NULL OR svs.SectorId = SectorId)
					
					AND (VTPId IS NULL OR svs.VTPId = VTPId)
					
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY svs.SectorId;
                
                SELECT ROW_NUMBER() OVER (ORDER BY crd.Name) AS Id,
					crd.Name,
					crd.ImplementedSchools,
					crd.TrainersPlaced,
					crd.TotalVT,
					ROUND(crd.TrainersReporting, 2) AS TrainersReporting,
					crd.CoordinatorsPlaced,
					crd.TotalVC,
					crd.CoordinatorsReporting
				FROM (
					SELECT se.SectorName AS Name,					
						COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools,
						COUNT(DISTINCT si.VTId) AS TrainersPlaced,               			
						COUNT(DISTINCT vtd.VTId) AS TotalVT, 
						AVG(vtd.VTAttendance) AS TrainersReporting,
						vcd.VCReporting AS CoordinatorsPlaced,
						vcd.CoordinatorsReporting AS TotalVC,
						CAST(IF(vcd.VCAttendance IS NOT NULL, ROUND(vcd.VCAttendance, 2), 0) AS DECIMAL) AS CoordinatorsReporting                
					FROM SchoolsByVTPSectorInfo si
					INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
					LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1			
					LEFT JOIN VocationalCoordinatorsBySector vcd ON si.SectorId = vcd.SectorId              
					LEFT JOIN TrainerAttendanceData vtd ON si.SectorId = vtd.SectorId     
					WHERE (UserId IS NULL OR si.VCId = @accountId)
						AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode)
						AND (SectorId IS NULL OR si.SectorId = SectorId)
						
						AND (VTPId IS NULL OR si.VTPId = VTPId)
						
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					GROUP BY se.SectorName
				) AS crd
				ORDER BY crd.Name;            
			END;
		END IF;   
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareVTVCReportingDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareVTVCReportingDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
        IF(DataType = 'ByVTP') THEN
        BEGIN
			DROP TEMPORARY TABLE IF EXISTS VocationalTrainerDataByVTP;
            
			CREATE TEMPORARY TABLE VocationalTrainerDataByVTP AS         
			SELECT DISTINCT dta.VTPId,
				COUNT(DISTINCT dta.VTId) AS TrainersReporting,   	
				AVG(dta.VTReporting) AS VTReporting, 
				AVG(dta.WorkingDays) AS WorkingDays,
				((AVG(dta.VTReporting) / AVG(dta.WorkingDays)) * 100) AS VTAttendance
			FROM DsTrainerAttendances dta
            INNER JOIN VTSchoolSectors vss ON dta.VTSchoolSectorId = vss.VTSchoolSectorId
			INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId		
			INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
			INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
            WHERE (UserId IS NULL OR vt.VCId = @accountId)
				AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)             
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)				
                AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR dta.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (MonthId IS NULL OR MONTH(dta.ReportingMonth) = CAST(MonthId AS UNSIGNED)) 
				
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)            
			GROUP BY dta.VTPId;
            
            DROP TEMPORARY TABLE IF EXISTS VocationalCoordinatorDataByVTP;
            			
            CREATE TEMPORARY TABLE VocationalCoordinatorDataByVTP AS      
            SELECT DISTINCT vc.VTPId,
				COUNT(DISTINCT vc.VCId) AS CoordinatorsReporting,   					
				COUNT(DISTINCT dca.VCId) AS VCReporting, 
				AVG(dca.WorkingDays) AS WorkingDays,
				((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
			FROM VCSchoolSectors vcss            
            INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
            INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1			
            INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1            
			LEFT JOIN DsCoordinatorAttendances dca ON dca.VCId = vc.VCId 
			WHERE vc.IsActive = 1
				AND (UserId IS NULL OR vcss.VCId = @accountId)
				AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)				
                AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR svs.SectorId = SectorId)				
														 
				AND (VTPId IS NULL OR svs.VTPId = VTPId)				
												   
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			GROUP BY vc.VTPId;
                
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName) AS Id,
				vtp.VTPShortName AS Name,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools,
                COUNT(DISTINCT si.VTId) AS TrainersPlaced,               			
				SUM(DISTINCT vtd.TrainersReporting) AS TotalVT,               			
                CAST(IF(vtd.VTAttendance IS NOT NULL, ROUND(vtd.VTAttendance, 2), 0) AS DECIMAL) AS TrainersReporting,
                vcd.VCReporting AS CoordinatorsPlaced,
				vcd.CoordinatorsReporting AS TotalVC,
                CAST(IF(vcd.VCAttendance IS NOT NULL, ROUND(vcd.VCAttendance, 2), 0) AS DECIMAL) AS CoordinatorsReporting                
			FROM SchoolsByVTPSectorInfo si
            INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1            
            LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1			
            LEFT JOIN VocationalCoordinatorDataByVTP vcd ON si.VTPId = vcd.VTPId              
            LEFT JOIN VocationalTrainerDataByVTP vtd ON si.VTPId = vtd.VTPId              
            WHERE (UserId IS NULL OR si.VCId = @accountId)
				AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
				AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR si.SectorId = SectorId)				
														
				AND (VTPId IS NULL OR si.VTPId = VTPId)				
												  
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
            GROUP BY vtp.VTPShortName
            ORDER BY vtp.VTPShortName;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				DROP TEMPORARY TABLE IF EXISTS VocationalTrainersBySector;
                
				CREATE TEMPORARY TABLE VocationalTrainersBySector AS
				SELECT DISTINCT vss.SectorId,
					COUNT(DISTINCT dta.VTId) AS TrainersReporting,   	
					AVG(dta.VTReporting) AS VTReporting, 
					AVG(dta.WorkingDays) AS WorkingDays,
					((AVG(dta.VTReporting) / AVG(dta.WorkingDays)) * 100) AS VTAttendance
				FROM DsTrainerAttendances dta
				INNER JOIN VTSchoolSectors vss ON dta.VTSchoolSectorId = vss.VTSchoolSectorId
				INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId		
				INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
				INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
				WHERE (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)             
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)					
                    AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR dta.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (MonthId IS NULL OR MONTH(dta.ReportingMonth) = CAST(MonthId AS UNSIGNED)) 					
									   
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)                    
				GROUP BY vss.SectorId;
                
                DROP TEMPORARY TABLE IF EXISTS VocationalCoordinatorsBySector;
                
				CREATE TEMPORARY TABLE VocationalCoordinatorsBySector AS
                SELECT DISTINCT svs.SectorId,
					COUNT(DISTINCT vc.VCId) AS CoordinatorsReporting,   	
					COUNT(DISTINCT dca.VCId) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
				FROM VCSchoolSectors vcss            
				INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
				INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1			
				INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1            
				LEFT JOIN DsCoordinatorAttendances dca ON dca.VCId = vc.VCId 
                WHERE (UserId IS NULL OR vcss.VCId = @accountId)
					AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR svs.SectorId = SectorId)
														  
					AND (VTPId IS NULL OR svs.VTPId = VTPId)					
													
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY svs.SectorId;
                
				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName) AS Id,
					se.SectorName AS Name,					
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools,
					COUNT(DISTINCT si.VTId) AS TrainersPlaced,               			
					SUM(DISTINCT vtd.TrainersReporting) AS TotalVT,               			
					CAST(IF(vtd.VTAttendance IS NOT NULL, ROUND(vtd.VTAttendance, 2), 0) AS DECIMAL) AS TrainersReporting,
					vcd.VCReporting AS CoordinatorsPlaced,
					vcd.CoordinatorsReporting AS TotalVC,
					CAST(IF(vcd.VCAttendance IS NOT NULL, ROUND(vcd.VCAttendance, 2), 0) AS DECIMAL) AS CoordinatorsReporting                
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
				LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1				
                LEFT JOIN VocationalCoordinatorsBySector vcd ON si.SectorId = vcd.SectorId              
                LEFT JOIN VocationalTrainersBySector vtd ON si.SectorId = vtd.SectorId              
				WHERE (UserId IS NULL OR si.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR si.SectorId = SectorId)					
														 
					AND (VTPId IS NULL OR si.VTPId = VTPId)					
												   
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY se.SectorName
				ORDER BY se.SectorName;            
			END;
		END IF;   
	END;
														 
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompareVTVCReportingDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCompareVTVCReportingDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
        IF(DataType = 'ByVTP') THEN
        BEGIN
			DROP TEMPORARY TABLE IF EXISTS VocationalTrainerDataByVTP;
            
			CREATE TEMPORARY TABLE VocationalTrainerDataByVTP AS         
			SELECT DISTINCT dta.VTPId,
				COUNT(DISTINCT dta.VTId) AS TrainersReporting,   	
				AVG(dta.VTReporting) AS VTReporting, 
				AVG(dta.WorkingDays) AS WorkingDays,
				((AVG(dta.VTReporting) / AVG(dta.WorkingDays)) * 100) AS VTAttendance
			FROM DsTrainerAttendances dta
			INNER JOIN VTSchoolSectors vss ON dta.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1		
			INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
			INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
			LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vtc.IsActive = 1	            
            WHERE (UserId IS NULL OR vtm.VCId = @accountId)
				AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)             
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)				
                AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR dta.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (MonthId IS NULL OR MONTH(dta.ReportingMonth) = CAST(MonthId AS UNSIGNED)) 
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)            
			GROUP BY dta.VTPId;
            
            DROP TEMPORARY TABLE IF EXISTS VocationalCoordinatorDataByVTP;
            			
            CREATE TEMPORARY TABLE VocationalCoordinatorDataByVTP AS      
            SELECT DISTINCT vc.VTPId,
				COUNT(DISTINCT vc.VCId) AS CoordinatorsReporting,   					
				COUNT(DISTINCT dca.VCId) AS VCReporting, 
				AVG(dca.WorkingDays) AS WorkingDays,
				((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
			FROM VCSchoolSectors vcss            
            INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
            INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1			
            INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1            
			LEFT JOIN DsCoordinatorAttendances dca ON dca.VCId = vc.VCId 
			WHERE vc.IsActive = 1
				AND (UserId IS NULL OR vcss.VCId = @accountId)
				AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)				
                AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR svs.SectorId = SectorId)				
				AND (VTPId IS NULL OR svs.VTPId = VTPId)				
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			GROUP BY vc.VTPId;
                
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName) AS Id,
				vtp.VTPShortName AS Name,                
				COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools,
                COUNT(DISTINCT si.VTId) AS TrainersPlaced,               			
				SUM(DISTINCT vtd.TrainersReporting) AS TotalVT,               			
                CAST(IF(vtd.VTAttendance IS NOT NULL, ROUND(vtd.VTAttendance, 2), 0) AS DECIMAL) AS TrainersReporting,
                vcd.VCReporting AS CoordinatorsPlaced,
				vcd.CoordinatorsReporting AS TotalVC,
                CAST(IF(vcd.VCAttendance IS NOT NULL, ROUND(vcd.VCAttendance, 2), 0) AS DECIMAL) AS CoordinatorsReporting                
			FROM SchoolsByVTPSectorInfo si
            INNER JOIN VocationalTrainingProviders vtp ON si.VTPId = vtp.VTPId AND vtp.IsActive = 1            
            LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1			
            LEFT JOIN VocationalCoordinatorDataByVTP vcd ON si.VTPId = vcd.VTPId              
            LEFT JOIN VocationalTrainerDataByVTP vtd ON si.VTPId = vtd.VTPId              
            WHERE (UserId IS NULL OR si.VCId = @accountId)
				AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
				AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
				AND (SectorId IS NULL OR si.SectorId = SectorId)				
				AND (VTPId IS NULL OR si.VTPId = VTPId)				
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
            GROUP BY vtp.VTPShortName
            ORDER BY vtp.VTPShortName;
        END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				DROP TEMPORARY TABLE IF EXISTS VocationalTrainersBySector;
                
				CREATE TEMPORARY TABLE VocationalTrainersBySector AS
				SELECT DISTINCT vss.SectorId,
					COUNT(DISTINCT dta.VTId) AS TrainersReporting,   	
					AVG(dta.VTReporting) AS VTReporting, 
					AVG(dta.WorkingDays) AS WorkingDays,
					((AVG(dta.VTReporting) / AVG(dta.WorkingDays)) * 100) AS VTAttendance
				FROM DsTrainerAttendances dta
				INNER JOIN VTSchoolSectors vss ON dta.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1		
				INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
				INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
                LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vtc.IsActive = 1		
				WHERE (UserId IS NULL OR vtm.VCId = @accountId)
					AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)             
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)					
                    AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR dta.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (MonthId IS NULL OR MONTH(dta.ReportingMonth) = CAST(MonthId AS UNSIGNED)) 					
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)                    
				GROUP BY vss.SectorId;
                
                DROP TEMPORARY TABLE IF EXISTS VocationalCoordinatorsBySector;
                
				CREATE TEMPORARY TABLE VocationalCoordinatorsBySector AS
                SELECT DISTINCT svs.SectorId,
					COUNT(DISTINCT vc.VCId) AS CoordinatorsReporting,   	
					COUNT(DISTINCT dca.VCId) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
				FROM VCSchoolSectors vcss            
				INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
				INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1			
				INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1            
				LEFT JOIN DsCoordinatorAttendances dca ON dca.VCId = vc.VCId 
                WHERE (UserId IS NULL OR vcss.VCId = @accountId)
					AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR svs.SectorId = SectorId)
					AND (VTPId IS NULL OR svs.VTPId = VTPId)					
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY svs.SectorId;
                
				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName) AS Id,
					se.SectorName AS Name,					
					COUNT(DISTINCT si.ImplementedSchoolId, si.VTPId) AS ImplementedSchools,
					COUNT(DISTINCT si.VTId) AS TrainersPlaced,               			
					SUM(DISTINCT vtd.TrainersReporting) AS TotalVT,               			
					CAST(IF(vtd.VTAttendance IS NOT NULL, ROUND(vtd.VTAttendance, 2), 0) AS DECIMAL) AS TrainersReporting,
					vcd.VCReporting AS CoordinatorsPlaced,
					vcd.CoordinatorsReporting AS TotalVC,
					CAST(IF(vcd.VCAttendance IS NOT NULL, ROUND(vcd.VCAttendance, 2), 0) AS DECIMAL) AS CoordinatorsReporting                
				FROM SchoolsByVTPSectorInfo si
				INNER JOIN Sectors se ON si.SectorId = se.SectorId AND se.IsActive = 1
				LEFT JOIN Schools s ON si.ApprovedSchoolId = s.SchoolId AND s.IsActive = 1				
                LEFT JOIN VocationalCoordinatorsBySector vcd ON si.SectorId = vcd.SectorId              
                LEFT JOIN VocationalTrainersBySector vtd ON si.SectorId = vtd.SectorId              
				WHERE (UserId IS NULL OR si.VCId = @accountId)
					AND (AcademicYearId IS NULL OR (si.AcademicYearId = AcademicYearId OR si.AcademicYearId IS NULL)) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
					AND (SectorId IS NULL OR si.SectorId = SectorId)					
					AND (VTPId IS NULL OR si.VTPId = VTPId)					
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				GROUP BY se.SectorName
				ORDER BY se.SectorName;            
			END;
		END IF;   
	END;
			
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;    

	
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCountriesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetCountriesByCriteria`(

	IN name  VARCHAR(100),

	IN charBy VARCHAR(5),

	IN pageIndex INT,

	IN pageSize INT

	)
BEGIN

	DECLARE offSetValue INT DEFAULT 0;

	SET offSetValue = (pageIndex-1) * pageSize;



	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;



	SELECT c.CountryCode, c.CountryName, c.ISDCode, c.ISOCode, c.CurrencyName, c.CurrencyCode, c.CountryIcon, c.Description, c.IsActive
	FROM Countries c

	WHERE (name IS NULL OR (c.CountryName LIKE CONCAT(name, '%')))

		AND ((charBy IS NULL OR charBy = 'All') OR (c.CountryName LIKE CONCAT(charBy, '%')))

	ORDER BY c.CountryName

	LIMIT pageSize

	OFFSET offSetValue;



    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;



    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCourseMaterialsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCourseMaterialsByCriteria`(
	IN academicYearId VARCHAR(36),
    IN vtpId VARCHAR(36),
    IN vcId VARCHAR(36),
    IN vtId VARCHAR(36),
    IN hmId VARCHAR(36),
    IN schoolId VARCHAR(36),
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = pageIndex * pageSize;

	IF(hmId IS NOT NULL) THEN
	BEGIN
		SELECT hsm.SchoolId INTO schoolId 
		FROM HMSchoolsMap hsm
		INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive	= 1                
		WHERE hsm.AcademicYearId = academicYearId AND hsm.HMId = hmId AND hsm.IsActive = 1;
	END;
    END IF;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT c.CourseMaterialId, ay.YearName AS AcademicYear, vtp.VTPShortName AS VTPName, vc.FullName AS VCName, s.SchoolName, 
		vt.FullName AS VTName, sc.Name AS ClassName, c.ReceiptDate, c.Details, c.CMStatus, c.IsActive
	FROM CourseMaterials c
    INNER JOIN VTClasses vtc ON c.ClassId = vtc.VTClassId
    INNER JOIN AcademicYears ay ON c.AcademicYearId = ay.AcademicYearId
    INNER JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId
    INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1
    INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
    INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
	INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
	INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
	LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId 
	LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId
	LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId       
	WHERE vss.AcademicYearId = academicYearId
		AND (vtpId IS NULL OR vtm.VTPId = vtpId)
        AND (vcId IS NULL OR vtm.VCId = vcId)
        AND (vtId IS NULL OR vss.VTId = vtId)
        AND (schoolId IS NULL OR vss.SchoolId = schoolId)	        
		AND (name IS NULL OR (vtp.VTPName LIKE CONCAT('%', name, '%') OR vc.FullName LIKE CONCAT('%', name, '%') OR vt.FullName LIKE CONCAT('%', name, '%') 
			OR s.SchoolName LIKE CONCAT('%', name, '%') OR s.UDISE LIKE CONCAT('%', name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (c.Details LIKE CONCAT(charBy, '%')))
	ORDER BY c.ReceiptDate DESC, ay.YearName, sc.Name, vtp.VTPName, vc.FullName, s.SchoolName, vt.FullName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCourseMaterialStatusReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetCourseMaterialStatusReport`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
																	   
										   
						  
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN    
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
	 
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo, 
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear,         
			s.SchoolName, 
			s.UDISE, 
			s.BlockName, 
			d.DivisionName, 
			ds.DistrictName, 
			se.SectorName, 
			jr.JobRoleName, 
			ph.PhaseName, 
			vtp.VTPName,
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			vt.FullName AS VTName, 
			vt.Mobile AS VTMobile, 
			vt.Email AS VTEmail,
			vt.DateOfJoining AS VTDateOfJoining,
			hm.FullName AS HMName, 
			hm.Mobile AS HMMobile, 
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,		  
			scs.Name AS ClassName,        
			cm.CMStatus AS CourceMaterialAvailability,
			cm.ReceiptDate AS DateOfReceipt,        
			DATE_FORMAT(cm.ReceiptDate, "%M-%Y") AS MonthYear,   
			cm.CMStatus AS CourceMaterialStatus		
		FROM CourseMaterials cm
		INNER JOIN VTClasses vtc ON cm.ClassId = vtc.VTClassId AND vtc.IsActive = 1	
		INNER JOIN AcademicYears ay ON vtc.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	
		INNER JOIN VocationalTrainers vt ON vtc.VTId = vt.VTId AND vt.IsActive = 1
		INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId AND vc.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1 
		INNER JOIN Schools s ON vtc.SchoolId = s.SchoolId AND vtc.IsActive = 1    
		INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
		INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND se.IsActive = 1	 
		INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1	
		INNER JOIN SchoolClasses scs ON vtc.ClassId = scs.ClassId
		INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
		INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 	
		LEFT JOIN HeadMasters hm ON s.SchoolId = hm.SchoolId AND hm.IsActive = 1     	
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows     
		WHERE (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vtc.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR d.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR ds.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtp.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			AND (MonthId IS NULL OR MONTH(cm.ReceiptDate) = CAST(MonthId AS UNSIGNED))		
		ORDER BY ay.YearName, SchoolAllottedYear, ph.PhaseName, vtp.VTPName, vc.FullName, s.SchoolName, vt.FullName;
	END;

    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;    
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCourseMaterialStatusReportV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetCourseMaterialStatusReportV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10),
    IN hmId VARCHAR(36)
	)
BEGIN
    DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
    
	IF(hmId IS NOT NULL) THEN
	BEGIN
		SELECT hsm.SchoolId INTO schoolId 
        FROM HMSchoolsMap hsm 
        INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive = 1
        WHERE hsm.AcademicYearId = AcademicYearId AND hsm.HMId = hmId AND hsm.IsActive = 1;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
															
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN    
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts acc ON ar.AccountId = acc.AccountId AND acc.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE acc.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
     
		SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY ay.YearName, say.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, s.SchoolName, vt.FullName, scs.DisplayOrder) AS SrNo,			
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear,         
			s.SchoolName, 
			s.UDISE, 
			s.BlockName, 
			d.DivisionName, 
			ds.DistrictName, 
			se.SectorName, 
			jr.JobRoleName, 
			ph.PhaseName, 
			vtp.VTPName,
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			vt.FullName AS VTName, 
			vt.Mobile AS VTMobile, 
			vt.Email AS VTEmail,
			vtm.DateOfJoining AS VTDateOfJoining,
			hm.FullName AS HMName, 
			hm.Mobile AS HMMobile, 
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,		  
			scs.Name AS ClassName,        
			cm.CMStatus AS CourceMaterialAvailability,
			cm.ReceiptDate AS DateOfReceipt,        
			DATE_FORMAT(cm.ReceiptDate, "%M-%Y") AS MonthYear,   
			cm.CMStatus AS CourceMaterialStatus		
		FROM VTClasses vtc
		INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN AcademicYears ay ON vtc.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	
		INNER JOIN Schools s ON vtc.SchoolId = s.SchoolId AND vtc.IsActive = 1    
		INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
		INNER JOIN JobRoles jr ON vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1	 
		INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1	
		INNER JOIN SchoolClasses scs ON vtc.ClassId = scs.ClassId
		INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
		INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 	
		INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.IsActive = 1
		INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
		INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
		LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId 
		LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId
		LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId 
		LEFT JOIN CourseMaterials cm ON vtc.AcademicYearId = cm.AcademicYearId AND vtc.VTClassId = cm.ClassId 
		LEFT JOIN HMSchoolsMap hmm ON vtc.AcademicYearId = hmm.AcademicYearId AND vtc.SchoolId = hmm.SchoolId AND hmm.IsActive = 1
		LEFT JOIN HeadMasters hm ON hmm.HMId = hm.HMId AND hm.IsActive = 1
		WHERE vtc.IsActive = 1 
			AND (UserId IS NULL OR vtm.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vtc.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR d.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR ds.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
            AND ((hmId IS NULL AND schoolId IS NULL) OR vss.SchoolId = schoolId)
			AND (MonthId IS NULL OR MONTH(cm.ReceiptDate) = CAST(MonthId AS UNSIGNED))		
		ORDER BY ay.YearName, SchoolAllottedYear, ph.PhaseName, vtp.VTPName, vc.FullName, s.SchoolName, vt.FullName, scs.DisplayOrder;
	END;

    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;    
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
	 
    # CALL GetCourseMaterialStatusReportV2 ('principal24030906909@ssguj.in', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'ff5ec7cf-9d34-46c6-ba20-904ea6ff0382')
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCourseModulesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetCourseModulesByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
	SELECT cm.CourseModuleId, sc.Name AS ClassName, dvm.Name AS CourseModule, s.SectorName, jr.JobRoleName, cm.UnitName,
		GROUP_CONCAT(cus.SessionName ORDER BY cus.DisplayOrder) AS Sessions, cm.IsActive
	FROM CourseModules cm	
    INNER JOIN SchoolClasses sc ON cm.ClassId = sc.ClassId         
    INNER JOIN DataValues dvm ON cm.ModuleTypeId = dvm.DataValueId 
    LEFT JOIN Sectors s ON cm.SectorId = s.SectorId 
    LEFT JOIN JobRoles jr ON cm.JobRoleId = jr.JobRoleId
	LEFT JOIN CourseUnitSessions cus ON cm.CourseModuleId = cus.CourseModuleId 
	WHERE (name IS NULL OR (cm.UnitName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (cm.UnitName LIKE CONCAT(charBy, '%')))
	GROUP BY cm.CourseModuleId, cm.ModuleTypeId
    ORDER BY sc.Name, dvm.Name, s.SectorName, jr.JobRoleName, cm.UnitName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCourseModuleUnitSessions` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetCourseModuleUnitSessions`(
	IN userId VARCHAR(150),
    IN vtId VARCHAR(36)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;

	SELECT cm.CourseModuleId AS UnitId, cm.ClassId, sc.Name AS ClassName, cm.ModuleTypeId, dvm.Name AS ModuleName,
		cm.SectorId, s.SectorName, cm.JobRoleId, jr.JobRoleName, cm.UnitName, cus.CourseUnitSessionId AS SessionId, cus.SessionName
	FROM CourseModules cm
	INNER JOIN CourseUnitSessions cus ON cm.CourseModuleId = cus.CourseModuleId
	INNER JOIN SchoolClasses sc ON cm.ClassId = sc.ClassId
	INNER JOIN DataValues dvm ON cm.ModuleTypeId = dvm.DataValueId
	LEFT JOIN Sectors s ON cm.SectorId = s.SectorId
	LEFT JOIN JobRoles jr ON cm.JobRoleId = jr.JobRoleId
    
	ORDER BY dvm.Name, sc.DisplayOrder, cm.DisplayOrder, cus.DisplayOrder;
    
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardCardData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetDashboardCardData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100),     
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN SchoolManagementId VARCHAR(100)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN   
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 	 
		IF(dataType = 'SchoolsByUserId') THEN
			BEGIN            
				SELECT 1 AS Id, COUNT(DISTINCT s.SchoolId) AS ApprovedCount, COUNT(DISTINCT vss.SchoolId) AS ImplementedCount
				FROM Schools s  
				LEFT JOIN SchoolVTPSectors svs ON s.SchoolId = svs.SchoolId AND svs.IsActive = 1
				LEFT JOIN VCSchoolSectors vcss ON svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON svs.AcademicYearId = vss.AcademicYearId AND svs.SchoolId = vss.SchoolId AND svs.SectorId = vss.SectorId AND vss.IsActive = 1				
				LEFT JOIN VTClasses vtc ON s.SchoolId = vtc.SchoolId AND vtc.IsActive = 1 				
				WHERE s.IsActive = 1 
					AND (UserId IS NULL OR vcss.VCId = @accountId)
					AND (AcademicYearId IS NULL OR svs.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 					
                    AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR svs.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);
			END;
		ELSEIF(dataType = 'SectorsByUserId') THEN
			BEGIN             
				SELECT 1 AS Id, COUNT(DISTINCT svs.SectorId) AS ApprovedCount, COUNT(DISTINCT vss.JobRoleId) AS ImplementedCount                
				FROM SchoolVTPSectors svs
				INNER JOIN VTPSectors vts ON svs.AcademicYearId = vts.AcademicYearId AND svs.VTPId = vts.VTPId AND svs.SectorId = vts.SectorId AND vts.IsActive = 1
				INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1
																				 
				LEFT JOIN VTSchoolSectors vss ON svs.AcademicYearId = vss.AcademicYearId AND svs.SchoolId = vss.SchoolId AND svs.SectorId = vss.SectorId AND vss.IsActive = 1				                
				LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
				LEFT JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1
				LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vss.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vtc.IsActive = 1
				LEFT JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
				WHERE svs.IsActive = 1  AND svs.AcademicYearId = AcademicYearId
					AND (UserId IS NULL OR vt.VCId = @accountId)
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR svs.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);		   
			END;
		ELSEIF(dataType = 'VocationalTrainingProvidersByUserId') THEN
			BEGIN                    
				SELECT 1 AS Id, COUNT(DISTINCT svs.VTPId) AS ApprovedCount, 0 AS ImplementedCount                
				FROM SchoolVTPSectors svs
				INNER JOIN VTPAcademicYearsMap vtpm ON svs.AcademicYearId = vtpm.AcademicYearId AND svs.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
				INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
				INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1
				LEFT JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1
				LEFT JOIN VTSchoolSectors vss ON svs.AcademicYearId = vss.AcademicYearId AND svs.SchoolId = vss.SchoolId AND svs.SectorId = vss.SectorId AND vss.IsActive = 1				
				LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1 								
				LEFT JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
				WHERE svs.IsActive = 1   
					AND (UserId IS NULL OR vcss.VCId = @accountId)
					AND (AcademicYearId IS NULL OR svs.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR svs.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR svs.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);				   
			END;
		ELSEIF(dataType = 'VocationalTrainersByUserId') THEN
			BEGIN                        
				SELECT 1 AS Id, COUNT(DISTINCT vss.VTId) AS ApprovedCount, COUNT(DISTINCT vdr.VTId) AS ImplementedCount                
				FROM VTSchoolSectors vss
				INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1			
				INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
				INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vtc.IsActive = 1
				INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId 		
				LEFT JOIN VTDailyReporting vdr ON vss.VTId = vdr.VTId AND vdr.ReportingDate BETWEEN ay.StartMonth AND ay.EndMonth
					AND (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR vt.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);                     
			END;		
		ELSEIF(dataType = 'JobRolesByUserId') THEN
			BEGIN
                SELECT 1 AS Id, COUNT(DISTINCT vss.VTSchoolSectorId) AS ApprovedCount, COUNT(DISTINCT vss.VTSchoolSectorId) AS ImplementedCount                				
				FROM VTSchoolSectors vss
				INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1			
				INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
				INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND jr.IsActive = 1
				WHERE vss.IsActive = 1 AND vss.JobRoleId IS NOT NULL			
					AND (UserId IS NULL OR vt.VCId = @accountId)            
					AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR vt.VTPId = VTPId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);
			END;
		ELSEIF(dataType = 'ClassesByUserId') THEN
			BEGIN             
				SELECT 1 AS Id, COUNT(DISTINCT vtc.SchoolId, vtc.VTClassId) AS ApprovedCount, 1 AS ImplementedCount                
				FROM VTSchoolSectors vss
				INNER JOIN VTClasses vtc ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vtc.IsActive = 1
				INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1			
				INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
				WHERE vss.IsActive = 1
					AND (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR vt.VTPId = VTPId)
					AND (ClassId IS NULL OR vtc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);            
			END;		
		ELSEIF(dataType = 'StudentsUserId') THEN
			BEGIN
				SELECT 1 AS Id, COUNT(DISTINCT sc.SchoolId, sc.ClassId, scm.VTId, sc.StudentId) AS ApprovedCount, 1 AS ImplementedCount                
                FROM StudentClassMapping scm
				INNER JOIN StudentClasses sc ON scm.SchoolId = sc.SchoolId AND sc.StudentId = scm.StudentId AND sc.IsActive = 1
				INNER JOIN VTClasses vtc ON sc.AcademicYearId = vtc.AcademicYearId AND sc.SchoolId = vtc.SchoolId AND sc.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1	
				INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1   				
				INNER JOIN VocationalTrainers vt ON scm.VTId = vt.VTId AND vt.IsActive = 1 
				INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1 
				INNER JOIN AcademicYears ar ON sc.AcademicYearId = ar.AcademicYearId AND ar.IsCurrentAcademicYear = 1   
				INNER JOIN SchoolClasses cls ON sc.ClassId = cls.ClassId
				INNER JOIN Sections se ON sc.SectionId = se.SectionId
				INNER JOIN DataValues dvg ON sc.Gender = dvg.DataValueId AND dvg.DataTypeId = 'StudentGender'
                WHERE sc.DeletedBy IS NULL AND sc.DateOfDropout IS NULL AND sc.IsActive = 1						
					AND (UserId IS NULL OR vt.VCId = @accountId)
					AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
					AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR vss.SectorId = SectorId)
					AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
					AND (VTPId IS NULL OR vt.VTPId = VTPId)
					AND (ClassId IS NULL OR sc.ClassId = ClassId)
					AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);  
			END;			
		END IF;
	END;
			
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	# CALL GetDashboardCardData ('SectorsByUserId', 'rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardClassesCardData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardClassesCardData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
  
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;			 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS ClassData;
		
		CREATE TEMPORARY TABLE ClassData        
        SELECT svs.VTPId, svs.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId,  
            COUNT(DISTINCT vtc.SchoolId, vtc.VTClassId) AS Total,
            COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = 'ef71e220-ed0a-4cec-a5b0-e06325d3dbf4', vtc.VTClassId, NULL)) AS Class9,
            COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', vtc.VTClassId, NULL)) AS Class10,
            COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = '69257ab5-e836-46f1-b888-dfae5da5489c', vtc.VTClassId, NULL)) AS Class11,
            COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = 'e0302e36-a8a7-49a0-b621-21d48986c43e', vtc.VTClassId, NULL)) AS Class12            			           
		FROM SchoolVTPSectors svs
		INNER JOIN VTPSectors vs ON svs.VTPId = vs.VTPId AND svs.SectorId = vs.SectorId AND vs.IsActive = 1
		INNER JOIN VCSchoolSectors vcss ON svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1
		INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND svs.VTPId = vc.VTPId AND vc.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vc.VCId = vt.VCId AND vc.VTPId = vt.VTPId AND vt.IsActive = 1
		INNER JOIN VTSchoolSectors vtss ON svs.SchoolId = vtss.SchoolId AND svs.SectorId = vtss.SectorId AND vt.VTId = vtss.VTId AND vtss.IsActive = 1
		INNER JOIN VTClasses vtc ON vtss.SchoolId = vtc.SchoolId AND vtss.VTId = vtc.VTId AND vtc.IsActive = 1
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE svs.IsActive = 1        
			AND (UserId IS NULL OR vcss.VCId = @accountId)
			AND (AcademicYearId IS NULL OR svs.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
			AND (SectorId IS NULL OR svs.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vtss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR svs.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId) 		
		GROUP BY svs.VTPId, svs.SectorId, vtc.SchoolId, s.DivisionId, s.DistrictCode, s.SchoolManagementId;
   
		IF(DataType = 'ByCount') THEN
			BEGIN  				
                SELECT 1 AS Id, CAST(SUM(cs.Total) AS CHAR) AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs                
				WHERE cs.DivisionId IS NOT NULL;				 
			END;
		ELSEIF(DataType = 'ByDivision') THEN
			BEGIN  				
                SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, d.DivisionName AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN Divisions d ON cs.DivisionId = d.DivisionId
				WHERE cs.DivisionId IS NOT NULL
				GROUP BY cs.DivisionId
                ORDER BY d.DivisionName;
			END;
		ELSEIF(DataType = 'ByDistrict') THEN
			BEGIN  			
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, d.DistrictName AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN Districts d ON cs.DistrictCode = d.DistrictCode
				WHERE cs.DistrictCode IS NOT NULL
				GROUP BY cs.DistrictCode
                ORDER BY d.DistrictName;
			END;		 
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, s.SectorName AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN Sectors s ON cs.SectorId = s.SectorId
				WHERE cs.SectorId IS NOT NULL
				GROUP BY cs.SectorId
                ORDER BY s.SectorName;				 
			END;	 
		ELSEIF(DataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, vtp.VTPShortName AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN VocationalTrainingProviders vtp ON cs.VTPId = vtp.VTPId
				WHERE cs.VTPId IS NOT NULL
				GROUP BY cs.VTPId
                ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(DataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY dvv.Name ASC) AS Id, dvv.Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN DataValues dvv ON cs.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
				WHERE cs.SchoolManagementId IS NOT NULL
				GROUP BY cs.SchoolManagementId
                ORDER BY dvv.Name;
			END;		
		END IF;   
     
		DROP TEMPORARY TABLE IF EXISTS ClassData;
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardClassesCardDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardClassesCardDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
  
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;			 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS ClassData;
		
		CREATE TEMPORARY TABLE ClassData        
        SELECT svs.VTPId, svs.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId,  
            COUNT(DISTINCT vtc.SchoolId, vtc.VTClassId) AS Total,
            COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = 'ef71e220-ed0a-4cec-a5b0-e06325d3dbf4', vtc.VTClassId, NULL)) AS Class9,
            COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', vtc.VTClassId, NULL)) AS Class10,
            COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = '69257ab5-e836-46f1-b888-dfae5da5489c', vtc.VTClassId, NULL)) AS Class11,
            COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = 'e0302e36-a8a7-49a0-b621-21d48986c43e', vtc.VTClassId, NULL)) AS Class12            			           
		FROM SchoolVTPSectors svs
		INNER JOIN VTPSectors vs ON svs.AcademicYearId = vs.AcademicYearId AND svs.VTPId = vs.VTPId AND svs.SectorId = vs.SectorId AND vs.IsActive = 1
		INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1
		INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND svs.VTPId = vc.VTPId AND vc.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vc.VCId = vt.VCId AND vc.VTPId = vt.VTPId AND vt.IsActive = 1
		INNER JOIN VTSchoolSectors vtss ON svs.AcademicYearId = vtss.AcademicYearId AND svs.SchoolId = vtss.SchoolId AND svs.SectorId = vtss.SectorId AND vt.VTId = vtss.VTId AND vtss.IsActive = 1
		INNER JOIN VTClasses vtc ON vtss.AcademicYearId = vtc.AcademicYearId AND vtss.SchoolId = vtc.SchoolId AND vtss.VTId = vtc.VTId AND vtc.IsActive = 1
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE svs.IsActive = 1        
			AND (UserId IS NULL OR vcss.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vtc.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR svs.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vtss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR svs.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId) 		
		GROUP BY svs.VTPId, svs.SectorId, vtc.SchoolId, s.DivisionId, s.DistrictCode, s.SchoolManagementId;
   
		IF(DataType = 'ByCount') THEN
			BEGIN  				
                SELECT 1 AS Id, CAST(SUM(cs.Total) AS CHAR) AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs                
				WHERE cs.DivisionId IS NOT NULL;				 
			END;
		ELSEIF(DataType = 'ByDivision') THEN
			BEGIN  				
                SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, d.DivisionName AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN Divisions d ON cs.DivisionId = d.DivisionId
				WHERE cs.DivisionId IS NOT NULL
				GROUP BY cs.DivisionId
                ORDER BY d.DivisionName;
			END;
		ELSEIF(DataType = 'ByDistrict') THEN
			BEGIN  			
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, d.DistrictName AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN Districts d ON cs.DistrictCode = d.DistrictCode
				WHERE cs.DistrictCode IS NOT NULL
				GROUP BY cs.DistrictCode
                ORDER BY d.DistrictName;
			END;		 
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, s.SectorName AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN Sectors s ON cs.SectorId = s.SectorId
				WHERE cs.SectorId IS NOT NULL
				GROUP BY cs.SectorId
                ORDER BY s.SectorName;				 
			END;	 
		ELSEIF(DataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, vtp.VTPShortName AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN VocationalTrainingProviders vtp ON cs.VTPId = vtp.VTPId
				WHERE cs.VTPId IS NOT NULL
				GROUP BY cs.VTPId
                ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(DataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY dvv.Name ASC) AS Id, dvv.Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN DataValues dvv ON cs.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
				WHERE cs.SchoolManagementId IS NOT NULL
				GROUP BY cs.SchoolManagementId
                ORDER BY dvv.Name;
			END;		
		END IF;   
     
		DROP TEMPORARY TABLE IF EXISTS ClassData;
	END;
			
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardClassesCardDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardClassesCardDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
  
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;			 
		END IF;
		
		DROP TEMPORARY TABLE IF EXISTS ClassData;
		
		CREATE TEMPORARY TABLE ClassData        
        SELECT svs.VTPId, svs.SectorId, s.DivisionId, s.DistrictCode, s.SchoolManagementId,  
            COUNT(DISTINCT vtc.SchoolId, vtc.VTClassId) AS Total,
            COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = 'ef71e220-ed0a-4cec-a5b0-e06325d3dbf4', vtc.VTClassId, NULL)) AS Class9,
            COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', vtc.VTClassId, NULL)) AS Class10,
            COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = '69257ab5-e836-46f1-b888-dfae5da5489c', vtc.VTClassId, NULL)) AS Class11,
            COUNT(DISTINCT vtc.SchoolId, IF(vtc.ClassId = 'e0302e36-a8a7-49a0-b621-21d48986c43e', vtc.VTClassId, NULL)) AS Class12            			           
		FROM SchoolVTPSectors svs
		INNER JOIN VTPSectors vs ON svs.AcademicYearId = vs.AcademicYearId AND svs.VTPId = vs.VTPId AND svs.SectorId = vs.SectorId AND vs.IsActive = 1
		INNER JOIN VCSchoolSectors vcss ON vcss.AcademicYearId = vs.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1
		INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND svs.VTPId = vcm.VTPId AND vcm.IsActive = 1 		
		INNER JOIN VTSchoolSectors vtss ON svs.AcademicYearId = vtss.AcademicYearId AND svs.SchoolId = vtss.SchoolId AND svs.SectorId = vtss.SectorId AND vtss.IsActive = 1
		INNER JOIN VTClasses vtc ON vtss.AcademicYearId = vtc.AcademicYearId AND vtss.SchoolId = vtc.SchoolId AND vtss.VTId = vtc.VTId AND vtc.IsActive = 1
		INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.IsActive = 1 	
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1         
		WHERE svs.IsActive = 1      
			AND (UserId IS NULL OR vcss.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vtc.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR svs.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vtss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR svs.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId) 		
		GROUP BY svs.VTPId, svs.SectorId, vtc.SchoolId, s.DivisionId, s.DistrictCode, s.SchoolManagementId;
   
		IF(DataType = 'ByCount') THEN
			BEGIN  				
                SELECT 1 AS Id, CAST(SUM(cs.Total) AS CHAR) AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs                
				WHERE cs.DivisionId IS NOT NULL;				 
			END;
		ELSEIF(DataType = 'ByDivision') THEN
			BEGIN  				
                SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, d.DivisionName AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN Divisions d ON cs.DivisionId = d.DivisionId
				WHERE cs.DivisionId IS NOT NULL
				GROUP BY cs.DivisionId
                ORDER BY d.DivisionName;
			END;
		ELSEIF(DataType = 'ByDistrict') THEN
			BEGIN  			
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, d.DistrictName AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN Districts d ON cs.DistrictCode = d.DistrictCode
				WHERE cs.DistrictCode IS NOT NULL
				GROUP BY cs.DistrictCode
                ORDER BY d.DistrictName;
			END;		 
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, s.SectorName AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN Sectors s ON cs.SectorId = s.SectorId
				WHERE cs.SectorId IS NOT NULL
				GROUP BY cs.SectorId
                ORDER BY s.SectorName;				 
			END;	 
		ELSEIF(DataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, vtp.VTPShortName AS Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN VocationalTrainingProviders vtp ON cs.VTPId = vtp.VTPId
				WHERE cs.VTPId IS NOT NULL
				GROUP BY cs.VTPId
                ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(DataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY dvv.Name ASC) AS Id, dvv.Name, SUM(cs.Class9) AS Class9, SUM(cs.Class10) AS Class10, SUM(cs.Class11) AS Class11, SUM(cs.Class12) AS Class12, SUM(cs.Total) AS Total
				FROM ClassData cs
                INNER JOIN DataValues dvv ON cs.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
				WHERE cs.SchoolManagementId IS NOT NULL
				GROUP BY cs.SchoolManagementId
                ORDER BY dvv.Name;
			END;		
		END IF;   
     
		DROP TEMPORARY TABLE IF EXISTS ClassData;
	END;
			
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardCourseMaterialChartData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetDashboardCourseMaterialChartData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;

		DROP TEMPORARY TABLE IF EXISTS ClassesData;
		DROP TEMPORARY TABLE IF EXISTS CourseMaterialData;

		CREATE TEMPORARY TABLE ClassesData
		SELECT DISTINCT vtm.VCId, s.DivisionId, s.DistrictCode, vss.SectorId, vtc.VTClassId, vtc.ClassId AS SchoolClassId, vtm.VTPId, s.SchoolManagementId
		FROM VTSchoolSectors vss
        INNER JOIN VTClasses vtc ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vtc.IsActive = 1
        INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
        INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VTPId = vcm.VTPId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1					
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE vss.IsActive = 1
			AND (UserId IS NULL OR vtm.VCId = @accountId)            
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 			
            AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)  
		 GROUP BY s.DivisionId, s.DistrictCode, vss.SectorId, vtc.VTClassId, vt.VTPId, s.SchoolManagementId
         ORDER BY vt.VCId;
		
		CREATE TEMPORARY TABLE CourseMaterialData
		SELECT s.DivisionId, s.DistrictCode, vss.SectorId, vtc.VTClassId, vtc.ClassId AS SchoolClassId, vtm.VTPId, s.SchoolManagementId, 
			cm.CourseMaterialId, cm.ClassId AS CMClassId, cm.ReceiptDate, cm.CMStatus		 
        FROM CourseMaterials cm
		INNER JOIN VTClasses vtc ON cm.ClassId = vtc.VTClassId AND vtc.IsActive = 1	
		INNER JOIN AcademicYears ay ON vtc.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	
        INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.IsActive = 1
        INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VTPId = vcm.VTPId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1		
        INNER JOIN Schools s ON vtc.SchoolId = s.SchoolId AND vtc.IsActive = 1    
		INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1     
		WHERE (UserId IS NULL OR vtm.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vtc.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			AND (MonthId IS NULL OR MONTH(cm.ReceiptDate) = CAST(MonthId AS UNSIGNED));

		IF(DataType = 'ByCount') THEN
		BEGIN  
			SELECT 1 AS Id, 'Count' AS Name,
				SUM(rs.ReportedReceived) AS ReportedReceived, 
				SUM(rs.ReportedNotReceived) AS ReportedNotReceived, 
				SUM(rs.NotReported) AS NotReported, 
				SUM(rs.TotalReportedClasses) AS TotalReportedClasses
			FROM (
				SELECT 1 AS Id, 'Count' AS Name, 
					IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
					IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived, 
					(COUNT(DISTINCT cd.VTClassId) - IFNULL(cmd.TotalReportedClasses, 0)) AS NotReported,
					IFNULL(cmd.TotalReportedClasses, 0) AS TotalReportedClasses
				FROM ClassesData cd
				LEFT JOIN (
					SELECT cm.DivisionId,
						SUM(IF(cm.CMStatus = 'Yes', 1, 0)) AS ReportedReceived,
						SUM(IF(cm.CMStatus = 'No', 1, 0)) AS ReportedNotReceived,					
						COUNT(DISTINCT cm.CMClassId) AS TotalReportedClasses
					FROM CourseMaterialData cm         
					GROUP BY cm.DivisionId				
				) AS cmd ON cd.DivisionId = cmd.DivisionId
			 GROUP BY cmd.ReportedReceived, cmd.ReportedNotReceived, cmd.TotalReportedClasses
            ) AS rs;
            
		END;
		ELSEIF(DataType = 'ByDivision') THEN
		BEGIN  			 
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, d.DivisionName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived, 
                (COUNT(cd.VTClassId) - IFNULL(cmd.TotalReportedClasses, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedClasses, 0) AS TotalReportedClasses
			FROM ClassesData cd
            LEFT JOIN (
				SELECT cm.DivisionId,
					SUM(IF(cm.CMStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(cm.CMStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT cm.CMClassId) AS TotalReportedClasses
				FROM CourseMaterialData cm                
				WHERE cm.DivisionId IS NOT NULL
				GROUP BY cm.DivisionId
			) AS cmd ON cd.DivisionId = cmd.DivisionId
            INNER JOIN Divisions d ON cd.DivisionId = d.DivisionId
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.DivisionId
            ORDER BY d.DivisionName;	
            
		END;
		ELSEIF(DataType = 'ByDistrict') THEN
		BEGIN  		
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				d.DistrictName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived,
                (COUNT(cd.VTClassId) - IFNULL(cmd.TotalReportedClasses, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedClasses, 0) AS TotalReportedClasses
			FROM ClassesData cd
            LEFT JOIN (
				SELECT cm.DivisionId, cm.DistrictCode,
					SUM(IF(cm.CMStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(cm.CMStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT cm.CMClassId) AS TotalReportedClasses
				FROM CourseMaterialData cm                
				WHERE cm.DivisionId IS NOT NULL AND cm.DistrictCode IS NOT NULL
				GROUP BY cm.DivisionId, cm.DistrictCode
			) AS cmd ON cd.DivisionId = cmd.DivisionId AND cd.DistrictCode = cmd.DistrictCode
            INNER JOIN Districts d ON cd.DivisionId = d.DivisionId AND cd.DistrictCode = d.DistrictCode 
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.DivisionId, cd.DistrictCode
            ORDER BY d.DistrictName;       
            
		END;
		ELSEIF(DataType = 'ByClass') THEN
		BEGIN          
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				sc.Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived,
                (COUNT(cd.VTClassId) - IFNULL(cmd.TotalReportedClasses, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedClasses, 0) AS TotalReportedClasses
			FROM ClassesData cd
            LEFT JOIN (
				SELECT cm.SchoolClassId,
					SUM(IF(cm.CMStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(cm.CMStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT cm.CMClassId) AS TotalReportedClasses
				FROM CourseMaterialData cm                
				WHERE cm.SchoolClassId IS NOT NULL
				GROUP BY cm.SchoolClassId
			) AS cmd ON cd.SchoolClassId = cmd.SchoolClassId 
            INNER JOIN SchoolClasses sc ON cd.SchoolClassId = sc.ClassId
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.SchoolClassId 
            ORDER BY sc.DisplayOrder; 
           
		END;
		ELSEIF(DataType = 'BySector') THEN
		BEGIN                  
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				s.SectorName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived,
                (COUNT(cd.VTClassId) - IFNULL(cmd.TotalReportedClasses, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedClasses, 0) AS TotalReportedClasses
			FROM ClassesData cd
            LEFT JOIN (
				SELECT cm.SectorId,
					SUM(IF(cm.CMStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(cm.CMStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT cm.CMClassId) AS TotalReportedClasses
				FROM CourseMaterialData cm                
				WHERE cm.SectorId IS NOT NULL
				GROUP BY cm.SectorId
			) AS cmd ON cd.SectorId = cmd.SectorId 
            INNER JOIN Sectors s ON cd.SectorId = s.SectorId
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.SectorId, cmd.ReportedReceived, cmd.ReportedNotReceived, cmd.TotalReportedClasses
            ORDER BY s.SectorName;
             
		END;
		ELSEIF (DataType = 'ByVTP') THEN
		BEGIN    
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				vtp.VTPShortName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived,
                (COUNT(cd.VTClassId) - IFNULL(cmd.TotalReportedClasses, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedClasses, 0) AS TotalReportedClasses
			FROM ClassesData cd
            LEFT JOIN (
				SELECT cm.VTPId,
					SUM(IF(cm.CMStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(cm.CMStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT cm.CMClassId) AS TotalReportedClasses
				FROM CourseMaterialData cm                
				WHERE cm.VTPId IS NOT NULL
				GROUP BY cm.VTPId
			) AS cmd ON cd.VTPId = cmd.VTPId 
            INNER JOIN VTPAcademicYearsMap vtpm ON vtpm.AcademicYearId = AcademicYearId AND cd.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
            INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1            
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.VTPId 
            ORDER BY vtp.VTPShortName;
           
		END;
		ELSEIF (DataType = 'BySchoolManagement') THEN
		BEGIN
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				dvv.Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived,
                (COUNT(cd.VTClassId) - IFNULL(cmd.TotalReportedClasses, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedClasses, 0) AS TotalReportedClasses
			FROM ClassesData cd
            LEFT JOIN (
				SELECT cm.SchoolManagementId,
					SUM(IF(cm.CMStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(cm.CMStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT cm.CMClassId) AS TotalReportedClasses
				FROM CourseMaterialData cm                
				WHERE cm.SchoolManagementId IS NOT NULL
				GROUP BY cm.SchoolManagementId
			) AS cmd ON cd.SchoolManagementId = cmd.SchoolManagementId             
            INNER JOIN DataValues dvv ON cd.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'			
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.SchoolManagementId, cmd.ReportedReceived, cmd.ReportedNotReceived, cmd.TotalReportedClasses 
            ORDER BY dvv.Name;
		END;
		END IF;
	END;

	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    # CALL GetDashboardCourseMaterialChartData ('ByVTP','rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);	
    # CALL GetDashboardCourseMaterialChartData ('ByCount','vc.aisect@email.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);	    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardCourseMaterialChartDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardCourseMaterialChartDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
    
    BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;

		DROP TEMPORARY TABLE IF EXISTS ClassesData;
		DROP TEMPORARY TABLE IF EXISTS CourseMaterialData;

		CREATE TEMPORARY TABLE ClassesData
        SELECT DISTINCT dsc.AcademicYearId, dsc.VTPId, dsc.SectorId, dsc.DivisionId, dsc.DistrictId, dsc.SchoolManagementId, dsc.VTClassId, dsc.VCId, dsc.ClassId, dsc.JobRoleId
		FROM DsSchoolClasses dsc
		WHERE (UserId IS NULL OR dsc.VCId = @accountId)            
			AND (AcademicYearId IS NULL OR dsc.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR dsc.DivisionId = DivisionId) 
			AND (DistrictId IS NULL OR dsc.DistrictId = DistrictId) 
			AND (SectorId IS NULL OR dsc.SectorId = SectorId)
			AND (JobRoleId IS NULL OR dsc.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dsc.VTPId = VTPId)
			AND (ClassId IS NULL OR dsc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR dsc.SchoolManagementId = SchoolManagementId);
		
		CREATE TEMPORARY TABLE CourseMaterialData
		SELECT dcm.VTPId, dcm.SectorId, dcm.DivisionId, dcm.DistrictId, dcm.ClassId, dcm.SchoolManagementId, dcm.VTClassId, dcm.CourseMaterialId, dcm.CMClassId, dcm.ReceiptDate, dcm.CMStatus
        FROM DsCourseMaterials dcm		 
		WHERE 
			(UserId IS NULL OR dcm.VCId = @accountId)
			AND (AcademicYearId IS NULL OR dcm.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR dcm.DivisionId = DivisionId)
			AND (DistrictId IS NULL OR dcm.DistrictId = DistrictId)
			AND (SectorId IS NULL OR dcm.SectorId = SectorId)
			AND (JobRoleId IS NULL OR dcm.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dcm.VTPId = VTPId)
			AND (ClassId IS NULL OR dcm.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR dcm.SchoolManagementId = SchoolManagementId)
			AND (MonthId IS NULL OR MONTH(dcm.ReceiptDate) = CAST(MonthId AS UNSIGNED));
                 
		IF(DataType = 'ByCount') THEN
		BEGIN  
			SELECT 1 AS Id, 'Count' AS Name,
				SUM(rs.ReportedReceived) AS ReportedReceived, 
				SUM(rs.ReportedNotReceived) AS ReportedNotReceived, 
				SUM(rs.NotReported) AS NotReported, 
				SUM(rs.TotalReportedClasses) AS TotalReportedClasses
			FROM (
				SELECT 1 AS Id, 'Count' AS Name, 
					IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
					IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived, 
					(COUNT(DISTINCT cd.VTClassId) - IFNULL(cmd.TotalReportedClasses, 0)) AS NotReported,
					IFNULL(cmd.TotalReportedClasses, 0) AS TotalReportedClasses
				FROM ClassesData cd
				LEFT JOIN (
					SELECT cm.DivisionId,
						SUM(IF(cm.CMStatus = 'Yes', 1, 0)) AS ReportedReceived,
						SUM(IF(cm.CMStatus = 'No', 1, 0)) AS ReportedNotReceived,					
						COUNT(DISTINCT cm.CMClassId) AS TotalReportedClasses
					FROM CourseMaterialData cm         
					GROUP BY cm.DivisionId				
				) AS cmd ON cd.DivisionId = cmd.DivisionId
			 GROUP BY cmd.ReportedReceived, cmd.ReportedNotReceived, cmd.TotalReportedClasses
            ) AS rs;
            
		END;
		ELSEIF(DataType = 'ByDivision') THEN
		BEGIN  			 
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, d.DivisionName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived, 
                (COUNT(cd.VTClassId) - IFNULL(cmd.TotalReportedClasses, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedClasses, 0) AS TotalReportedClasses
			FROM ClassesData cd
            LEFT JOIN (
				SELECT cm.DivisionId,
					SUM(IF(cm.CMStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(cm.CMStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT cm.CMClassId) AS TotalReportedClasses
				FROM CourseMaterialData cm                
				WHERE cm.DivisionId IS NOT NULL
				GROUP BY cm.DivisionId
			) AS cmd ON cd.DivisionId = cmd.DivisionId
            INNER JOIN Divisions d ON cd.DivisionId = d.DivisionId
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.DivisionId
            ORDER BY d.DivisionName;	
            
		END;
		ELSEIF(DataType = 'ByDistrict') THEN
		BEGIN  		
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				d.DistrictName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived,
                (COUNT(cd.VTClassId) - IFNULL(cmd.TotalReportedClasses, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedClasses, 0) AS TotalReportedClasses
			FROM ClassesData cd
            LEFT JOIN (
				SELECT cm.DivisionId, cm.DistrictId,
					SUM(IF(cm.CMStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(cm.CMStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT cm.CMClassId) AS TotalReportedClasses
				FROM CourseMaterialData cm                
				WHERE cm.DivisionId IS NOT NULL AND cm.DistrictId IS NOT NULL
				GROUP BY cm.DivisionId, cm.DistrictId
			) AS cmd ON cd.DivisionId = cmd.DivisionId AND cd.DistrictId = cmd.DistrictId
            INNER JOIN Districts d ON cd.DivisionId = d.DivisionId AND cd.DistrictId = d.DistrictCode
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.DivisionId, cd.DistrictId
            ORDER BY d.DistrictName;       
            
		END;
		ELSEIF(DataType = 'ByClass') THEN
		BEGIN          
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				sc.Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived,
                (COUNT(cd.VTClassId) - IFNULL(cmd.TotalReportedClasses, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedClasses, 0) AS TotalReportedClasses
			FROM ClassesData cd
            LEFT JOIN (
				SELECT cm.ClassId,
					SUM(IF(cm.CMStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(cm.CMStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT cm.CMClassId) AS TotalReportedClasses
				FROM CourseMaterialData cm                
				WHERE cm.ClassId IS NOT NULL
				GROUP BY cm.ClassId
			) AS cmd ON cd.ClassId = cmd.ClassId 
            INNER JOIN SchoolClasses sc ON cd.ClassId = sc.ClassId
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.ClassId 
            ORDER BY sc.DisplayOrder; 
           
		END;
		ELSEIF(DataType = 'BySector') THEN
		BEGIN                  
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				s.SectorName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived,
                (COUNT(cd.VTClassId) - IFNULL(cmd.TotalReportedClasses, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedClasses, 0) AS TotalReportedClasses
			FROM ClassesData cd
            LEFT JOIN (
				SELECT cm.SectorId,
					SUM(IF(cm.CMStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(cm.CMStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT cm.CMClassId) AS TotalReportedClasses
				FROM CourseMaterialData cm                
				WHERE cm.SectorId IS NOT NULL
				GROUP BY cm.SectorId
			) AS cmd ON cd.SectorId = cmd.SectorId 
            INNER JOIN Sectors s ON cd.SectorId = s.SectorId
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.SectorId, cmd.ReportedReceived, cmd.ReportedNotReceived, cmd.TotalReportedClasses
            ORDER BY s.SectorName;
             
		END;
		ELSEIF (DataType = 'ByVTP') THEN
		BEGIN    
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				vtp.VTPShortName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived,
                (COUNT(cd.VTClassId) - IFNULL(cmd.TotalReportedClasses, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedClasses, 0) AS TotalReportedClasses
			FROM ClassesData cd
            LEFT JOIN (
				SELECT cm.VTPId,
					SUM(IF(cm.CMStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(cm.CMStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT cm.CMClassId) AS TotalReportedClasses
				FROM CourseMaterialData cm                
				WHERE cm.VTPId IS NOT NULL
				GROUP BY cm.VTPId
			) AS cmd ON cd.VTPId = cmd.VTPId 
            INNER JOIN VocationalTrainingProviders vtp ON cd.VTPId = vtp.VTPId
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.VTPId 
            ORDER BY vtp.VTPShortName;
           
		END;
		ELSEIF (DataType = 'BySchoolManagement') THEN
		BEGIN
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				dvv.Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived,
                (COUNT(cd.VTClassId) - IFNULL(cmd.TotalReportedClasses, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedClasses, 0) AS TotalReportedClasses
			FROM ClassesData cd
            LEFT JOIN (
				SELECT cm.SchoolManagementId,
					SUM(IF(cm.CMStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(cm.CMStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT cm.CMClassId) AS TotalReportedClasses
				FROM CourseMaterialData cm                
				WHERE cm.SchoolManagementId IS NOT NULL
				GROUP BY cm.SchoolManagementId
			) AS cmd ON cd.SchoolManagementId = cmd.SchoolManagementId             
            INNER JOIN DataValues dvv ON cd.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'			
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.SchoolManagementId, cmd.ReportedReceived, cmd.ReportedNotReceived, cmd.TotalReportedClasses 
            ORDER BY dvv.Name;
             
		END;
		END IF;

	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardCourseMaterialsDrilldownData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetDashboardCourseMaterialsDrilldownData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
    
	SELECT r.Code, ar.AccountId INTO @roleName, @vcId
	FROM AccountRoles ar 
	INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
	INNER JOIN Roles r ON ar.RoleId = r.RoleId
	WHERE a.LoginId = userId;
    
	IF(@roleName <> 'VC') THEN				
		SET UserId = NULL;		 
	END IF;

 	SET @rowIndex = 0;
	DROP TEMPORARY TABLE IF EXISTS CourseMaterialData;

	CREATE TEMPORARY TABLE CourseMaterialData
	SELECT svts.VTPId,
		svts.SectorId,
		vtc.ClassId,
		s.SchoolManagementId,
		s.DivisionId,
		s.DistrictCode,
		cm.CourseMaterialId,
		cm.CMStatus
	FROM CourseMaterials cm     
	INNER JOIN VTSchoolSectors vss on cm.VTId = vss.VTId AND cm.AcademicYearId = vss.AcademicYearId  
	INNER JOIN VTClasses vtc ON vss.VTId = vtc.VTId AND vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND cm.ClassId = vtc.ClassId AND vtc.IsActive = 1	
	INNER JOIN SchoolVTPSectors svts ON vss.AcademicYearId = svts.AcademicYearId AND vss.SchoolId = svts.SchoolId AND vss.SectorId = svts.SectorId AND svts.IsActive = 1	
	INNER JOIN VCSchoolSectors vcs on svts.SchoolVTPSectorId = vcs.SchoolVTPSectorId
	INNER JOIN Schools s on vss.SchoolId = s.SchoolId	
	INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId
	WHERE svts.IsActive=1 
		AND (UserId IS NULL OR vcs.VCId = @vcId) 
		AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
		AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
		AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
		AND (SectorId IS NULL OR vss.SectorId = SectorId)
		AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
		AND (VTPId IS NULL OR svts.VTPId = VTPId)
		AND (ClassId IS NULL OR vtc.ClassId = ClassId)
		AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);
    
    IF(DataType = 'ByDivision') THEN
	BEGIN  				
		SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, 
			d.DivisionName AS Name, 
			SUM(IF(CMStatus='Yes', 1, 0)) ReportedReceived,
            SUM(IF(CMStatus='No', 1, 0)) NotReported,
            0 ReportedNotReceived
		FROM CourseMaterialData cm
		INNER JOIN Divisions d ON cm.DivisionId = d.DivisionId
		WHERE cm.DivisionId IS NOT NULL
		GROUP BY cm.DivisionId
		ORDER BY d.DivisionName;
	END;
    ELSEIF(DataType = 'ByDistrict') THEN
	BEGIN  				
		SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, 
			d.DistrictName AS Name, 
			SUM(IF(CMStatus='Yes', 1, 0)) ReportedReceived,
            SUM(IF(CMStatus='No', 1, 0)) NotReported,
            0 ReportedNotReceived
		FROM CourseMaterialData cm
		INNER JOIN Districts d ON cm.DistrictCode = d.DistrictCode
		WHERE cm.DistrictCode IS NOT NULL
		GROUP BY cm.DistrictCode
		ORDER BY d.DistrictName;
	END;
	ELSEIF(DataType = 'ByClass') THEN
	BEGIN  
		SELECT ROW_NUMBER() OVER (ORDER BY sc.Name ASC) AS Id, 
			sc.Name, 
			SUM(IF(CMStatus='Yes', 1, 0)) ReportedReceived,
            SUM(IF(CMStatus='No', 1, 0)) NotReported,
            0 ReportedNotReceived
		FROM CourseMaterialData cm
		INNER JOIN SchoolClasses sc ON cm.ClassId = sc.ClassId
		WHERE cm.ClassId IS NOT NULL
		GROUP BY cm.ClassId
		ORDER BY sc.DisplayOrder;	
	END;
    ELSEIF(DataType = 'BySector') THEN
	BEGIN  
		SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, 
			s.SectorName AS Name, 
			SUM(IF(CMStatus='Yes', 1, 0)) ReportedReceived,
            SUM(IF(CMStatus='No', 1, 0)) NotReported,
            0 ReportedNotReceived
		FROM CourseMaterialData cm
        INNER JOIN Sectors s ON cm.SectorId = s.SectorId
		WHERE cm.SectorId IS NOT NULL
		GROUP BY cm.SectorId
		ORDER BY s.SectorName;	
	END;
	ELSEIF (DataType = 'ByVTP') THEN
	BEGIN
		SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, 
			vtp.VTPShortName AS Name, 
			SUM(IF(CMStatus='Yes', 1, 0)) ReportedReceived,
			SUM(IF(CMStatus='No', 1, 0)) NotReported,
			0 ReportedNotReceived
		FROM CourseMaterialData cm
		INNER JOIN VocationalTrainingProviders vtp ON cm.VTPId = vtp.VTPId
		WHERE cm.VTPId IS NOT NULL
		GROUP BY cm.VTPId
		ORDER BY vtp.VTPShortName;
	END;
    ELSEIF (DataType = 'BySchoolManagement') THEN
	BEGIN
		SELECT ROW_NUMBER() OVER (ORDER BY dvv.Name ASC) AS Id, 
			dvv.Name, 
			SUM(IF(CMStatus='Yes', 1, 0)) ReportedReceived,
			SUM(IF(CMStatus='No', 1, 0)) NotReported,
			0 ReportedNotReceived
		FROM CourseMaterialData cm
		INNER JOIN DataValues dvv ON cm.SchoolManagementId = dvv.DataValueId
		WHERE cm.SchoolManagementId IS NOT NULL
		GROUP BY cm.SchoolManagementId
		ORDER BY dvv.Name;
	END;
	END IF;

	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardCourseMaterialsDrilldownDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardCourseMaterialsDrilldownDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
	
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	SELECT r.Code, ar.AccountId INTO @roleName, @vcId
	FROM AccountRoles ar 
	INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
	INNER JOIN Roles r ON ar.RoleId = r.RoleId
	WHERE a.LoginId = userId;
    
	IF(@roleName <> 'VC') THEN				
		SET UserId = NULL;		 
	END IF;

 	SET @rowIndex = 0;
	DROP TEMPORARY TABLE IF EXISTS CourseMaterialData;

	CREATE TEMPORARY TABLE CourseMaterialData
	SELECT svts.VTPId,
		svts.SectorId,
		vtc.ClassId,
		s.SchoolManagementId,
		s.DivisionId,
		s.DistrictCode,
		cm.CourseMaterialId,
		cm.CMStatus
	FROM CourseMaterials cm     
	INNER JOIN VTSchoolSectors vss on cm.VTId = vss.VTId AND cm.AcademicYearId = vss.AcademicYearId  
	INNER JOIN VTClasses vtc ON vss.VTId = vtc.VTId AND vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND cm.ClassId = vtc.ClassId AND vtc.IsActive = 1	
	INNER JOIN SchoolVTPSectors svts ON vss.AcademicYearId = svts.AcademicYearId AND vss.SchoolId = svts.SchoolId AND vss.SectorId = svts.SectorId AND svts.IsActive = 1	
	INNER JOIN VCSchoolSectors vcs on svts.SchoolVTPSectorId = vcs.SchoolVTPSectorId
	INNER JOIN Schools s on vss.SchoolId = s.SchoolId	
	INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId
	WHERE svts.IsActive=1 
		AND (UserId IS NULL OR vcs.VCId = @vcId) 
		AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
		AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 		
        AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
		AND (SectorId IS NULL OR vss.SectorId = SectorId)
		AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
		AND (VTPId IS NULL OR svts.VTPId = VTPId)
		AND (ClassId IS NULL OR vtc.ClassId = ClassId)
		AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);
    
    IF(DataType = 'ByDivision') THEN
	BEGIN  				
		SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, 
			d.DivisionName AS Name, 
			SUM(IF(CMStatus='Yes', 1, 0)) ReportedReceived,
            SUM(IF(CMStatus='No', 1, 0)) NotReported,
            0 ReportedNotReceived
		FROM CourseMaterialData cm
		INNER JOIN Divisions d ON cm.DivisionId = d.DivisionId
		WHERE cm.DivisionId IS NOT NULL
		GROUP BY cm.DivisionId
		ORDER BY d.DivisionName;
	END;
    ELSEIF(DataType = 'ByDistrict') THEN
	BEGIN  				
		SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, 
			d.DistrictName AS Name, 
			SUM(IF(CMStatus='Yes', 1, 0)) ReportedReceived,
            SUM(IF(CMStatus='No', 1, 0)) NotReported,
            0 ReportedNotReceived
		FROM CourseMaterialData cm
		INNER JOIN Districts d ON cm.DistrictCode = d.DistrictCode
		WHERE cm.DistrictCode IS NOT NULL
		GROUP BY cm.DistrictCode
		ORDER BY d.DistrictName;
	END;
	ELSEIF(DataType = 'ByClass') THEN
	BEGIN  
		SELECT ROW_NUMBER() OVER (ORDER BY sc.Name ASC) AS Id, 
			sc.Name, 
			SUM(IF(CMStatus='Yes', 1, 0)) ReportedReceived,
            SUM(IF(CMStatus='No', 1, 0)) NotReported,
            0 ReportedNotReceived
		FROM CourseMaterialData cm
		INNER JOIN SchoolClasses sc ON cm.ClassId = sc.ClassId
		WHERE cm.ClassId IS NOT NULL
		GROUP BY cm.ClassId
		ORDER BY sc.DisplayOrder;	
	END;
    ELSEIF(DataType = 'BySector') THEN
	BEGIN  
		SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, 
			s.SectorName AS Name, 
			SUM(IF(CMStatus='Yes', 1, 0)) ReportedReceived,
            SUM(IF(CMStatus='No', 1, 0)) NotReported,
            0 ReportedNotReceived
		FROM CourseMaterialData cm
        INNER JOIN Sectors s ON cm.SectorId = s.SectorId
		WHERE cm.SectorId IS NOT NULL
		GROUP BY cm.SectorId
		ORDER BY s.SectorName;	
	END;
	ELSEIF (DataType = 'ByVTP') THEN
	BEGIN
		SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, 
			vtp.VTPShortName AS Name, 
			SUM(IF(CMStatus='Yes', 1, 0)) ReportedReceived,
			SUM(IF(CMStatus='No', 1, 0)) NotReported,
			0 ReportedNotReceived
		FROM CourseMaterialData cm
		INNER JOIN VocationalTrainingProviders vtp ON cm.VTPId = vtp.VTPId
		WHERE cm.VTPId IS NOT NULL
		GROUP BY cm.VTPId
		ORDER BY vtp.VTPShortName;
	END;
    ELSEIF (DataType = 'BySchoolManagement') THEN
	BEGIN
		SELECT ROW_NUMBER() OVER (ORDER BY dvv.Name ASC) AS Id, 
			dvv.Name, 
			SUM(IF(CMStatus='Yes', 1, 0)) ReportedReceived,
			SUM(IF(CMStatus='No', 1, 0)) NotReported,
			0 ReportedNotReceived
		FROM CourseMaterialData cm
		INNER JOIN DataValues dvv ON cm.SchoolManagementId = dvv.DataValueId
		WHERE cm.SchoolManagementId IS NOT NULL
		GROUP BY cm.SchoolManagementId
		ORDER BY dvv.Name;
	END;
	END IF;

	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetDashboardData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN ParentId  VARCHAR(100),
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN SchoolManagementId VARCHAR(100)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
     
	BEGIN    
		SELECT r.Code INTO @roleName
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 	 
		IF(dataType = 'SchoolsByUserId') THEN
			BEGIN            
				SELECT DISTINCT sch.SchoolId AS Id, CONCAT(sch.UDISE, '-', sch.SchoolName) AS Name, sch.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo			
				FROM Schools sch  
				INNER JOIN SchoolVTPSectors svtps ON sch.SchoolId = svtps.SchoolId AND svtps.IsActive = 1
				INNER JOIN VCSchoolSectors vcss ON svtps.SchoolVTPSectorId = vcss.SchoolVTPSectorId	
				INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId
				INNER JOIN Sectors sec  ON svtps.SectorId = sec.SectorId
				LEFT JOIN JobRoles jr ON jr.SectorId = sec.SectorId  
				LEFT JOIN VTClasses vtc ON vtc.SchoolId = sch.SchoolId 
				WHERE sec.IsActive = 1
				AND (UserId IS NULL OR vc.EmailId = UserId)
				AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR sch.DivisionId = DivisionId) 
				AND (DistrictCode IS NULL OR sch.DistrictCode = DistrictCode) 
				AND (SectorId IS NULL OR svtps.SectorId = SectorId)
				AND (JobRoleId IS NULL OR jr.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR svtps.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR sch.SchoolManagementId = SchoolManagementId) 
				ORDER BY sec.SectorName;
			END;
		ELSEIF(dataType = 'SectorsByUserId') THEN
			BEGIN             
				SELECT DISTINCT sec.SectorId AS Id, sec.SectorName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo				
				FROM Schools sch  
				INNER JOIN SchoolVTPSectors svtps ON sch.SchoolId = svtps.SchoolId AND svtps.IsActive = 1
				INNER JOIN VCSchoolSectors vcss ON svtps.SchoolVTPSectorId = vcss.SchoolVTPSectorId	
				INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId
				INNER JOIN Sectors sec  ON svtps.SectorId = sec.SectorId
				LEFT JOIN JobRoles jr ON jr.SectorId = sec.SectorId  
				LEFT JOIN VTClasses vtc ON vtc.SchoolId = sch.SchoolId 
				WHERE sec.IsActive = 1
				AND (UserId IS NULL OR vc.EmailId = UserId)
				AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR sch.DivisionId = DivisionId) 
				AND (DistrictCode IS NULL OR sch.DistrictCode = DistrictCode) 
				AND (SectorId IS NULL OR svtps.SectorId = SectorId)
				AND (JobRoleId IS NULL OR jr.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR svtps.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR sch.SchoolManagementId = SchoolManagementId) 
				ORDER BY sec.SectorName;			   
			END;
		ELSEIF(dataType = 'VocationalTrainingProvidersByUserId') THEN
			BEGIN                    
				SELECT DISTINCT vtp.VTPId AS Id, vtp.VTPName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo							
				FROM Schools s  
				INNER JOIN SchoolVTPSectors svtps ON s.SchoolId = svtps.SchoolId
				INNER JOIN VCSchoolSectors vcss ON svtps.SchoolVTPSectorId = vcss.SchoolVTPSectorId	
				INNER JOIN VocationalTrainingProviders vtp ON vtp.VTPId = svtps.VTPId
				INNER JOIN VocationalCoordinators vc ON vc.VTPId = svtps.VTPId AND vc.VCId = vcss.VCId
				INNER JOIN VocationalTrainers vt ON vc.VCId = vt.VCId
				LEFT JOIN Divisions d ON s.DivisionId = d.DivisionId
				LEFT JOIN Sectors se ON se.SectorId = svtps.SectorId
				LEFT JOIN JobRoles jr ON jr.SectorId = se.SectorId
				LEFT JOIN VTClasses vtc ON vtc.SchoolId = s.SchoolId 
				WHERE s.IsActive = 1 
				AND (UserId IS NULL OR vc.EmailId = UserId)
				AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
				AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
				AND (SectorId IS NULL OR svtps.SectorId = SectorId)
				AND (JobRoleId IS NULL OR jr.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR svtps.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId) 			
				ORDER BY vtp.VTPName;			   
			END;
		ELSEIF(dataType = 'VocationalTrainersByUserId') THEN
			BEGIN            
				SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo							
				FROM Schools s  
				INNER JOIN SchoolVTPSectors svtps ON s.SchoolId = svtps.SchoolId
				INNER JOIN VCSchoolSectors vcss ON svtps.SchoolVTPSectorId = vcss.SchoolVTPSectorId	
				INNER JOIN VocationalTrainingProviders vtp ON vtp.VTPId = svtps.VTPId
				INNER JOIN VocationalCoordinators vc ON vc.VTPId = svtps.VTPId AND vc.VCId = vcss.VCId
				INNER JOIN VocationalTrainers vt ON vc.VCId = vt.VCId
				LEFT JOIN Divisions d ON s.DivisionId = d.DivisionId
				LEFT JOIN Sectors se ON se.SectorId = svtps.SectorId
				LEFT JOIN JobRoles jr ON jr.SectorId = se.SectorId
				LEFT JOIN VTClasses vtc ON vtc.SchoolId = s.SchoolId 
				WHERE s.IsActive = 1 
				AND (UserId IS NULL OR vc.EmailId = UserId)
				AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
				AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
				AND (SectorId IS NULL OR svtps.SectorId = SectorId)
				AND (JobRoleId IS NULL OR jr.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR svtps.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId) 			
				ORDER BY vt.FullName;  
			END;		
		ELSEIF(dataType = 'JobRolesByUserId') THEN
			BEGIN
				SELECT DISTINCT jr.JobRoleId AS Id, jr.JobRoleName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo				
				FROM Schools sch  
				INNER JOIN SchoolVTPSectors svtps ON sch.SchoolId = svtps.SchoolId AND svtps.IsActive = 1
				INNER JOIN VCSchoolSectors vcss ON svtps.SchoolVTPSectorId = vcss.SchoolVTPSectorId	
				INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId
				INNER JOIN Sectors sec  ON svtps.SectorId = sec.SectorId
				LEFT JOIN JobRoles jr ON jr.SectorId = sec.SectorId  
				LEFT JOIN VTClasses vtc ON vtc.SchoolId = sch.SchoolId 
				WHERE sec.IsActive = 1 AND jr.JobRoleId IS NOT NULL
				AND (UserId IS NULL OR vc.EmailId = UserId)
				AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR sch.DivisionId = DivisionId) 
				AND (DistrictCode IS NULL OR sch.DistrictCode = DistrictCode) 
				AND (SectorId IS NULL OR svtps.SectorId = SectorId)
				AND (JobRoleId IS NULL OR jr.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR svtps.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR sch.SchoolManagementId = SchoolManagementId) 
				ORDER BY jr.JobRoleName;	
			END;
		ELSEIF(dataType = 'ClassesByUserId') THEN
			BEGIN             
				SELECT DISTINCT vtc.VTClassId AS Id, sc.Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, sc.DisplayOrder AS SequenceNo
				FROM VTClasses vtc
				INNER JOIN VTSchoolSectors vcss ON vtc.AcademicYearId = vcss.AcademicYearId AND vtc.SchoolId = vcss.SchoolId					 
				INNER JOIN VocationalTrainers vt ON vtc.VTId = vt.VTId
				INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId            
				INNER JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId
				LEFT JOIN Schools s ON vcss.SchoolId = s.SchoolId
				LEFT JOIN Sectors se ON vcss.SectorId = se.SectorId
				LEFT JOIN JobRoles jr ON se.SectorId = jr.SectorId  
				WHERE vtc.IsActive = 1
				AND (UserId IS NULL OR vc.EmailId = UserId)
				AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
				AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
				AND (SectorId IS NULL OR vcss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR jr.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vt.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId) 			
				ORDER BY sc.Name;               
			END;		
		ELSEIF(dataType = 'StudentsUserId') THEN
			BEGIN
				SELECT DISTINCT std.StudentId AS Id, std.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
				FROM StudentClasses std
				INNER JOIN VTClasses vtc ON std.AcademicYearId = vtc.AcademicYearId AND std.SchoolId = vtc.SchoolId AND std.ClassId = vtc.ClassId
				INNER JOIN VTSchoolSectors vcss ON vtc.AcademicYearId = vcss.AcademicYearId AND vtc.SchoolId = vcss.SchoolId					 
				INNER JOIN VocationalTrainers vt ON vtc.VTId = vt.VTId
				INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId            
				INNER JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId
				LEFT JOIN Schools s ON vcss.SchoolId = s.SchoolId
				LEFT JOIN Sectors se ON vcss.SectorId = se.SectorId
				LEFT JOIN JobRoles jr ON se.SectorId = jr.SectorId  
				WHERE std.IsActive = 1
				AND (UserId IS NULL OR vc.EmailId = UserId)
				AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
				AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
				AND (SectorId IS NULL OR vcss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR jr.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vt.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId) 			
				ORDER BY sc.Name;       
			END;			
		END IF;
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardFieldVisitChartData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardFieldVisitChartData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		SELECT COUNT(vtc.ClassId) INTO @totalClasses
		FROM VTSchoolSectors vss
		INNER JOIN VTClasses vtc ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vtc.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1			
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE vss.IsActive = 1
			AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);
            
		DROP TEMPORARY TABLE IF EXISTS FieldVisitData;
		
		CREATE TEMPORARY TABLE FieldVisitData	  
		SELECT DISTINCT vss.AcademicYearId, vss.SectorId, fv.ClassTaughtId, vt.VTPId, s.SchoolManagementId, 
			s.DivisionId, s.DistrictCode, vss.SchoolId, vss.VTId, 
            QUARTER(fv.ReportingDate) AS QuarterInYear, DATE_FORMAT(fv.ReportingDate, "%M") AS ReportMonth, 
            COUNT(DISTINCT vtc.SchoolId, vtc.ClassId) AS NoOfSchoolClasses, 
            COUNT(DISTINCT fv.VTFieldIndustryVisitConductedId) AS FieldIndustryCount         
        FROM VTFieldIndustryVisitConducted fv
		INNER JOIN VTSchoolSectors vss ON fv.VTSchoolSectorId = vss.VTSchoolSectorId AND fv.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	        
        INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1		
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1		
        LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1
		WHERE fv.IsActive = 1
			AND DATE(fv.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
			AND DATE(fv.ReportingDate) <= DATE(LAST_DAY(NOW() - INTERVAL 1 MONTH))         
			AND (UserId IS NULL OR vt.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId AND fv.ReportingDate BETWEEN ay.StartMonth AND ay.EndMonth) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.SectorId = SectorId AND vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR fv.ClassTaughtId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)		
		GROUP BY vss.AcademicYearId, vss.SectorId, fv.ClassTaughtId, vt.VTPId, s.SchoolManagementId, s.DivisionId, s.DistrictCode, vss.SchoolId, vss.VTId, QuarterInYear, ReportMonth;
            
		IF(dataType = 'ByTimeline' OR dataType = 'GuestLectureByMonth') THEN
			BEGIN
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
						(CASE WHEN (tl.QuarterInYear = 1) THEN 'Jan-Mar' 
							  WHEN (tl.QuarterInYear = 2) THEN 'Apr-Jun'  
							  WHEN (tl.QuarterInYear = 3) THEN 'Jul-Sep' ELSE 'Oct-Dec' END) AS Name, tl.Count, 
						ROUND((tl.Count * 100)/SUM(@totalClasses), 2) AS Percentage, @totalClasses AS Classes
                FROM (
					SELECT fv.QuarterInYear, SUM(fv.FieldIndustryCount) AS Count, SUM(fv.NoOfSchoolClasses) AS Classes
					FROM FieldVisitData fv					
					GROUP BY fv.QuarterInYear					
				) tl
				CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY tl.QuarterInYear
                ORDER BY tl.QuarterInYear;              
			END;
		ELSEIF(dataType = 'ByTimelineForFV') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY dvm.DisplayOrder ASC) AS Id, 
					dvm.Description AS Name, 
                    SUM(fv.FieldIndustryCount) AS Count,
					ROUND((SUM(fv.FieldIndustryCount) * 100)/SUM(fv.NoOfSchoolClasses), 2) AS Percentage, 
                    SUM(fv.NoOfSchoolClasses) AS Classes
				FROM FieldVisitData fv
                INNER JOIN DataValues dvm ON fv.ReportMonth = dvm.Name
                GROUP BY dvm.Description, dvm.DisplayOrder              
                ORDER BY dvm.DisplayOrder;                
			END;
		ELSEIF(dataType = 'ByDivision') THEN
			BEGIN  
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/@totalClasses), 2) AS Percentage, 
                    @totalClasses AS Classes
                FROM (
					SELECT d.DivisionName AS Name, 
						SUM(fv.FieldIndustryCount) AS Count, 
                        SUM(fv.NoOfSchoolClasses) AS Classes
					FROM FieldVisitData fv
					INNER JOIN Schools s ON fv.SchoolId = s.SchoolId AND s.IsActive = 1
					INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
					WHERE s.DivisionId IS NOT NULL
					GROUP BY d.DivisionName
				 ) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'ByDistrict') THEN
			BEGIN  			
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/@totalClasses), 2) AS Percentage, 
                    @totalClasses AS Classes
                FROM (
					SELECT ds.DistrictName AS Name, 
						SUM(fv.FieldIndustryCount) AS Count, 
                        SUM(fv.NoOfSchoolClasses) AS Classes
					FROM FieldVisitData fv
                    INNER JOIN Schools s ON fv.SchoolId = s.SchoolId AND s.IsActive = 1
					INNER JOIN Districts ds ON fv.DivisionId = ds.DivisionId AND fv.DistrictCode = ds.DistrictCode 
                    WHERE s.DivisionId IS NOT NULL AND s.DistrictCode IS NOT NULL
					GROUP BY ds.DistrictName
				) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'ByBlock') THEN
			BEGIN  
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/@totalClasses), 2) AS Percentage, 
                    @totalClasses AS Classes
                FROM (
					SELECT ds.DistrictName AS Name, 
						SUM(fv.FieldIndustryCount) AS Count, 
                        SUM(fv.NoOfSchoolClasses) AS Classes
					FROM FieldVisitData fv
					INNER JOIN Districts ds ON fv.DivisionId = ds.DivisionId AND fv.DistrictCode = ds.DistrictCode 
					GROUP BY ds.DistrictName
				) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'BySector') THEN
			BEGIN  			
                SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/@totalClasses), 2) AS Percentage, 
                    @totalClasses AS Classes
                FROM (
					SELECT s.SectorName AS Name, 
						SUM(fv.FieldIndustryCount) AS Count, 
                        SUM(fv.NoOfSchoolClasses) AS Classes
					FROM FieldVisitData fv
					INNER JOIN Sectors s ON fv.SectorId = s.SectorId
					WHERE fv.SectorId IS NOT NULL
					GROUP BY s.SectorName
				) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;	
			END;		 
		ELSEIF(dataType = 'ByVTP') THEN
			BEGIN
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/@totalClasses), 2) AS Percentage, 
                    @totalClasses AS Classes
                FROM (
					SELECT vtp.VTPShortName AS Name, 
						SUM(fv.FieldIndustryCount) AS Count, 
                        SUM(fv.NoOfSchoolClasses) AS Classes
					FROM FieldVisitData fv
					INNER JOIN VocationalTrainingProviders vtp ON fv.VTPId = vtp.VTPId
					WHERE fv.VTPId IS NOT NULL
					GROUP BY vtp.VTPShortName               
                ) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/@totalClasses), 2) AS Percentage, 
                    @totalClasses AS Classes
                FROM (
					SELECT dvv.Name, 
						SUM(fv.FieldIndustryCount) AS Count, 
						SUM(fv.NoOfSchoolClasses) AS Classes
					FROM FieldVisitData fv
					INNER JOIN DataValues dvv ON fv.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
					WHERE fv.SchoolManagementId IS NOT NULL
					GROUP BY dvv.Name
				 ) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;		
		END IF;   
        
		DROP TEMPORARY TABLE IF EXISTS FieldVisitData;
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardFieldVisitChartDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardFieldVisitChartDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF; 
	
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
        DROP TEMPORARY TABLE IF EXISTS TrainerClassesData;
											   
		CREATE TEMPORARY TABLE TrainerClassesData	
		SELECT vss.AcademicYearId, vt.VTPId, vss.SectorId, s.SchoolManagementId, s.DivisionId, s.DistrictCode, COUNT(vtc.ClassId) AS TotalClasses
		FROM VTSchoolSectors vss
		INNER JOIN VTClasses vtc ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vtc.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1			
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE vss.IsActive = 1	
			AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 			
            AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		GROUP BY vss.AcademicYearId, vt.VTPId, vss.SectorId, s.SchoolManagementId, s.DivisionId, s.DistrictCode;
        
		DROP TEMPORARY TABLE IF EXISTS FieldVisitData;
		
		CREATE TEMPORARY TABLE FieldVisitData	
        SELECT DISTINCT vss.AcademicYearId, vt.VTPId, vss.SectorId, s.SchoolManagementId, s.DivisionId, s.DistrictCode, 
			COUNT(DISTINCT vtc.SchoolId, vtc.ClassId) AS TotalClasses,
            COUNT(DISTINCT fv.VTFieldIndustryVisitConductedId) AS FieldIndustryCount,            
            QUARTER(fv.ReportingDate) AS QuarterInYear, DATE_FORMAT(fv.ReportingDate, "%M") AS ReportMonth
		FROM VTSchoolSectors vss
		INNER JOIN VTClasses vtc ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vtc.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1			
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	        
		LEFT JOIN VTFieldIndustryVisitConducted fv ON vss.VTSchoolSectorId = fv.VTSchoolSectorId AND vss.VTId = fv.VTId AND DATE(fv.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth AND DATE(fv.ReportingDate) <= DATE(LAST_DAY(NOW() - INTERVAL 1 MONTH)) AND fv.IsActive = 1        
		WHERE vss.IsActive = 1		 			 
			AND DATE(fv.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
			AND DATE(fv.ReportingDate) <= DATE(LAST_DAY(NOW() - INTERVAL 1 MONTH))         
			AND (UserId IS NULL OR vt.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId AND fv.ReportingDate BETWEEN ay.StartMonth AND ay.EndMonth) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.SectorId = SectorId AND vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR fv.ClassTaughtId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)		
        GROUP BY vss.AcademicYearId, vt.VTPId, vss.SectorId, s.SchoolManagementId, s.DivisionId, s.DistrictCode, QUARTER(fv.ReportingDate);

		IF(dataType = 'ByTimeline') THEN
			BEGIN
				SELECT CAST(SUM(TotalClasses) AS UNSIGNED) INTO @TotalClasses FROM TrainerClassesData;
                
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
						(CASE WHEN (tl.QuarterInYear = 1) THEN 'Jan-Mar' 
							  WHEN (tl.QuarterInYear = 2) THEN 'Apr-Jun'  
							  WHEN (tl.QuarterInYear = 3) THEN 'Jul-Sep' ELSE 'Oct-Dec' END) AS Name, tl.Count, 
						ROUND((tl.Count * 100)/@TotalClasses, 2) AS Percentage, @TotalClasses AS Classes
                FROM (
					SELECT fv.QuarterInYear, SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count
					FROM FieldVisitData fv					
					GROUP BY fv.QuarterInYear					
				) tl
				CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY tl.QuarterInYear
                ORDER BY tl.QuarterInYear;              
			END;
		ELSEIF(dataType = 'ByTimelineForFV') THEN
			BEGIN  
				SELECT CAST(SUM(TotalClasses) AS UNSIGNED) INTO @TotalClasses FROM TrainerClassesData;
                
				SELECT ROW_NUMBER() OVER (ORDER BY dvm.DisplayOrder ASC) AS Id, 
					dvm.Description AS Name,
					SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count, 
					ROUND((SUM(IFNULL(fv.FieldIndustryCount, 0)) * 100) / @TotalClasses, 2) AS Percentage, 
					@TotalClasses AS Classes
				FROM FieldVisitData fv
				LEFT JOIN DataValues dvm ON fv.ReportMonth = dvm.Name AND dvm.DataTypeId = 'Months'
				GROUP BY dvm.Description, dvm.DisplayOrder              
				ORDER BY dvm.DisplayOrder;
			END;
		ELSEIF(dataType = 'ByDivision') THEN
			BEGIN  
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100) / g.Classes), 2) AS Percentage, 
                    g.Classes
                FROM (
					SELECT d.DivisionName AS Name, 
						SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count, 
						SUM(tcd.TotalClasses) AS Classes
					FROM TrainerClassesData tcd
					INNER JOIN Divisions d ON tcd.DivisionId = d.DivisionId AND d.IsActive = 1
					LEFT JOIN FieldVisitData fv ON tcd.VTPId = fv.VTPId AND tcd.SectorId = fv.SectorId AND tcd.SectorId = fv.SectorId 
						AND tcd.SchoolManagementId = fv.SchoolManagementId AND tcd.DivisionId = fv.DivisionId AND tcd.DistrictCode = fv.DistrictCode
					GROUP BY d.DivisionName
				 ) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'ByDistrict') THEN
			BEGIN  			
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100) / g.Classes), 2) AS Percentage, 
                    g.Classes
                FROM (
					SELECT ds.DistrictName AS Name, 
						SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count, 
						SUM(tcd.TotalClasses) AS Classes
					FROM TrainerClassesData tcd
					INNER JOIN Districts ds ON tcd.DivisionId = ds.DivisionId AND tcd.DistrictCode = ds.DistrictCode AND ds.IsActive = 1
					LEFT JOIN FieldVisitData fv ON tcd.VTPId = fv.VTPId AND tcd.SectorId = fv.SectorId AND tcd.SectorId = fv.SectorId 
						AND tcd.SchoolManagementId = fv.SchoolManagementId AND tcd.DivisionId = fv.DivisionId AND tcd.DistrictCode = fv.DistrictCode
					GROUP BY ds.DistrictName					 
				) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'ByBlock') THEN
			BEGIN  
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100) / g.Classes), 2) AS Percentage, 
                    g.Classes
                FROM (
					SELECT ds.DistrictName AS Name, 
						SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count, 
						SUM(tcd.TotalClasses) AS Classes
					FROM TrainerClassesData tcd
					INNER JOIN Districts ds ON tcd.DivisionId = ds.DivisionId AND tcd.DistrictCode = ds.DistrictCode AND ds.IsActive = 1
					LEFT JOIN FieldVisitData fv ON tcd.VTPId = fv.VTPId AND tcd.SectorId = fv.SectorId AND tcd.SectorId = fv.SectorId 
						AND tcd.SchoolManagementId = fv.SchoolManagementId AND tcd.DivisionId = fv.DivisionId AND tcd.DistrictCode = fv.DistrictCode
					GROUP BY ds.DistrictName	                    
				) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'BySector') THEN
			BEGIN  			
                SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100) / g.Classes), 2) AS Percentage, 
                    g.Classes
                FROM (
					SELECT s.SectorName AS Name, 
						SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count, 
						SUM(tcd.TotalClasses) AS Classes
					FROM TrainerClassesData tcd
					INNER JOIN Sectors s ON tcd.SectorId = s.SectorId AND s.IsActive = 1
					LEFT JOIN FieldVisitData fv ON tcd.VTPId = fv.VTPId AND tcd.SectorId = fv.SectorId AND tcd.SectorId = fv.SectorId 
						AND tcd.SchoolManagementId = fv.SchoolManagementId AND tcd.DivisionId = fv.DivisionId AND tcd.DistrictCode = fv.DistrictCode
					GROUP BY s.SectorName
				) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;	
			END;		 
		ELSEIF(dataType = 'ByVTP') THEN
			BEGIN
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100) / g.Classes), 2) AS Percentage, 
                    g.Classes
                FROM (
					SELECT vtp.VTPShortName AS Name, 
						SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count, 
						SUM(tcd.TotalClasses) AS Classes
					FROM TrainerClassesData tcd
					INNER JOIN VocationalTrainingProviders vtp ON tcd.VTPId = vtp.VTPId AND vtp.IsActive = 1
					LEFT JOIN FieldVisitData fv ON tcd.VTPId = fv.VTPId AND tcd.SectorId = fv.SectorId AND tcd.SectorId = fv.SectorId 
						AND tcd.SchoolManagementId = fv.SchoolManagementId AND tcd.DivisionId = fv.DivisionId AND tcd.DistrictCode = fv.DistrictCode
					GROUP BY vtp.VTPShortName
                ) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100) / g.Classes), 2) AS Percentage, 
                    g.Classes
                FROM (
					SELECT dvv.Name AS Name, 
						SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count, 
						SUM(tcd.TotalClasses) AS Classes
					FROM TrainerClassesData tcd
					INNER JOIN DataValues dvv ON tcd.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'                    
					LEFT JOIN FieldVisitData fv ON tcd.VTPId = fv.VTPId AND tcd.SectorId = fv.SectorId AND tcd.SectorId = fv.SectorId 
						AND tcd.SchoolManagementId = fv.SchoolManagementId AND tcd.DivisionId = fv.DivisionId AND tcd.DistrictCode = fv.DistrictCode
					GROUP BY dvv.Name
				 ) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;		
		END IF;   
        
		DROP TEMPORARY TABLE IF EXISTS FieldVisitData;
	END;
										
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;	
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardFieldVisitChartDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardFieldVisitChartDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF; 
	
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
        DROP TEMPORARY TABLE IF EXISTS TrainerClassesData;
											   
		CREATE TEMPORARY TABLE TrainerClassesData	
		SELECT vss.AcademicYearId, vtm.VTPId, vss.SectorId, s.SchoolManagementId, s.DivisionId, s.DistrictCode, COUNT(vtc.ClassId) AS TotalClasses
		FROM VTSchoolSectors vss
		INNER JOIN VTClasses vtc ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vtc.IsActive = 1
		INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.IsActive = 1			
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE vss.IsActive = 1	
			AND (UserId IS NULL OR vtm.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 			
            AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		GROUP BY vss.AcademicYearId, vtm.VTPId, vss.SectorId, s.SchoolManagementId, s.DivisionId, s.DistrictCode;
        
		DROP TEMPORARY TABLE IF EXISTS FieldVisitData;
		
		CREATE TEMPORARY TABLE FieldVisitData	
        SELECT DISTINCT vss.AcademicYearId, vtm.VTPId, vss.SectorId, s.SchoolManagementId, s.DivisionId, s.DistrictCode, 
			COUNT(DISTINCT vtc.SchoolId, vtc.ClassId) AS TotalClasses,
            COUNT(DISTINCT fv.VTFieldIndustryVisitConductedId) AS FieldIndustryCount,            
            QUARTER(fv.ReportingDate) AS QuarterInYear, DATE_FORMAT(fv.ReportingDate, "%M") AS ReportMonth
		FROM VTSchoolSectors vss
		INNER JOIN VTClasses vtc ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vtc.IsActive = 1		
        INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.IsActive = 1			
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	        
		LEFT JOIN VTFieldIndustryVisitConducted fv ON vss.VTSchoolSectorId = fv.VTSchoolSectorId AND vss.VTId = fv.VTId AND DATE(fv.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth AND DATE(fv.ReportingDate) <= DATE(LAST_DAY(NOW() - INTERVAL 1 MONTH)) AND fv.IsActive = 1        
		WHERE vss.IsActive = 1		 			 
			AND DATE(fv.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
			AND DATE(fv.ReportingDate) <= DATE(LAST_DAY(NOW() - INTERVAL 1 MONTH))         
			AND (UserId IS NULL OR vtm.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId AND fv.ReportingDate BETWEEN ay.StartMonth AND ay.EndMonth) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.SectorId = SectorId AND vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (ClassId IS NULL OR fv.ClassTaughtId = ClassId)
																					   
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)		
            
        GROUP BY vss.AcademicYearId, vtm.VTPId, vss.SectorId, s.SchoolManagementId, s.DivisionId, s.DistrictCode, QUARTER(fv.ReportingDate);

		IF(dataType = 'ByTimeline') THEN
			BEGIN
				SELECT CAST(SUM(TotalClasses) AS UNSIGNED) INTO @TotalClasses FROM TrainerClassesData;
                
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
						(CASE WHEN (tl.QuarterInYear = 1) THEN 'Jan-Mar' 
							  WHEN (tl.QuarterInYear = 2) THEN 'Apr-Jun'  
							  WHEN (tl.QuarterInYear = 3) THEN 'Jul-Sep' ELSE 'Oct-Dec' END) AS Name, tl.Count, 
						ROUND((tl.Count * 100)/@TotalClasses, 2) AS Percentage, @TotalClasses AS Classes
                FROM (
					SELECT fv.QuarterInYear, SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count
					FROM FieldVisitData fv					
					GROUP BY fv.QuarterInYear					
				) tl
				CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY tl.QuarterInYear
                ORDER BY tl.QuarterInYear;              
			END;
		ELSEIF(dataType = 'ByTimelineForFV') THEN
			BEGIN  
				SELECT CAST(SUM(TotalClasses) AS UNSIGNED) INTO @TotalClasses FROM TrainerClassesData;
                
				SELECT ROW_NUMBER() OVER (ORDER BY dvm.DisplayOrder ASC) AS Id, 
					dvm.Description AS Name,
					SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count, 
					ROUND((SUM(IFNULL(fv.FieldIndustryCount, 0)) * 100) / @TotalClasses, 2) AS Percentage, 
					@TotalClasses AS Classes
				FROM FieldVisitData fv
				LEFT JOIN DataValues dvm ON fv.ReportMonth = dvm.Name AND dvm.DataTypeId = 'Months'
				GROUP BY dvm.Description, dvm.DisplayOrder              
				ORDER BY dvm.DisplayOrder;
			END;
		ELSEIF(dataType = 'ByDivision') THEN
			BEGIN  
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100) / g.Classes), 2) AS Percentage, 
                    g.Classes
                FROM (
					SELECT d.DivisionName AS Name, 
						SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count, 
						SUM(tcd.TotalClasses) AS Classes
					FROM TrainerClassesData tcd
					INNER JOIN Divisions d ON tcd.DivisionId = d.DivisionId AND d.IsActive = 1
					LEFT JOIN FieldVisitData fv ON tcd.VTPId = fv.VTPId AND tcd.SectorId = fv.SectorId AND tcd.SectorId = fv.SectorId 
						AND tcd.SchoolManagementId = fv.SchoolManagementId AND tcd.DivisionId = fv.DivisionId AND tcd.DistrictCode = fv.DistrictCode
					GROUP BY d.DivisionName
				 ) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'ByDistrict') THEN
			BEGIN  			
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100) / g.Classes), 2) AS Percentage, 
                    g.Classes
                FROM (
					SELECT ds.DistrictName AS Name, 
						SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count, 
						SUM(tcd.TotalClasses) AS Classes
					FROM TrainerClassesData tcd
					INNER JOIN Districts ds ON tcd.DivisionId = ds.DivisionId AND tcd.DistrictCode = ds.DistrictCode AND ds.IsActive = 1
					LEFT JOIN FieldVisitData fv ON tcd.VTPId = fv.VTPId AND tcd.SectorId = fv.SectorId AND tcd.SectorId = fv.SectorId 
						AND tcd.SchoolManagementId = fv.SchoolManagementId AND tcd.DivisionId = fv.DivisionId AND tcd.DistrictCode = fv.DistrictCode
					GROUP BY ds.DistrictName					 
				) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'ByBlock') THEN
			BEGIN  
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100) / g.Classes), 2) AS Percentage, 
                    g.Classes
                FROM (
					SELECT ds.DistrictName AS Name, 
						SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count, 
						SUM(tcd.TotalClasses) AS Classes
					FROM TrainerClassesData tcd
					INNER JOIN Districts ds ON tcd.DivisionId = ds.DivisionId AND tcd.DistrictCode = ds.DistrictCode AND ds.IsActive = 1
					LEFT JOIN FieldVisitData fv ON tcd.VTPId = fv.VTPId AND tcd.SectorId = fv.SectorId AND tcd.SectorId = fv.SectorId 
						AND tcd.SchoolManagementId = fv.SchoolManagementId AND tcd.DivisionId = fv.DivisionId AND tcd.DistrictCode = fv.DistrictCode
					GROUP BY ds.DistrictName	                    
				) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'BySector') THEN
			BEGIN  			
                SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100) / g.Classes), 2) AS Percentage, 
                    g.Classes
                FROM (
					SELECT s.SectorName AS Name, 
						SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count, 
						SUM(tcd.TotalClasses) AS Classes
					FROM TrainerClassesData tcd
					INNER JOIN Sectors s ON tcd.SectorId = s.SectorId AND s.IsActive = 1
					LEFT JOIN FieldVisitData fv ON tcd.VTPId = fv.VTPId AND tcd.SectorId = fv.SectorId AND tcd.SectorId = fv.SectorId 
						AND tcd.SchoolManagementId = fv.SchoolManagementId AND tcd.DivisionId = fv.DivisionId AND tcd.DistrictCode = fv.DistrictCode
					GROUP BY s.SectorName
				) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;	
			END;		 
		ELSEIF(dataType = 'ByVTP') THEN
			BEGIN
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100) / g.Classes), 2) AS Percentage, 
                    g.Classes
                FROM (
					SELECT vtp.VTPShortName AS Name, 
						SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count, 
						SUM(tcd.TotalClasses) AS Classes
					FROM TrainerClassesData tcd
					INNER JOIN VocationalTrainingProviders vtp ON tcd.VTPId = vtp.VTPId AND vtp.IsActive = 1
					LEFT JOIN FieldVisitData fv ON tcd.VTPId = fv.VTPId AND tcd.SectorId = fv.SectorId AND tcd.SectorId = fv.SectorId 
						AND tcd.SchoolManagementId = fv.SchoolManagementId AND tcd.DivisionId = fv.DivisionId AND tcd.DistrictCode = fv.DistrictCode
					GROUP BY vtp.VTPShortName
                ) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100) / g.Classes), 2) AS Percentage, 
                    g.Classes
                FROM (
					SELECT dvv.Name AS Name, 
						SUM(IFNULL(fv.FieldIndustryCount, 0)) AS Count, 
						SUM(tcd.TotalClasses) AS Classes
					FROM TrainerClassesData tcd
					INNER JOIN DataValues dvv ON tcd.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'                    
					LEFT JOIN FieldVisitData fv ON tcd.VTPId = fv.VTPId AND tcd.SectorId = fv.SectorId AND tcd.SectorId = fv.SectorId 
						AND tcd.SchoolManagementId = fv.SchoolManagementId AND tcd.DivisionId = fv.DivisionId AND tcd.DistrictCode = fv.DistrictCode
					GROUP BY dvv.Name
				 ) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;		
		END IF;   
        
		DROP TEMPORARY TABLE IF EXISTS FieldVisitData;
	END;
										
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;	
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardGuestLectureChartData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardGuestLectureChartData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS GuestLectureData;
		        
		SELECT COUNT(vtc.ClassId) INTO @totalClasses
		FROM VTSchoolSectors vss
		INNER JOIN VTClasses vtc ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vtc.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1			
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE vss.IsActive = 1        
			AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);

		CREATE TEMPORARY TABLE GuestLectureData	  
        SELECT DISTINCT vss.AcademicYearId, vss.SectorId, gl.ClassTaughtId, vt.VTPId, s.SchoolManagementId, 
			s.DivisionId, s.DistrictCode, vss.SchoolId, vss.VTId, DATE_FORMAT(gl.ReportingDate, "%M") AS ReportMonth, 
            COUNT(DISTINCT vtc.SchoolId, vtc.ClassId) AS NoOfSchoolClasses, COUNT(DISTINCT gl.VTGuestLectureId) AS GuestLectureCount
		FROM VTGuestLectureConducted gl
		INNER JOIN VTSchoolSectors vss ON gl.VTSchoolSectorId = vss.VTSchoolSectorId
		INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1		
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId        
		WHERE gl.IsActive = 1        
			AND DATE(gl.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
			AND DATE(gl.ReportingDate) <= DATE(LAST_DAY(NOW() - INTERVAL 1 MONTH))
			AND (UserId IS NULL OR vt.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.SectorId = SectorId AND vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR gl.ClassTaughtId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)	   
	    GROUP BY vss.AcademicYearId, vss.SectorId, gl.ClassTaughtId, vt.VTPId, s.SchoolManagementId, s.DivisionId, s.DistrictCode, vss.SchoolId, vss.VTId, ReportMonth;
            
		IF(dataType = 'ByTimeline' OR dataType = 'GuestLectureByMonth') THEN
			BEGIN  				 
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					dvm.Description AS Name, 
					g.Count, 
					ROUND(((g.Count * 100)/@totalClasses), 2) AS Percentage, 
					@totalClasses AS Classes
				FROM (
					SELECT gl.ReportMonth, 
						SUM(gl.GuestLectureCount) AS Count, 
						SUM(gl.NoOfSchoolClasses) AS Classes                        
					FROM GuestLectureData gl						
					GROUP BY gl.ReportMonth
				) g 	
				INNER JOIN DataValues dvm ON g.ReportMonth = dvm.Name
				CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
				GROUP BY dvm.Description, g.Count, dvm.DisplayOrder
				ORDER BY dvm.DisplayOrder;
				                 
			END;
		ELSEIF(dataType = 'ByTimelineForGL') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY dvm.DisplayOrder ASC) AS Id, 
					dvm.Description AS Name, 
                    SUM(gl.GuestLectureCount) AS Count,
					ROUND((SUM(gl.GuestLectureCount) * 100)/(SUM(gl.NoOfSchoolClasses)), 2) AS Percentage, 
                    SUM(gl.NoOfSchoolClasses) AS Classes
				FROM GuestLectureData gl
                INNER JOIN DataValues dvm ON gl.ReportMonth = dvm.Name
                GROUP BY dvm.Description, dvm.DisplayOrder              
                ORDER BY dvm.DisplayOrder;                
			END;
		ELSEIF(dataType = 'ByDivision') THEN
			BEGIN  
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/@totalClasses), 2) AS Percentage, 
                    @totalClasses AS Classes
                FROM (
					SELECT d.DivisionName AS Name, 
						SUM(gl.GuestLectureCount) AS Count, 
						SUM(gl.NoOfSchoolClasses) AS Classes
					FROM GuestLectureData gl
					INNER JOIN Schools s ON gl.SchoolId = s.SchoolId
					INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
					WHERE s.DivisionId IS NOT NULL
					GROUP BY d.DivisionName
				 ) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'ByDistrict') THEN
			BEGIN  							                
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/@totalClasses), 2) AS Percentage, 
                    @totalClasses AS Classes
                FROM (
					SELECT ds.DistrictName AS Name, 
						SUM(gl.GuestLectureCount) AS Count, 
                        SUM(gl.NoOfSchoolClasses) AS Classes
					FROM GuestLectureData gl
                    INNER JOIN Schools s ON gl.SchoolId = s.SchoolId					
					INNER JOIN Districts ds ON gl.DivisionId = ds.DivisionId AND gl.DistrictCode = ds.DistrictCode 
                    WHERE s.DivisionId IS NOT NULL AND s.DistrictCode IS NOT NULL
					GROUP BY ds.DistrictName
				) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'ByBlock') THEN
			BEGIN  
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/@totalClasses), 2) AS Percentage, 
                    @totalClasses AS Classes
                FROM (
					SELECT ds.DistrictName AS Name, 
						SUM(gl.GuestLectureCount) AS Count, 
                        SUM(gl.NoOfSchoolClasses) AS Classes
					FROM GuestLectureData gl
					INNER JOIN Districts ds ON gl.DivisionId = ds.DivisionId AND gl.DistrictCode = ds.DistrictCode 
					GROUP BY ds.DistrictName
				) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'BySector') THEN
			BEGIN  			
                SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/@totalClasses), 2) AS Percentage, 
                    @totalClasses AS Classes
                FROM (
					SELECT s.SectorName AS Name, 
						SUM(gl.GuestLectureCount) AS Count, 
                        SUM(gl.NoOfSchoolClasses) AS Classes
					FROM GuestLectureData gl
					INNER JOIN Sectors s ON gl.SectorId = s.SectorId
					WHERE gl.SectorId IS NOT NULL
					GROUP BY s.SectorName
				) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;	
			END;		 
		ELSEIF(dataType = 'ByVTP') THEN
			BEGIN
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/@totalClasses), 2) AS Percentage, 
                    @totalClasses AS Classes
                FROM (
					SELECT vtp.VTPShortName AS Name, 
						SUM(gl.GuestLectureCount) AS Count, 
                        SUM(gl.NoOfSchoolClasses) AS Classes
					FROM GuestLectureData gl
					INNER JOIN VocationalTrainingProviders vtp ON gl.VTPId = vtp.VTPId
					WHERE gl.VTPId IS NOT NULL
					GROUP BY vtp.VTPShortName                
                ) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/@totalClasses), 2) AS Percentage, 
                    @totalClasses AS Classes
                FROM (
					SELECT dvv.Name, 
						SUM(gl.GuestLectureCount) AS Count, 
                        SUM(gl.NoOfSchoolClasses) AS Classes
					FROM GuestLectureData gl
					INNER JOIN DataValues dvv ON gl.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
					WHERE gl.SchoolManagementId IS NOT NULL
					GROUP BY dvv.Name
				 ) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;		
		END IF;   
        
		DROP TEMPORARY TABLE IF EXISTS GuestLectureData;
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardGuestLectureChartDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardGuestLectureChartDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		SELECT (TIMESTAMPDIFF(MONTH, DATE(ay.StartMonth), CASE WHEN DATE(NOW()) > ay.EndMonth THEN DATE(ay.EndMonth) ELSE DATE(NOW()) END) + 1) INTO @AYMonthForGL
        FROM AcademicYears ay 
        WHERE ay.IsCurrentAcademicYear = 1;
        
        IF(MonthId IS NOT NULL AND LENGTH(MonthId) > 0) THEN
			SET @AYMonthForGL = 1;
        END IF;
 
		DROP TEMPORARY TABLE IF EXISTS TrainerClassesData;
		DROP TEMPORARY TABLE IF EXISTS GuestLectureData;
		
		CREATE TEMPORARY TABLE TrainerClassesData	        
        SELECT DISTINCT vss.AcademicYearId, vt.VTPId, vss.SectorId, s.SchoolManagementId, s.DivisionId, s.DistrictCode, COUNT(vtc.ClassId) AS TotalClasses		
		FROM VTSchoolSectors vss
		INNER JOIN VTClasses vtc ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vtc.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1			
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE vss.IsActive = 1
			AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		GROUP BY vss.AcademicYearId, vt.VTPId, vss.SectorId, s.SchoolManagementId, s.DivisionId, s.DistrictCode;
        
		CREATE TEMPORARY TABLE GuestLectureData	  
        SELECT DISTINCT dgl.AcademicYearId, dgl.VTPId, dgl.SectorId, dgl.DivisionId, dgl.DistrictId, dgl.SchoolManagementId, 
			dgl.ClassTaughtId, dgl.SchoolId, dgl.VTId, dgl.ReportMonth, dgl.NoOfSchoolClasses, dgl.GuestLectureCount
		FROM DsGuestLectures dgl	 
		WHERE (UserId IS NULL OR dgl.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR dgl.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR dgl.DivisionId = DivisionId)
			AND (DistrictCode IS NULL OR dgl.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR dgl.SectorId = SectorId)
			AND (JobRoleId IS NULL OR dgl.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dgl.VTPId = VTPId)
			AND (ClassId IS NULL OR dgl.ClassTaughtId = ClassId)
            AND (MonthId IS NULL OR MONTH(dgl.ReportMonth) = CAST(MonthId AS UNSIGNED))
			AND (SchoolManagementId IS NULL OR dgl.SchoolManagementId = SchoolManagementId);	     
            
		IF(dataType = 'ByTimeline') THEN
			BEGIN  		
				SELECT CAST(SUM(TotalClasses) AS UNSIGNED) INTO @TotalClasses FROM TrainerClassesData;
                
				SELECT ROW_NUMBER() OVER (ORDER BY dvm.DisplayOrder ASC) AS Id, 					
                    CONCAT(dvm.Description,' ',RIGHT(YEAR(g.ReportMonth), 2)) AS Name,
					g.Count, 
					ROUND(((g.Count * 100)/@TotalClasses), 2) AS Percentage, 
					@totalClasses AS Classes
				FROM (
					SELECT gl.ReportMonth, 
						SUM(gl.GuestLectureCount) AS Count, 
						SUM(gl.NoOfSchoolClasses) AS Classes                        
					FROM GuestLectureData gl						
					GROUP BY gl.ReportMonth
				) g 	
				INNER JOIN DataValues dvm ON DATE_FORMAT(g.ReportMonth, '%M') = dvm.Name				
				GROUP BY dvm.Description, g.Count, dvm.DisplayOrder
				ORDER BY dvm.DisplayOrder;
			END;
		ELSEIF(dataType = 'ByTimelineForGL') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY dvm.DisplayOrder ASC) AS Id, 
					dvm.Description AS Name, 
                    SUM(gl.GuestLectureCount) AS Count,
					ROUND((SUM(gl.GuestLectureCount) * 100)/(SUM(gl.NoOfSchoolClasses)), 2) AS Percentage, 
                    SUM(gl.NoOfSchoolClasses) AS Classes
				FROM GuestLectureData gl
                INNER JOIN DataValues dvm ON DATE_FORMAT(gl.ReportMonth, '%M') = dvm.Name
                GROUP BY dvm.Description, dvm.DisplayOrder              
                ORDER BY dvm.DisplayOrder;
			END;
		ELSEIF(dataType = 'ByDivision') THEN
			BEGIN  
				DROP TEMPORARY TABLE IF EXISTS TrainerClassResults;
				CREATE TEMPORARY TABLE TrainerClassResults 
				SELECT DISTINCT vc.DivisionId, SUM(vc.TotalClasses) AS TotalClasses
                FROM TrainerClassesData vc
                GROUP BY vc.DivisionId
                ORDER BY vc.DivisionId;
                
                DROP TEMPORARY TABLE IF EXISTS GuestLectureResults;
                CREATE TEMPORARY TABLE GuestLectureResults 
                SELECT DISTINCT glc.DivisionId, SUM(glc.GuestLectureCount) AS GuestLectureCount
                FROM GuestLectureData glc
                GROUP BY glc.DivisionId
                ORDER BY glc.DivisionId;
                    
				SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName) AS Id,
					d.DivisionName AS Name, 
                    g.Count, 
                    ROUND(((Count * 100)/(g.TotalClasses * @AYMonthForGL)), 2) AS Percentage, 
                    g.TotalClasses AS Classes
                FROM (
					SELECT DISTINCT tcd.DivisionId, 
						SUM(gl.GuestLectureCount) AS Count, 
						SUM(tcd.TotalClasses) AS TotalClasses
					FROM TrainerClassResults tcd
					INNER JOIN GuestLectureResults gl ON tcd.DivisionId = gl.DivisionId			                
					GROUP BY tcd.DivisionId                
				 ) g 
                INNER JOIN Divisions d ON g.DivisionId = d.DivisionId
                GROUP BY d.DivisionName
                ORDER BY d.DivisionName;
			END;
		ELSEIF(dataType = 'ByDistrict') THEN
			BEGIN  		
				DROP TEMPORARY TABLE IF EXISTS TrainerClassResults;
				CREATE TEMPORARY TABLE TrainerClassResults 
				SELECT DISTINCT vc.DivisionId, vc.DistrictCode, SUM(vc.TotalClasses) AS TotalClasses
                FROM TrainerClassesData vc
                GROUP BY vc.DivisionId, vc.DistrictCode
                ORDER BY vc.DivisionId, vc.DistrictCode;
                
                DROP TEMPORARY TABLE IF EXISTS GuestLectureResults;
                CREATE TEMPORARY TABLE GuestLectureResults 
                SELECT DISTINCT glc.DivisionId, glc.DistrictId, SUM(glc.GuestLectureCount) AS GuestLectureCount
                FROM GuestLectureData glc
                GROUP BY glc.DivisionId, glc.DistrictId
                ORDER BY glc.DivisionId, glc.DistrictId;
                    
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName) AS Id,
					d.DistrictName AS Name, 
                    g.Count, 
                    ROUND(((Count * 100)/(g.TotalClasses * @AYMonthForGL)), 2) AS Percentage, 
                    g.TotalClasses AS Classes
                FROM (
					SELECT DISTINCT tcd.DivisionId, tcd.DistrictCode, 
						SUM(gl.GuestLectureCount) AS Count, 
						SUM(tcd.TotalClasses) AS TotalClasses
					FROM TrainerClassResults tcd
					INNER JOIN GuestLectureResults gl ON tcd.DivisionId = gl.DivisionId AND tcd.DistrictCode = gl.DistrictId
					GROUP BY tcd.DivisionId, tcd.DistrictCode              
				 ) g 
                INNER JOIN Districts d ON g.DivisionId = d.DivisionId AND g.DistrictCode = d.DistrictCode
                GROUP BY d.DistrictName
                ORDER BY d.DistrictName;                
			END;
		ELSEIF(dataType = 'ByBlock') THEN
			BEGIN  
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/@totalClasses), 2) AS Percentage, 
                    @totalClasses AS Classes
                FROM (
					SELECT ds.DistrictName AS Name, 
						SUM(gl.GuestLectureCount) AS Count, 
                        SUM(gl.NoOfSchoolClasses) AS Classes
					FROM GuestLectureData gl
					INNER JOIN Districts ds ON gl.DivisionId = ds.DivisionId AND gl.DistrictId = ds.DistrictCode
					GROUP BY ds.DistrictName
				) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'BySector') THEN
			BEGIN  		
				DROP TEMPORARY TABLE IF EXISTS TrainerClassResults;
				CREATE TEMPORARY TABLE TrainerClassResults 
				SELECT DISTINCT vc.SectorId, SUM(vc.TotalClasses) AS TotalClasses
                FROM TrainerClassesData vc
                GROUP BY vc.SectorId
                ORDER BY vc.SectorId;
                
                DROP TEMPORARY TABLE IF EXISTS GuestLectureResults;
                CREATE TEMPORARY TABLE GuestLectureResults 
                SELECT DISTINCT glc.SectorId, SUM(glc.GuestLectureCount) AS GuestLectureCount
                FROM GuestLectureData glc
                GROUP BY glc.SectorId
                ORDER BY glc.SectorId;
                    
				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName) AS Id,
					se.SectorName AS Name, 
                    g.Count, 
                    ROUND(((Count * 100)/(g.TotalClasses * @AYMonthForGL)), 2) AS Percentage, 
                    g.TotalClasses AS Classes
                FROM (
					SELECT DISTINCT tcd.SectorId, 
						SUM(gl.GuestLectureCount) AS Count, 
						SUM(tcd.TotalClasses) AS TotalClasses
					FROM TrainerClassResults tcd
					INNER JOIN GuestLectureResults gl ON tcd.SectorId = gl.SectorId			                
					GROUP BY tcd.SectorId                
				 ) g 
                INNER JOIN Sectors se ON g.SectorId = se.SectorId
                GROUP BY se.SectorName
                ORDER BY se.SectorName;
			END;		 
		ELSEIF(dataType = 'ByVTP') THEN
			BEGIN
				DROP TEMPORARY TABLE IF EXISTS TrainerClassResults;
				CREATE TEMPORARY TABLE TrainerClassResults 
				SELECT DISTINCT vc.VTPId, SUM(vc.TotalClasses) AS TotalClasses
                FROM TrainerClassesData vc
                GROUP BY vc.VTPId
                ORDER BY vc.VTPId;
                
                DROP TEMPORARY TABLE IF EXISTS GuestLectureResults;
                CREATE TEMPORARY TABLE GuestLectureResults 
                SELECT DISTINCT glc.VTPId, SUM(glc.GuestLectureCount) AS GuestLectureCount
                FROM GuestLectureData glc
                GROUP BY glc.VTPId
                ORDER BY glc.VTPId;
                    
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName) AS Id,
					vtp.VTPShortName AS Name, 
                    g.Count, 
                    ROUND(((Count * 100)/(g.TotalClasses * @AYMonthForGL)), 2) AS Percentage, 
                    g.TotalClasses AS Classes
                FROM (
					SELECT DISTINCT tcd.VTPId, 
						SUM(gl.GuestLectureCount) AS Count, 
						SUM(tcd.TotalClasses) AS TotalClasses
					FROM TrainerClassResults tcd
					INNER JOIN GuestLectureResults gl ON tcd.VTPId = gl.VTPId			                
					GROUP BY tcd.VTPId                
				 ) g 
                INNER JOIN VocationalTrainingProviders vtp ON g.VTPId = vtp.VTPId
                GROUP BY vtp.VTPShortName
                ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(dataType = 'BySchoolManagement') THEN
			BEGIN
				DROP TEMPORARY TABLE IF EXISTS TrainerClassResults;
				CREATE TEMPORARY TABLE TrainerClassResults 
				SELECT DISTINCT vc.SchoolManagementId, SUM(vc.TotalClasses) AS TotalClasses
                FROM TrainerClassesData vc
                GROUP BY vc.SchoolManagementId
                ORDER BY vc.SchoolManagementId;
                
                DROP TEMPORARY TABLE IF EXISTS GuestLectureResults;
                CREATE TEMPORARY TABLE GuestLectureResults 
                SELECT DISTINCT glc.SchoolManagementId, SUM(glc.GuestLectureCount) AS GuestLectureCount
                FROM GuestLectureData glc
                GROUP BY glc.SchoolManagementId
                ORDER BY glc.SchoolManagementId;
                    
				SELECT ROW_NUMBER() OVER (ORDER BY dvv.Name) AS Id,
					dvv.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/(g.TotalClasses * @AYMonthForGL)), 2) AS Percentage, 
                    g.TotalClasses AS Classes
                FROM (
					SELECT DISTINCT tcd.SchoolManagementId, 
						SUM(gl.GuestLectureCount) AS Count, 
						SUM(tcd.TotalClasses) AS TotalClasses
					FROM TrainerClassResults tcd
					INNER JOIN GuestLectureResults gl ON tcd.SchoolManagementId = gl.SchoolManagementId			                
					GROUP BY tcd.SchoolManagementId
				 ) g 
                INNER JOIN DataValues dvv ON g.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
                GROUP BY dvv.Name
                ORDER BY dvv.Name;                
			END;		
		END IF;   
        
        DROP TEMPORARY TABLE IF EXISTS TrainerClassResults;
        DROP TEMPORARY TABLE IF EXISTS GuestLectureResults;
        
		DROP TEMPORARY TABLE IF EXISTS TrainerClassesData;
		DROP TEMPORARY TABLE IF EXISTS GuestLectureData;
	END;
	
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;

	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardGuestLectureChartDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetDashboardGuestLectureChartDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		SELECT (TIMESTAMPDIFF(MONTH, DATE(ay.StartMonth), CASE WHEN DATE(NOW()) > ay.EndMonth THEN DATE(ay.EndMonth) ELSE DATE(NOW()) END) + 1) INTO @AYMonthForGL
        FROM AcademicYears ay 
        WHERE ay.IsCurrentAcademicYear = 1;
        
        IF(MonthId IS NOT NULL AND LENGTH(MonthId) > 0) THEN
			SET @AYMonthForGL = 1;
        END IF;
 
		DROP TEMPORARY TABLE IF EXISTS TrainerClassesData;
		DROP TEMPORARY TABLE IF EXISTS GuestLectureData;
		
		CREATE TEMPORARY TABLE TrainerClassesData	        
        SELECT DISTINCT vss.AcademicYearId, vtm.VTPId, vss.SectorId, s.SchoolManagementId, s.DivisionId, s.DistrictCode, COUNT(vtc.ClassId) AS TotalClasses		
		FROM VTSchoolSectors vss
		INNER JOIN VTClasses vtc ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vtc.IsActive = 1
		INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.IsActive = 1			
        INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1			
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE vss.IsActive = 1
			AND (UserId IS NULL OR vtm.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		GROUP BY vss.AcademicYearId, vtm.VTPId, vss.SectorId, s.SchoolManagementId, s.DivisionId, s.DistrictCode;
        
		CREATE TEMPORARY TABLE GuestLectureData	  
        SELECT DISTINCT dgl.AcademicYearId, dgl.VTPId, dgl.SectorId, dgl.DivisionId, dgl.DistrictId, dgl.SchoolManagementId, 
			dgl.ClassTaughtId, dgl.SchoolId, dgl.VTId, dgl.ReportMonth, dgl.NoOfSchoolClasses, dgl.GuestLectureCount
		FROM DsGuestLectures dgl	 
		WHERE (UserId IS NULL OR dgl.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR dgl.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR dgl.DivisionId = DivisionId)
			AND (DistrictCode IS NULL OR dgl.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR dgl.SectorId = SectorId)
			AND (JobRoleId IS NULL OR dgl.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dgl.VTPId = VTPId)
			AND (ClassId IS NULL OR dgl.ClassTaughtId = ClassId)
            AND (MonthId IS NULL OR MONTH(dgl.ReportMonth) = CAST(MonthId AS UNSIGNED))
			AND (SchoolManagementId IS NULL OR dgl.SchoolManagementId = SchoolManagementId);	     
            
		IF(dataType = 'ByTimeline') THEN
			BEGIN  		
				SELECT CAST(SUM(TotalClasses) AS UNSIGNED) INTO @TotalClasses FROM TrainerClassesData;
                
				SELECT ROW_NUMBER() OVER (ORDER BY dvm.DisplayOrder ASC) AS Id, 					
                    CONCAT(dvm.Description,' ',RIGHT(YEAR(g.ReportMonth), 2)) AS Name,
					g.Count, 
					ROUND(((g.Count * 100)/@TotalClasses), 2) AS Percentage, 
					@totalClasses AS Classes
				FROM (
					SELECT gl.ReportMonth, 
						SUM(gl.GuestLectureCount) AS Count, 
						SUM(gl.NoOfSchoolClasses) AS Classes                        
					FROM GuestLectureData gl						
					GROUP BY gl.ReportMonth
				) g 	
				INNER JOIN DataValues dvm ON DATE_FORMAT(g.ReportMonth, '%M') = dvm.Name				
				GROUP BY dvm.Description, g.Count, dvm.DisplayOrder
				ORDER BY dvm.DisplayOrder;
			END;
		ELSEIF(dataType = 'ByTimelineForGL') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY dvm.DisplayOrder ASC) AS Id, 
					dvm.Description AS Name, 
                    SUM(gl.GuestLectureCount) AS Count,
					ROUND((SUM(gl.GuestLectureCount) * 100)/(SUM(gl.NoOfSchoolClasses)), 2) AS Percentage, 
                    SUM(gl.NoOfSchoolClasses) AS Classes
				FROM GuestLectureData gl
                INNER JOIN DataValues dvm ON DATE_FORMAT(gl.ReportMonth, '%M') = dvm.Name
                GROUP BY dvm.Description, dvm.DisplayOrder              
                ORDER BY dvm.DisplayOrder;
			END;
		ELSEIF(dataType = 'ByDivision') THEN
			BEGIN  
				DROP TEMPORARY TABLE IF EXISTS TrainerClassResults;
				CREATE TEMPORARY TABLE TrainerClassResults 
				SELECT DISTINCT vc.DivisionId, SUM(vc.TotalClasses) AS TotalClasses
                FROM TrainerClassesData vc
                GROUP BY vc.DivisionId
                ORDER BY vc.DivisionId;
                
                DROP TEMPORARY TABLE IF EXISTS GuestLectureResults;
                CREATE TEMPORARY TABLE GuestLectureResults 
                SELECT DISTINCT glc.DivisionId, SUM(glc.GuestLectureCount) AS GuestLectureCount
                FROM GuestLectureData glc
                GROUP BY glc.DivisionId
                ORDER BY glc.DivisionId;
                    
				SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName) AS Id,
					d.DivisionName AS Name, 
                    g.Count, 
                    ROUND(((Count * 100)/(g.TotalClasses * @AYMonthForGL)), 2) AS Percentage, 
                    g.TotalClasses AS Classes
                FROM (
					SELECT DISTINCT tcd.DivisionId, 
						SUM(gl.GuestLectureCount) AS Count, 
						SUM(tcd.TotalClasses) AS TotalClasses
					FROM TrainerClassResults tcd
					INNER JOIN GuestLectureResults gl ON tcd.DivisionId = gl.DivisionId			                
					GROUP BY tcd.DivisionId                
				 ) g 
                INNER JOIN Divisions d ON g.DivisionId = d.DivisionId
                GROUP BY d.DivisionName
                ORDER BY d.DivisionName;
			END;
		ELSEIF(dataType = 'ByDistrict') THEN
			BEGIN  		
				DROP TEMPORARY TABLE IF EXISTS TrainerClassResults;
				CREATE TEMPORARY TABLE TrainerClassResults 
				SELECT DISTINCT vc.DivisionId, vc.DistrictCode, SUM(vc.TotalClasses) AS TotalClasses
                FROM TrainerClassesData vc
                GROUP BY vc.DivisionId, vc.DistrictCode
                ORDER BY vc.DivisionId, vc.DistrictCode;
                
                DROP TEMPORARY TABLE IF EXISTS GuestLectureResults;
                CREATE TEMPORARY TABLE GuestLectureResults 
                SELECT DISTINCT glc.DivisionId, glc.DistrictId, SUM(glc.GuestLectureCount) AS GuestLectureCount
                FROM GuestLectureData glc
                GROUP BY glc.DivisionId, glc.DistrictId
                ORDER BY glc.DivisionId, glc.DistrictId;
                    
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName) AS Id,
					d.DistrictName AS Name, 
                    g.Count, 
                    ROUND(((Count * 100)/(g.TotalClasses * @AYMonthForGL)), 2) AS Percentage, 
                    g.TotalClasses AS Classes
                FROM (
					SELECT DISTINCT tcd.DivisionId, tcd.DistrictCode, 
						SUM(gl.GuestLectureCount) AS Count, 
						SUM(tcd.TotalClasses) AS TotalClasses
					FROM TrainerClassResults tcd
					INNER JOIN GuestLectureResults gl ON tcd.DivisionId = gl.DivisionId AND tcd.DistrictCode = gl.DistrictId
					GROUP BY tcd.DivisionId, tcd.DistrictCode              
				 ) g 
                INNER JOIN Districts d ON g.DivisionId = d.DivisionId AND g.DistrictCode = d.DistrictCode
                GROUP BY d.DistrictName
                ORDER BY d.DistrictName;                
			END;
		ELSEIF(dataType = 'ByBlock') THEN
			BEGIN  
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					g.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/@totalClasses), 2) AS Percentage, 
                    @totalClasses AS Classes
                FROM (
					SELECT ds.DistrictName AS Name, 
						SUM(gl.GuestLectureCount) AS Count, 
                        SUM(gl.NoOfSchoolClasses) AS Classes
					FROM GuestLectureData gl
					INNER JOIN Districts ds ON gl.DivisionId = ds.DivisionId AND gl.DistrictId = ds.DistrictCode
					GROUP BY ds.DistrictName
				) g 
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY g.Name
                ORDER BY g.Name;
			END;
		ELSEIF(dataType = 'BySector') THEN
			BEGIN  		
				DROP TEMPORARY TABLE IF EXISTS TrainerClassResults;
				CREATE TEMPORARY TABLE TrainerClassResults 
				SELECT DISTINCT vc.SectorId, SUM(vc.TotalClasses) AS TotalClasses
                FROM TrainerClassesData vc
                GROUP BY vc.SectorId
                ORDER BY vc.SectorId;
                
                DROP TEMPORARY TABLE IF EXISTS GuestLectureResults;
                CREATE TEMPORARY TABLE GuestLectureResults 
                SELECT DISTINCT glc.SectorId, SUM(glc.GuestLectureCount) AS GuestLectureCount
                FROM GuestLectureData glc
                GROUP BY glc.SectorId
                ORDER BY glc.SectorId;
                    
				SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName) AS Id,
					se.SectorName AS Name, 
                    g.Count, 
                    ROUND(((Count * 100)/(g.TotalClasses * @AYMonthForGL)), 2) AS Percentage, 
                    g.TotalClasses AS Classes
                FROM (
					SELECT DISTINCT tcd.SectorId, 
						SUM(gl.GuestLectureCount) AS Count, 
						SUM(tcd.TotalClasses) AS TotalClasses
					FROM TrainerClassResults tcd
					INNER JOIN GuestLectureResults gl ON tcd.SectorId = gl.SectorId			                
					GROUP BY tcd.SectorId                
				 ) g 
                INNER JOIN Sectors se ON g.SectorId = se.SectorId
                GROUP BY se.SectorName
                ORDER BY se.SectorName;
			END;		 
		ELSEIF(dataType = 'ByVTP') THEN
			BEGIN
				DROP TEMPORARY TABLE IF EXISTS TrainerClassResults;
				CREATE TEMPORARY TABLE TrainerClassResults 
				SELECT DISTINCT vc.VTPId, SUM(vc.TotalClasses) AS TotalClasses
                FROM TrainerClassesData vc
                GROUP BY vc.VTPId
                ORDER BY vc.VTPId;
                
                DROP TEMPORARY TABLE IF EXISTS GuestLectureResults;
                CREATE TEMPORARY TABLE GuestLectureResults 
                SELECT DISTINCT glc.VTPId, SUM(glc.GuestLectureCount) AS GuestLectureCount
                FROM GuestLectureData glc
                GROUP BY glc.VTPId
                ORDER BY glc.VTPId;
                    
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName) AS Id,
					vtp.VTPShortName AS Name, 
                    g.Count, 
                    ROUND(((Count * 100)/(g.TotalClasses * @AYMonthForGL)), 2) AS Percentage, 
                    g.TotalClasses AS Classes
                FROM (
					SELECT DISTINCT tcd.VTPId, 
						SUM(gl.GuestLectureCount) AS Count, 
						SUM(tcd.TotalClasses) AS TotalClasses
					FROM TrainerClassResults tcd
					INNER JOIN GuestLectureResults gl ON tcd.VTPId = gl.VTPId			                
					GROUP BY tcd.VTPId                
				 ) g 
                INNER JOIN VocationalTrainingProviders vtp ON g.VTPId = vtp.VTPId
                GROUP BY vtp.VTPShortName
                ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(dataType = 'BySchoolManagement') THEN
			BEGIN
				DROP TEMPORARY TABLE IF EXISTS TrainerClassResults;
				CREATE TEMPORARY TABLE TrainerClassResults 
				SELECT DISTINCT vc.SchoolManagementId, SUM(vc.TotalClasses) AS TotalClasses
                FROM TrainerClassesData vc
                GROUP BY vc.SchoolManagementId
                ORDER BY vc.SchoolManagementId;
                
                DROP TEMPORARY TABLE IF EXISTS GuestLectureResults;
                CREATE TEMPORARY TABLE GuestLectureResults 
                SELECT DISTINCT glc.SchoolManagementId, SUM(glc.GuestLectureCount) AS GuestLectureCount
                FROM GuestLectureData glc
                GROUP BY glc.SchoolManagementId
                ORDER BY glc.SchoolManagementId;
                    
				SELECT ROW_NUMBER() OVER (ORDER BY dvv.Name) AS Id,
					dvv.Name, 
                    g.Count, 
                    ROUND(((Count * 100)/(g.TotalClasses * @AYMonthForGL)), 2) AS Percentage, 
                    g.TotalClasses AS Classes
                FROM (
					SELECT DISTINCT tcd.SchoolManagementId, 
						SUM(gl.GuestLectureCount) AS Count, 
						SUM(tcd.TotalClasses) AS TotalClasses
					FROM TrainerClassResults tcd
					INNER JOIN GuestLectureResults gl ON tcd.SchoolManagementId = gl.SchoolManagementId			                
					GROUP BY tcd.SchoolManagementId
				 ) g 
                INNER JOIN DataValues dvv ON g.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
                GROUP BY dvv.Name
                ORDER BY dvv.Name;                
			END;		
		END IF;   
        
        DROP TEMPORARY TABLE IF EXISTS TrainerClassResults;
        DROP TEMPORARY TABLE IF EXISTS GuestLectureResults;
        
		DROP TEMPORARY TABLE IF EXISTS TrainerClassesData;
		DROP TEMPORARY TABLE IF EXISTS GuestLectureData;
	END;
	
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;

	# CALL GetDashboardGuestLectureChartDataV2 ('ByTimeline', 'rakesh.gtmcs@gmail.com', 'fda59df6-729e-493c-8d48-fc65b90008fe', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    # CALL GetDashboardGuestLectureChartDataV2 ('ByTimeline', 'vc.aisect@email.com', NULL, 'fda59df6-729e-493c-8d48-fc65b90008fe', NULL, NULL, NULL, NULL, NULL, NULL, NULL);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardIssueManagementChartData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetDashboardIssueManagementChartData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10),
    IN IssueId VARCHAR(100)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, a.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
		DROP TEMPORARY TABLE IF EXISTS IssueManagementData;

		CREATE TEMPORARY TABLE IssueManagementData         
		SELECT DISTINCT ir.MainIssue AS MainIssueId, mi.Description AS Name, ir.ReportedType, ir.ReportedId, ir.ReportedBy AS IssueRaisedBy, si.IssuePriority, ir.IssueReportDate, ir.ApprovalStatus, si.IssueName SubIssueName
        FROM (
			SELECT vci.VCIssueReportingId AS IssueReportingId, 'VC' AS ReportedType, vc.VCId AS ReportedId, vc.FullName AS ReportedBy, vci.IssueReportDate, vci.IssueDetails, vci.ApprovalStatus, vci.MainIssue, vci.SubIssue
			FROM VCIssueReporting vci
            INNER JOIN VocationalCoordinators vc ON vci.VCId = vc.VCId AND vc.IsActive = 1
            INNER JOIN SubIssues si ON vci.SubIssue = si.SubIssueId
            WHERE vci.AcademicYearId = AcademicYearId
				AND ((@roleName = 'ADM' AND si.AssignForReviewPMU = 1) OR 
                (@roleName = 'HM' AND si.AssignForReviewHM = 1))            
			
			UNION
			SELECT vti.VTIssueReportingId AS IssueReportingId, 'VT' AS ReportedType, vt.VTId AS ReportedId, vt.FullName AS ReportedBy, vti.IssueReportDate, vti.IssueDetails, vti.ApprovalStatus, vti.MainIssue, vti.SubIssue
			FROM VTIssueReporting vti			
            INNER JOIN SubIssues si ON vti.SubIssue = si.SubIssueId            
            INNER JOIN VocationalTrainers vt ON vti.VTId = vt.VTId AND vt.IsActive = 1
			INNER JOIN VTSchoolSectors vss ON vt.VTId = vss.VTId AND vss.IsActive = 1
			INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1    
			INNER JOIN VocationalTrainingProviders vtp ON vt.VTPId = vtp.VTPId AND vt.IsActive = 1 
			WHERE vti.AcademicYearId = AcademicYearId
				AND ((@roleName = 'ADM' AND si.AssignForReviewPMU = 1) OR 
				(@roleName = 'VC' AND si.AssignForReviewVC = 1 AND vt.VCId = @accountId) OR 
                (@roleName = 'HM' AND si.AssignForReviewHM = 1))                
				
            UNION
			SELECT hmi.HMIssueReportingId AS IssueReportingId, 'HM' AS ReportedType, hm.HMId AS ReportedId, hm.FullName AS ReportedBy, hmi.IssueReportDate, hmi.IssueDetails, hmi.ApprovalStatus, hmi.MainIssue, hmi.SubIssue
			FROM HMIssueReporting hmi
            INNER JOIN SubIssues si ON hmi.SubIssue = si.SubIssueId
            INNER JOIN HeadMasters hm ON hmi.HMId = hm.HMId AND hm.IsActive = 1            
            LEFT JOIN VTSchoolSectors vss ON hm.SchoolId = vss.SchoolId AND vss.IsActive = 1
            LEFT JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
            LEFT JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1
            WHERE hmi.AcademicYearId = AcademicYearId
				AND ((@roleName = 'ADM' AND si.AssignForReviewPMU = 1) OR 
				(@roleName = 'VC' AND si.AssignForReviewVC = 1 AND vt.VCId = @accountId) OR 
                (@roleName = 'HM' AND si.AssignForReviewHM = 1))                
	
		) AS ir
		INNER JOIN MainIssues mi ON ir.MainIssue = mi.MainIssueId
        INNER JOIN SubIssues si ON ir.SubIssue = si.SubIssueId		
		LEFT JOIN DataValues dvic ON si.IssueCategoryId = dvic.DataValueId
		LEFT JOIN VocationalCoordinators AS vc ON ir.ReportedId = vc.VCId and ir.ReportedType = 'VC'
		LEFT JOIN VocationalTrainers AS vt ON ir.ReportedId = vt.VTId and ir.ReportedType = 'VT'
        LEFT JOIN HeadMasters AS hm ON ir.ReportedId = hm.HMId and ir.ReportedType = 'HM'
        LEFT JOIN VCSchoolSectors AS vcss ON vc.VCId = vcss.VCId 
		LEFT JOIN SchoolVTPSectors AS svtps ON vcss.SchoolVTPSectorId = svtps.SchoolVTPSectorId and vc.VTPId = svtps.VTPId
		LEFT JOIN VTSchoolSectors AS vss ON svtps.AcademicYearId = vss.AcademicYearId AND svtps.SchoolId = vss.SchoolId AND svtps.SectorId = vss.SectorId
		LEFT JOIN Schools AS sch ON svtps.SchoolId = sch.SchoolId
		LEFT JOIN VTClasses vtc ON vtc.VTId = vt.VTId		
		WHERE ir.MainIssue IS NOT NULL						   
			AND (DivisionId IS NULL OR sch.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR sch.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR sch.SchoolManagementId = SchoolManagementId) 
            AND (IssueId IS NULL OR ir.MainIssue = IssueId);  

		IF(dataType = 'ByTotalIssues') THEN
			BEGIN               
				SELECT ROW_NUMBER() OVER (ORDER BY dvs.Name ASC) AS Id, 
					'' AS IssueRaisedBy,
					'' AS IssuePriority,
                    dvs.Name,
					SUM(IF(v.IssuePriority='High',1,0)) AS High, 
					SUM(IF(v.IssuePriority='Medium',1,0)) AS Medium,
					SUM(IF(v.IssuePriority='Low',1,0)) AS Low,
                    0 AS Open, 0 AS Closed, 0 AS Hold, 0 AS Discard, 0 AS InProgress, COUNT(v.IssuePriority) AS Total
                FROM IssueManagementData v
                INNER JOIN DataValues dvs ON v.ApprovalStatus = dvs.DataValueId AND dvs.DataTypeId = 'IssueStatus'
				WHERE v.Name IS NOT NULL AND v.IssueReportDate IS NOT NULL
				GROUP BY dvs.Name;
			END;   
		ELSEIF(dataType = 'ByIssueType') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY v.Name ASC) AS Id, 
					'' AS IssueRaisedBy,
					'' AS IssuePriority,
                    v.Name,
					SUM(IF(v.IssuePriority='High',1,0)) AS High, 
					SUM(IF(v.IssuePriority='Medium',1,0)) AS Medium,
					SUM(IF(v.IssuePriority='Low',1,0)) AS Low,
                    0 AS Open, 0 AS Closed, 0 AS Hold, 0 AS Discard, 0 AS InProgress, COUNT(v.IssuePriority) AS Total
                FROM IssueManagementData v
				WHERE v.Name IS NOT NULL AND IssueReportDate IS NOT NULL
				GROUP BY v.Name;
			END;   
		ELSEIF(dataType = 'ByMonth') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY DATE_FORMAT(IssueReportDate,'%b') ASC) AS Id,
					v.IssueRaisedBy,
					v.IssuePriority,
					DATE_FORMAT(IssueReportDate,'%b') AS Name,
					SUM(IF(v.IssuePriority='High',1,0)) High, 
					SUM(IF(v.IssuePriority='Medium',1,0)) AS Medium,
					SUM(IF(v.IssuePriority='Low',1,0)) Low,
                    0 AS Open, 0 AS Closed, 0 AS Hold, 0 AS Discard, 0 AS InProgress, COUNT(v.IssuePriority) AS Total
				FROM IssueManagementData v
				WHERE IssueReportDate is not null
				GROUP BY DATE_FORMAT(IssueReportDate,'%b'), v.IssueRaisedBy, v.IssuePriority;
			END;
		ELSEIF(dataType = 'ByIssueSummary') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY DATE_FORMAT(Name,'%b') ASC) AS Id, 
					ReportedType AS IssueRaisedBy,
					'' AS IssuePriority,
                    Name,
					0 AS High,
                    0 AS Medium,
                    0 AS Low,
					SUM(IF(ApprovalStatus=219,1,0)) AS Open, 
					SUM(IF(ApprovalStatus=220,1,0)) AS Closed,
					SUM(IF(ApprovalStatus=221,1,0)) AS Hold,
                    SUM(IF(ApprovalStatus=224,1,0)) AS Discard,
                    SUM(IF(ApprovalStatus=223,1,0)) AS InProgress,
                    COUNT(ApprovalStatus) AS Total                    
				FROM IssueManagementData
				WHERE Name is not null 
				GROUP BY MainIssueId, Name, ReportedType;
			END;
		ELSEIF(dataType = 'ByIssueId') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY DATE_FORMAT(SubIssueName,'%b') ASC) AS Id,
					ReportedType AS IssueRaisedBy,
					'HIGH' AS IssuePriority,
                    SubIssueName AS Name,    
                    0 AS High,
                    0 AS Medium,
                    0 AS Low,
					SUM(IF(ApprovalStatus=219,1,0)) AS Open, 
					SUM(IF(ApprovalStatus=220,1,0)) AS Closed,
					SUM(IF(ApprovalStatus=221,1,0)) AS Hold,
                    SUM(IF(ApprovalStatus=224,1,0)) AS Discard,
                    SUM(IF(ApprovalStatus=223,1,0)) AS InProgress,
                    COUNT(ApprovalStatus) AS Total
				FROM IssueManagementData
				WHERE IssueReportDate is not null 
				GROUP BY SubIssueName, ReportedType;
			END;
		END IF;        		
	END;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;    
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
																																												  
 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardJobRoleUnitsCardData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetDashboardJobRoleUnitsCardData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
  
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;			 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS JobRoleUnitData;
		
		CREATE TEMPORARY TABLE JobRoleUnitData
		SELECT DISTINCT vss.VTSchoolSectorId, s.DivisionId, s.DistrictCode, vss.SectorId, vt.VTPId, s.SchoolManagementId, vss.JobRoleId
		FROM VTSchoolSectors vss
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1			
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND jr.IsActive = 1
		WHERE vss.IsActive = 1 AND vss.JobRoleId IS NOT NULL
			AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);		
  
		IF(DataType = 'ByCount') THEN
			BEGIN  				
                SELECT 1 AS Id, CAST(COUNT(DISTINCT ju.VTSchoolSectorId) AS CHAR) AS Name, COUNT(DISTINCT ju.VTSchoolSectorId) AS JobRoleUnits
				FROM JobRoleUnitData ju;				
			END;
		ELSEIF(DataType = 'ByDivision') THEN
			BEGIN  				
                SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, d.DivisionName AS Name, COUNT(DISTINCT ju.VTSchoolSectorId) AS JobRoleUnits
				FROM JobRoleUnitData ju
                LEFT JOIN Divisions d ON ju.DivisionId = d.DivisionId
				WHERE ju.DivisionId IS NOT NULL
				GROUP BY ju.DivisionId
                ORDER BY d.DivisionName;
			END;
		ELSEIF(DataType = 'ByDistrict') THEN
			BEGIN  			
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, d.DistrictName AS Name, COUNT(DISTINCT ju.VTSchoolSectorId) AS JobRoleUnits
				FROM JobRoleUnitData ju
                LEFT JOIN Districts d ON ju.DistrictCode = d.DistrictCode
				WHERE ju.DistrictCode IS NOT NULL
				GROUP BY ju.DistrictCode
                ORDER BY d.DistrictName;
			END;		 
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, s.SectorName AS Name, COUNT(DISTINCT ju.VTSchoolSectorId) AS JobRoleUnits
				FROM JobRoleUnitData ju
                LEFT JOIN Sectors s ON ju.SectorId = s.SectorId
				WHERE ju.SectorId IS NOT NULL
				GROUP BY ju.SectorId
                ORDER BY s.SectorName;				 
			END;	 
		ELSEIF(DataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, vtp.VTPShortName AS Name, COUNT(DISTINCT ju.VTSchoolSectorId) AS JobRoleUnits
				FROM JobRoleUnitData ju
                LEFT JOIN VocationalTrainingProviders vtp ON ju.VTPId = vtp.VTPId
				WHERE ju.VTPId IS NOT NULL
				GROUP BY ju.VTPId
                ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(DataType = 'BySchoolManagement') THEN
			BEGIN	
				SELECT ROW_NUMBER() OVER (ORDER BY dvv.Name ASC) AS Id, dvv.Name, COUNT(DISTINCT ju.VTSchoolSectorId) AS JobRoleUnits
				FROM JobRoleUnitData ju
                LEFT JOIN DataValues dvv ON ju.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
				WHERE ju.SchoolManagementId IS NOT NULL
				GROUP BY ju.SchoolManagementId
                ORDER BY dvv.Name;
			END;		
		END IF;   
     
		DROP TEMPORARY TABLE IF EXISTS JobRoleUnitData;
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	 
     

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardSchoolChartData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardSchoolChartData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;

		SET @rowIndex = 0;
		
		DROP TEMPORARY TABLE IF EXISTS SchoolsData;
		
		CREATE TEMPORARY TABLE SchoolsData        
		SELECT DISTINCT s.DivisionId, s.DistrictCode, s.SchoolManagementId, svtps.VTPId, svtps.SectorId, vtc.ClassId, 			
			s.SchoolId AS ApprovedSchoolId,             
			IF(s.IsImplemented = 1, s.SchoolId, NULL) AS ImplementedSchoolId
		FROM Schools s  
		LEFT JOIN SchoolVTPSectors svtps ON s.SchoolId = svtps.SchoolId AND svtps.IsActive = 1
		LEFT JOIN AcademicYears ar ON svtps.AcademicYearId = ar.AcademicYearId AND ar.IsActive = 1 
		LEFT JOIN VocationalTrainingProviders vtp ON svtps.VTPId = vtp.VTPId AND vtp.IsActive = 1
		LEFT JOIN VCSchoolSectors vcss ON svtps.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1
		LEFT JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1
		LEFT JOIN VocationalTrainers vt ON vc.VCId = vt.VCId AND vt.IsActive = 1
		LEFT JOIN VTSchoolSectors vss ON svtps.AcademicYearId = vss.AcademicYearId AND svtps.SchoolId = vss.SchoolId AND svtps.SectorId = vss.SectorId AND vt.VTId= vss.VTId AND vss.IsActive = 1				
		LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.VTId = vtc.VTId AND s.SchoolId = vtc.SchoolId AND vtc.IsActive = 1 				                
		WHERE s.IsActive = 1
			AND (UserId IS NULL OR vcss.VCId = @accountId)			
            AND (AcademicYearId IS NULL OR (svtps.AcademicYearId = AcademicYearId OR svtps.AcademicYearId IS NULL)) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR svtps.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);		            
		  
		IF(dataType = 'ByCount') THEN
			BEGIN  				
				SELECT 1 AS Id, CAST(COUNT(DISTINCT sd.ApprovedSchoolId) AS CHAR) AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage                 
				FROM SchoolsData sd;
			END;
		ELSEIF(dataType = 'ByDivision') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, d.DivisionName AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                LEFT JOIN Divisions d ON sd.DivisionId = d.DivisionId
				WHERE sd.DivisionId IS NOT NULL
				GROUP BY sd.DivisionId
				ORDER BY d.DivisionName;
			END;
		ELSEIF(dataType = 'ByDistrict') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, IFNULL(d.DistrictName, 'Others') AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                LEFT JOIN Districts d ON sd.DivisionId = d.DivisionId AND sd.DistrictCode = d.DistrictCode
				WHERE sd.DivisionId IS NOT NULL AND sd.DistrictCode IS NOT NULL
				GROUP BY d.DistrictName
				ORDER BY d.DistrictName;
			END;
		ELSEIF(dataType = 'BySector') THEN
			BEGIN  							
				SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, IFNULL(s.SectorName, 'Sector') AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                INNER JOIN Sectors s ON sd.SectorId = s.SectorId
				WHERE sd.SectorId IS NOT NULL 
				GROUP BY sd.SectorId
				ORDER BY s.SectorName;
			END;
		ELSEIF(dataType = 'ByClass') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY sc.DisplayOrder ASC) AS Id, IFNULL(sc.Name, 'Class') AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd              
				INNER JOIN SchoolClasses sc ON sd.ClassId = sc.ClassId				
				WHERE sd.ClassId IS NOT NULL
				GROUP BY sd.ClassId
				ORDER BY sc.DisplayOrder;
			END;	
		ELSEIF(dataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, vtp.VTPShortName AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                INNER JOIN VocationalTrainingProviders vtp ON sd.VTPId = vtp.VTPId AND vtp.IsActive = 1
				WHERE sd.VTPId IS NOT NULL
				GROUP BY sd.VTPId
				ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(dataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY dv.Name ASC) AS Id, dv.Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                LEFT JOIN DataValues dv ON sd.SchoolManagementId = dv.DataValueId AND dv.DataTypeId = 'SchoolManagement'
				WHERE sd.SchoolManagementId IS NOT NULL
				GROUP BY sd.SchoolManagementId
				ORDER BY dv.Name;
			END;		
		END IF;   
     
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardSchoolChartDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardSchoolChartDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;

		SET @rowIndex = 0;
		
		DROP TEMPORARY TABLE IF EXISTS SchoolsData;
		
		CREATE TEMPORARY TABLE SchoolsData        		
		SELECT DISTINCT ds.VTPId, ds.SectorId, ds.DivisionId, ds.DistrictId, ds.SchoolManagementId, ds.ApprovedSchoolId, ds.ImplementedSchoolId, ds.ClassId
		FROM DsSchools ds  
		WHERE (UserId IS NULL OR ds.VCId = @accountId)			
            AND (AcademicYearId IS NULL OR (ds.AcademicYearId = AcademicYearId OR ds.AcademicYearId IS NULL)) 
			AND (DivisionId IS NULL OR ds.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR ds.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR ds.SectorId = SectorId)
			AND (JobRoleId IS NULL OR ds.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR ds.VTPId = VTPId)
			AND (ClassId IS NULL OR ds.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR ds.SchoolManagementId = SchoolManagementId);		            
		  
		IF(dataType = 'ByCount') THEN
			BEGIN  				
				SELECT 1 AS Id, CAST(COUNT(DISTINCT sd.ApprovedSchoolId) AS CHAR) AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage                 
				FROM SchoolsData sd;
			END;
		ELSEIF(dataType = 'ByDivision') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, d.DivisionName AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                LEFT JOIN Divisions d ON sd.DivisionId = d.DivisionId
				WHERE sd.DivisionId IS NOT NULL
				GROUP BY sd.DivisionId
				ORDER BY d.DivisionName;
			END;
		ELSEIF(dataType = 'ByDistrict') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, IFNULL(d.DistrictName, 'Others') AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                LEFT JOIN Districts d ON sd.DivisionId = d.DivisionId AND sd.DistrictId = d.DistrictCode
				WHERE sd.DivisionId IS NOT NULL AND sd.DistrictId IS NOT NULL
				GROUP BY d.DistrictName
				ORDER BY d.DistrictName;
			END;
		ELSEIF(dataType = 'BySector') THEN
			BEGIN  							
				SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, IFNULL(s.SectorName, 'Sector') AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                INNER JOIN Sectors s ON sd.SectorId = s.SectorId
				WHERE sd.SectorId IS NOT NULL 
				GROUP BY sd.SectorId
				ORDER BY s.SectorName;
			END;
		ELSEIF(dataType = 'ByClass') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY sc.DisplayOrder ASC) AS Id, IFNULL(sc.Name, 'Class') AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd              
				INNER JOIN SchoolClasses sc ON sd.ClassId = sc.ClassId				
				WHERE sd.ClassId IS NOT NULL
				GROUP BY sd.ClassId
				ORDER BY sc.DisplayOrder;
			END;	
		ELSEIF(dataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, vtp.VTPShortName AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                INNER JOIN VocationalTrainingProviders vtp ON sd.VTPId = vtp.VTPId AND vtp.IsActive = 1
				WHERE sd.VTPId IS NOT NULL
				GROUP BY sd.VTPId
				ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(dataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY dv.Name ASC) AS Id, dv.Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                LEFT JOIN DataValues dv ON sd.SchoolManagementId = dv.DataValueId AND dv.DataTypeId = 'SchoolManagement'
				WHERE sd.SchoolManagementId IS NOT NULL
				GROUP BY sd.SchoolManagementId
				ORDER BY dv.Name;
			END;		
		END IF;   
     
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	
    
	 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardSchoolChartDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardSchoolChartDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;

		SET @rowIndex = 0;
		
		DROP TEMPORARY TABLE IF EXISTS SchoolsData;
		
		CREATE TEMPORARY TABLE SchoolsData        		
		SELECT DISTINCT ds.VTPId, ds.SectorId, ds.DivisionId, ds.DistrictId, ds.SchoolManagementId, ds.ApprovedSchoolId, ds.ImplementedSchoolId, ds.ClassId
		FROM DsSchools ds  
		WHERE (UserId IS NULL OR ds.VCId = @accountId)			
            AND (AcademicYearId IS NULL OR (ds.AcademicYearId = AcademicYearId OR ds.AcademicYearId IS NULL)) 
			AND (DivisionId IS NULL OR ds.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR ds.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR ds.SectorId = SectorId)
			AND (JobRoleId IS NULL OR ds.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR ds.VTPId = VTPId)
			AND (ClassId IS NULL OR ds.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR ds.SchoolManagementId = SchoolManagementId);		            
		  
		IF(dataType = 'ByCount') THEN
			BEGIN  				
				SELECT 1 AS Id, CAST(COUNT(DISTINCT sd.ApprovedSchoolId) AS CHAR) AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage                 
				FROM SchoolsData sd;
			END;
		ELSEIF(dataType = 'ByDivision') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, d.DivisionName AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                LEFT JOIN Divisions d ON sd.DivisionId = d.DivisionId
				WHERE sd.DivisionId IS NOT NULL
				GROUP BY sd.DivisionId
				ORDER BY d.DivisionName;
			END;
		ELSEIF(dataType = 'ByDistrict') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, IFNULL(d.DistrictName, 'Others') AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                LEFT JOIN Districts d ON sd.DivisionId = d.DivisionId AND sd.DistrictId = d.DistrictCode
				WHERE sd.DivisionId IS NOT NULL AND sd.DistrictId IS NOT NULL
				GROUP BY d.DistrictName
				ORDER BY d.DistrictName;
			END;
		ELSEIF(dataType = 'BySector') THEN
			BEGIN  							
				SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, IFNULL(s.SectorName, 'Sector') AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                INNER JOIN Sectors s ON sd.SectorId = s.SectorId
				WHERE sd.SectorId IS NOT NULL 
				GROUP BY sd.SectorId
				ORDER BY s.SectorName;
			END;
		ELSEIF(dataType = 'ByClass') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY sc.DisplayOrder ASC) AS Id, IFNULL(sc.Name, 'Class') AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd              
				INNER JOIN SchoolClasses sc ON sd.ClassId = sc.ClassId				
				WHERE sd.ClassId IS NOT NULL
				GROUP BY sd.ClassId
				ORDER BY sc.DisplayOrder;
			END;	
		ELSEIF(dataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, vtp.VTPShortName AS Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                INNER JOIN VocationalTrainingProviders vtp ON sd.VTPId = vtp.VTPId AND vtp.IsActive = 1
				WHERE sd.VTPId IS NOT NULL
				GROUP BY sd.VTPId
				ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(dataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY dv.Name ASC) AS Id, dv.Name, COUNT(DISTINCT sd.ImplementedSchoolId) AS Count, 0.0 AS Percentage
				FROM SchoolsData sd
                LEFT JOIN DataValues dv ON sd.SchoolManagementId = dv.DataValueId AND dv.DataTypeId = 'SchoolManagement'
				WHERE sd.SchoolManagementId IS NOT NULL
				GROUP BY sd.SchoolManagementId
				ORDER BY dv.Name;
			END;		
		END IF;   
     
	END;
			
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardSchoolVisitDrilldownData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetDashboardSchoolVisitDrilldownData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @vcId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
  
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;			 
		END IF;
 
		SELECT COUNT(DISTINCT vss.VCId), COUNT(svs.SchoolId) INTO @NoOfVC, @SchoolCount
		FROM VCSchoolSectors vss
		INNER JOIN SchoolVTPSectors svs ON vss.AcademicYearId = svs.AcademicYearId AND vss.SchoolVTPSectorId = svs.SchoolVTPSectorId
		WHERE (UserId IS NULL OR vss.VCId = @vcId) 
			AND (AcademicYearId IS NULL OR svs.AcademicYearId = AcademicYearId); 
 
		DROP TEMPORARY TABLE IF EXISTS SchoolVisitData;
		
		CREATE TEMPORARY TABLE SchoolVisitData
		SELECT DISTINCT sv.VCId, sv.VTPId, DATE_FORMAT(sv.ReportingDate, '%M') AS ReportingMonth, COUNT(DISTINCT sv.SchoolId) AS Schools, SUM(sv.VisitedSchools) AS VisitedSchools
		FROM (
			SELECT vdr.VCId, svs.VTPId, CAST(vdr.ReportDate AS DATE) AS ReportingDate, vsv.SchoolId, COUNT(vsv.SchoolId) AS VisitedSchools 
			FROM VCDailyReporting vdr 
            INNER JOIN VCRWorkingDayTypes vdw ON vdr.VCDailyReportingId = vdw.VCDailyReportingId AND WorkingTypeId = '153'
			INNER JOIN VCRSchoolVisits vsv ON vdr.VCDailyReportingId = vsv.VCDailyReportingId  
            INNER JOIN VCSchoolSectors vss ON vdr.VCId = vss.VCId AND vdr.VCSchoolSectorId = vss.VCSchoolSectorId 
            LEFT JOIN SchoolVTPSectors svs ON vss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND vss.AcademicYearId = svs.AcademicYearId AND vsv.SchoolId = svs.SchoolId
            LEFT JOIN Schools s ON svs.SchoolId = s.SchoolId
            
			WHERE vdr.IsActive = 1 AND vdr.ReportType = '49' AND vsv.SchoolId IS NOT NULL             
				AND (UserId IS NULL OR vdr.VCId = @vcId) 
				AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
				AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
				AND (SectorId IS NULL OR svs.SectorId = SectorId)
				
				AND (VTPId IS NULL OR svs.VTPId = VTPId)
				
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)			
			GROUP BY ReportingDate, vdr.VCId, svs.VTPId, vsv.SchoolId
		) AS sv
		GROUP BY sv.VCId, ReportingMonth;		
 
		IF(DataType = 'ByMonth') THEN
			BEGIN  				
                SELECT ROW_NUMBER() OVER (ORDER BY sv.ReportingMonth ASC) AS Id, sv.ReportingMonth AS ReportMonth, @NoOfVC AS TotalVC, @SchoolCount AS TotalSchools, SUM(sv.Schools) AS SchoolVisited, SUM(sv.VisitedSchools) AS NoOfVisitedSchools
				FROM SchoolVisitData sv               
				GROUP BY sv.ReportingMonth
                ORDER BY sv.ReportingMonth;
			END;		 
		ELSEIF(DataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, vtp.VTPShortName AS Name, SUM(sv.VisitedSchools) AS VisitedSchools
				FROM SchoolVisitData sv                
                INNER JOIN VocationalTrainingProviders vtp ON sv.VTPId = vtp.VTPId				
				GROUP BY vtp.VTPId
                ORDER BY vtp.VTPShortName;
			END;
		END IF;   
     
		DROP TEMPORARY TABLE IF EXISTS SchoolVisitData;
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	 
     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardSchoolVisitStatusChartData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardSchoolVisitStatusChartData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;

		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
        IF(MonthId IS NULL) THEN
			SET MonthId = MONTH(NOW());		 
        END IF;
 
		SELECT COUNT(DISTINCT vss.VCId), COUNT(svs.SchoolId) INTO @NoOfVC, @SchoolCount
		FROM VCSchoolSectors vss
		INNER JOIN SchoolVTPSectors svs ON vss.AcademicYearId = svs.AcademicYearId AND vss.SchoolVTPSectorId = svs.SchoolVTPSectorId
		WHERE (UserId IS NULL OR vss.VCId = @vcId) 
			AND (AcademicYearId IS NULL OR svs.AcademicYearId = AcademicYearId); 
    
		DROP TEMPORARY TABLE IF EXISTS SchoolVisitData;
		
		CREATE TEMPORARY TABLE SchoolVisitData        
		SELECT sv.VCId, AVG(sv.SchoolVisits) AS SchoolVisits 
		FROM (
			SELECT DISTINCT vcdr.VCId, COUNT(DISTINCT vsv.SchoolId) AS SchoolVisits, DATE_FORMAT(vcdr.ReportDate, '%M-%Y') AS ReportingMonth
			FROM VCDailyReporting vcdr
			INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId AND vcss.IsActive = 1
			INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND vcss.AcademicYearId = svs.AcademicYearId AND svs.IsActive = 1
            INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1            
			INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1
			INNER JOIN VCRWorkingDayTypes vdw ON vcdr.VCDailyReportingId = vdw.VCDailyReportingId AND vdw.WorkingTypeId = '153'
			INNER JOIN VCRSchoolVisits vsv ON vcdr.VCDailyReportingId = vsv.VCDailyReportingId AND vsv.SchoolId IS NOT NULL    
			WHERE vcdr.IsActive = 1    				
														   
				AND (UserId IS NULL OR vcdr.VCId = @accountId) 
				AND (AcademicYearId IS NULL OR svs.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
				AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
				AND (SectorId IS NULL OR svs.SectorId = SectorId)				
				AND (VTPId IS NULL OR svs.VTPId = VTPId)				
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)			
			GROUP BY vcdr.VCId, ReportingMonth
		) AS sv
		GROUP BY sv.VCId;	
 
		IF(dataType = 'ByCount') THEN
			BEGIN						 
				SELECT 1 AS Id, DATE_FORMAT(NOW(), '%M-%Y') AS ReportMonth, @NoOfVC AS TotalVC, MAX(PlacedVC) AS PlacedVC, @SchoolCount AS TotalSchools, AVG(IFNULL(SchoolVisits, 0)) AS SchoolVisits, AVG(IFNULL(NoOfVisitedSchools, 0)) AS NoOfVisitedSchools
				FROM (
					SELECT COUNT(DISTINCT sv.VCId) AS PlacedVC, SUM(sv.SchoolVisits) AS SchoolVisits, SUM(sv.SchoolVisits) AS NoOfVisitedSchools
					FROM SchoolVisitData sv                     
                ) AS v;	
			END;
		END IF;   
	
	END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
	
	 
     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardSchoolVisitStatusChartDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardSchoolVisitStatusChartDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;

		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
        IF(MonthId IS NULL) THEN
			SET MonthId = MONTH(NOW());		 
        END IF;
 
		SELECT COUNT(DISTINCT vss.VCId), COUNT(svs.SchoolId) INTO @NoOfVC, @SchoolCount
		FROM VCSchoolSectors vss
		INNER JOIN SchoolVTPSectors svs ON vss.AcademicYearId = svs.AcademicYearId AND vss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
		WHERE vss.IsActive = 1 
			AND (UserId IS NULL OR vss.VCId = @vcId) 
			AND (AcademicYearId IS NULL OR svs.AcademicYearId = AcademicYearId); 
    
		DROP TEMPORARY TABLE IF EXISTS SchoolVisitData;
		
		CREATE TEMPORARY TABLE SchoolVisitData        
		SELECT sv.VCId, AVG(sv.SchoolVisits) AS SchoolVisits 
		FROM (
			SELECT DISTINCT vcdr.VCId, COUNT(DISTINCT vsv.SchoolId) AS SchoolVisits, DATE_FORMAT(vcdr.ReportDate, '%M-%Y') AS ReportingMonth
			FROM VCDailyReporting vcdr
			INNER JOIN VCSchoolSectors vcss ON vcdr.VCSchoolSectorId = vcss.VCSchoolSectorId AND vcss.IsActive = 1
			INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND vcss.AcademicYearId = svs.AcademicYearId AND svs.IsActive = 1
            INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1            			
            INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1
			INNER JOIN VCRWorkingDayTypes vdw ON vcdr.VCDailyReportingId = vdw.VCDailyReportingId AND vdw.WorkingTypeId = '153'
			INNER JOIN VCRSchoolVisits vsv ON vcdr.VCDailyReportingId = vsv.VCDailyReportingId AND vsv.SchoolId IS NOT NULL    
			WHERE vcdr.IsActive = 1    				
				AND (UserId IS NULL OR vcdr.VCId = @accountId) 
				AND (AcademicYearId IS NULL OR svs.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
				AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
				AND (SectorId IS NULL OR svs.SectorId = SectorId)				
				AND (VTPId IS NULL OR svs.VTPId = VTPId)				
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)			
			GROUP BY vcdr.VCId, ReportingMonth
		) AS sv
		GROUP BY sv.VCId;	
 
		IF(dataType = 'ByCount') THEN
			BEGIN						 
				SELECT 1 AS Id, DATE_FORMAT(NOW(), '%M-%Y') AS ReportMonth, @NoOfVC AS TotalVC, MAX(PlacedVC) AS PlacedVC, @SchoolCount AS TotalSchools, AVG(IFNULL(SchoolVisits, 0)) AS SchoolVisits, AVG(IFNULL(NoOfVisitedSchools, 0)) AS NoOfVisitedSchools
				FROM (
					SELECT COUNT(DISTINCT sv.VCId) AS PlacedVC, SUM(sv.SchoolVisits) AS SchoolVisits, SUM(sv.SchoolVisits) AS NoOfVisitedSchools
					FROM SchoolVisitData sv                     
                ) AS v;	
			END;
		END IF;   
	END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;

	 
     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardStudentAttendanceChartData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetDashboardStudentAttendanceChartData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN	
    
    
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS StudentAttendanceData;
		
		CREATE TEMPORARY TABLE StudentAttendanceData
		SELECT DATE_FORMAT(vta.ReportingDate, "%Y/%m/01") AS ReportMonth, 
			COUNT(DISTINCT CAST(vta.ReportingDate AS DATE)) AS TotalDays,
			s.DivisionId, s.DistrictCode, 
			vss.SectorId, vtc.ClassId, vc.VTPId, s.SchoolManagementId, 
			SUM(IF(sc.Gender = '207', 1, 0)) AS Boys, 
			SUM(IF(sc.Gender = '208', 1, 0)) AS Girls, 	
			SUM(IF(sc.Gender = '207' AND sa.IsPresent = 1, 1, 0)) AS AttendanceBoys, 
			SUM(IF(sc.Gender = '208' AND sa.IsPresent = 1, 1, 0)) AS AttendanceGirls    
		FROM VTRStudentAttendances sa
		INNER JOIN VTRTeachingVocationalEducations tve ON sa.VTRTeachingVocationalEducationId = tve.VTRTeachingVocationalEducationId
		INNER JOIN VTDailyReporting vta ON tve.VTDailyReportingId = vta.VTDailyReportingId
		INNER JOIN StudentClasses sc ON tve.ClassTaughtId = sc.ClassId AND sa.StudentId = sc.StudentId
		LEFT JOIN VTSchoolSectors vss ON vta.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
		LEFT JOIN VocationalTrainers vt ON vt.VTId = vta.VTId AND vt.IsActive = 1
		LEFT JOIN VocationalCoordinators vc ON vc.VCId = vt.VCId AND vc.IsActive = 1 
		LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vtc.VTId = vt.VTId AND tve.ClassTaughtId = vtc.ClassId AND vtc.IsActive = 1
		LEFT JOIN Schools s ON s.SchoolId = vss.SchoolId AND s.IsActive = 1
		WHERE vta.IsActive = 1 
			AND (UserId IS NULL OR vt.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR sc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId) 
		GROUP BY ReportMonth, s.DivisionId, s.DistrictCode, vss.SectorId, vtc.ClassId, vc.VTPId, s.SchoolManagementId;
 
		IF(dataType = 'ByTimeline') THEN
			BEGIN  
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					dvm.Description AS Name, 
					AVG(sta.Boys) AS Boys, 
                    AVG(sta.Girls) AS Girls, 
                    AVG(sta.AttendanceBoys) AS AttendanceBoys, 
                    AVG(sta.AttendanceGirls) AS AttendanceGirls,
					AVG(ROUND(IFNULL(((sta.AttendanceBoys / sta.Boys) * 100) / sta.TotalWorkingDays, 0), 2)) AS PercentageAttendanceBoys,
                    AVG(ROUND(IFNULL(((sta.AttendanceGirls / sta.Girls) * 100) / sta.TotalWorkingDays, 0), 2)) AS PercentageAttendanceGirls,
                    AVG(ROUND((((sta.AttendanceBoys + sta.AttendanceGirls) / (sta.Boys + sta.Girls) * 100) / sta.TotalWorkingDays), 2)) AS Percentage,
					AVG(sta.TotalDays) AS TotalDays,
                    AVG(sta.TotalWorkingDays) AS TotalWorkingDays,
                    dvm.DisplayOrder
				FROM (				 
					SELECT sa.ReportMonth,
                        sa.TotalDays, 
						(DAY(LAST_DAY(sa.ReportMonth)) - GetNoOfSunday(sa.ReportMonth)) AS TotalWorkingDays,  
						SUM(sa.Boys) AS Boys, SUM(sa.Girls) AS Girls, 
						SUM(sa.AttendanceBoys) AS AttendanceBoys, SUM(sa.AttendanceGirls) AS AttendanceGirls						
					FROM StudentAttendanceData sa					
					GROUP BY sa.ReportMonth, sa.TotalDays
                ) AS sta
                INNER JOIN DataValues dvm ON MONTHNAME(sta.ReportMonth) = dvm.Name AND dvm.DataTypeId = 'Months'
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY dvm.Description, dvm.DisplayOrder
                ORDER BY dvm.DisplayOrder;                
			END;
		ELSEIF(dataType = 'ByDivision') THEN
			BEGIN  	
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					sta.Name, 
					AVG(sta.Boys) AS Boys, 
                    AVG(sta.Girls) AS Girls, 
                    AVG(sta.AttendanceBoys) AS AttendanceBoys, 
                    AVG(sta.AttendanceGirls) AS AttendanceGirls,
					AVG(ROUND(IFNULL(((sta.AttendanceBoys / sta.Boys) * 100) / sta.TotalWorkingDays, 0), 2)) AS PercentageAttendanceBoys,
                    AVG(ROUND(IFNULL(((sta.AttendanceGirls / sta.Girls) * 100) / sta.TotalWorkingDays, 0), 2)) AS PercentageAttendanceGirls,
                    AVG(ROUND((((sta.AttendanceBoys + sta.AttendanceGirls) / (sta.Boys + sta.Girls) * 100) / sta.TotalWorkingDays), 2)) AS Percentage,
					AVG(sta.TotalDays) AS TotalDays,
                    AVG(sta.TotalWorkingDays) AS TotalWorkingDays
				FROM (				 
					SELECT d.DivisionName AS Name, 
						sa.ReportMonth,
                        sa.TotalDays, 
						(DAY(LAST_DAY(sa.ReportMonth)) - GetNoOfSunday(sa.ReportMonth)) AS TotalWorkingDays, 
						SUM(sa.Boys) AS Boys, SUM(sa.Girls) AS Girls, 
						SUM(sa.AttendanceBoys) AS AttendanceBoys, SUM(sa.AttendanceGirls) AS AttendanceGirls						
					FROM StudentAttendanceData sa
					INNER JOIN Divisions d ON sa.DivisionId = d.DivisionId
					GROUP BY sa.DivisionId, sa.ReportMonth, sa.TotalDays
                ) AS sta
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY sta.Name
                ORDER BY sta.Name;                  
			END;
		ELSEIF(dataType = 'ByDistrict') THEN
			BEGIN
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					sta.Name, 
					AVG(sta.Boys) AS Boys, 
                    AVG(sta.Girls) AS Girls, 
                    AVG(sta.AttendanceBoys) AS AttendanceBoys, 
                    AVG(sta.AttendanceGirls) AS AttendanceGirls,
					AVG(ROUND(IFNULL(((sta.AttendanceBoys / sta.Boys) * 100) / sta.TotalWorkingDays, 0), 2)) AS PercentageAttendanceBoys,
                    AVG(ROUND(IFNULL(((sta.AttendanceGirls / sta.Girls) * 100) / sta.TotalWorkingDays, 0), 2)) AS PercentageAttendanceGirls,
                    AVG(ROUND((((sta.AttendanceBoys + sta.AttendanceGirls) / (sta.Boys + sta.Girls) * 100) / sta.TotalWorkingDays), 2)) AS Percentage,
					AVG(sta.TotalDays) AS TotalDays,
                    AVG(sta.TotalWorkingDays) AS TotalWorkingDays
				FROM (				 
					SELECT d.DistrictName AS Name, 
						sa.ReportMonth,
						sa.TotalDays, 
						(DAY(LAST_DAY(sa.ReportMonth)) - GetNoOfSunday(sa.ReportMonth)) AS TotalWorkingDays, 
						SUM(sa.Boys) AS Boys, SUM(sa.Girls) AS Girls, 
						SUM(sa.AttendanceBoys) AS AttendanceBoys, SUM(sa.AttendanceGirls) AS AttendanceGirls						
					FROM StudentAttendanceData sa
					INNER JOIN Districts d ON sa.DivisionId = d.DivisionId AND sa.DistrictCode = d.DistrictCode
					GROUP BY sa.DivisionId, sa.DistrictCode, sa.ReportMonth, sa.TotalDays
                ) AS sta
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY sta.Name
                ORDER BY sta.Name; 
			END;
		ELSEIF(dataType = 'ByBlock') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, d.DivisionName AS Name, SUM(Boys) AS Boys, SUM(Girls) AS Girls 
				FROM StudentAttendanceData sa 
                INNER JOIN Schools s ON sa.SchoolId = s.SchoolId
                INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
				WHERE s.DivisionId IS NOT NULL
				GROUP BY s.DivisionId
                ORDER BY d.DivisionName;
			END;
		ELSEIF(dataType = 'BySector') THEN
			BEGIN  
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					sta.Name, 
					AVG(sta.Boys) AS Boys, 
                    AVG(sta.Girls) AS Girls, 
                    AVG(sta.AttendanceBoys) AS AttendanceBoys, 
                    AVG(sta.AttendanceGirls) AS AttendanceGirls,
					AVG(ROUND(IFNULL(((sta.AttendanceBoys / sta.Boys) * 100) / sta.TotalWorkingDays, 0), 2)) AS PercentageAttendanceBoys,
                    AVG(ROUND(IFNULL(((sta.AttendanceGirls / sta.Girls) * 100) / sta.TotalWorkingDays, 0), 2)) AS PercentageAttendanceGirls,
                    AVG(ROUND((((sta.AttendanceBoys + sta.AttendanceGirls) / (sta.Boys + sta.Girls) * 100) / sta.TotalWorkingDays), 2)) AS Percentage,
					AVG(sta.TotalDays) AS TotalDays,
                    AVG(sta.TotalWorkingDays) AS TotalWorkingDays
				FROM (				 
					SELECT s.SectorName AS Name, 
						sa.ReportMonth,
						sa.TotalDays, 
						(DAY(LAST_DAY(sa.ReportMonth)) - GetNoOfSunday(sa.ReportMonth)) AS TotalWorkingDays, 
						SUM(sa.Boys) AS Boys, SUM(sa.Girls) AS Girls, 
						SUM(sa.AttendanceBoys) AS AttendanceBoys, SUM(sa.AttendanceGirls) AS AttendanceGirls						
					FROM StudentAttendanceData sa
					INNER JOIN Sectors s ON sa.SectorId = s.SectorId
					GROUP BY sa.SectorId, sa.ReportMonth, sa.TotalDays
                ) AS sta
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY sta.Name
                ORDER BY sta.Name;       
			END;
		ELSEIF(dataType = 'ByClass') THEN
			BEGIN
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					sta.Name, 
					AVG(sta.Boys) AS Boys, 
                    AVG(sta.Girls) AS Girls, 
                    AVG(sta.AttendanceBoys) AS AttendanceBoys, 
                    AVG(sta.AttendanceGirls) AS AttendanceGirls,
					AVG(ROUND(IFNULL(((sta.AttendanceBoys / sta.Boys) * 100) / sta.TotalWorkingDays, 0), 2)) AS PercentageAttendanceBoys,
                    AVG(ROUND(IFNULL(((sta.AttendanceGirls / sta.Girls) * 100) / sta.TotalWorkingDays, 0), 2)) AS PercentageAttendanceGirls,
                    AVG(ROUND((((sta.AttendanceBoys + sta.AttendanceGirls) / (sta.Boys + sta.Girls) * 100) / sta.TotalWorkingDays), 2)) AS Percentage,
					AVG(sta.TotalDays) AS TotalDays,
                    AVG(sta.TotalWorkingDays) AS TotalWorkingDays
				FROM (				 
					SELECT sc.Name, 
						sa.ReportMonth, 
						sa.TotalDays, 
						(DAY(LAST_DAY(sa.ReportMonth)) - GetNoOfSunday(sa.ReportMonth)) AS TotalWorkingDays, 
						SUM(sa.Boys) AS Boys, SUM(sa.Girls) AS Girls, 
						SUM(sa.AttendanceBoys) AS AttendanceBoys, SUM(sa.AttendanceGirls) AS AttendanceGirls						
					FROM StudentAttendanceData sa
					INNER JOIN SchoolClasses sc ON sa.ClassId = sc.ClassId
					GROUP BY sa.ClassId, sa.ReportMonth, sa.TotalDays
                ) AS sta
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY sta.Name
                ORDER BY sta.Name;                  
			END;	
		ELSEIF(dataType = 'ByVTP') THEN
			BEGIN
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					sta.Name, 
					AVG(sta.Boys) AS Boys, 
                    AVG(sta.Girls) AS Girls, 
                    AVG(sta.AttendanceBoys) AS AttendanceBoys, 
                    AVG(sta.AttendanceGirls) AS AttendanceGirls,
					AVG(ROUND(IFNULL(((sta.AttendanceBoys / sta.Boys) * 100) / sta.TotalWorkingDays, 0), 2)) AS PercentageAttendanceBoys,
                    AVG(ROUND(IFNULL(((sta.AttendanceGirls / sta.Girls) * 100) / sta.TotalWorkingDays, 0), 2)) AS PercentageAttendanceGirls,
                    AVG(ROUND((((sta.AttendanceBoys + sta.AttendanceGirls) / (sta.Boys + sta.Girls) * 100) / sta.TotalWorkingDays), 2)) AS Percentage,
					AVG(sta.TotalDays) AS TotalDays,
                    AVG(sta.TotalWorkingDays) AS TotalWorkingDays
				FROM (				 
					SELECT vtp.VTPShortName AS Name, 
						sa.ReportMonth, 
						sa.TotalDays, 
						(DAY(LAST_DAY(sa.ReportMonth)) - GetNoOfSunday(sa.ReportMonth)) AS TotalWorkingDays, 
						SUM(sa.Boys) AS Boys, SUM(sa.Girls) AS Girls, 
						SUM(sa.AttendanceBoys) AS AttendanceBoys, SUM(sa.AttendanceGirls) AS AttendanceGirls						
					FROM StudentAttendanceData sa
					INNER JOIN VocationalTrainingProviders vtp ON sa.VTPId = vtp.VTPId
					GROUP BY sa.VTPId, sa.ReportMonth, sa.TotalDays
                ) AS sta
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
				GROUP BY sta.Name
                ORDER BY sta.Name;                 
			END;
		ELSEIF(dataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					sta.Name, 
					AVG(sta.Boys) AS Boys, 
                    AVG(sta.Girls) AS Girls, 
                    AVG(sta.AttendanceBoys) AS AttendanceBoys, 
                    AVG(sta.AttendanceGirls) AS AttendanceGirls,
					AVG(ROUND(IFNULL(((sta.AttendanceBoys / sta.Boys) * 100) / sta.TotalWorkingDays, 0), 2)) AS PercentageAttendanceBoys,
                    AVG(ROUND(IFNULL(((sta.AttendanceGirls / sta.Girls) * 100) / sta.TotalWorkingDays, 0), 2)) AS PercentageAttendanceGirls,
                    AVG(ROUND((((sta.AttendanceBoys + sta.AttendanceGirls) / (sta.Boys + sta.Girls) * 100) / sta.TotalWorkingDays), 2)) AS Percentage,
					AVG(sta.TotalDays) AS TotalDays,
                    AVG(sta.TotalWorkingDays) AS TotalWorkingDays
				FROM (				 
					SELECT dvv.Name, 
						sa.ReportMonth, 
                        sa.TotalDays, 
						(DAY(LAST_DAY(sa.ReportMonth)) - GetNoOfSunday(sa.ReportMonth)) AS TotalWorkingDays, 
						SUM(sa.Boys) AS Boys, SUM(sa.Girls) AS Girls, 
						SUM(sa.AttendanceBoys) AS AttendanceBoys, SUM(sa.AttendanceGirls) AS AttendanceGirls						
					FROM StudentAttendanceData sa
					INNER JOIN DataValues dvv ON sa.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
					GROUP BY dvv.Name, sa.ReportMonth, sa.TotalDays
                ) AS sta
                CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
                GROUP BY sta.Name
                ORDER BY sta.Name;                                 
			END;		
		END IF;   
     
		DROP TEMPORARY TABLE IF EXISTS StudentAttendanceData;
	END;
	
	
	 
     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardStudentAttendanceChartDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardStudentAttendanceChartDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
					
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		IF(dataType = 'ByTimeline') THEN
			BEGIN              
				SELECT ROW_NUMBER() OVER (ORDER BY msa.DisplayOrder) AS Id,
					msa.Name, msa.EnrolledBoys, msa.EnrolledGirls, msa.EnrolledStudents,
                    msa.AttendanceBoys, msa.AttendanceGirls, msa.StudentAttendances, 
                    msa.PercentageAttendanceBoys, msa.PercentageAttendanceGirls, msa.Percentage
                FROM (
					SELECT CONCAT(dvm.Description,' ',RIGHT(YEAR(dsa.ReportingMonth), 2)) AS Name,
						SUM(dsa.EnrolledBoys) AS EnrolledBoys, 
                        SUM(dsa.EnrolledGirls) AS EnrolledGirls, 
                        SUM(dsa.EnrolledStudents) AS EnrolledStudents,
						SUM(dsa.AttendanceBoys) AS AttendanceBoys, 
                        SUM(dsa.AttendanceGirls) AS AttendanceGirls, 
                        SUM(dsa.StudentAttendances) AS StudentAttendances,
						ROUND(AVG(dsa.AttendanceBoysInPerc), 2) AS PercentageAttendanceBoys, 
                        ROUND(AVG(dsa.AttendanceGirlsInPerc), 2) AS PercentageAttendanceGirls, 
						ROUND(AVG(dsa.AttendancesInPerc), 2) AS Percentage, dvm.DisplayOrder
					FROM DsStudentAttendances dsa
					INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
					INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
					INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
					INNER JOIN DataValues dvm ON MONTHNAME(dsa.ReportingMonth) = dvm.Name AND dvm.DataTypeId = 'Months'
					WHERE (UserId IS NULL OR vt.VCId = @accountId)
						AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR vt.VTPId = VTPId)
						AND (ClassId IS NULL OR dsa.ClassId = ClassId)                    
                        AND (MonthId IS NULL OR MONTH(dsa.ReportingMonth) = CAST(MonthId AS UNSIGNED))                        
															 
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					GROUP BY dvm.Description, dvm.DisplayOrder
				) AS msa
                ORDER BY msa.DisplayOrder;
			END;
		ELSEIF(dataType = 'ByDivision') THEN
			BEGIN  	
				SELECT ROW_NUMBER() OVER (ORDER BY msa.Name) AS Id,
					msa.Name, msa.EnrolledBoys, msa.EnrolledGirls, msa.EnrolledStudents,
                    msa.AttendanceBoys, msa.AttendanceGirls, msa.StudentAttendances, 
                    msa.PercentageAttendanceBoys, msa.PercentageAttendanceGirls, msa.Percentage
                FROM (
					SELECT d.DivisionName AS Name, 
						SUM(dsa.EnrolledBoys) AS EnrolledBoys, 
                        SUM(dsa.EnrolledGirls) AS EnrolledGirls, 
                        SUM(dsa.EnrolledStudents) AS EnrolledStudents,
						SUM(dsa.AttendanceBoys) AS AttendanceBoys, 
                        SUM(dsa.AttendanceGirls) AS AttendanceGirls, 
                        SUM(dsa.StudentAttendances) AS StudentAttendances,
						ROUND(AVG(dsa.AttendanceBoysInPerc), 2) AS PercentageAttendanceBoys, 
                        ROUND(AVG(dsa.AttendanceGirlsInPerc), 2) AS PercentageAttendanceGirls, 
						ROUND(AVG(dsa.AttendancesInPerc), 2) AS Percentage
					FROM DsStudentAttendances dsa
					INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
					INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
					INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
					INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
					WHERE (UserId IS NULL OR vt.VCId = @accountId)
						AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR vt.VTPId = VTPId)
						AND (ClassId IS NULL OR dsa.ClassId = ClassId)
                        AND (MonthId IS NULL OR MONTH(dsa.ReportingMonth) = CAST(MonthId AS UNSIGNED))
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					GROUP BY d.DivisionName
				) AS msa
                ORDER BY msa.Name;
			END;
		ELSEIF(dataType = 'ByDistrict') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY msa.Name) AS Id,
					msa.Name, msa.EnrolledBoys, msa.EnrolledGirls, msa.EnrolledStudents,
                    msa.AttendanceBoys, msa.AttendanceGirls, msa.StudentAttendances, 
                    msa.PercentageAttendanceBoys, msa.PercentageAttendanceGirls, msa.Percentage
                FROM (
					SELECT d.DistrictName AS Name, 
						SUM(dsa.EnrolledBoys) AS EnrolledBoys, 
                        SUM(dsa.EnrolledGirls) AS EnrolledGirls, 
                        SUM(dsa.EnrolledStudents) AS EnrolledStudents,
						SUM(dsa.AttendanceBoys) AS AttendanceBoys, 
                        SUM(dsa.AttendanceGirls) AS AttendanceGirls, 
                        SUM(dsa.StudentAttendances) AS StudentAttendances,
						ROUND(AVG(dsa.AttendanceBoysInPerc), 2) AS PercentageAttendanceBoys, 
                        ROUND(AVG(dsa.AttendanceGirlsInPerc), 2) AS PercentageAttendanceGirls, 
						ROUND(AVG(dsa.AttendancesInPerc), 2) AS Percentage
					FROM DsStudentAttendances dsa
					INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
					INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
					INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
					INNER JOIN Districts d ON s.DivisionId = d.DivisionId AND s.DistrictCode = d.DistrictCode
					WHERE (UserId IS NULL OR vt.VCId = @accountId)
						AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR vt.VTPId = VTPId)
						AND (ClassId IS NULL OR dsa.ClassId = ClassId)
                        AND (MonthId IS NULL OR MONTH(dsa.ReportingMonth) = CAST(MonthId AS UNSIGNED))
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					GROUP BY d.DistrictName
				) AS msa
                ORDER BY msa.Name; 
			END;		 
		ELSEIF(dataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY msa.Name) AS Id,
					msa.Name, msa.EnrolledBoys, msa.EnrolledGirls, msa.EnrolledStudents,
                    msa.AttendanceBoys, msa.AttendanceGirls, msa.StudentAttendances, 
                    msa.PercentageAttendanceBoys, msa.PercentageAttendanceGirls, msa.Percentage
                FROM (
					SELECT se.SectorName AS Name, 
						SUM(dsa.EnrolledBoys) AS EnrolledBoys, 
                        SUM(dsa.EnrolledGirls) AS EnrolledGirls, 
                        SUM(dsa.EnrolledStudents) AS EnrolledStudents,
						SUM(dsa.AttendanceBoys) AS AttendanceBoys, 
                        SUM(dsa.AttendanceGirls) AS AttendanceGirls, 
                        SUM(dsa.StudentAttendances) AS StudentAttendances,
						ROUND(AVG(dsa.AttendanceBoysInPerc), 2) AS PercentageAttendanceBoys, 
                        ROUND(AVG(dsa.AttendanceGirlsInPerc), 2) AS PercentageAttendanceGirls, 
						ROUND(AVG(dsa.AttendancesInPerc), 2) AS Percentage
					FROM DsStudentAttendances dsa
					INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
					INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
					INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
					INNER JOIN Sectors se ON vss.SectorId = se.SectorId
					WHERE (UserId IS NULL OR vt.VCId = @accountId)
						AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR vt.VTPId = VTPId)
						AND (ClassId IS NULL OR dsa.ClassId = ClassId)
                        AND (MonthId IS NULL OR MONTH(dsa.ReportingMonth) = CAST(MonthId AS UNSIGNED))
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					GROUP BY se.SectorName                    
				) AS msa
                ORDER BY msa.Name; 
			END;
		ELSEIF(dataType = 'ByClass') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY msa.DisplayOrder) AS Id,
					msa.Name, msa.EnrolledBoys, msa.EnrolledGirls, msa.EnrolledStudents,
                    msa.AttendanceBoys, msa.AttendanceGirls, msa.StudentAttendances, 
                    msa.PercentageAttendanceBoys, msa.PercentageAttendanceGirls, msa.Percentage
                FROM (
					SELECT sc.Name, 
						SUM(dsa.EnrolledBoys) AS EnrolledBoys, 
                        SUM(dsa.EnrolledGirls) AS EnrolledGirls, 
                        SUM(dsa.EnrolledStudents) AS EnrolledStudents,
						SUM(dsa.AttendanceBoys) AS AttendanceBoys, 
                        SUM(dsa.AttendanceGirls) AS AttendanceGirls, 
                        SUM(dsa.StudentAttendances) AS StudentAttendances,
						ROUND(AVG(dsa.AttendanceBoysInPerc), 2) AS PercentageAttendanceBoys, 
                        ROUND(AVG(dsa.AttendanceGirlsInPerc), 2) AS PercentageAttendanceGirls, 
						ROUND(AVG(dsa.AttendancesInPerc), 2) AS Percentage, sc.DisplayOrder
					FROM DsStudentAttendances dsa
					INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
					INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
					INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
					INNER JOIN SchoolClasses sc ON dsa.ClassId = sc.ClassId
					WHERE (UserId IS NULL OR vt.VCId = @accountId)
						AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR vt.VTPId = VTPId)
						AND (ClassId IS NULL OR dsa.ClassId = ClassId)
                        AND (MonthId IS NULL OR MONTH(dsa.ReportingMonth) = CAST(MonthId AS UNSIGNED))
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					GROUP BY sc.Name                  
				) AS msa
                ORDER BY msa.DisplayOrder;            			               
			END;	
		ELSEIF(dataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY msa.Name) AS Id,
					msa.Name, msa.EnrolledBoys, msa.EnrolledGirls, msa.EnrolledStudents,
                    msa.AttendanceBoys, msa.AttendanceGirls, msa.StudentAttendances, 
                    msa.PercentageAttendanceBoys, msa.PercentageAttendanceGirls, msa.Percentage
                FROM (
					SELECT vtp.VTPShortName AS Name, 
						SUM(dsa.EnrolledBoys) AS EnrolledBoys, 
                        SUM(dsa.EnrolledGirls) AS EnrolledGirls, 
                        SUM(dsa.EnrolledStudents) AS EnrolledStudents,
						SUM(dsa.AttendanceBoys) AS AttendanceBoys, 
                        SUM(dsa.AttendanceGirls) AS AttendanceGirls, 
                        SUM(dsa.StudentAttendances) AS StudentAttendances,
						ROUND(AVG(dsa.AttendanceBoysInPerc), 2) AS PercentageAttendanceBoys, 
                        ROUND(AVG(dsa.AttendanceGirlsInPerc), 2) AS PercentageAttendanceGirls, 
						ROUND(AVG(dsa.AttendancesInPerc), 2) AS Percentage
					FROM DsStudentAttendances dsa
					INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
					INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
					INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
					INNER JOIN VocationalTrainingProviders vtp ON vt.VTPId = vtp.VTPId
					WHERE (UserId IS NULL OR vt.VCId = @accountId)
						AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR vt.VTPId = VTPId)
						AND (ClassId IS NULL OR dsa.ClassId = ClassId)
                        AND (MonthId IS NULL OR MONTH(dsa.ReportingMonth) = CAST(MonthId AS UNSIGNED))
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					GROUP BY vtp.VTPShortName                    
				) AS msa
                ORDER BY msa.Name;            			               
			END;
		ELSEIF(dataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY msa.Name) AS Id,
					msa.Name, msa.EnrolledBoys, msa.EnrolledGirls, msa.EnrolledStudents,
                    msa.AttendanceBoys, msa.AttendanceGirls, msa.StudentAttendances, 
                    msa.PercentageAttendanceBoys, msa.PercentageAttendanceGirls, msa.Percentage
                FROM (
					SELECT dvv.Name, 
						SUM(dsa.EnrolledBoys) AS EnrolledBoys, 
                        SUM(dsa.EnrolledGirls) AS EnrolledGirls, 
                        SUM(dsa.EnrolledStudents) AS EnrolledStudents,
						SUM(dsa.AttendanceBoys) AS AttendanceBoys, 
                        SUM(dsa.AttendanceGirls) AS AttendanceGirls, 
                        SUM(dsa.StudentAttendances) AS StudentAttendances,
						ROUND(AVG(dsa.AttendanceBoysInPerc), 2) AS PercentageAttendanceBoys, 
                        ROUND(AVG(dsa.AttendanceGirlsInPerc), 2) AS PercentageAttendanceGirls, 
						ROUND(AVG(dsa.AttendancesInPerc), 2) AS Percentage
					FROM DsStudentAttendances dsa
					INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
					INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
					INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
					INNER JOIN DataValues dvv ON s.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
					WHERE (UserId IS NULL OR vt.VCId = @accountId)
						AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR vt.VTPId = VTPId)
						AND (ClassId IS NULL OR dsa.ClassId = ClassId)
                        AND (MonthId IS NULL OR MONTH(dsa.ReportingMonth) = CAST(MonthId AS UNSIGNED))
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
					GROUP BY dvv.Name                    
				) AS msa
                ORDER BY msa.Name;
			END;		
		END IF;   
     
		DROP TEMPORARY TABLE IF EXISTS StudentAttendanceData;
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
	
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardStudentAttendanceChartDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardStudentAttendanceChartDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
					
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		IF(dataType = 'ByTimeline') THEN
			BEGIN              
				SELECT ROW_NUMBER() OVER (ORDER BY msa.DisplayOrder) AS Id,
					msa.Name, msa.EnrolledBoys, msa.EnrolledGirls, msa.EnrolledStudents,
                    msa.AttendanceBoys, msa.AttendanceGirls, msa.StudentAttendances, 
                    
					IF(msa.PercentageAttendanceBoys > 100, 100, msa.PercentageAttendanceBoys) AS PercentageAttendanceBoys, 
                    IF(msa.PercentageAttendanceGirls > 100, 100, msa.PercentageAttendanceGirls) AS PercentageAttendanceGirls, 
                    IF(msa.Percentage > 100, 100, msa.Percentage) AS Percentage
                FROM (
					SELECT CONCAT(dvm.Description,' ',RIGHT(YEAR(dsa.ReportingMonth), 2)) AS Name,
						SUM(dsa.EnrolledBoys) AS EnrolledBoys, 
                        SUM(dsa.EnrolledGirls) AS EnrolledGirls, 
                        SUM(dsa.EnrolledStudents) AS EnrolledStudents,
						SUM(dsa.AttendanceBoys) AS AttendanceBoys, 
                        SUM(dsa.AttendanceGirls) AS AttendanceGirls, 
                        SUM(dsa.StudentAttendances) AS StudentAttendances,
						ROUND(AVG(dsa.AttendanceBoysInPerc), 2) AS PercentageAttendanceBoys, 
                        ROUND(AVG(dsa.AttendanceGirlsInPerc), 2) AS PercentageAttendanceGirls, 
						ROUND(AVG(dsa.AttendancesInPerc), 2) AS Percentage, dvm.DisplayOrder
					FROM DsStudentAttendances dsa
					INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId					
                    INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vss.IsActive = 1
					INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
					INNER JOIN DataValues dvm ON MONTHNAME(dsa.ReportingMonth) = dvm.Name AND dvm.DataTypeId = 'Months'
					WHERE (UserId IS NULL OR vtm.VCId = @accountId)
						AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR vtm.VTPId = VTPId)
						AND (ClassId IS NULL OR dsa.ClassId = ClassId)                    
                        AND (MonthId IS NULL OR MONTH(dsa.ReportingMonth) = CAST(MonthId AS UNSIGNED))                        
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
                        
					GROUP BY dvm.Description, dvm.DisplayOrder
				) AS msa
                ORDER BY msa.DisplayOrder;
			END;
		ELSEIF(dataType = 'ByDivision') THEN
			BEGIN  	
				SELECT ROW_NUMBER() OVER (ORDER BY msa.Name) AS Id,
					msa.Name, msa.EnrolledBoys, msa.EnrolledGirls, msa.EnrolledStudents,
                    msa.AttendanceBoys, msa.AttendanceGirls, msa.StudentAttendances, 
                    
					IF(msa.PercentageAttendanceBoys > 100, 100, msa.PercentageAttendanceBoys) AS PercentageAttendanceBoys, 
                    IF(msa.PercentageAttendanceGirls > 100, 100, msa.PercentageAttendanceGirls) AS PercentageAttendanceGirls, 
                    IF(msa.Percentage > 100, 100, msa.Percentage) AS Percentage
                FROM (
					SELECT d.DivisionName AS Name, 
						SUM(dsa.EnrolledBoys) AS EnrolledBoys, 
                        SUM(dsa.EnrolledGirls) AS EnrolledGirls, 
                        SUM(dsa.EnrolledStudents) AS EnrolledStudents,
						SUM(dsa.AttendanceBoys) AS AttendanceBoys, 
                        SUM(dsa.AttendanceGirls) AS AttendanceGirls, 
                        SUM(dsa.StudentAttendances) AS StudentAttendances,
						ROUND(AVG(dsa.AttendanceBoysInPerc), 2) AS PercentageAttendanceBoys, 
                        ROUND(AVG(dsa.AttendanceGirlsInPerc), 2) AS PercentageAttendanceGirls, 
						ROUND(AVG(dsa.AttendancesInPerc), 2) AS Percentage
					FROM DsStudentAttendances dsa
					INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
					INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vss.IsActive = 1
					INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
					INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
					WHERE (UserId IS NULL OR vtm.VCId = @accountId)
						AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR vtm.VTPId = VTPId)
						AND (ClassId IS NULL OR dsa.ClassId = ClassId)
                        AND (MonthId IS NULL OR MONTH(dsa.ReportingMonth) = CAST(MonthId AS UNSIGNED))
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
                        
					GROUP BY d.DivisionName
				) AS msa
                ORDER BY msa.Name;
			END;
		ELSEIF(dataType = 'ByDistrict') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY msa.Name) AS Id,
					msa.Name, msa.EnrolledBoys, msa.EnrolledGirls, msa.EnrolledStudents,
                    msa.AttendanceBoys, msa.AttendanceGirls, msa.StudentAttendances, 
                    
					IF(msa.PercentageAttendanceBoys > 100, 100, msa.PercentageAttendanceBoys) AS PercentageAttendanceBoys, 
                    IF(msa.PercentageAttendanceGirls > 100, 100, msa.PercentageAttendanceGirls) AS PercentageAttendanceGirls, 
                    IF(msa.Percentage > 100, 100, msa.Percentage) AS Percentage
                FROM (
					SELECT d.DistrictName AS Name, 
						SUM(dsa.EnrolledBoys) AS EnrolledBoys, 
                        SUM(dsa.EnrolledGirls) AS EnrolledGirls, 
                        SUM(dsa.EnrolledStudents) AS EnrolledStudents,
						SUM(dsa.AttendanceBoys) AS AttendanceBoys, 
                        SUM(dsa.AttendanceGirls) AS AttendanceGirls, 
                        SUM(dsa.StudentAttendances) AS StudentAttendances,
						ROUND(AVG(dsa.AttendanceBoysInPerc), 2) AS PercentageAttendanceBoys, 
                        ROUND(AVG(dsa.AttendanceGirlsInPerc), 2) AS PercentageAttendanceGirls, 
						ROUND(AVG(dsa.AttendancesInPerc), 2) AS Percentage
					FROM DsStudentAttendances dsa
					INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
					INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vss.IsActive = 1
					INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
					INNER JOIN Districts d ON s.DivisionId = d.DivisionId AND s.DistrictCode = d.DistrictCode
					WHERE (UserId IS NULL OR vtm.VCId = @accountId)
						AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR vtm.VTPId = VTPId)
						AND (ClassId IS NULL OR dsa.ClassId = ClassId)
                        AND (MonthId IS NULL OR MONTH(dsa.ReportingMonth) = CAST(MonthId AS UNSIGNED))
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
                        
					GROUP BY d.DistrictName
				) AS msa
                ORDER BY msa.Name; 
			END;		 
		ELSEIF(dataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY msa.Name) AS Id,
					msa.Name, msa.EnrolledBoys, msa.EnrolledGirls, msa.EnrolledStudents,
                    msa.AttendanceBoys, msa.AttendanceGirls, msa.StudentAttendances, 
                    
					IF(msa.PercentageAttendanceBoys > 100, 100, msa.PercentageAttendanceBoys) AS PercentageAttendanceBoys, 
                    IF(msa.PercentageAttendanceGirls > 100, 100, msa.PercentageAttendanceGirls) AS PercentageAttendanceGirls, 
                    IF(msa.Percentage > 100, 100, msa.Percentage) AS Percentage
                FROM (
					SELECT se.SectorName AS Name, 
						SUM(dsa.EnrolledBoys) AS EnrolledBoys, 
                        SUM(dsa.EnrolledGirls) AS EnrolledGirls, 
                        SUM(dsa.EnrolledStudents) AS EnrolledStudents,
						SUM(dsa.AttendanceBoys) AS AttendanceBoys, 
                        SUM(dsa.AttendanceGirls) AS AttendanceGirls, 
                        SUM(dsa.StudentAttendances) AS StudentAttendances,
						ROUND(AVG(dsa.AttendanceBoysInPerc), 2) AS PercentageAttendanceBoys, 
                        ROUND(AVG(dsa.AttendanceGirlsInPerc), 2) AS PercentageAttendanceGirls, 
						ROUND(AVG(dsa.AttendancesInPerc), 2) AS Percentage
					FROM DsStudentAttendances dsa
					INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
					INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vss.IsActive = 1
					INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
					INNER JOIN Sectors se ON vss.SectorId = se.SectorId
					WHERE (UserId IS NULL OR vtm.VCId = @accountId)
						AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR vtm.VTPId = VTPId)
						AND (ClassId IS NULL OR dsa.ClassId = ClassId)
                        AND (MonthId IS NULL OR MONTH(dsa.ReportingMonth) = CAST(MonthId AS UNSIGNED))
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
                        
					GROUP BY se.SectorName                    
				) AS msa
                ORDER BY msa.Name; 
			END;
		ELSEIF(dataType = 'ByClass') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY msa.DisplayOrder) AS Id,
					msa.Name, msa.EnrolledBoys, msa.EnrolledGirls, msa.EnrolledStudents,
                    msa.AttendanceBoys, msa.AttendanceGirls, msa.StudentAttendances, 
                    
					IF(msa.PercentageAttendanceBoys > 100, 100, msa.PercentageAttendanceBoys) AS PercentageAttendanceBoys, 
                    IF(msa.PercentageAttendanceGirls > 100, 100, msa.PercentageAttendanceGirls) AS PercentageAttendanceGirls, 
                    IF(msa.Percentage > 100, 100, msa.Percentage) AS Percentage
                FROM (
					SELECT sc.Name, 
						SUM(dsa.EnrolledBoys) AS EnrolledBoys, 
                        SUM(dsa.EnrolledGirls) AS EnrolledGirls, 
                        SUM(dsa.EnrolledStudents) AS EnrolledStudents,
						SUM(dsa.AttendanceBoys) AS AttendanceBoys, 
                        SUM(dsa.AttendanceGirls) AS AttendanceGirls, 
                        SUM(dsa.StudentAttendances) AS StudentAttendances,
						ROUND(AVG(dsa.AttendanceBoysInPerc), 2) AS PercentageAttendanceBoys, 
                        ROUND(AVG(dsa.AttendanceGirlsInPerc), 2) AS PercentageAttendanceGirls, 
						ROUND(AVG(dsa.AttendancesInPerc), 2) AS Percentage, sc.DisplayOrder
					FROM DsStudentAttendances dsa
					INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
					INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vss.IsActive = 1
					INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
					INNER JOIN SchoolClasses sc ON dsa.ClassId = sc.ClassId
					WHERE (UserId IS NULL OR vtm.VCId = @accountId)
						AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR vtm.VTPId = VTPId)
						AND (ClassId IS NULL OR dsa.ClassId = ClassId)
                        AND (MonthId IS NULL OR MONTH(dsa.ReportingMonth) = CAST(MonthId AS UNSIGNED))
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
                        
					GROUP BY sc.Name                  
				) AS msa
                ORDER BY msa.DisplayOrder;            			               
			END;	
		ELSEIF(dataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY msa.Name) AS Id,
					msa.Name, msa.EnrolledBoys, msa.EnrolledGirls, msa.EnrolledStudents,
                    msa.AttendanceBoys, msa.AttendanceGirls, msa.StudentAttendances, 
                    
					IF(msa.PercentageAttendanceBoys > 100, 100, msa.PercentageAttendanceBoys) AS PercentageAttendanceBoys, 
                    IF(msa.PercentageAttendanceGirls > 100, 100, msa.PercentageAttendanceGirls) AS PercentageAttendanceGirls, 
                    IF(msa.Percentage > 100, 100, msa.Percentage) AS Percentage
                FROM (
					SELECT vtp.VTPShortName AS Name, 
						SUM(dsa.EnrolledBoys) AS EnrolledBoys, 
                        SUM(dsa.EnrolledGirls) AS EnrolledGirls, 
                        SUM(dsa.EnrolledStudents) AS EnrolledStudents,
						SUM(dsa.AttendanceBoys) AS AttendanceBoys, 
                        SUM(dsa.AttendanceGirls) AS AttendanceGirls, 
                        SUM(dsa.StudentAttendances) AS StudentAttendances,
						ROUND(AVG(dsa.AttendanceBoysInPerc), 2) AS PercentageAttendanceBoys, 
                        ROUND(AVG(dsa.AttendanceGirlsInPerc), 2) AS PercentageAttendanceGirls, 
						ROUND(AVG(dsa.AttendancesInPerc), 2) AS Percentage
					FROM DsStudentAttendances dsa
					INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
					INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vss.IsActive = 1
					INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
					INNER JOIN VocationalTrainingProviders vtp ON vtm.VTPId = vtp.VTPId
					WHERE (UserId IS NULL OR vtm.VCId = @accountId)
						AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR vtm.VTPId = VTPId)
						AND (ClassId IS NULL OR dsa.ClassId = ClassId)
                        AND (MonthId IS NULL OR MONTH(dsa.ReportingMonth) = CAST(MonthId AS UNSIGNED))
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
                        
					GROUP BY vtp.VTPShortName                    
				) AS msa
                ORDER BY msa.Name;            			               
			END;
		ELSEIF(dataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY msa.Name) AS Id,
					msa.Name, msa.EnrolledBoys, msa.EnrolledGirls, msa.EnrolledStudents,
                    msa.AttendanceBoys, msa.AttendanceGirls, msa.StudentAttendances, 
                    
					IF(msa.PercentageAttendanceBoys > 100, 100, msa.PercentageAttendanceBoys) AS PercentageAttendanceBoys, 
                    IF(msa.PercentageAttendanceGirls > 100, 100, msa.PercentageAttendanceGirls) AS PercentageAttendanceGirls, 
                    IF(msa.Percentage > 100, 100, msa.Percentage) AS Percentage
                FROM (
					SELECT dvv.Name, 
						SUM(dsa.EnrolledBoys) AS EnrolledBoys, 
                        SUM(dsa.EnrolledGirls) AS EnrolledGirls, 
                        SUM(dsa.EnrolledStudents) AS EnrolledStudents,
						SUM(dsa.AttendanceBoys) AS AttendanceBoys, 
                        SUM(dsa.AttendanceGirls) AS AttendanceGirls, 
                        SUM(dsa.StudentAttendances) AS StudentAttendances,
						ROUND(AVG(dsa.AttendanceBoysInPerc), 2) AS PercentageAttendanceBoys, 
                        ROUND(AVG(dsa.AttendanceGirlsInPerc), 2) AS PercentageAttendanceGirls, 
						ROUND(AVG(dsa.AttendancesInPerc), 2) AS Percentage
					FROM DsStudentAttendances dsa
					INNER JOIN VTSchoolSectors vss ON dsa.VTSchoolSectorId = vss.VTSchoolSectorId
					INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vss.IsActive = 1
					INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
					INNER JOIN DataValues dvv ON s.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
					WHERE (UserId IS NULL OR vtm.VCId = @accountId)
						AND (AcademicYearId IS NULL OR dsa.AcademicYearId = AcademicYearId) 
						AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
						AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
						AND (SectorId IS NULL OR vss.SectorId = SectorId)
						AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
						AND (VTPId IS NULL OR vtm.VTPId = VTPId)
						AND (ClassId IS NULL OR dsa.ClassId = ClassId)
                        AND (MonthId IS NULL OR MONTH(dsa.ReportingMonth) = CAST(MonthId AS UNSIGNED))
						AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
                        
					GROUP BY dvv.Name                    
				) AS msa
                ORDER BY msa.Name;
			END;		
		END IF;   
     
		DROP TEMPORARY TABLE IF EXISTS StudentAttendanceData;
	END;
			
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
	
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardStudentsCardData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardStudentsCardData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
  
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;			 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS StudentData;
		
		CREATE TEMPORARY TABLE StudentData
		SELECT s.DivisionId, s.DistrictCode, vt.VTPId, sc.ClassId, s.SchoolManagementId, vss.SectorId,
            COUNT(DISTINCT IF(sc.Gender = '207', sc.StudentId, NULL)) AS Boys,
            COUNT(DISTINCT IF(sc.Gender = '208', sc.StudentId, NULL)) AS Girls,			
			COUNT(DISTINCT sc.StudentId) AS Total
		FROM VTClassStudents vcs
		INNER JOIN StudentClasses sc ON sc.StudentId = vcs.StudentId AND sc.IsActive = 1
		INNER JOIN VTClasses vtc ON sc.AcademicYearId = vtc.AcademicYearId AND sc.SchoolId = vtc.SchoolId AND sc.ClassId = vtc.ClassId AND vcs.VTId = vtc.VTId AND vtc.IsActive = 1	
		INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1   				
		INNER JOIN VocationalTrainers vt ON vcs.VTId = vt.VTId AND vt.IsActive = 1 
		INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1 
		WHERE sc.DeletedBy IS NULL AND sc.DateOfDropout IS NULL AND vcs.IsActive = 1
			AND (UserId IS NULL OR vt.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR sc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		GROUP BY vt.VTPId, vss.SectorId, sc.ClassId, s.DivisionId, s.DistrictCode, s.SchoolManagementId;
  
		IF(DataType = 'ByCount') THEN
			BEGIN  				
                SELECT 1 AS Id, CAST(SUM(sd.Total) AS CHAR) AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd;				
			END;
		ELSEIF(DataType = 'ByDivision') THEN
			BEGIN  				
                SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, d.DivisionName AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN Divisions d ON sd.DivisionId = d.DivisionId
				WHERE sd.DivisionId IS NOT NULL
				GROUP BY sd.DivisionId
                ORDER BY d.DivisionName;
			END;
		ELSEIF(DataType = 'ByDistrict') THEN
			BEGIN  			
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, d.DistrictName AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN Districts d ON sd.DistrictCode = d.DistrictCode
				WHERE sd.DistrictCode IS NOT NULL
				GROUP BY sd.DistrictCode
                ORDER BY d.DistrictName;
			END;	
		ELSEIF(DataType = 'ByClass') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY sc.Name ASC) AS Id, sc.Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN SchoolClasses sc ON sd.ClassId = sc.ClassId
				WHERE sd.ClassId IS NOT NULL
				GROUP BY sd.ClassId
                ORDER BY sc.DisplayOrder;				 
			END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, s.SectorName AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN Sectors s ON sd.SectorId = s.SectorId
				WHERE sd.SectorId IS NOT NULL
				GROUP BY sd.SectorId
                ORDER BY s.SectorName;				 
			END;	 
		ELSEIF(DataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, vtp.VTPShortName AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN VocationalTrainingProviders vtp ON sd.VTPId = vtp.VTPId
				WHERE sd.VTPId IS NOT NULL
				GROUP BY sd.VTPId
                ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(DataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY dvv.Name ASC) AS Id, dvv.Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN DataValues dvv ON sd.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
				WHERE sd.SchoolManagementId IS NOT NULL
				GROUP BY sd.SchoolManagementId
                ORDER BY dvv.Name;
			END;		
		END IF;   
     
		DROP TEMPORARY TABLE IF EXISTS StudentData;
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardStudentsCardDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardStudentsCardDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
  
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;			 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS StudentData;
		
		CREATE TEMPORARY TABLE StudentData
		SELECT ds.DivisionId, ds.DistrictId, ds.VTPId, ds.ClassId, ds.SchoolManagementId, ds.SectorId, ds.Boys, ds.Girls, ds.Total
		FROM DsStudents ds
		WHERE (UserId IS NULL OR ds.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR ds.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR ds.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR ds.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR ds.SectorId = SectorId)
			AND (JobRoleId IS NULL OR ds.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR ds.VTPId = VTPId)
			AND (ClassId IS NULL OR ds.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR ds.SchoolManagementId = SchoolManagementId);		
  
		IF(DataType = 'ByCount') THEN
			BEGIN  				
                SELECT 1 AS Id, CAST(SUM(sd.Total) AS CHAR) AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd;				
			END;
		ELSEIF(DataType = 'ByDivision') THEN
			BEGIN  				
                SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, d.DivisionName AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN Divisions d ON sd.DivisionId = d.DivisionId
				WHERE sd.DivisionId IS NOT NULL
				GROUP BY sd.DivisionId
                ORDER BY d.DivisionName;
			END;
		ELSEIF(DataType = 'ByDistrict') THEN
			BEGIN  			
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, d.DistrictName AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN Districts d ON sd.DistrictId = d.DistrictCode
				WHERE sd.DistrictId IS NOT NULL
				GROUP BY sd.DistrictId
                ORDER BY d.DistrictName;
			END;	
		ELSEIF(DataType = 'ByClass') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY sc.Name ASC) AS Id, sc.Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN SchoolClasses sc ON sd.ClassId = sc.ClassId
				WHERE sd.ClassId IS NOT NULL
				GROUP BY sd.ClassId
                ORDER BY sc.DisplayOrder;				 
			END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, s.SectorName AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN Sectors s ON sd.SectorId = s.SectorId
				WHERE sd.SectorId IS NOT NULL
				GROUP BY sd.SectorId
                ORDER BY s.SectorName;				 
			END;	 
		ELSEIF(DataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, vtp.VTPShortName AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN VocationalTrainingProviders vtp ON sd.VTPId = vtp.VTPId
				WHERE sd.VTPId IS NOT NULL
				GROUP BY sd.VTPId
                ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(DataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY dvv.Name ASC) AS Id, dvv.Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN DataValues dvv ON sd.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
				WHERE sd.SchoolManagementId IS NOT NULL
				GROUP BY sd.SchoolManagementId
                ORDER BY dvv.Name;
			END;		
		END IF;   
     
		DROP TEMPORARY TABLE IF EXISTS StudentData;
	END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	
    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardStudentsCardDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetDashboardStudentsCardDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
  
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;			 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS StudentData;
		
		CREATE TEMPORARY TABLE StudentData
		SELECT ds.AcademicYearId, ds.DivisionId, ds.DistrictId, ds.VTPId, ds.ClassId, ds.SchoolManagementId, ds.SectorId, ds.Boys, ds.Girls, ds.Total
		FROM DsStudents ds
		WHERE (UserId IS NULL OR ds.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR ds.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR ds.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR ds.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR ds.SectorId = SectorId)
			AND (JobRoleId IS NULL OR ds.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR ds.VTPId = VTPId)
			AND (ClassId IS NULL OR ds.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR ds.SchoolManagementId = SchoolManagementId);		
  
		IF(DataType = 'ByCount') THEN
			BEGIN  				
                SELECT 1 AS Id, CAST(SUM(sd.Total) AS CHAR) AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd;				
			END;
		ELSEIF(DataType = 'ByDivision') THEN
			BEGIN  				
                SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, d.DivisionName AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN Divisions d ON sd.DivisionId = d.DivisionId
				WHERE sd.DivisionId IS NOT NULL
				GROUP BY sd.DivisionId
                ORDER BY d.DivisionName;
			END;
		ELSEIF(DataType = 'ByDistrict') THEN
			BEGIN  			
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, d.DistrictName AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN Districts d ON sd.DistrictId = d.DistrictCode
				WHERE sd.DistrictId IS NOT NULL
				GROUP BY sd.DistrictId
                ORDER BY d.DistrictName;
			END;	
		ELSEIF(DataType = 'ByClass') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY sc.Name ASC) AS Id, sc.Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN SchoolClasses sc ON sd.ClassId = sc.ClassId
				WHERE sd.ClassId IS NOT NULL
				GROUP BY sd.ClassId
                ORDER BY sc.DisplayOrder;				 
			END;
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, s.SectorName AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN Sectors s ON sd.SectorId = s.SectorId
				WHERE sd.SectorId IS NOT NULL
				GROUP BY sd.SectorId
                ORDER BY s.SectorName;				 
			END;	 
		ELSEIF(DataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, vtp.VTPShortName AS Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM VTPAcademicYearsMap vtpm
                INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
                LEFT JOIN StudentData sd ON vtpm.AcademicYearId = sd.AcademicYearId AND vtpm.VTPId = sd.VTPId               
				WHERE vtpm.IsActive = 1 AND sd.VTPId IS NOT NULL AND vtpm.AcademicYearId = AcademicYearId
				GROUP BY sd.VTPId
                ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(DataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY dvv.Name ASC) AS Id, dvv.Name, SUM(sd.Boys) AS Boys, SUM(sd.Girls) AS Girls, SUM(sd.Total) AS Total
				FROM StudentData sd
                INNER JOIN DataValues dvv ON sd.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
				WHERE sd.SchoolManagementId IS NOT NULL
				GROUP BY sd.SchoolManagementId
                ORDER BY dvv.Name;
			END;		
		END IF;   
     
		DROP TEMPORARY TABLE IF EXISTS StudentData;
	END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	# CALL GetDashboardStudentsCardDataV2 ('ByVTP', 'rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    # CALL GetDashboardStudentsCardDataV2 ('BySector', 'rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardToolsAndEquipmentChartData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetDashboardToolsAndEquipmentChartData`( 
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;

		DROP TEMPORARY TABLE IF EXISTS JobRoleData;
		DROP TEMPORARY TABLE IF EXISTS ToolEquipmentData;

		CREATE TEMPORARY TABLE JobRoleData
		SELECT DISTINCT vss.VTSchoolSectorId, vss.VTId, vss.SchoolId, vss.SectorId, vss.JobRoleId, vtm.VTPId, s.DivisionId, s.DistrictCode, s.SchoolManagementId
		FROM VTSchoolSectors vss
        INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
        INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VTPId = vcm.VTPId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1			
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND jr.IsActive = 1
		WHERE vss.IsActive = 1 AND vss.JobRoleId IS NOT NULL			
			AND (UserId IS NULL OR vtm.VCId = @accountId)            
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)			
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);
		
		CREATE TEMPORARY TABLE ToolEquipmentData		
		SELECT DISTINCT vss.SectorId, te.SectorId AS TESectorId, te.JobRoleId AS TEJobRoleId, vtm.VTPId, s.DivisionId, s.DistrictCode, s.SchoolManagementId, 
			te.ToolEquipmentId, te.ReceiptDate, te.TEReceiveStatus
		FROM ToolEquipments te
		INNER JOIN VTSchoolSectors vss ON te.AcademicYearId = vss.AcademicYearId AND te.SectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
        INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
        INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VTPId = vcm.VTPId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1			    
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1	
		WHERE te.IsActive = 1
			AND (UserId IS NULL OR vtm.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (MonthId IS NULL OR MONTH(te.ReceiptDate) = CAST(MonthId AS UNSIGNED))
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);

		IF(DataType = 'ByCount') THEN
		BEGIN  				
            SELECT 1 AS Id, 'Count' AS Name,
				SUM(rs.ReportedReceived) AS ReportedReceived, 
				SUM(rs.ReportedNotReceived) AS ReportedNotReceived, 
				SUM(rs.NotReported) AS NotReported, 
				SUM(rs.TotalReportedJobRoles) AS TotalReportedJobRoles
			FROM (
				SELECT IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
					IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived, 
					(COUNT(DISTINCT cd.VTSchoolSectorId) - IFNULL(cmd.TotalReportedJobRoles, 0)) AS NotReported,
					IFNULL(cmd.TotalReportedJobRoles, 0) AS TotalReportedJobRoles            
				FROM JobRoleData cd
				LEFT JOIN (
					SELECT te.DivisionId,
						SUM(IF(te.TEReceiveStatus = 'Yes', 1, 0)) AS ReportedReceived,
						SUM(IF(te.TEReceiveStatus = 'No', 1, 0)) AS ReportedNotReceived,					
						COUNT(DISTINCT te.TESectorId, te.TEJobRoleId) AS TotalReportedJobRoles
					FROM ToolEquipmentData te         
					WHERE te.DivisionId IS NOT NULL
					GROUP BY te.DivisionId			
				) AS cmd ON cd.DivisionId = cmd.DivisionId        
				INNER JOIN Divisions d ON cd.DivisionId = d.DivisionId            
				GROUP BY cmd.ReportedReceived, cmd.ReportedNotReceived, cmd.TotalReportedJobRoles
            ) AS rs;
            
		END;
		ELSEIF(DataType = 'ByDivision') THEN
		BEGIN  					
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				d.DivisionName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived, 
                (COUNT(DISTINCT cd.VTSchoolSectorId) - IFNULL(cmd.TotalReportedJobRoles, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedJobRoles, 0) AS TotalReportedJobRoles
			FROM JobRoleData cd
            LEFT JOIN (
				SELECT te.DivisionId,
					SUM(IF(te.TEReceiveStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(te.TEReceiveStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT te.TESectorId, te.TEJobRoleId) AS TotalReportedJobRoles
				FROM ToolEquipmentData te         
				WHERE te.DivisionId IS NOT NULL
				GROUP BY te.DivisionId
			) AS cmd ON cd.DivisionId = cmd.DivisionId             
            INNER JOIN Divisions d ON cd.DivisionId = d.DivisionId
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.DivisionId 
            ORDER BY d.DivisionName;
            
		END;
		ELSEIF(DataType = 'ByDistrict') THEN
		BEGIN  		
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				d.DistrictName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived,  
                (COUNT(DISTINCT cd.VTSchoolSectorId) - IFNULL(cmd.TotalReportedJobRoles, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedJobRoles, 0) AS TotalReportedJobRoles
			FROM JobRoleData cd
            LEFT JOIN (
				SELECT te.DivisionId, te.DistrictCode,
					SUM(IF(te.TEReceiveStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(te.TEReceiveStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT te.TESectorId, te.TEJobRoleId) AS TotalReportedJobRoles
				FROM ToolEquipmentData te                
				WHERE te.DivisionId IS NOT NULL AND te.DistrictCode IS NOT NULL
				GROUP BY te.DivisionId, te.DistrictCode
			) AS cmd ON cd.DivisionId = cmd.DivisionId AND cd.DistrictCode = cmd.DistrictCode
            INNER JOIN Districts d ON cd.DivisionId = d.DivisionId AND cd.DistrictCode = d.DistrictCode
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.DivisionId, cd.DistrictCode
            ORDER BY d.DistrictName;       
            
		END;		 
		ELSEIF(DataType = 'BySector') THEN
		BEGIN  
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				s.SectorName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived, 
                (COUNT(DISTINCT cd.VTSchoolSectorId) - IFNULL(cmd.TotalReportedJobRoles, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedJobRoles, 0) AS TotalReportedJobRoles
			FROM JobRoleData cd
            LEFT JOIN (
				SELECT te.SectorId,
					SUM(IF(te.TEReceiveStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(te.TEReceiveStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT te.TESectorId, te.TEJobRoleId) AS TotalReportedJobRoles
				FROM ToolEquipmentData te         
				WHERE te.SectorId IS NOT NULL
				GROUP BY te.SectorId
			) AS cmd ON cd.SectorId = cmd.SectorId 
            INNER JOIN Sectors s ON cd.SectorId = s.SectorId
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.SectorId 
            ORDER BY s.SectorName;
             
		END;
		ELSEIF (DataType = 'ByVTP') THEN
		BEGIN    			
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				vtp.VTPShortName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived, 
                (COUNT(DISTINCT cd.VTSchoolSectorId) - IFNULL(cmd.TotalReportedJobRoles, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedJobRoles, 0) AS TotalReportedJobRoles
			FROM JobRoleData cd
            LEFT JOIN (
				SELECT te.VTPId,
					SUM(IF(te.TEReceiveStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(te.TEReceiveStatus = 'No', 1, 0)) AS ReportedNotReceived,					                    
                    COUNT(DISTINCT te.TESectorId, te.TEJobRoleId) AS TotalReportedJobRoles
				FROM ToolEquipmentData te                
				WHERE te.VTPId IS NOT NULL
				GROUP BY te.VTPId
			) AS cmd ON cd.VTPId = cmd.VTPId 
            INNER JOIN VTPAcademicYearsMap vtpm ON vtpm.AcademicYearId = AcademicYearId AND cd.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
            INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.VTPId 
            ORDER BY vtp.VTPShortName;
           
		END;
		ELSEIF (DataType = 'BySchoolManagement') THEN
		BEGIN     
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				dvv.Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived, 
                (COUNT(DISTINCT cd.VTSchoolSectorId) - IFNULL(cmd.TotalReportedJobRoles, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedJobRoles, 0) AS TotalReportedJobRoles
			FROM JobRoleData cd
            LEFT JOIN (
				SELECT te.SchoolManagementId,
					SUM(IF(te.TEReceiveStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(te.TEReceiveStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT te.TESectorId, te.TEJobRoleId) AS TotalReportedJobRoles
				FROM ToolEquipmentData te                
				WHERE te.SchoolManagementId IS NOT NULL
				GROUP BY te.SchoolManagementId
			) AS cmd ON cd.SchoolManagementId = cmd.SchoolManagementId 
            LEFT JOIN DataValues dvv ON cd.SchoolManagementId = dvv.DataValueId  AND dvv.DataTypeId = 'SchoolManagement'			
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            WHERE dvv.Name IS NOT NULL
            GROUP BY cd.SchoolManagementId, cmd.ReportedReceived, cmd.ReportedNotReceived, cmd.TotalReportedJobRoles 
            ORDER BY dvv.Name;
              
		END;
		END IF;
	END;	
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;

    # CALL GetDashboardToolsAndEquipmentChartData ('ByVTP','rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);	
    # CALL GetDashboardToolsAndEquipmentChartData ('ByCount','vc.aisect@email.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);	    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardToolsAndEquipmentChartDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardToolsAndEquipmentChartDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
    
    BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;

		DROP TEMPORARY TABLE IF EXISTS JobRoleData;
		DROP TEMPORARY TABLE IF EXISTS ToolEquipmentData;

		CREATE TEMPORARY TABLE JobRoleData
		SELECT DISTINCT dsj.VTPId, dsj.SectorId, dsj.DivisionId, dsj.DistrictId, dsj.SchoolManagementId, dsj.VTId, dsj.SchoolId, dsj.JobRoleId, dsj.VTSchoolSectorId 
		FROM DsSectorJobRoles dsj		
		WHERE (UserId IS NULL OR dsj.VCId = @accountId)            
			AND (AcademicYearId IS NULL OR dsj.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR dsj.DivisionId = DivisionId) 
			AND (DistrictId IS NULL OR dsj.DistrictId = DistrictId) 
			AND (SectorId IS NULL OR dsj.SectorId = SectorId)
			AND (JobRoleId IS NULL OR dsj.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dsj.VTPId = VTPId)
			
			AND (SchoolManagementId IS NULL OR dsj.SchoolManagementId = SchoolManagementId);
		
		CREATE TEMPORARY TABLE ToolEquipmentData		
		SELECT DISTINCT dte.SectorId, dte.TESectorId, dte.TEJobRoleId, dte.VTPId, dte.DivisionId, dte.DistrictId, dte.SchoolManagementId, 
			dte.ToolEquipmentId, dte.ReceiptDate, dte.TEReceiveStatus
		FROM DsToolsAndEquipments dte		
		WHERE (UserId IS NULL OR dte.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR dte.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR dte.DivisionId = DivisionId) 
			AND (DistrictId IS NULL OR dte.DistrictId = DistrictId) 
			AND (SectorId IS NULL OR dte.SectorId = SectorId)
			AND (JobRoleId IS NULL OR dte.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dte.VTPId = VTPId)
			
			AND (SchoolManagementId IS NULL OR dte.SchoolManagementId = SchoolManagementId);

		IF(DataType = 'ByCount') THEN
		BEGIN  				
            SELECT 1 AS Id, 'Count' AS Name,
				SUM(rs.ReportedReceived) AS ReportedReceived, 
				SUM(rs.ReportedNotReceived) AS ReportedNotReceived, 
				SUM(rs.NotReported) AS NotReported, 
				SUM(rs.TotalReportedJobRoles) AS TotalReportedJobRoles
			FROM (
				SELECT IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
					IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived, 
					(COUNT(DISTINCT cd.VTSchoolSectorId) - IFNULL(cmd.TotalReportedJobRoles, 0)) AS NotReported,
					IFNULL(cmd.TotalReportedJobRoles, 0) AS TotalReportedJobRoles            
				FROM JobRoleData cd
				LEFT JOIN (
					SELECT te.DivisionId,
						SUM(IF(te.TEReceiveStatus = 'Yes', 1, 0)) AS ReportedReceived,
						SUM(IF(te.TEReceiveStatus = 'No', 1, 0)) AS ReportedNotReceived,					
						COUNT(DISTINCT te.TESectorId, te.TEJobRoleId) AS TotalReportedJobRoles
					FROM ToolEquipmentData te         
					WHERE te.DivisionId IS NOT NULL
					GROUP BY te.DivisionId			
				) AS cmd ON cd.DivisionId = cmd.DivisionId        
				INNER JOIN Divisions d ON cd.DivisionId = d.DivisionId            
				GROUP BY cmd.ReportedReceived, cmd.ReportedNotReceived, cmd.TotalReportedJobRoles
            ) AS rs;
            
		END;
		ELSEIF(DataType = 'ByDivision') THEN
		BEGIN  					
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				d.DivisionName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived, 
                (COUNT(DISTINCT cd.VTSchoolSectorId) - IFNULL(cmd.TotalReportedJobRoles, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedJobRoles, 0) AS TotalReportedJobRoles
			FROM JobRoleData cd
            LEFT JOIN (
				SELECT te.DivisionId,
					SUM(IF(te.TEReceiveStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(te.TEReceiveStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT te.TESectorId, te.TEJobRoleId) AS TotalReportedJobRoles
				FROM ToolEquipmentData te         
				WHERE te.DivisionId IS NOT NULL
				GROUP BY te.DivisionId
			) AS cmd ON cd.DivisionId = cmd.DivisionId             
            INNER JOIN Divisions d ON cd.DivisionId = d.DivisionId
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.DivisionId 
            ORDER BY d.DivisionName;
            
		END;
		ELSEIF(DataType = 'ByDistrict') THEN
		BEGIN  		
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				d.DistrictName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived,  
                (COUNT(DISTINCT cd.VTSchoolSectorId) - IFNULL(cmd.TotalReportedJobRoles, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedJobRoles, 0) AS TotalReportedJobRoles
			FROM JobRoleData cd
            LEFT JOIN (
				SELECT te.DivisionId, te.DistrictId,
					SUM(IF(te.TEReceiveStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(te.TEReceiveStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT te.TESectorId, te.TEJobRoleId) AS TotalReportedJobRoles
				FROM ToolEquipmentData te                
				WHERE te.DivisionId IS NOT NULL AND te.DistrictId IS NOT NULL
				GROUP BY te.DivisionId, te.DistrictId
			) AS cmd ON cd.DivisionId = cmd.DivisionId AND cd.DistrictId = cmd.DistrictId
            INNER JOIN Districts d ON cd.DivisionId = d.DivisionId AND cd.DistrictId = d.DistrictCode
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.DivisionId, cd.DistrictId
            ORDER BY d.DistrictName;       
            
		END;		 
		ELSEIF(DataType = 'BySector') THEN
		BEGIN  
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				s.SectorName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived, 
                (COUNT(DISTINCT cd.VTSchoolSectorId) - IFNULL(cmd.TotalReportedJobRoles, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedJobRoles, 0) AS TotalReportedJobRoles
			FROM JobRoleData cd
            LEFT JOIN (
				SELECT te.SectorId,
					SUM(IF(te.TEReceiveStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(te.TEReceiveStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT te.TESectorId, te.TEJobRoleId) AS TotalReportedJobRoles
				FROM ToolEquipmentData te         
				WHERE te.SectorId IS NOT NULL
				GROUP BY te.SectorId
			) AS cmd ON cd.SectorId = cmd.SectorId 
            INNER JOIN Sectors s ON cd.SectorId = s.SectorId
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.SectorId 
            ORDER BY s.SectorName;
             
		END;
		ELSEIF (DataType = 'ByVTP') THEN
		BEGIN    
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				vtp.VTPShortName AS Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived, 
                (COUNT(DISTINCT cd.VTSchoolSectorId) - IFNULL(cmd.TotalReportedJobRoles, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedJobRoles, 0) AS TotalReportedJobRoles
			FROM JobRoleData cd
            LEFT JOIN (
				SELECT te.VTPId,
					SUM(IF(te.TEReceiveStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(te.TEReceiveStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT te.TESectorId, te.TEJobRoleId) AS TotalReportedJobRoles
				FROM ToolEquipmentData te                
				WHERE te.VTPId IS NOT NULL
				GROUP BY te.VTPId
			) AS cmd ON cd.VTPId = cmd.VTPId 
            INNER JOIN VocationalTrainingProviders vtp ON cd.VTPId = vtp.VTPId
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            GROUP BY cd.VTPId 
            ORDER BY vtp.VTPShortName;
           
		END;
		ELSEIF (DataType = 'BySchoolManagement') THEN
		BEGIN     
			SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
				dvv.Name, 
				IFNULL(cmd.ReportedReceived, 0) AS ReportedReceived, 
                IFNULL(cmd.ReportedNotReceived, 0) AS ReportedNotReceived, 
                (COUNT(DISTINCT cd.VTSchoolSectorId) - IFNULL(cmd.TotalReportedJobRoles, 0)) AS NotReported,
                IFNULL(cmd.TotalReportedJobRoles, 0) AS TotalReportedJobRoles
			FROM JobRoleData cd
            LEFT JOIN (
				SELECT te.SchoolManagementId,
					SUM(IF(te.TEReceiveStatus = 'Yes', 1, 0)) AS ReportedReceived,
					SUM(IF(te.TEReceiveStatus = 'No', 1, 0)) AS ReportedNotReceived,					
                    COUNT(DISTINCT te.TESectorId, te.TEJobRoleId) AS TotalReportedJobRoles
				FROM ToolEquipmentData te                
				WHERE te.SchoolManagementId IS NOT NULL
				GROUP BY te.SchoolManagementId
			) AS cmd ON cd.SchoolManagementId = cmd.SchoolManagementId 
            LEFT JOIN DataValues dvv ON cd.SchoolManagementId = dvv.DataValueId  AND dvv.DataTypeId = 'SchoolManagement'			
            CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
            WHERE dvv.Name IS NOT NULL
            GROUP BY cd.SchoolManagementId, cmd.ReportedReceived, cmd.ReportedNotReceived, cmd.TotalReportedJobRoles 
            ORDER BY dvv.Name;
              
		END;
		END IF;

	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardVCAttendanceChartData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetDashboardVCAttendanceChartData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
       
		IF(DataType = 'ByMonth') THEN
		BEGIN  			
			SELECT ROW_NUMBER() OVER (ORDER BY dvm.Name) AS Id,
				dvm.Name,
				CAST(IF(ctr.CoordinatorsReporting IS NOT NULL, ctr.CoordinatorsReporting, 0) AS SIGNED) AS Count,
                IF(ctr.VCAttendance IS NOT NULL, CAST(ctr.VCAttendance AS DECIMAL(10, 2)), 0) AS Percentage 
			FROM (
				SELECT DISTINCT dca.VTPId, 
					dca.ReportingMonth,
					COUNT(DISTINCT dca.VCId) AS CoordinatorsReporting,   	
					AVG(dca.VCReporting) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance				 
                FROM DsCoordinatorAttendances dca 							
                WHERE (AcademicYearId IS NULL OR dca.AcademicYearId = AcademicYearId) 					
					AND (VTPId IS NULL OR dca.VTPId = VTPId)
					AND (MonthId IS NULL OR MONTH(dca.ReportingMonth) = CAST(MonthId AS UNSIGNED))
				GROUP BY dca.ReportingMonth
			) AS ctr
            INNER JOIN DataValues dvm ON DATE_FORMAT(ctr.ReportingMonth, "%b") = dvm.Description AND dvm.DataTypeId = 'Months'
            GROUP BY ReportingMonth, dvm.DisplayOrder
			ORDER BY dvm.DisplayOrder;
		END;
        ELSEIF(DataType = 'ByVTP') THEN
        BEGIN        
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName) AS Id,
				vtp.VTPShortName AS Name,
				CAST(IF(ctr.CoordinatorsReporting IS NOT NULL, ctr.CoordinatorsReporting, 0) AS SIGNED) AS Count,                
                IF(ctr.VCAttendance IS NOT NULL, CAST(ctr.VCAttendance AS DECIMAL(10, 2)), 0) AS Percentage 
			FROM (            
				SELECT DISTINCT dca.VTPId,
					COUNT(DISTINCT dca.VCId) AS CoordinatorsReporting,   	
					AVG(dca.VCReporting) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
				FROM DsCoordinatorAttendances dca 							
                WHERE (AcademicYearId IS NULL OR dca.AcademicYearId = AcademicYearId) 					
					AND (VTPId IS NULL OR dca.VTPId = VTPId)
					AND (MonthId IS NULL OR MONTH(dca.ReportingMonth) = CAST(MonthId AS UNSIGNED))				
				GROUP BY dca.VTPId
			) AS ctr            
            INNER JOIN VocationalTrainingProviders vtp ON ctr.VTPId = vtp.VTPId AND vtp.IsActive = 1
            GROUP BY ctr.VTPId
			ORDER BY vtp.VTPShortName;                
        END;
		END IF;   
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmpGetDashboardVCAttendanceChartData;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;

	# CALL GetDashboardVCAttendanceChartData ('ByVTP', 'rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
	# CALL GetDashboardVCAttendanceChartData ('ByMonth', 'rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardVCAttendanceChartDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardVCAttendanceChartDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
       
		IF(DataType = 'ByMonth') THEN
		BEGIN  			
			SELECT ROW_NUMBER() OVER (ORDER BY dvm.Name) AS Id,
				dvm.Name,
				CAST(IF(ctr.CoordinatorsReporting IS NOT NULL, ctr.CoordinatorsReporting, 0) AS SIGNED) AS Count,
                CAST(IF(ctr.VCAttendance IS NOT NULL, ROUND(ctr.VCAttendance, 2), 0) AS DECIMAL) AS Percentage 
			FROM (
				SELECT DISTINCT dca.VTPId, 
					dca.ReportingMonth,
					COUNT(DISTINCT dca.VCId) AS CoordinatorsReporting,   	
					AVG(dca.VCReporting) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
				FROM DsCoordinatorAttendances dca
                WHERE (UserId IS NULL OR dca.VCId = @accountId)
					AND (AcademicYearId IS NULL OR dca.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR dca.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR dca.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR dca.SectorId = SectorId)					
														  
					AND (VTPId IS NULL OR dca.VTPId = VTPId)					
													
					AND (SchoolManagementId IS NULL OR dca.SchoolManagementId = SchoolManagementId)
				GROUP BY dca.VTPId, dca.ReportingMonth
			) AS ctr
            INNER JOIN DataValues dvm ON DATE_FORMAT(ctr.ReportingMonth, "%b") = dvm.Description AND dvm.DataTypeId = 'Months'
            GROUP BY ReportingMonth, dvm.DisplayOrder
			ORDER BY dvm.DisplayOrder;
		END;
		ELSEIF(DataType = 'ByDivision') THEN
		BEGIN          
			SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName) AS Id,
				d.DivisionName AS Name,
				CAST(IF(ctr.CoordinatorsReporting IS NOT NULL, ctr.CoordinatorsReporting, 0) AS SIGNED) AS Count,
                CAST(IF(ctr.VCAttendance IS NOT NULL, ROUND(ctr.VCAttendance, 2), 0) AS DECIMAL) AS Percentage 
			FROM (
				SELECT DISTINCT dca.DivisionId,
					COUNT(DISTINCT dca.VCId) AS CoordinatorsReporting,   	
					AVG(dca.VCReporting) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
				FROM DsCoordinatorAttendances dca
                WHERE (UserId IS NULL OR dca.VCId = @accountId)
					AND (AcademicYearId IS NULL OR dca.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR dca.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR dca.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR dca.SectorId = SectorId)					
														  
					AND (VTPId IS NULL OR dca.VTPId = VTPId)					
													
					AND (SchoolManagementId IS NULL OR dca.SchoolManagementId = SchoolManagementId)
				GROUP BY dca.VTPId, dca.DivisionId
			) AS ctr            
            INNER JOIN Divisions d ON ctr.DivisionId = d.DivisionId AND d.IsActive = 1
            GROUP BY ctr.DivisionId
			ORDER BY d.DivisionName;            
		END;
        ELSEIF(DataType = 'ByDistrict') THEN
		BEGIN  
			SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName) AS Id,
				d.DistrictName AS Name,
				CAST(IF(ctr.CoordinatorsReporting IS NOT NULL, ctr.CoordinatorsReporting, 0) AS SIGNED) AS Count,
                CAST(IF(ctr.VCAttendance IS NOT NULL, ROUND(ctr.VCAttendance, 2), 0) AS DECIMAL) AS Percentage 
			FROM (
				SELECT DISTINCT dca.DistrictId,
					COUNT(DISTINCT dca.VCId) AS CoordinatorsReporting,   	
					AVG(dca.VCReporting) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
				FROM DsCoordinatorAttendances dca
                WHERE (UserId IS NULL OR dca.VCId = @accountId)
					AND (AcademicYearId IS NULL OR dca.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR dca.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR dca.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR dca.SectorId = SectorId)					
														  
					AND (VTPId IS NULL OR dca.VTPId = VTPId)					
													
					AND (SchoolManagementId IS NULL OR dca.SchoolManagementId = SchoolManagementId)
				GROUP BY dca.VTPId, dca.DistrictId
			) AS ctr            
            INNER JOIN Districts d ON ctr.DistrictId = d.DistrictCode AND d.IsActive = 1
            GROUP BY ctr.DistrictId
			ORDER BY d.DistrictName;               
		END;
        ELSEIF(DataType = 'BySector') THEN
		BEGIN          
			SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName) AS Id,
				se.SectorName AS Name,
				CAST(IF(ctr.CoordinatorsReporting IS NOT NULL, ctr.CoordinatorsReporting, 0) AS SIGNED) AS Count,
                CAST(IF(ctr.VCAttendance IS NOT NULL, ROUND(ctr.VCAttendance, 2), 0) AS DECIMAL) AS Percentage 
			FROM (
				SELECT DISTINCT dca.SectorId,
					COUNT(DISTINCT dca.VCId) AS CoordinatorsReporting,   	
					AVG(dca.VCReporting) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
				FROM DsCoordinatorAttendances dca
                WHERE (UserId IS NULL OR dca.VCId = @accountId)
					AND (AcademicYearId IS NULL OR dca.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR dca.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR dca.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR dca.SectorId = SectorId)
														  
					AND (VTPId IS NULL OR dca.VTPId = VTPId)					
													
					AND (SchoolManagementId IS NULL OR dca.SchoolManagementId = SchoolManagementId)
				GROUP BY dca.SectorId
			) AS ctr            
            INNER JOIN Sectors se ON ctr.SectorId = se.SectorId AND se.IsActive = 1
            GROUP BY ctr.SectorId
			ORDER BY se.SectorName;              
		END;
        ELSEIF(DataType = 'ByVTP') THEN
        BEGIN        
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName) AS Id,
				vtp.VTPShortName AS Name,
				CAST(IF(ctr.CoordinatorsReporting IS NOT NULL, ctr.CoordinatorsReporting, 0) AS SIGNED) AS Count,
                CAST(IF(ctr.VCAttendance IS NOT NULL, ROUND(ctr.VCAttendance, 2), 0) AS DECIMAL) AS Percentage 
			FROM (
				SELECT DISTINCT dca.VTPId,
					COUNT(DISTINCT dca.VCId) AS CoordinatorsReporting,   	
					AVG(dca.VCReporting) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
				FROM DsCoordinatorAttendances dca
                WHERE (UserId IS NULL OR dca.VCId = @accountId)
					AND (AcademicYearId IS NULL OR dca.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR dca.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR dca.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR dca.SectorId = SectorId)
														  
					AND (VTPId IS NULL OR dca.VTPId = VTPId)
													
					AND (SchoolManagementId IS NULL OR dca.SchoolManagementId = SchoolManagementId)
				GROUP BY dca.VTPId
			) AS ctr            
            INNER JOIN VocationalTrainingProviders vtp ON ctr.VTPId = vtp.VTPId AND vtp.IsActive = 1
            GROUP BY ctr.VTPId
			ORDER BY vtp.VTPShortName;                
        END;
		END IF;   
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
	
	
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardVCAttendanceChartDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetDashboardVCAttendanceChartDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
       
		IF(DataType = 'ByMonth') THEN
		BEGIN  			
			SELECT ROW_NUMBER() OVER (ORDER BY dvm.Name) AS Id,
				dvm.Name,
				CAST(IF(ctr.CoordinatorsReporting IS NOT NULL, ctr.CoordinatorsReporting, 0) AS SIGNED) AS Count,
                CAST(IF(ctr.VCAttendance IS NOT NULL, ROUND(ctr.VCAttendance, 2), 0) AS DECIMAL) AS Percentage 
			FROM (
				SELECT DISTINCT dca.VTPId, 
					dca.ReportingMonth,
					COUNT(DISTINCT dca.VCId) AS CoordinatorsReporting,   	
					AVG(dca.VCReporting) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
				FROM DsCoordinatorAttendances dca
                WHERE (UserId IS NULL OR dca.VCId = @accountId)
					AND (AcademicYearId IS NULL OR dca.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR dca.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR dca.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR dca.SectorId = SectorId)					
														  
					AND (VTPId IS NULL OR dca.VTPId = VTPId)					
													
					AND (SchoolManagementId IS NULL OR dca.SchoolManagementId = SchoolManagementId)
				GROUP BY dca.VTPId, dca.ReportingMonth
			) AS ctr
            INNER JOIN DataValues dvm ON DATE_FORMAT(ctr.ReportingMonth, "%b") = dvm.Description AND dvm.DataTypeId = 'Months'
            GROUP BY ReportingMonth, dvm.DisplayOrder
			ORDER BY dvm.DisplayOrder;
		END;
		ELSEIF(DataType = 'ByDivision') THEN
		BEGIN          
			SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName) AS Id,
				d.DivisionName AS Name,
				CAST(IF(ctr.CoordinatorsReporting IS NOT NULL, ctr.CoordinatorsReporting, 0) AS SIGNED) AS Count,
                CAST(IF(ctr.VCAttendance IS NOT NULL, ROUND(ctr.VCAttendance, 2), 0) AS DECIMAL) AS Percentage 
			FROM (
				SELECT DISTINCT dca.DivisionId,
					COUNT(DISTINCT dca.VCId) AS CoordinatorsReporting,   	
					AVG(dca.VCReporting) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
				FROM DsCoordinatorAttendances dca
                WHERE (UserId IS NULL OR dca.VCId = @accountId)
					AND (AcademicYearId IS NULL OR dca.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR dca.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR dca.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR dca.SectorId = SectorId)					
														  
					AND (VTPId IS NULL OR dca.VTPId = VTPId)					
													
					AND (SchoolManagementId IS NULL OR dca.SchoolManagementId = SchoolManagementId)
				GROUP BY dca.VTPId, dca.DivisionId
			) AS ctr            
            INNER JOIN Divisions d ON ctr.DivisionId = d.DivisionId AND d.IsActive = 1
            GROUP BY ctr.DivisionId
			ORDER BY d.DivisionName;            
		END;
        ELSEIF(DataType = 'ByDistrict') THEN
		BEGIN  
			SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName) AS Id,
				d.DistrictName AS Name,
				CAST(IF(ctr.CoordinatorsReporting IS NOT NULL, ctr.CoordinatorsReporting, 0) AS SIGNED) AS Count,
                CAST(IF(ctr.VCAttendance IS NOT NULL, ROUND(ctr.VCAttendance, 2), 0) AS DECIMAL) AS Percentage 
			FROM (
				SELECT DISTINCT dca.DistrictId,
					COUNT(DISTINCT dca.VCId) AS CoordinatorsReporting,   	
					AVG(dca.VCReporting) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
				FROM DsCoordinatorAttendances dca
                WHERE (UserId IS NULL OR dca.VCId = @accountId)
					AND (AcademicYearId IS NULL OR dca.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR dca.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR dca.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR dca.SectorId = SectorId)					
														  
					AND (VTPId IS NULL OR dca.VTPId = VTPId)					
													
					AND (SchoolManagementId IS NULL OR dca.SchoolManagementId = SchoolManagementId)
				GROUP BY dca.VTPId, dca.DistrictId
			) AS ctr            
            INNER JOIN Districts d ON ctr.DistrictId = d.DistrictCode AND d.IsActive = 1
            GROUP BY ctr.DistrictId
			ORDER BY d.DistrictName;               
		END;
        ELSEIF(DataType = 'BySector') THEN
		BEGIN          
			SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName) AS Id,
				se.SectorName AS Name,
				CAST(IF(ctr.CoordinatorsReporting IS NOT NULL, ctr.CoordinatorsReporting, 0) AS SIGNED) AS Count,
                CAST(IF(ctr.VCAttendance IS NOT NULL, ROUND(ctr.VCAttendance, 2), 0) AS DECIMAL) AS Percentage 
			FROM (
				SELECT DISTINCT dca.SectorId,
					COUNT(DISTINCT dca.VCId) AS CoordinatorsReporting,   	
					AVG(dca.VCReporting) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
				FROM DsCoordinatorAttendances dca
                WHERE (UserId IS NULL OR dca.VCId = @accountId)
					AND (AcademicYearId IS NULL OR dca.AcademicYearId = AcademicYearId) 
					AND (DivisionId IS NULL OR dca.DivisionId = DivisionId)
					AND (DistrictCode IS NULL OR dca.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
					AND (SectorId IS NULL OR dca.SectorId = SectorId)
														  
					AND (VTPId IS NULL OR dca.VTPId = VTPId)					
													
					AND (SchoolManagementId IS NULL OR dca.SchoolManagementId = SchoolManagementId)
				GROUP BY dca.SectorId
			) AS ctr            
            INNER JOIN Sectors se ON ctr.SectorId = se.SectorId AND se.IsActive = 1
            GROUP BY ctr.SectorId
			ORDER BY se.SectorName;              
		END;
        ELSEIF(DataType = 'ByVTP') THEN
        BEGIN        
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName) AS Id,
				vtp.VTPShortName AS Name,
				CAST(IF(ctr.CoordinatorsReporting IS NOT NULL, ctr.CoordinatorsReporting, 0) AS SIGNED) AS Count,
                CAST(IF(ctr.VCAttendance IS NOT NULL, ROUND(ctr.VCAttendance, 2), 0) AS DECIMAL) AS Percentage 
			FROM (            
				SELECT DISTINCT dca.VTPId,
					COUNT(DISTINCT dca.VCId) AS CoordinatorsReporting,   	
					AVG(dca.VCReporting) AS VCReporting, 
					AVG(dca.WorkingDays) AS WorkingDays,
					((AVG(dca.VCReporting) / AVG(dca.WorkingDays)) * 100) AS VCAttendance
				FROM ( 
					SELECT DISTINCT vcs.AcademicYearId, vcs.VTPId, vcs.VCId, vcs.WorkingDays, vcs.ReportingMonth, IF(SUM(vcs.VCReporting) > vcs.WorkingDays, vcs.WorkingDays, SUM(vcs.VCReporting)) AS VCReporting
					FROM DsCoordinatorAttendances vcs
					WHERE (AcademicYearId IS NULL OR vcs.AcademicYearId = AcademicYearId) 					
						AND (VTPId IS NULL OR vcs.VTPId = VTPId)
					GROUP BY vcs.VTPId, vcs.VCId, vcs.WorkingDays, vcs.ReportingMonth
                ) AS dca					
				GROUP BY dca.VTPId
			) AS ctr            
            INNER JOIN VocationalTrainingProviders vtp ON ctr.VTPId = vtp.VTPId AND vtp.IsActive = 1
            GROUP BY ctr.VTPId
			ORDER BY vtp.VTPShortName;                
        END;
		END IF;   
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;

	# CALL GetDashboardVCAttendanceChartDataV2 ('ByVTP', 'rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
	# CALL GetDashboardVCAttendanceChartDataV2 ('BySector', 'rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardVocationalTrainersCardData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardVocationalTrainersCardData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
  
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;			 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS VTReportingData;
		
		CREATE TEMPORARY TABLE VTReportingData
		SELECT DISTINCT s.DivisionId, s.DistrictCode, vss.SectorId, vt.VTPId, s.SchoolManagementId, 
			COUNT(DISTINCT vt.VTId) AS TotalVT,             
            COUNT(DISTINCT vss.VTId) AS ReportedVT 
        FROM VocationalTrainers vt
		LEFT JOIN VTSchoolSectors vss ON vt.VTId = vss.VTId AND vss.IsActive = 1
		LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1
		LEFT JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId         
		LEFT JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1		
		
		WHERE vt.IsActive = 1
			AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR (vss.AcademicYearId = AcademicYearId OR vss.AcademicYearId IS NULL)) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
        GROUP BY s.DivisionId, s.DistrictCode, vss.SectorId, vt.VTPId, s.SchoolManagementId;
		 
		IF(DataType = 'ByCount') THEN
			BEGIN  		             
                SELECT 1 AS Id, 'VT Count' AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.ReportedVT) AS ReportedVT  
				FROM VTReportingData vd;				
			END;
		ELSEIF(DataType = 'ByDivision') THEN
			BEGIN  				
                SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, d.DivisionName AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM VTReportingData vd
                LEFT JOIN Divisions d ON vd.DivisionId = d.DivisionId
				WHERE vd.DivisionId IS NOT NULL
				GROUP BY vd.DivisionId
                ORDER BY d.DivisionName;
			END;
		ELSEIF(DataType = 'ByDistrict') THEN
			BEGIN  			
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, d.DistrictName AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM VTReportingData vd
                LEFT JOIN Districts d ON vd.DistrictCode = d.DistrictCode
				WHERE vd.DistrictCode IS NOT NULL
				GROUP BY vd.DistrictCode
                ORDER BY d.DistrictName;
			END;		 
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, s.SectorName AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM VTReportingData vd
                LEFT JOIN Sectors s ON vd.SectorId = s.SectorId
				WHERE vd.SectorId IS NOT NULL
				GROUP BY vd.SectorId
                ORDER BY s.SectorName;				 
			END;	 
		ELSEIF(DataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, vtp.VTPShortName AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM VTReportingData vd
                LEFT JOIN VocationalTrainingProviders vtp ON vd.VTPId = vtp.VTPId
				WHERE vd.VTPId IS NOT NULL
				GROUP BY vd.VTPId
                ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(DataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY dvv.Name ASC) AS Id, dvv.Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM VTReportingData vd
                LEFT JOIN DataValues dvv ON vd.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
				WHERE vd.SchoolManagementId IS NOT NULL
				GROUP BY vd.SchoolManagementId
                ORDER BY dvv.Name;
			END;		
		END IF;   
     
		DROP TEMPORARY TABLE IF EXISTS VTReportingData;
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardVocationalTrainersCardDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardVocationalTrainersCardDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN 
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
  
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;			 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS TrainersData;
		
		CREATE TEMPORARY TABLE TrainersData
		SELECT DISTINCT dv.DivisionId, dv.DistrictId, dv.SectorId, dv.VTPId, dv.SchoolManagementId, dv.TotalVT, dv.PlacedVT, dv.ReportedVT  
        FROM DsTrainers dv	 
		WHERE (UserId IS NULL OR dv.VCId = @accountId)
			AND (AcademicYearId IS NULL OR (dv.AcademicYearId = AcademicYearId OR dv.AcademicYearId IS NULL)) 
			AND (DivisionId IS NULL OR dv.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR dv.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR dv.SectorId = SectorId)
			AND (JobRoleId IS NULL OR dv.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dv.VTPId = VTPId)
			AND (ClassId IS NULL OR dv.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR dv.SchoolManagementId = SchoolManagementId);
		 
		IF(DataType = 'ByCount') THEN
			BEGIN  		             
                SELECT 1 AS Id, 'VT Count' AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.PlacedVT) AS PlacedVT, SUM(vd.ReportedVT) AS ReportedVT  
				FROM TrainersData vd;				
			END;
		ELSEIF(DataType = 'ByDivision') THEN
			BEGIN  				
                SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, d.DivisionName AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.PlacedVT) AS PlacedVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM TrainersData vd
                LEFT JOIN Divisions d ON vd.DivisionId = d.DivisionId
				WHERE vd.DivisionId IS NOT NULL
				GROUP BY vd.DivisionId
                ORDER BY d.DivisionName;
			END;
		ELSEIF(DataType = 'ByDistrict') THEN
			BEGIN  			
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, d.DistrictName AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.PlacedVT) AS PlacedVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM TrainersData vd
                LEFT JOIN Districts d ON vd.DistrictId = d.DistrictCode
				WHERE vd.DistrictId IS NOT NULL
				GROUP BY vd.DistrictId
                ORDER BY d.DistrictName;
			END;		 
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, s.SectorName AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.PlacedVT) AS PlacedVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM TrainersData vd
                LEFT JOIN Sectors s ON vd.SectorId = s.SectorId
				WHERE vd.SectorId IS NOT NULL
				GROUP BY vd.SectorId
                ORDER BY s.SectorName;				 
			END;	 
		ELSEIF(DataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, vtp.VTPShortName AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.PlacedVT) AS PlacedVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM TrainersData vd
                LEFT JOIN VocationalTrainingProviders vtp ON vd.VTPId = vtp.VTPId
				WHERE vd.VTPId IS NOT NULL
				GROUP BY vd.VTPId
                ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(DataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY dvv.Name ASC) AS Id, dvv.Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.PlacedVT) AS PlacedVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM TrainersData vd
                LEFT JOIN DataValues dvv ON vd.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
				WHERE vd.SchoolManagementId IS NOT NULL
				GROUP BY vd.SchoolManagementId
                ORDER BY dvv.Name;
			END;		
		END IF;   
     
		DROP TEMPORARY TABLE IF EXISTS TrainersData;
	END;
       
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardVocationalTrainersCardDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetDashboardVocationalTrainersCardDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN 
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
  
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;			 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS TrainersData;
		
		CREATE TEMPORARY TABLE TrainersData
		SELECT DISTINCT dv.AcademicYearId, dv.DivisionId, dv.DistrictId, dv.SectorId, dv.VTPId, dv.VCId, dv.SchoolManagementId, dv.TotalVT, dv.PlacedVT, dv.ReportedVT  
        FROM DsTrainers dv	 
		WHERE (UserId IS NULL OR dv.VCId = @accountId)
			AND (AcademicYearId IS NULL OR dv.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR dv.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR dv.DistrictId IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR dv.SectorId = SectorId)
			AND (JobRoleId IS NULL OR dv.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dv.VTPId = VTPId)
			AND (ClassId IS NULL OR dv.ClassId = ClassId)            
			AND (SchoolManagementId IS NULL OR dv.SchoolManagementId = SchoolManagementId);
 
		IF(DataType = 'ByCount') THEN
			BEGIN  		             
                SELECT 1 AS Id, 'VT Count' AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.PlacedVT) AS PlacedVT, SUM(vd.ReportedVT) AS ReportedVT  
				FROM TrainersData vd;				
			END;
		ELSEIF(DataType = 'ByDivision') THEN
			BEGIN  				
                SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName ASC) AS Id, d.DivisionName AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.PlacedVT) AS PlacedVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM TrainersData vd
                LEFT JOIN Divisions d ON vd.DivisionId = d.DivisionId
				WHERE vd.DivisionId IS NOT NULL
				GROUP BY vd.DivisionId
                ORDER BY d.DivisionName;
			END;
		ELSEIF(DataType = 'ByDistrict') THEN
			BEGIN  			
				SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName ASC) AS Id, d.DistrictName AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.PlacedVT) AS PlacedVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM TrainersData vd
                LEFT JOIN Districts d ON vd.DistrictId = d.DistrictCode
				WHERE vd.DistrictId IS NOT NULL
				GROUP BY vd.DistrictId
                ORDER BY d.DistrictName;
			END;		 
		ELSEIF(DataType = 'BySector') THEN
			BEGIN  
				SELECT ROW_NUMBER() OVER (ORDER BY s.SectorName ASC) AS Id, s.SectorName AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.PlacedVT) AS PlacedVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM TrainersData vd
                LEFT JOIN Sectors s ON vd.SectorId = s.SectorId
				WHERE vd.SectorId IS NOT NULL
				GROUP BY vd.SectorId
                ORDER BY s.SectorName;				 
			END;	 
		ELSEIF(DataType = 'ByVTP') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName ASC) AS Id, vtp.VTPShortName AS Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.PlacedVT) AS PlacedVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM TrainersData vd
                LEFT JOIN VTPAcademicYearsMap vtpm ON vd.AcademicYearId = vtpm.AcademicYearId AND vd.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
                LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
				WHERE vd.VTPId IS NOT NULL
				GROUP BY vd.VTPId
                ORDER BY vtp.VTPShortName;
			END;
		ELSEIF(DataType = 'BySchoolManagement') THEN
			BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY dvv.Name ASC) AS Id, dvv.Name, SUM(vd.TotalVT) AS TotalVT, SUM(vd.PlacedVT) AS PlacedVT, SUM(vd.ReportedVT) AS ReportedVT
				FROM TrainersData vd
                LEFT JOIN DataValues dvv ON vd.SchoolManagementId = dvv.DataValueId AND dvv.DataTypeId = 'SchoolManagement'
				WHERE vd.SchoolManagementId IS NOT NULL
				GROUP BY vd.SchoolManagementId
                ORDER BY dvv.Name;
			END;		
		END IF;   
     
		DROP TEMPORARY TABLE IF EXISTS TrainersData;
	END;
       
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

	# CALL GetDashboardVocationalTrainersCardDataV2 ('ByCount', 'rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    # CALL GetDashboardVocationalTrainersCardDataV2 ('ByCount', 'vc.aisect@email.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardVTAttendanceChartData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetDashboardVTAttendanceChartData`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(100),
    IN DivisionId VARCHAR(100),
    IN DistrictCode VARCHAR(100),
    IN SectorId VARCHAR(100),
    IN JobRoleId VARCHAR(100),
    IN VTPId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
  
		DROP TEMPORARY TABLE IF EXISTS VTAttendanceData;
        		
        SELECT COUNT(DISTINCT vss.VTId) INTO @PlacedVT
		FROM VTSchoolSectors vss
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1			
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vtc.IsActive = 1
		LEFT JOIN VTDailyReporting vdr ON vss.VTId = vdr.VTId
		WHERE vss.IsActive = 1			
			AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId);		
         
		CREATE TEMPORARY TABLE VTAttendanceData
		SELECT s.DivisionId, s.DistrictCode, vss.SectorId, vt.VTPId,  
			DATE_FORMAT(CAST(ReportingDate AS DATE), "%Y/%m/01") AS ReportingMonth, COUNT(DISTINCT VTDailyReportingId) AS VTReportingCount
		FROM VTDailyReporting vdr
		INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1	
		INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vtc.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1			
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId 					        
		WHERE vdr.IsActive = 1 AND vdr.ReportType = '37'
			AND vdr.ReportingDate BETWEEN ay.StartMonth AND ay.EndMonth
			AND (UserId IS NULL OR vt.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR (vss.AcademicYearId = AcademicYearId)) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 
			AND (DistrictCode IS NULL OR s.DistrictCode = DistrictCode) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)			 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId) 
		GROUP BY s.DivisionId, s.DistrictCode, vss.SectorId, vt.VTPId, ReportingMonth;
		 
		IF(dataType = 'ByMonth') THEN
			BEGIN                 
				 SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					vta.ReportingMonth AS Name, 
					
					
					vta.ReportingCount AS Count,                    
					
					ROUND((((vta.ReportingCount/vta.TotalWorkingDays)*100)/@PlacedVT), 2) AS Percentage
				FROM (
					SELECT DATE_FORMAT(vad.ReportingMonth, "%b") AS ReportingMonth, dvm.DisplayOrder, 
						SUM(vad.VTReportingCount) AS ReportingCount,
						(DAY(LAST_DAY(vad.ReportingMonth)) - GetNoOfSunday(vad.ReportingMonth)) AS TotalWorkingDays
					FROM VTAttendanceData vad
                    INNER JOIN DataValues dvm ON DATE_FORMAT(vad.ReportingMonth, "%b") = dvm.Description AND dvm.DataTypeId = 'Months'
					GROUP BY ReportingMonth, dvm.DisplayOrder
                    ORDER BY dvm.DisplayOrder
				) AS vta                 
				CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
				GROUP BY vta.ReportingMonth, vta.ReportingCount, vta.TotalWorkingDays;                
				         
			END;
		ELSEIF(dataType = 'ByDivision') THEN
			BEGIN                
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					d.DivisionName AS Name, 
					
					
					AVG(vta.ReportingCount) AS Count,                    
					
					AVG(ROUND((((vta.ReportingCount/vta.TotalWorkingDays)*100)/@PlacedVT), 2)) AS Percentage
				FROM (
					SELECT DISTINCT vad.DivisionId, 
						SUM(vad.VTReportingCount) AS ReportingCount,
						(DAY(LAST_DAY(vad.ReportingMonth)) - GetNoOfSunday(vad.ReportingMonth)) AS TotalWorkingDays
					FROM VTAttendanceData vad
					GROUP BY vad.DivisionId, vad.ReportingMonth 
				) AS vta 
                INNER JOIN Divisions d ON vta.DivisionId = d.DivisionId
				CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
				GROUP BY d.DivisionName;
                                 
			END;
		ELSEIF(dataType = 'ByDistrict') THEN
			BEGIN       
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					d.DistrictName AS Name, 
					
					
					AVG(vta.ReportingCount) AS Count,                    
					
					AVG(ROUND((((vta.ReportingCount/vta.TotalWorkingDays)*100)/@PlacedVT), 2)) AS Percentage
				FROM (
					SELECT vad.DivisionId, vad.DistrictCode, SUM(vad.VTReportingCount) AS ReportingCount,
					(DAY(LAST_DAY(vad.ReportingMonth)) - GetNoOfSunday(vad.ReportingMonth)) AS TotalWorkingDays
					FROM VTAttendanceData vad
					GROUP BY vad.DivisionId, vad.DistrictCode, vad.ReportingMonth
				) AS vta 
                INNER JOIN Districts d ON vta.DivisionId = d.DivisionId AND vta.DistrictCode = d.DistrictCode
				CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
				GROUP BY d.DistrictName;
                   
			END;
		ELSEIF(dataType = 'BySector') THEN
			BEGIN  
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					s.SectorName AS Name, 
					
					
					AVG(vta.ReportingCount) AS Count,                    
					
					AVG(ROUND((((vta.ReportingCount/vta.TotalWorkingDays)*100)/@PlacedVT), 2)) AS Percentage
				FROM (
					SELECT vad.SectorId, SUM(vad.VTReportingCount) AS ReportingCount,
					(DAY(LAST_DAY(vad.ReportingMonth)) - GetNoOfSunday(vad.ReportingMonth)) AS TotalWorkingDays
					FROM VTAttendanceData vad
					GROUP BY vad.SectorId, vad.ReportingMonth
				) AS vta 
                INNER JOIN Sectors s ON vta.SectorId = s.SectorId
				CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
				GROUP BY s.SectorName;
                 
			END;		 
		ELSEIF(dataType = 'ByVTP') THEN
			BEGIN
				SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS Id, 
					vtp.VTPShortName AS Name, 
					
					
					AVG(vta.ReportingCount) AS Count,                    
					
					AVG(ROUND((((vta.ReportingCount/vta.TotalWorkingDays)*100)/@PlacedVT), 2)) AS Percentage
				FROM (
					SELECT vad.VTPId, SUM(vad.VTReportingCount) AS ReportingCount,
					(DAY(LAST_DAY(vad.ReportingMonth)) - GetNoOfSunday(vad.ReportingMonth)) AS TotalWorkingDays
					FROM VTAttendanceData vad
					GROUP BY vad.VTPId, vad.ReportingMonth
				) AS vta 
                INNER JOIN VocationalTrainingProviders vtp ON vta.VTPId = vtp.VTPId
				CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
				GROUP BY vtp.VTPShortName;
                 
			END;
		END IF;   
     
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	 
     
     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardVTAttendanceChartDataV1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardVTAttendanceChartDataV1`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
       
       DROP TABLE IF EXISTS TrainerAttendanceData;
       
       CREATE TEMPORARY TABLE TrainerAttendanceData
       SELECT DISTINCT dta.ReportingMonth, dta.VTPId, dta.VTId, s.DivisionId, s.DistrictCode, vss.SectorId, 
			COUNT(DISTINCT dta.VTId) AS TrainersReporting,   	
			dta.VTReporting AS VTWorkingDays, 
			dta.WorkingDays AS WorkingDays,
			(dta.WorkingDays - dta.Holiday - dta.OnLeave) AS VTReportingDays, 
			((dta.WorkingDays - dta.Holiday - dta.OnLeave) / dta.WorkingDays * 100) AS VTAttendance    
		FROM DsTrainerAttendances dta
		INNER JOIN VTSchoolSectors vss ON dta.VTSchoolSectorId = vss.VTSchoolSectorId
		INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId
		INNER JOIN VocationalTrainers vt ON dta.VTId = vt.VTId
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
		WHERE (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dta.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)			
									  
            AND (MonthId IS NULL OR MONTH(dta.ReportingMonth) = CAST(MonthId AS UNSIGNED))
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		GROUP BY dta.ReportingMonth, dta.VTPId, dta.VTId, s.DivisionId, s.DistrictCode, vss.SectorId;
		    
		IF(DataType = 'ByMonth') THEN
		BEGIN  			
			SELECT ROW_NUMBER() OVER (ORDER BY dvm.Description) AS Id,
				CONCAT(dvm.Description,' ',RIGHT(YEAR(vtr.ReportingMonth),2)) AS Name,
				CAST(IF(vtr.ReportingVT IS NOT NULL, vtr.ReportingVT, 0) AS SIGNED) AS Count,
                IF(vtr.VTAttendance IS NOT NULL, ROUND(vtr.VTAttendance, 2), 0) AS Percentage 
			FROM (
				SELECT ta.ReportingMonth, COUNT(ta.VTId) AS ReportingVT, AVG(ta.VTAttendance) AS VTAttendance
				FROM TrainerAttendanceData AS ta
				GROUP BY ta.ReportingMonth
			) AS vtr
            INNER JOIN DataValues dvm ON DATE_FORMAT(vtr.ReportingMonth, "%b") = dvm.Description AND dvm.DataTypeId = 'Months'
            GROUP BY ReportingMonth, dvm.DisplayOrder
			ORDER BY dvm.DisplayOrder;
		END;
		ELSEIF(DataType = 'ByDivision') THEN
		BEGIN          
			SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName) AS Id,
				d.DivisionName AS Name,
				CAST(IF(vtr.ReportingVT IS NOT NULL, vtr.ReportingVT, 0) AS SIGNED) AS Count,
                IF(vtr.VTAttendance IS NOT NULL, ROUND(vtr.VTAttendance, 2), 0) AS Percentage 
			FROM (
				SELECT ta.DivisionId, COUNT(ta.VTId) AS ReportingVT, AVG(ta.VTAttendance) AS VTAttendance
				FROM TrainerAttendanceData AS ta
				GROUP BY ta.DivisionId
			) AS vtr            
            INNER JOIN Divisions d ON vtr.DivisionId = d.DivisionId AND d.IsActive = 1
            GROUP BY vtr.DivisionId
			ORDER BY d.DivisionName;            
		END;
        ELSEIF(DataType = 'ByDistrict') THEN
		BEGIN  
			SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName) AS Id,
				d.DistrictName AS Name,
				CAST(IF(vtr.ReportingVT IS NOT NULL, vtr.ReportingVT, 0) AS SIGNED) AS Count,
                IF(vtr.VTAttendance IS NOT NULL, ROUND(vtr.VTAttendance, 2), 0) AS Percentage 
			FROM (
				SELECT ta.DistrictCode, COUNT(ta.VTId) AS ReportingVT, AVG(ta.VTAttendance) AS VTAttendance
				FROM TrainerAttendanceData AS ta
				GROUP BY ta.DistrictCode
			) AS vtr            
            INNER JOIN Districts d ON vtr.DistrictCode = d.DistrictCode AND d.IsActive = 1
            GROUP BY vtr.DistrictCode
			ORDER BY d.DistrictName;               
		END;
        ELSEIF(DataType = 'BySector') THEN
		BEGIN          
			SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName) AS Id,
				se.SectorName AS Name,				 
				CAST(IF(vtr.ReportingVT IS NOT NULL, vtr.ReportingVT, 0) AS SIGNED) AS Count,
                IF(vtr.VTAttendance IS NOT NULL, ROUND(vtr.VTAttendance, 2), 0) AS Percentage 
			FROM (
				SELECT ta.SectorId, COUNT(ta.VTId) AS ReportingVT, AVG(ta.VTAttendance) AS VTAttendance
				FROM TrainerAttendanceData AS ta
				GROUP BY ta.SectorId
			) AS vtr            
            INNER JOIN Sectors se ON vtr.SectorId = se.SectorId AND se.IsActive = 1
            GROUP BY vtr.SectorId
			ORDER BY se.SectorName;              
		END;
        ELSEIF(DataType = 'ByVTP') THEN
        BEGIN        
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName) AS Id,
				vtp.VTPShortName AS Name,
				CAST(IF(vtr.ReportingVT IS NOT NULL, vtr.ReportingVT, 0) AS SIGNED) AS Count,
                IF(vtr.VTAttendance IS NOT NULL, ROUND(vtr.VTAttendance, 2), 0) AS Percentage 
			FROM (
				SELECT ta.VTPId, COUNT(ta.VTId) AS ReportingVT, AVG(ta.VTAttendance) AS VTAttendance
				FROM TrainerAttendanceData AS ta
				GROUP BY ta.VTPId				
			) AS vtr            
            INNER JOIN VocationalTrainingProviders vtp ON vtr.VTPId = vtp.VTPId AND vtp.IsActive = 1
            GROUP BY vtr.VTPId
			ORDER BY vtp.VTPShortName;                
        END;
		END IF;   
        
        DROP TABLE IF EXISTS TrainerAttendanceData;
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboardVTAttendanceChartDataV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDashboardVTAttendanceChartDataV2`(
	IN DataType  VARCHAR(50), 
    IN UserId    VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
    IN DivisionId VARCHAR(36),
    IN DistrictCode VARCHAR(250),
    IN SectorId VARCHAR(36),
    IN JobRoleId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
    )
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictId TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15) );
        
    IF(DistrictCode IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictCode);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictId) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictId) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
       
       DROP TABLE IF EXISTS TrainerAttendanceData;
       
       CREATE TEMPORARY TABLE TrainerAttendanceData
       SELECT DISTINCT dta.ReportingMonth, dta.VTPId, dta.VTId, s.DivisionId, s.DistrictCode, vss.SectorId, 
			COUNT(DISTINCT dta.VTId) AS TrainersReporting,   	
			dta.VTReporting AS VTWorkingDays, 
			dta.WorkingDays AS WorkingDays,
			(dta.WorkingDays - dta.Holiday - dta.OnLeave) AS VTReportingDays, 
			((dta.WorkingDays - dta.Holiday - dta.OnLeave) / dta.WorkingDays * 100) AS VTAttendance    
		FROM DsTrainerAttendances dta
		INNER JOIN VTSchoolSectors vss ON dta.AcademicYearId = vss.AcademicYearId AND dta.VTSchoolSectorId = vss.VTSchoolSectorId
		INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId
        INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1    
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1    
		WHERE (UserId IS NULL OR vtm.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictCode IS NULL OR s.DistrictCode IN (SELECT DistrictId FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR dta.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)				 
            AND (MonthId IS NULL OR MONTH(dta.ReportingMonth) = CAST(MonthId AS UNSIGNED))
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		GROUP BY dta.ReportingMonth, dta.VTPId, dta.VTId, s.DivisionId, s.DistrictCode, vss.SectorId;
		    
		IF(DataType = 'ByMonth') THEN
		BEGIN  			
			SELECT ROW_NUMBER() OVER (ORDER BY dvm.Description) AS Id,
				CONCAT(dvm.Description,' ',RIGHT(YEAR(vtr.ReportingMonth),2)) AS Name,
				CAST(IF(vtr.ReportingVT IS NOT NULL, vtr.ReportingVT, 0) AS SIGNED) AS Count,
                IF(vtr.VTAttendance IS NOT NULL, ROUND(vtr.VTAttendance, 2), 0) AS Percentage 
			FROM (
				SELECT ta.ReportingMonth, COUNT(ta.VTId) AS ReportingVT, AVG(ta.VTAttendance) AS VTAttendance
				FROM TrainerAttendanceData AS ta
				GROUP BY ta.ReportingMonth
			) AS vtr
            INNER JOIN DataValues dvm ON DATE_FORMAT(vtr.ReportingMonth, "%b") = dvm.Description AND dvm.DataTypeId = 'Months'
            GROUP BY ReportingMonth, dvm.DisplayOrder
			ORDER BY dvm.DisplayOrder;
		END;
		ELSEIF(DataType = 'ByDivision') THEN
		BEGIN          
			SELECT ROW_NUMBER() OVER (ORDER BY d.DivisionName) AS Id,
				d.DivisionName AS Name,
				CAST(IF(vtr.ReportingVT IS NOT NULL, vtr.ReportingVT, 0) AS SIGNED) AS Count,
                IF(vtr.VTAttendance IS NOT NULL, ROUND(vtr.VTAttendance, 2), 0) AS Percentage 
			FROM (
				SELECT ta.DivisionId, COUNT(ta.VTId) AS ReportingVT, AVG(ta.VTAttendance) AS VTAttendance
				FROM TrainerAttendanceData AS ta
				GROUP BY ta.DivisionId
			) AS vtr            
            INNER JOIN Divisions d ON vtr.DivisionId = d.DivisionId AND d.IsActive = 1
            GROUP BY vtr.DivisionId
			ORDER BY d.DivisionName;            
		END;
        ELSEIF(DataType = 'ByDistrict') THEN
		BEGIN  
			SELECT ROW_NUMBER() OVER (ORDER BY d.DistrictName) AS Id,
				d.DistrictName AS Name,
				CAST(IF(vtr.ReportingVT IS NOT NULL, vtr.ReportingVT, 0) AS SIGNED) AS Count,
                IF(vtr.VTAttendance IS NOT NULL, ROUND(vtr.VTAttendance, 2), 0) AS Percentage 
			FROM (
				SELECT ta.DistrictCode, COUNT(ta.VTId) AS ReportingVT, AVG(ta.VTAttendance) AS VTAttendance
				FROM TrainerAttendanceData AS ta
				GROUP BY ta.DistrictCode
			) AS vtr            
            INNER JOIN Districts d ON vtr.DistrictCode = d.DistrictCode AND d.IsActive = 1
            GROUP BY vtr.DistrictCode
			ORDER BY d.DistrictName;               
		END;
        ELSEIF(DataType = 'BySector') THEN
		BEGIN          
			SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName) AS Id,
				se.SectorName AS Name,				 
				CAST(IF(vtr.ReportingVT IS NOT NULL, vtr.ReportingVT, 0) AS SIGNED) AS Count,
                IF(vtr.VTAttendance IS NOT NULL, ROUND(vtr.VTAttendance, 2), 0) AS Percentage 
			FROM (
				SELECT ta.SectorId, COUNT(ta.VTId) AS ReportingVT, AVG(ta.VTAttendance) AS VTAttendance
				FROM TrainerAttendanceData AS ta
				GROUP BY ta.SectorId
			) AS vtr            
            INNER JOIN Sectors se ON vtr.SectorId = se.SectorId AND se.IsActive = 1
            GROUP BY vtr.SectorId
			ORDER BY se.SectorName;              
		END;
        ELSEIF(DataType = 'ByVTP') THEN
        BEGIN        
			SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName) AS Id,
				vtp.VTPShortName AS Name,
				CAST(IF(vtr.ReportingVT IS NOT NULL, vtr.ReportingVT, 0) AS SIGNED) AS Count,
                IF(vtr.VTAttendance IS NOT NULL, ROUND(vtr.VTAttendance, 2), 0) AS Percentage 
			FROM (
				SELECT ta.VTPId, COUNT(ta.VTId) AS ReportingVT, AVG(ta.VTAttendance) AS VTAttendance
				FROM TrainerAttendanceData AS ta
				GROUP BY ta.VTPId				
			) AS vtr            
            INNER JOIN VocationalTrainingProviders vtp ON vtr.VTPId = vtp.VTPId AND vtp.IsActive = 1
            GROUP BY vtr.VTPId
			ORDER BY vtp.VTPShortName;                
        END;
		END IF;   
        
        DROP TABLE IF EXISTS TrainerAttendanceData;
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
	
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDataTypesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetDataTypesByCriteria`(

	IN name  VARCHAR(100),

	IN charBy VARCHAR(5),

	IN pageIndex INT,

	IN pageSize INT

	)
BEGIN

	DECLARE offSetValue INT DEFAULT 0;

	SET offSetValue = (pageIndex-1) * pageSize;



	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;



	SELECT d.DataTypeId, d.Name, d.Description, d.IsActive
	FROM DataTypes d

	WHERE (name IS NULL OR (d.Name LIKE CONCAT(name, '%')))

		AND ((charBy IS NULL OR charBy = 'All') OR (d.Name LIKE CONCAT(charBy, '%')))

	ORDER BY d.Name

	LIMIT pageSize

	OFFSET offSetValue;



    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;



    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDataValuesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetDataValuesByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT dv.DataValueId, dt.Description AS DataTypeName, dvp.Name AS ParentName, dv.Code, dv.Name, dv.Description, dv.DisplayOrder, dv.IsActive
	FROM DataValues dv
    LEFT JOIN DataTypes dt ON dv.DataTypeId = dt.Name
    LEFT JOIN DataValues dvp ON dv.ParentId = dvp.DataValueId AND dv.ParentId IS NOT NULL
	WHERE (name IS NULL OR (dv.DataTypeId LIKE CONCAT(name, '%') OR dv.Name LIKE CONCAT(name, '%')))		
	ORDER BY dt.Name, dvp.Name, dv.DisplayOrder
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	# CALL GetDataValuesByCriteria ('VCWorkType', NULL, 1, 25);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDistrictsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetDistrictsByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;    
	SET offSetValue = ((pageIndex + 1) - 1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
    SELECT c.CountryName, d.StateCode, s.StateName, dv.DivisionName, d.DistrictCode, d.DistrictName, d.Description, d.IsActive, COUNT(*) OVER() AS TotalRows
	FROM Districts d
	LEFT JOIN Divisions dv ON d.DivisionId = dv.DivisionId
    LEFT JOIN States s ON d.StateCode = s.StateCode
	LEFT JOIN Countries c ON s.CountryCode = c.CountryCode
	WHERE d.StateCode = 'MH' AND (name IS NULL OR (d.DistrictName LIKE CONCAT('%', name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (d.DistrictName LIKE CONCAT(charBy, '%')))
	ORDER BY d.DistrictName
	LIMIT offSetValue, pageSize;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDivisionsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetDivisionsByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT d.DivisionId, s.StateName, d.DivisionName, d.Description, d.IsActive
	FROM Divisions d
    LEFT JOIN States s ON d.StateCode = s.StateCode
	WHERE d.StateCode = 'MH' AND (name IS NULL OR (d.DivisionName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (d.DivisionName LIKE CONCAT(charBy, '%')))
	ORDER BY d.DivisionName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDrillDownChart1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetDrillDownChart1`(
	IN DataType  VARCHAR(50), 
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
    
	SELECT r.Code INTO @roleName
	FROM AccountRoles ar 
	INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
	INNER JOIN Roles r ON ar.RoleId = r.RoleId
	WHERE a.LoginId = userId;
    
	IF(@roleName <> 'VC') THEN				
		SET UserId = NULL;		 
	END IF;

 	SET @rowIndex = 0;
		DROP TEMPORARY TABLE IF EXISTS DrillDownChart;

		CREATE TEMPORARY TABLE DrillDownChart
	SELECT distinct
s.SectorName,
vtp.VTPShortName VTPName,
svts.SchoolVTPSectorId ImplementedSchools,
jr.JobRoleId JobRoleUnits,
scs.ClassId Classes,
cm.CMStatus
FROM 
SchoolVTPSectors svts
LEFT JOIN VocationalTrainingProviders vtp ON svts.VTPId=vtp.VTPId and vtp.IsActive=1
LEFT JOIN Sectors s on s.SectorId=svts.SectorId and s.IsActive=1
LEFT JOIN VocationalCoordinators vc ON vtp.VTPId = vc.VTPId and vc.IsActive=1
LEFT JOIN VocationalTrainers vt ON vc.VCId = vt.VCId and vtp.VTPId=vt.VTPId and vt.IsActive=1
LEFT JOIN VTSchoolSectors vss ON vt.VTId = vss.VTId and svts.AcademicYearId=vss.AcademicYearId and svts.SchoolId=vss.SchoolId and svts.SectorId=vss.SectorId and vss.IsActive=1
LEFT JOIN Schools sch on vss.SchoolId=sch.SchoolId
LEFT JOIN Divisions d on sch.DivisionId=d.DivisionId
LEFT JOIN VTClasses vtc ON vtc.VTId = vt.VTId
LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId and jr.IsActive=1
LEFT JOIN StudentClasses sc ON vss.AcademicYearId = sc.AcademicYearId AND vss.VTId = sc.VTId AND vss.SchoolId = sc.SchoolId and sc.IsActive=1
LEFT JOIN SchoolClasses scs ON sc.ClassId = scs.ClassId and scs.IsActive=1
LEFT JOIN CourseMaterials cm on sc.ClassId=cm.ClassId and cm.IsActive=1
where svts.IsActive=1 and (UserId IS NULL OR vc.EmailId = UserId)
    AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
    AND (DivisionId IS NULL OR d.DivisionId = DivisionId)
    AND (SectorId IS NULL OR s.SectorId = SectorId)
    AND (JobRoleId IS NULL OR jr.JobRoleId = JobRoleId)
    AND (VTPId IS NULL OR vtp.VTPId = VTPId)
	AND (SchoolManagementId IS NULL OR sch.SchoolManagementId = SchoolManagementId);

IF(dataType = 'BySector') THEN
			BEGIN  
				SELECT 
					SectorName,
					SUM(IF(ISNULL(ImplementedSchools),0,1)) ImplementedSchools,
					SUM(IF(ISNULL(JobRoleUnits),0,1)) JobRoleUnits,
					SUM(IF(ISNULL(Classes),0,1)) Classes,
					SUM(IF(CMStatus='Yes',1,0)) ClassesWithCourseMaterial,
					SUM(IF(CMStatus='No',1,0)) ClassesWithoutCourseMaterial
				FROM 
					DrillDownChart dc
				GROUP BY
					SectorName;
			END;
	ELSEIF (dataType = 'ByVTP') THEN
		BEGIN
			SELECT
				VTPName,
				SUM(IF(ISNULL(ImplementedSchools),0,1)) ImplementedSchools,
                SUM(IF(ISNULL(JobRoleUnits),0,1)) JobRoleUnits,
                SUM(IF(ISNULL(Classes),0,1)) Classes,
                SUM(IF(CMStatus='Yes',1,0)) ClassesWithCourseMaterial,
                SUM(IF(CMStatus='No',1,0)) ClassesWithoutCourseMaterial
			FROM 
					DrillDownChart dc
				GROUP BY
					VTPName;
        END;
	END IF;

	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDRPDailyReportingsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetDRPDailyReportingsByCriteria`(
	IN userId  VARCHAR(36),
    IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
    SELECT DISTINCT v.DRPDailyReportingId, a.UserName AS DRPName, v.ReportDate, dvr.Name AS ReportType,	GROUP_CONCAT(wdv.Name) AS WorkTypes 
													 
	FROM DRPDailyReporting v
    LEFT JOIN Accounts a ON v.DRPId = a.AccountId
    LEFT JOIN DataValues dvr ON v.ReportType = dvr.DataValueId AND dvr.DataTypeId = 'DRPReportType'
    LEFT JOIN DRPRWorkingDayTypes vwt ON v.DRPDailyReportingId = vwt.DRPDailyReportingId 
    LEFT OUTER JOIN DataValues wdv ON vwt.WorkingTypeId = wdv.DataValueId AND wdv.DataTypeId = 'DRPWorkType'
	WHERE v.DRPId = userId 
		AND (name IS NULL OR (a.UserName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (a.UserName LIKE CONCAT(charBy, '%')))
	GROUP BY v.DRPDailyReportingId
    ORDER BY a.UserName, v.ReportDate DESC
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetEmployeesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetEmployeesByCriteria`(

	IN name  VARCHAR(100),

	IN charBy VARCHAR(5),

	IN pageIndex INT,

	IN pageSize INT

	)
BEGIN

	DECLARE offSetValue INT DEFAULT 0;

	SET offSetValue = (pageIndex-1) * pageSize;



	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;



	SELECT e.AccountId, e.EmployeeCode, e.FirstName, e.MiddleName, e.LastName, e.Gender, e.DateOfBirth, e.Department, e.Telephone, e.Mobile, e.EmailId, e.IsActive
	FROM Employees e

	WHERE (name IS NULL OR (e.FirstName LIKE CONCAT(name, '%')))

		AND ((charBy IS NULL OR charBy = 'All') OR (e.FirstName LIKE CONCAT(charBy, '%')))

	ORDER BY e.FirstName

	LIMIT pageSize

	OFFSET offSetValue;



    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;



    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetEmployersByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetEmployersByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT e.EmployerId, s.StateName, d.DivisionName, ds.DistrictName, e.BlockName, e.BusinessType, e.EmployeeCount, e.Outlets, e.IsActive
	FROM Employers e
    INNER JOIN States s ON e.StateCode = s.StateCode
    INNER JOIN Divisions d ON e.DivisionId = d.DivisionId
    INNER JOIN Districts ds ON e.StateCode = ds.StateCode AND e.DistrictCode = ds.DistrictCode
	WHERE (name IS NULL OR (e.BlockName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (e.BlockName LIKE CONCAT(charBy, '%')))
	ORDER BY e.BlockName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetErrorLogsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetErrorLogsByCriteria`(

	IN name  VARCHAR(100),

	IN charBy VARCHAR(5),

	IN pageIndex INT,

	IN pageSize INT

	)
BEGIN

	DECLARE offSetValue INT DEFAULT 0;

	SET offSetValue = (pageIndex-1) * pageSize;



	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;



	SELECT e.ErrorLogId, e.ModuleName, e.ErrorCode, e.ErrorSeverity, e.ErrorState, e.ErrorProcedure, e.ErrorLine, e.ErrorTime, e.ErrorType, e.ErrorLocation, e.ErrorMessage, e.StackTrace, e.ErrorStatus, e.IsResolved, e.IsActive
	FROM ErrorLogs e

	WHERE (name IS NULL OR (e.ModuleName LIKE CONCAT(name, '%')))

		AND ((charBy IS NULL OR charBy = 'All') OR (e.ModuleName LIKE CONCAT(charBy, '%')))

	ORDER BY e.ModuleName

	LIMIT pageSize

	OFFSET offSetValue;



    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;



    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetExitSurveyConductedReports` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetExitSurveyConductedReports`(
	IN AcademicYearId VARCHAR(100)
)
BEGIN	
	SELECT ay.YearName INTO @YearName FROM AcademicYears ay WHERE ay.AcademicYearId = AcademicYearId;
    
	IF(@AcademicYear = '2020-2021') THEN
	BEGIN
		SELECT st.ExitStudentId,
			st.StudentFullName,
			st.FatherName,
			st.MotherName,
			st.JobRole,
			st.StudentUniqueId,
			st.NameOfSchool,
			st.UdiseCode,
			st.District,
			st.Class,
			st.Gender,
			st.DOB,
			st.Category,
			st.Sector,
			st.VTPId,
			st.VTPName,
			st.VTId,
			st.VTName,
			st.VTMobile,
			st.VCId,
			st.VCName,
			ex.DateOfIntv,
			ex.CityOfResidence,
			ex.DistrictOfResidence,
			ex.BlockOfResidence,
			ex.PinCode,
			ex.StudentMobileNo,
			ex.ParentMobileNo,
			ex.ParentName,
			ex.DoneInternship,
			ex.CurrentlyEmployed,
			ex.DetailsOfEmployment,
			dvf.Name AS IsFullTime,
			dvse.Name AS SectorsOfEmployment,
			ex.IsRelevantToVocCourse,
			ex.WillContHigherStudies,
			dvw.Name AS WillBeFullTime,
			dvcp.Name AS CourseToPursue,
			dved.Name AS StreamOfEducation,
			ex.WillContVocEdu,
			dvrc.Name AS ReasonsNOTToContinue,
			ex.OtherReasons,
			ex.WillContSameSector,
			ex.DoesFieldStudyHveVocSub,
			ex.HveRegisteredOnEmploymentPortal,
			ex.WillingToGetRegisteredOnNAPS,
			ex.InterestedInSkillDevelopmentPgms,
			ex.SectorsInterestedIn,
			ex.InterestedInJobOrSelfEmployment,
			ex.TopicsOfInterest,
			dvl.Name AS AnyPreferredLocForEmployment,
			ex.PreferredLocations,
			ex.CanSendTheUpdates,
			ex.WantToKnowAboutOpportunities,
			ex.CollectedEmailId,
			ex.SurveyCompletedByStudentORParent,
			ex.StudentWANo,
			ex.Religion,
			ex.WillingToContSkillTraining,
			ex.CourseForTraining,
			ex.CourseNameIfOther,
			ex.SkillTrainingType,
			ex.SectorForTraining,
			ex.OtherSectorsIfAny,
			ex.WantToKnowAbtSkillsUnivByGvt,
			ex.WantToKnowAbtPgmsForJobsNContEdu,
			ex.WantToPursueAnySkillTraining,
			ex.TrainingType,
			ex.SectorForSkillTraining,
			ex.OthersIfAny,
			ex.SeatNo,
			ex.WillingToGoForTechHighEdu,
            ex.CanLahiGetInTouch,
			ex.Remark,
			COUNT(*) OVER() AS TotalRows
		FROM ExitSurveyDetails ex
		LEFT JOIN StudentsForExitForm st ON ex.ExitStudentId = st.ExitStudentId    
        LEFT JOIN SchoolClasses sc ON st.Class = sc.Name
		LEFT JOIN DataValues dvf ON ex.IsFullTime = dvf.DataValueId AND dvf.DataTypeId='NatureOfWork'
		LEFT JOIN DataValues dvw ON ex.WillBeFullTime = dvw.DataValueId AND dvw.DataTypeId='NatureOfWork'
		LEFT JOIN DataValues dvse ON ex.SectorsOfEmployment = dvse.DataValueId AND dvse.DataTypeId='SectorsOfEmployment'
		LEFT JOIN DataValues dvcp ON ex.CourseToPursue = dvcp.DataValueId AND dvcp.DataTypeId IN ('CourseToBePursueFor10th', 'CourseToBePursueFor12th')
		LEFT JOIN DataValues dved ON ex.StreamOfEducation = dved.DataValueId AND dved.DataTypeId='StreamOfEducation'
		LEFT JOIN DataValues dvrc ON ex.ReasonsNOTToContinue = dvrc.DataValueId AND dvrc.DataTypeId='VENotContinuingReasons'
		LEFT JOIN DataValues dvl ON ex.AnyPreferredLocForEmployment = dvl.DataValueId AND dvl.DataTypeId='PreferredLocationForEmployment' 
		WHERE ex.ExitStudentId IS NOT NULL 
			AND (AcademicYearId IS NULL OR st.AcademicYear = @YearName)
			AND sc.ClassId IN ('3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', 'e0302e36-a8a7-49a0-b621-21d48986c43e')
		ORDER BY st.NameOfSchool, st.VTId, st.Class, st.StudentFullName;
	END;
	ELSE 
	BEGIN 
	SELECT *, COUNT(*) OVER() AS TotalRows FROM (
    (SELECT st.ExitStudentId,
		st.StudentFullName,
		st.FatherName,
        st.MotherName,
		st.JobRole,
		st.StudentUniqueId,
		st.NameOfSchool,
		st.UdiseCode,
		st.District,
		st.Class,
		st.Gender,
		st.DOB,
		st.Category,
		st.Sector,
		NULL AS VTPId,
		st.VTPName,
		st.VTId,
		st.VTName,
        st.VTMobile,
		st.VCId,
		st.VCName,
		ex.DateOfIntv,
		ex.CityOfResidence,
		ex.DistrictOfResidence,
		ex.BlockOfResidence,
		ex.PinCode,
		ex.StudentMobileNo,
		ex.ParentMobileNo,
		ex.ParentName,
		ex.DoneInternship,
		ex.CurrentlyEmployed,
		ex.DetailsOfEmployment,
		dvf.Name AS IsFullTime,
		dvse.Name AS SectorsOfEmployment,
		ex.IsRelevantToVocCourse,
		ex.WillContHigherStudies,
		dvw.Name AS WillBeFullTime,
		dvcp.Name AS CourseToPursue,
		dved.Name AS StreamOfEducation,
		ex.WillContVocEdu,
		dvrc.Name AS ReasonsNOTToContinue,
		ex.OtherReasons,
		ex.WillContSameSector,
		ex.DoesFieldStudyHveVocSub,
		ex.HveRegisteredOnEmploymentPortal,
		ex.WillingToGetRegisteredOnNAPS,
		ex.InterestedInSkillDevelopmentPgms,
		ex.SectorsInterestedIn,
		ex.InterestedInJobOrSelfEmployment,
		ex.TopicsOfInterest,
		dvl.Name AS AnyPreferredLocForEmployment,
		ex.PreferredLocations,
		ex.CanSendTheUpdates,
        ex.WantToKnowAboutOpportunities,
        ex.CollectedEmailId,
        ex.SurveyCompletedByStudentORParent,
        ex.StudentWANo,
        ex.Religion,
        ex.WillingToContSkillTraining,
        ex.CourseForTraining,
        ex.CourseNameIfOther,
        ex.SkillTrainingType,
        ex.SectorForTraining,
        ex.OtherSectorsIfAny,
        ex.WantToKnowAbtSkillsUnivByGvt,
        ex.WantToKnowAbtPgmsForJobsNContEdu,
		ex.WantToPursueAnySkillTraining,
        ex.TrainingType,
        ex.SectorForSkillTraining,
        ex.OthersIfAny,
		ex.SeatNo,
        ex.WillingToGoForTechHighEdu,
        ex.CanLahiGetInTouch,
		ex.Remark        
	FROM (SELECT 
			sc.StudentId AS ExitStudentId, 
            sc.FullName AS StudentFullName, 
            scd.FatherName, 
            scd.MotherName,
            scd.StudentRollNumber AS StudentUniqueId,
            s.SchoolName AS NameOfSchool, 
            s.Udise AS UdiseCode, 
            s.DistrictCode AS District,
            scl.Name AS Class, 
            dv.Name AS Gender,
            DATE(scd.DateOfBirth) AS DOB, 
            dv1.Name AS Category,
            sec.SectorName AS Sector,
            jr.JobRoleName AS JobRole,
            sc.VTId, 
            vt.FullName AS VTName, 
            vt.Mobile AS VTMobile,
            vt.VCId,
            vc.FullName AS VCName, 
            vt.VTPId, 
            vtp.VTPName
		FROM StudentClasses sc 
        INNER JOIN VTClassStudents vcs ON sc.StudentId = vcs.StudentId
        INNER JOIN AcademicYears ay ON sc.AcademicYearId = ay.AcademicYearId		
		INNER JOIN Schools s ON sc.SchoolId = s.SchoolId 
		INNER JOIN DataValues dv ON sc.Gender = dv.DataValueId AND dv.DataTypeId='StudentGender' 
		INNER JOIN SchoolClasses scl ON sc.ClassId = scl.ClassId  
        LEFT JOIN VTSchoolSectors vss ON sc.VTId = vss.VTId AND sc.SchoolId = vss.SchoolId AND sc.AcademicYearId = vss.AcademicYearId and vss.IsActive =1
		LEFT JOIN JobRoles jr ON vss.JobRoleId = jr.JobRoleId 
		LEFT JOIN Sectors sec ON vss.SectorId = sec.SectorId  
        LEFT JOIN StudentClassDetails scd ON sc.StudentId = scd.StudentId 
        LEFT JOIN DataValues dv1 ON scd.SocialCategory = dv1.DataValueId AND dv1.DataTypeId='SocialCategory' 
		LEFT JOIN VocationalTrainers vt ON vss.VTId = vt.VTId 
		LEFT JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId 
		LEFT JOIN VocationalTrainingProviders vtp ON vt.VTPId = vtp.VTPId
		WHERE sc.IsActive = 1 
			AND (AcademicYearId IS NULL OR ay.YearName = @YearName)		
			AND sc.ClassId IN ('3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', 'e0302e36-a8a7-49a0-b621-21d48986c43e')
		ORDER BY sc.FullName
	) st
	LEFT JOIN ExitSurveyDetails ex ON st.ExitStudentId = ex.ExitStudentId
	LEFT JOIN DataValues dvf ON ex.IsFullTime = dvf.DataValueId AND dvf.DataTypeId='NatureOfWork'
    LEFT JOIN DataValues dvw ON ex.WillBeFullTime = dvw.DataValueId AND dvw.DataTypeId='NatureOfWork'
    LEFT JOIN DataValues dvse ON ex.SectorsOfEmployment = dvse.DataValueId AND dvse.DataTypeId='SectorsOfEmployment'
    LEFT JOIN DataValues dvcp ON ex.CourseToPursue = dvcp.DataValueId AND dvcp.DataTypeId IN ('CourseToBePursueFor10th', 'CourseToBePursueFor12th')
    LEFT JOIN DataValues dved ON ex.StreamOfEducation = dved.DataValueId AND dved.DataTypeId='StreamOfEducation'
    LEFT JOIN DataValues dvrc ON ex.ReasonsNOTToContinue = dvrc.DataValueId AND dvrc.DataTypeId='VENotContinuingReasons'
    LEFT JOIN DataValues dvl ON ex.AnyPreferredLocForEmployment = dvl.DataValueId AND dvl.DataTypeId='PreferredLocationForEmployment' 	
    WHERE ex.ExitStudentId IS NOT NULL
    ORDER BY st.NameOfSchool, st.VTId, st.Class, st.StudentFullName
    )
	UNION 
	(SELECT st.ExitStudentId,
		st.StudentFullName,
		st.FatherName,
        st.MotherName,
		st.JobRole,
		st.StudentUniqueId,
		st.NameOfSchool,
		st.UdiseCode,
		st.District,
		st.Class,
		st.Gender,
		st.DOB,
		st.Category,
		st.Sector,
		st.VTPId,
		st.VTPName,
		st.VTId,
		st.VTName,
        st.VTMobile,
		st.VCId,
		st.VCName,
		ex.DateOfIntv,
		ex.CityOfResidence,
		ex.DistrictOfResidence,
		ex.BlockOfResidence,
		ex.PinCode,
		ex.StudentMobileNo,
		ex.ParentMobileNo,
		ex.ParentName,
		ex.DoneInternship,
		ex.CurrentlyEmployed,
		ex.DetailsOfEmployment,
		dvf.Name AS IsFullTime,
		dvse.Name AS SectorsOfEmployment,
		ex.IsRelevantToVocCourse,
		ex.WillContHigherStudies,
		dvw.Name AS WillBeFullTime,
		dvcp.Name AS CourseToPursue,
		dved.Name AS StreamOfEducation,
		ex.WillContVocEdu,
		dvrc.Name AS ReasonsNOTToContinue,
		ex.OtherReasons,
		ex.WillContSameSector,
		ex.DoesFieldStudyHveVocSub,
		ex.HveRegisteredOnEmploymentPortal,
		ex.WillingToGetRegisteredOnNAPS,
		ex.InterestedInSkillDevelopmentPgms,
		ex.SectorsInterestedIn,
		ex.InterestedInJobOrSelfEmployment,
		ex.TopicsOfInterest,
		dvl.Name AS AnyPreferredLocForEmployment,
		ex.PreferredLocations,
		ex.CanSendTheUpdates,
        ex.WantToKnowAboutOpportunities,
        ex.CollectedEmailId,
        ex.SurveyCompletedByStudentORParent,
        ex.StudentWANo,
        ex.Religion,
        ex.WillingToContSkillTraining,
        ex.CourseForTraining,
        ex.CourseNameIfOther,
        ex.SkillTrainingType,
        ex.SectorForTraining,
        ex.OtherSectorsIfAny,
        ex.WantToKnowAbtSkillsUnivByGvt,
        ex.WantToKnowAbtPgmsForJobsNContEdu,
        ex.WantToPursueAnySkillTraining,
        ex.TrainingType,
        ex.SectorForSkillTraining,
        ex.OthersIfAny,
		ex.SeatNo,
        ex.WillingToGoForTechHighEdu,
        ex.CanLahiGetInTouch,
		ex.Remark        
	FROM ExitSurveyDetails ex
	LEFT JOIN StudentsForExitForm st ON st.ExitStudentId = ex.ExitStudentId    
    LEFT JOIN SchoolClasses sc ON st.Class = sc.Name
    LEFT JOIN DataValues dvf ON ex.IsFullTime = dvf.DataValueId AND dvf.DataTypeId='NatureOfWork'
    LEFT JOIN DataValues dvw ON ex.WillBeFullTime = dvw.DataValueId AND dvw.DataTypeId='NatureOfWork'
    LEFT JOIN DataValues dvse ON ex.SectorsOfEmployment = dvse.DataValueId AND dvse.DataTypeId='SectorsOfEmployment'
    LEFT JOIN DataValues dvcp ON ex.CourseToPursue = dvcp.DataValueId AND dvcp.DataTypeId IN ('CourseToBePursueFor10th', 'CourseToBePursueFor12th')
    LEFT JOIN DataValues dved ON ex.StreamOfEducation = dved.DataValueId AND dved.DataTypeId='StreamOfEducation'
    LEFT JOIN DataValues dvrc ON ex.ReasonsNOTToContinue = dvrc.DataValueId AND dvrc.DataTypeId='VENotContinuingReasons'
    LEFT JOIN DataValues dvl ON ex.AnyPreferredLocForEmployment = dvl.DataValueId AND dvl.DataTypeId='PreferredLocationForEmployment'    
	WHERE ex.ExitStudentId IS NOT NULL 
		AND (AcademicYearId IS NULL OR st.AcademicYear = @YearName)		
		AND sc.ClassId IN ('3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', 'e0302e36-a8a7-49a0-b621-21d48986c43e')
	ORDER BY st.NameOfSchool, st.VTId, st.Class, st.StudentFullName
	)
    ) a 
    ORDER BY a.NameOfSchool, a.VTId, a.Class, a.StudentFullName;
	END;
    
	END IF;

	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetExitSurveyReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetExitSurveyReport`(
	IN UserType  VARCHAR(30),	
	IN UserId  VARCHAR(100),
	IN AcademicYearId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN StudentId VARCHAR(100),
    IN PageIndex INT,
	IN PageSize INT
)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;    
	SET offSetValue = ((PageIndex + 1) - 1) * PageSize;
 
	SELECT ay.YearName INTO @YearName FROM AcademicYears ay WHERE ay.AcademicYearId = AcademicYearId;
    SELECT sc.Name INTO @ClassName FROM SchoolClasses sc WHERE sc.ClassId = ClassId;
    
	IF(@AcademicYear = '2020-2021') THEN
	BEGIN
		SELECT DISTINCT st.ExitStudentId,
			st.StudentFullName,
			st.FatherName,
			st.MotherName,
			st.JobRole,
			st.StudentUniqueId,
			st.NameOfSchool,
			st.UdiseCode,
			d.DistrictName AS District,
			st.Class,
			st.Gender,
			st.DOB,
			st.Category,
			st.Sector,
			st.VTPId,
			st.VTPName,
			st.VTId,
			st.VTName,
			st.VTMobile,
			st.VCId,
			st.VCName,
			ex.DateOfIntv,
			ex.CityOfResidence,
			ex.DistrictOfResidence,
			ex.BlockOfResidence,
			ex.PinCode,
			ex.StudentMobileNo,
			ex.ParentMobileNo,
			ex.ParentName,
			ex.DoneInternship,
			ex.CurrentlyEmployed,
			ex.DetailsOfEmployment,
			dvf.Name AS IsFullTime,
			dvse.Name AS SectorsOfEmployment,
			ex.IsRelevantToVocCourse,
			ex.WillContHigherStudies,
			dvw.Name AS WillBeFullTime,
			dvcp.Name AS CourseToPursue,
			dved.Name AS StreamOfEducation,
			ex.WillContVocEdu,
			dvrc.Name AS ReasonsNOTToContinue,
			ex.OtherReasons,
			ex.WillContSameSector,
			ex.DoesFieldStudyHveVocSub,
			ex.HveRegisteredOnEmploymentPortal,
			ex.WillingToGetRegisteredOnNAPS,
			ex.InterestedInSkillDevelopmentPgms,
			ex.SectorsInterestedIn,
			CASE WHEN (ex.InterestedInJobOrSelfEmployment = 1) THEN 'Yes' ELSE 'No' END AS InterestedInJobOrSelfEmployment,
			ex.TopicsOfInterest,
			dvl.Name AS AnyPreferredLocForEmployment,
			ex.PreferredLocations,
			ex.CanSendTheUpdates,
			ex.WantToKnowAboutOpportunities,
			ex.CollectedEmailId,
			ex.SurveyCompletedByStudentORParent,
			ex.StudentWANo,
			ex.Religion,
			ex.WillingToContSkillTraining,
			ex.CourseForTraining,
			ex.CourseNameIfOther,
			dvt.Name AS SkillTrainingType,
			ex.SectorForTraining,
			ex.OtherSectorsIfAny,
			ex.WantToKnowAbtSkillsUnivByGvt,
			ex.WantToKnowAbtPgmsForJobsNContEdu,
			ex.WantToPursueAnySkillTraining,
			dvt.Name AS TrainingType,
			ex.SectorForSkillTraining,
			ex.OthersIfAny,
			ex.SeatNo,
			ex.WillingToGoForTechHighEdu,
            ex.CanLahiGetInTouch,
			ex.Remark,
			COUNT(*) OVER() AS TotalRows
		FROM StudentsForExitForm st		
		LEFT JOIN ExitSurveyDetails ex ON st.ExitStudentId = ex.ExitStudentId    
        LEFT JOIN Districts d ON st.District = d.DistrictCode
		LEFT JOIN DataValues dvf ON ex.IsFullTime = dvf.DataValueId AND dvf.DataTypeId='NatureOfWork'
		LEFT JOIN DataValues dvw ON ex.WillBeFullTime = dvw.DataValueId AND dvw.DataTypeId='NatureOfWork'
		LEFT JOIN DataValues dvt ON ex.TrainingType = dvt.DataValueId AND dvt.DataTypeId='NatureOfWork'
        LEFT JOIN DataValues dvst ON ex.SkillTrainingType = dvst.DataValueId AND dvst.DataTypeId='NatureOfWork'
		LEFT JOIN DataValues dvse ON ex.SectorsOfEmployment = dvse.DataValueId AND dvse.DataTypeId='SectorsOfEmployment'
		LEFT JOIN DataValues dvcp ON ex.CourseToPursue = dvcp.DataValueId AND dvcp.DataTypeId IN ('CourseToBePursueFor10th', 'CourseToBePursueFor12th')
		LEFT JOIN DataValues dved ON ex.StreamOfEducation = dved.DataValueId AND dved.DataTypeId='StreamOfEducation'
		LEFT JOIN DataValues dvrc ON ex.ReasonsNOTToContinue = dvrc.DataValueId AND dvrc.DataTypeId='VENotContinuingReasons'
		LEFT JOIN DataValues dvl ON ex.AnyPreferredLocForEmployment = dvl.DataValueId AND dvl.DataTypeId='PreferredLocationForEmployment' 
		WHERE ((UserType = 'VT' AND st.VTId = UserId) OR (UserType = 'VC' AND st.VCId = UserId) OR (UserType = 'PMU')) 
			AND (AcademicYearId IS NULL OR st.AcademicYear = @YearName)
			AND (ClassId IS NULL OR st.Class = @ClassName)
            
		ORDER BY st.NameOfSchool, st.VTId, st.Class, st.StudentFullName
		LIMIT offSetValue, PageSize;
	END;
	ELSE 
	BEGIN 
	SELECT *, COUNT(*) OVER() AS TotalRows FROM (
    (SELECT DISTINCT st.ExitStudentId,
		st.StudentFullName,
		st.FatherName,
        st.MotherName,
		st.JobRole,
		st.StudentUniqueId,
		st.NameOfSchool,
		st.UdiseCode,
		d.DistrictName AS District,
		st.Class,
		st.Gender,
		st.DOB,
		st.Category,
		st.Sector,
		NULL AS VTPId,
		st.VTPName,
		st.VTId,
		st.VTName,
        st.VTMobile,
		st.VCId,
		st.VCName,
		ex.DateOfIntv,
		ex.CityOfResidence,
		ex.DistrictOfResidence,
		ex.BlockOfResidence,
		ex.PinCode,
		ex.StudentMobileNo,
		ex.ParentMobileNo,
		ex.ParentName,
		ex.DoneInternship,
		ex.CurrentlyEmployed,
		ex.DetailsOfEmployment,
		dvf.Name AS IsFullTime,
		dvse.Name AS SectorsOfEmployment,
		ex.IsRelevantToVocCourse,
		ex.WillContHigherStudies,
		dvw.Name AS WillBeFullTime,
		dvcp.Name AS CourseToPursue,
		dved.Name AS StreamOfEducation,
		ex.WillContVocEdu,
		dvrc.Name AS ReasonsNOTToContinue,
		ex.OtherReasons,
		ex.WillContSameSector,
		ex.DoesFieldStudyHveVocSub,
		ex.HveRegisteredOnEmploymentPortal,
		ex.WillingToGetRegisteredOnNAPS,
		ex.InterestedInSkillDevelopmentPgms,
		ex.SectorsInterestedIn,
		CASE WHEN (ex.InterestedInJobOrSelfEmployment = 1) THEN 'Yes' ELSE 'No' END AS InterestedInJobOrSelfEmployment,
		ex.TopicsOfInterest,
		dvl.Name AS AnyPreferredLocForEmployment,
		ex.PreferredLocations,
		ex.CanSendTheUpdates,
        ex.WantToKnowAboutOpportunities,
        ex.CollectedEmailId,
        ex.SurveyCompletedByStudentORParent,
        ex.StudentWANo,
        ex.Religion,
        ex.WillingToContSkillTraining,
        ex.CourseForTraining,
        ex.CourseNameIfOther,
        dvt.Name AS SkillTrainingType,
        ex.SectorForTraining,
        ex.OtherSectorsIfAny,
        ex.WantToKnowAbtSkillsUnivByGvt,
        ex.WantToKnowAbtPgmsForJobsNContEdu,
		ex.WantToPursueAnySkillTraining,
        dvt.Name AS TrainingType,
        ex.SectorForSkillTraining,
        ex.OthersIfAny,
		ex.SeatNo,
        ex.WillingToGoForTechHighEdu,
        ex.CanLahiGetInTouch,
		ex.Remark        
	FROM (SELECT DISTINCT 
			sc.StudentId AS ExitStudentId, 
            sc.FullName AS StudentFullName, 
            scd.FatherName, 
            scd.MotherName,
            scd.StudentRollNumber AS StudentUniqueId,
            s.SchoolName AS NameOfSchool, 
            s.Udise AS UdiseCode, 
            s.DistrictCode AS District,
            scl.Name AS Class, 
            dv.Name AS Gender,
            DATE(scd.DateOfBirth) AS DOB, 
            dv1.Name AS Category,
            sec.SectorName AS Sector,
            jr.JobRoleName AS JobRole,
            sc.VTId, 
            vt.FullName AS VTName, 
            vt.Mobile AS VTMobile,
            vt.VCId,
            vc.FullName AS VCName, 
            vt.VTPId, 
            vtp.VTPName
		FROM StudentClasses sc 
        INNER JOIN StudentClassMapping scm ON sc.StudentId = scm.StudentId AND scm.IsActive = 1
        INNER JOIN AcademicYears ay ON scm.AcademicYearId = ay.AcademicYearId		
		INNER JOIN Schools s ON sc.SchoolId = s.SchoolId 
		INNER JOIN DataValues dv ON sc.Gender = dv.DataValueId AND dv.DataTypeId='StudentGender' 
		INNER JOIN SchoolClasses scl ON sc.ClassId = scl.ClassId  
        LEFT JOIN VTSchoolSectors vss ON scm.AcademicYearId = vss.AcademicYearId AND sc.VTId = vss.VTId AND sc.SchoolId = vss.SchoolId AND vss.IsActive = 1
		LEFT JOIN JobRoles jr ON vss.JobRoleId = jr.JobRoleId 
		LEFT JOIN Sectors sec ON vss.SectorId = sec.SectorId  
        LEFT JOIN StudentClassDetails scd ON sc.StudentId = scd.StudentId 
        LEFT JOIN DataValues dv1 ON scd.SocialCategory = dv1.DataValueId AND dv1.DataTypeId='SocialCategory' 
		LEFT JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1
		LEFT JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId 
		LEFT JOIN VocationalTrainingProviders vtp ON vt.VTPId = vtp.VTPId
		WHERE sc.IsActive = 1
			AND ((UserType = 'VT' AND scm.VTId = UserId) OR (UserType = 'VC' AND vt.VCId = UserId) OR (UserType = 'PMU'))  
            AND (AcademicYearId IS NULL OR ay.YearName = @YearName)
			AND (ClassId IS NULL OR scl.Name = @ClassName)            
            
		ORDER BY sc.FullName) st
	LEFT JOIN ExitSurveyDetails ex ON st.ExitStudentId = ex.ExitStudentId
    LEFT JOIN Districts d ON st.District = d.DistrictCode
	LEFT JOIN DataValues dvf ON ex.IsFullTime = dvf.DataValueId AND dvf.DataTypeId='NatureOfWork'
    LEFT JOIN DataValues dvw ON ex.WillBeFullTime = dvw.DataValueId AND dvw.DataTypeId='NatureOfWork'    
    LEFT JOIN DataValues dvt ON ex.TrainingType = dvt.DataValueId AND dvt.DataTypeId='NatureOfWork'
	LEFT JOIN DataValues dvst ON ex.SkillTrainingType = dvst.DataValueId AND dvst.DataTypeId='NatureOfWork'
    LEFT JOIN DataValues dvse ON ex.SectorsOfEmployment = dvse.DataValueId AND dvse.DataTypeId='SectorsOfEmployment'
    LEFT JOIN DataValues dvcp ON ex.CourseToPursue = dvcp.DataValueId AND dvcp.DataTypeId IN ('CourseToBePursueFor10th', 'CourseToBePursueFor12th')
    LEFT JOIN DataValues dved ON ex.StreamOfEducation = dved.DataValueId AND dved.DataTypeId='StreamOfEducation'
    LEFT JOIN DataValues dvrc ON ex.ReasonsNOTToContinue = dvrc.DataValueId AND dvrc.DataTypeId='VENotContinuingReasons'
    LEFT JOIN DataValues dvl ON ex.AnyPreferredLocForEmployment = dvl.DataValueId AND dvl.DataTypeId='PreferredLocationForEmployment' 	
    
    
    )
	UNION 
	(SELECT DISTINCT st.ExitStudentId,
		st.StudentFullName,
		st.FatherName,
        st.MotherName,
		st.JobRole,
		st.StudentUniqueId,
		st.NameOfSchool,
		st.UdiseCode,
		d.DistrictName AS District,
		st.Class,
		st.Gender,
		st.DOB,
		st.Category,
		st.Sector,
		st.VTPId,
		st.VTPName,
		st.VTId,
		st.VTName,
        st.VTMobile,
		st.VCId,
		st.VCName,
		ex.DateOfIntv,
		ex.CityOfResidence,
		ex.DistrictOfResidence,
		ex.BlockOfResidence,
		ex.PinCode,
		ex.StudentMobileNo,
		ex.ParentMobileNo,
		ex.ParentName,
		ex.DoneInternship,
		ex.CurrentlyEmployed,
		ex.DetailsOfEmployment,
		dvf.Name AS IsFullTime,
		dvse.Name AS SectorsOfEmployment,
		ex.IsRelevantToVocCourse,
		ex.WillContHigherStudies,
		dvw.Name AS WillBeFullTime,
		dvcp.Name AS CourseToPursue,
		dved.Name AS StreamOfEducation,
		ex.WillContVocEdu,
		dvrc.Name AS ReasonsNOTToContinue,
		ex.OtherReasons,
		ex.WillContSameSector,
		ex.DoesFieldStudyHveVocSub,
		ex.HveRegisteredOnEmploymentPortal,
		ex.WillingToGetRegisteredOnNAPS,
		ex.InterestedInSkillDevelopmentPgms,
		ex.SectorsInterestedIn,
		CASE WHEN (ex.InterestedInJobOrSelfEmployment = 1) THEN 'Yes' ELSE 'No' END AS InterestedInJobOrSelfEmployment,
		ex.TopicsOfInterest,
		dvl.Name AS AnyPreferredLocForEmployment,
		ex.PreferredLocations,
		ex.CanSendTheUpdates,
        ex.WantToKnowAboutOpportunities,
        ex.CollectedEmailId,
        ex.SurveyCompletedByStudentORParent,
        ex.StudentWANo,
        ex.Religion,
        ex.WillingToContSkillTraining,
        ex.CourseForTraining,
        ex.CourseNameIfOther,
        dvt.Name AS SkillTrainingType,
        ex.SectorForTraining,
        ex.OtherSectorsIfAny,
        ex.WantToKnowAbtSkillsUnivByGvt,
        ex.WantToKnowAbtPgmsForJobsNContEdu,
        ex.WantToPursueAnySkillTraining,
        dvt.Name AS TrainingType,
        ex.SectorForSkillTraining,
        ex.OthersIfAny,
		ex.SeatNo,
        ex.WillingToGoForTechHighEdu,
        ex.CanLahiGetInTouch,
		ex.Remark        
	FROM StudentsForExitForm st
	INNER JOIN SchoolClasses sc ON st.Class = sc.Name
	LEFT JOIN ExitSurveyDetails ex ON st.ExitStudentId = ex.ExitStudentId    
    LEFT JOIN Districts d ON st.District = d.DistrictCode
    LEFT JOIN DataValues dvf ON ex.IsFullTime = dvf.DataValueId AND dvf.DataTypeId='NatureOfWork'
    LEFT JOIN DataValues dvw ON ex.WillBeFullTime = dvw.DataValueId AND dvw.DataTypeId='NatureOfWork'
	LEFT JOIN DataValues dvt ON ex.TrainingType = dvt.DataValueId AND dvt.DataTypeId='NatureOfWork'
	LEFT JOIN DataValues dvst ON ex.SkillTrainingType = dvst.DataValueId AND dvst.DataTypeId='NatureOfWork'
    LEFT JOIN DataValues dvse ON ex.SectorsOfEmployment = dvse.DataValueId AND dvse.DataTypeId='SectorsOfEmployment'
    LEFT JOIN DataValues dvcp ON ex.CourseToPursue = dvcp.DataValueId AND dvcp.DataTypeId IN ('CourseToBePursueFor10th', 'CourseToBePursueFor12th')
    LEFT JOIN DataValues dved ON ex.StreamOfEducation = dved.DataValueId AND dved.DataTypeId='StreamOfEducation'
    LEFT JOIN DataValues dvrc ON ex.ReasonsNOTToContinue = dvrc.DataValueId AND dvrc.DataTypeId='VENotContinuingReasons'
    LEFT JOIN DataValues dvl ON ex.AnyPreferredLocForEmployment = dvl.DataValueId AND dvl.DataTypeId='PreferredLocationForEmployment'    
	WHERE ((UserType = 'VT' AND st.VTId = UserId) OR (UserType = 'VC' AND st.VCId = UserId) OR (UserType = 'PMU')) 
		AND (AcademicYearId IS NULL OR st.AcademicYear = @YearName)
		AND (ClassId IS NULL OR st.Class = @ClassName)		
        
	ORDER BY st.NameOfSchool, st.VTId, st.Class, st.StudentFullName
	)
    ) a 
    ORDER BY a.NameOfSchool, a.VTId, a.Class, a.StudentFullName
    LIMIT offSetValue, PageSize;
	END;
    
	END IF;

	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetExitSurveyReportV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetExitSurveyReportV2`(
	IN UserType  VARCHAR(30),	
	IN UserId  VARCHAR(36),
	IN AcademicYearId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN StudentId VARCHAR(36),
    IN StudentUniqueId VARCHAR(150),
    IN PageIndex INT,
	IN PageSize INT
)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;    
	SET offSetValue = PageIndex * PageSize;
 
	DROP TEMPORARY TABLE IF EXISTS tblDistricts;
	CREATE TEMPORARY TABLE tblDistricts(DistrictId VARCHAR(15));
     
	IF(UserType = 'PMU') THEN
    BEGIN
		INSERT INTO tblDistricts
		SELECT DISTINCT awl.DistrictId 
        FROM AccountWorkLocations awl
        INNER JOIN Accounts a ON awl.AccountId = a.AccountId AND a.IsActive = 1
        WHERE awl.AccountId = UserId AND awl.IsActive = 1;
    END;
    END IF;
 
    SELECT DISTINCT scm.StudentId AS ExitStudentId,

        #Academic Information
        scm.AcademicYearId, 
        ay.YearName AS AcademicYear, 
        vtp.VTPName,
        vc.FullName AS VCName,
		vt.FullName AS VTName,
        vt.Mobile AS VTMobile,
		sec.SectorName AS Sector,
        jr.JobRoleName AS JobRole,
        st.StateName AS State, 
        dvs.DivisionName AS Division, 
        ds.DistrictName AS District, 
		s.SchoolName AS NameOfSchool, 
		s.Udise AS UdiseCode, 
		scl.Name AS Class,
		
        # Personal Information
        ex.SeatNo,
        scd.StudentRollNumber AS StudentUniqueId,
		sc.FirstName AS StudentFirstName, 
        sc.MiddleName AS StudentMiddleName, 
        sc.LastName AS StudentLastName, 
		sc.FullName AS StudentFullName,
		dv.Name AS Gender, 
		scd.DateOfBirth AS DOB, 
		scd.FatherName,
        scd.MotherName,
		dv1.Name AS Category,
		ex.Religion,        
        dvsm.Name AS StreamName,
        scd.Mobile AS StudentMobileNo,
        scd.WhatsAppNo AS StudentWhatsAppNo,
        scd.Mobile1 AS ParentMobileNo,
        
        # Residential Information		
		ex.CityOfResidence,
		ex.DistrictOfResidence,
		ex.BlockOfResidence,
		ex.PinCode,
        ex.StudentAddress,

		# Education post 10/12 th      
		ex.DoneInternship,
        ex.InternshipCompletedSector,
        ex.WillContHigherStudies,
        ex.IsFullTime,
		ex.CourseToPursue,       
        ex.OtherCourse,
		ex.StreamOfEducation,
        ex.OtherStreamStudying,
        ex.WillContVocEdu,
        ex.WillContVocational11,
        ex.ReasonsNOTToContinue,
        ex.WillContSameSector,
        ex.SectorForTraining,
        ex.OtherSector,
        
		# Employment Details        
		ex.CurrentlyEmployed,
		ex.WorkTitle,
		ex.DetailsOfEmployment,		
		ex.SectorsOfEmployment,
        ex.IsVSCompleted,
        
        # Support
		ex.WantToPursueAnySkillTraining,
		ex.IsFulltimeWillingness,
		ex.HveRegisteredOnEmploymentPortal,
        ex.EmploymentPortalName,
 		ex.WillingToGetRegisteredOnNAPS,
        ex.IntrestedInJobOrSelfEmploymentPost12th,
        ex.PreferredLocations,
        ex.ParticularLocation,
		ex.WantToKnowAboutOpportunities,
		ex.CanLahiGetInTouch,
        ex.WantToKnowAbtPgmsForJobsNContEdu,        
        
        # Status & Remarks
		ex.CollectedEmailId,
        ex.SurveyCompletedByStudentORParent,
 		ex.DateOfIntv,
		ex.Remark,
        IF(ex.ExitStudentId IS NOT NULL, 'Submitted', '') AS ExitSurveyStatus,
        
		ex.IsRelevantToVocCourse,
		ex.WillBeFullTime,       
		ex.OtherReasons,		
		ex.DoesFieldStudyHveVocSub,
		ex.InterestedInJobOrSelfEmployment,
		ex.TopicsOfInterest,
		ex.AnyPreferredLocForEmployment,
		ex.CanSendTheUpdates,
        ex.StudentWANo,
        ex.WillingToContSkillTraining,
        ex.CourseForTraining,
        ex.CourseNameIfOther,
        ex.SkillTrainingType,                
        ex.OtherSectorsIfAny,
        ex.WantToKnowAbtSkillsUnivByGvt,
        ex.TrainingType,
        ex.SectorForSkillTraining,
        ex.OthersIfAny,
        ex.WillingToGoForTechHighEdu,
        ex.DifferentProgramOpportunities, 
        
        TRUE AS IsAssessmentRequired,
        scd.AssessmentConducted,
		ex.CreatedOn AS SubmissionDate,
        COUNT(*) OVER() AS TotalRows
	FROM StudentClassMapping scm  
	INNER JOIN StudentClasses sc ON scm.AcademicYearId = sc.AcademicYearId AND scm.SchoolId = sc.SchoolId AND scm.ClassId = sc.ClassId AND scm.StudentId = sc.StudentId AND sc.IsActive = 1
	INNER JOIN VTSchoolSectors vss ON scm.AcademicYearId = vss.AcademicYearId AND scm.SchoolId = vss.SchoolId AND scm.VTId = vss.VTId AND vss.IsActive = 1    
	INNER JOIN Sectors sec ON vss.SectorId = sec.SectorId AND sec.IsActive = 1
    INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
    INNER JOIN Schools s ON scm.SchoolId = s.SchoolId AND s.IsActive = 1
	INNER JOIN DataValues dv ON sc.Gender = dv.DataValueId AND dv.DataTypeId = 'StudentGender' 	
	INNER JOIN SchoolClasses scl ON scm.ClassId = scl.ClassId AND scl.IsActive = 1 
	INNER JOIN VCTrainersMap vtm ON scm.AcademicYearId = vtm.AcademicYearId AND scm.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
	INNER JOIN VocationalCoordinators vc ON vtm.VCId = vc.VCId AND vc.IsActive = 1 
	INNER JOIN VocationalTrainingProviders vtp ON vtm.VTPId = vtp.VTPId AND vtp.IsActive = 1 
    INNER JOIN AcademicYears ay ON scm.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
    INNER JOIN States st ON s.StateCode = st.StateCode AND st.IsActive = 1
    INNER JOIN Divisions dvs ON s.DivisionId = dvs.DivisionId AND dvs.IsActive = 1
    INNER JOIN Districts ds ON s.DivisionId = ds.DivisionId AND s.DistrictCode = ds.DistrictCode AND ds.IsActive = 1
    LEFT JOIN StudentClassDetails scd ON sc.StudentId = scd.StudentId 
    LEFT JOIN DataValues dv1 ON scd.SocialCategory = dv1.DataValueId AND dv1.DataTypeId = 'SocialCategory' 		 	    	
	LEFT JOIN DataValues dvsm ON scd.StreamId = dvsm.DataValueId AND dvsm.DataTypeId = 'Streams'
    LEFT JOIN ExitSurveyDetails ex ON scm.AcademicYearId = ex.AcademicYearId AND scm.StudentId = ex.ExitStudentId 
	WHERE scm.AcademicYearId = AcademicYearId
		AND scm.ClassId = ClassId 
        AND ((UserType = 'VT' AND vtm.VTId = UserId) OR (UserType = 'VC' AND vtm.VCId = UserId) 
			OR (UserType = 'PMU' AND s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
            OR (POSITION(UserType IN 'Roles: VT, VC, PMU') = 0))
            #OR (POSITION(UserType IN 'Roles: VT, VC') = 0) AND s.DistrictCode IN (SELECT DistrictId FROM tblDistricts))
        AND (StudentId IS NULL OR scm.StudentId = StudentId) 
        AND (StudentUniqueId IS NULL OR scd.StudentRollNumber LIKE CONCAT('%', StudentUniqueId, '%')) 
    ORDER BY s.SchoolName, vt.FullName, scl.Name, sc.FullName
    LIMIT offSetValue, PageSize;

    # CALL GetExitSurveyReportV2 ('VC', 'fdd84d6b-1745-495a-b640-c27bf00b5c17', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', NULL, NULL, 0, 25);
    # CALL GetExitSurveyReportV2 ('VT', 'd54c545f-dc5b-4aad-9c93-ad1e3d8e7bad', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', '4d99e5f9-89d7-4fc8-8512-ffe4ee4e33d0', NULL, 0, 1);
    # CALL GetExitSurveyReportV2 ('PMU', 'e7411a6c-76b7-4b28-8c90-ac880c5d9f94', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', NULL, NULL, 0, 25);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetFieldAndIndustryVisitStatusReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetFieldAndIndustryVisitStatusReport`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
	
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS VTFieldIndustryVisitConductedData;
		
		CREATE TEMPORARY TABLE VTFieldIndustryVisitConductedData   
		SELECT DISTINCT fvc.VTSchoolSectorId, 			
			fvc.ClassTaughtId,
			DATE_FORMAT(fvc.ReportingDate, "%M-%Y") AS MonthYear,
			COUNT(fvc.VTFieldIndustryVisitConductedId) AS NoOfFVConducted
		FROM VTFieldIndustryVisitConducted fvc
		INNER JOIN VTSchoolSectors vss ON fvc.VTSchoolSectorId = vss.VTSchoolSectorId AND fvc.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	            
		INNER JOIN VocationalTrainers vt ON fvc.VTId = vt.VTId AND vt.IsActive = 1
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE DATE(fvc.ReportingDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth)
			AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR fvc.ClassTaughtId = ClassId)
            AND (MonthId IS NULL OR Month(fvc.ReportingDate) = CAST(MonthId AS UNSIGNED))   
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)	  
		GROUP BY fvc.VTSchoolSectorId, fvc.ClassTaughtId, MonthYear;
  
		SELECT DISTINCT
			CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			ay.YearName AS AcademicYear,		
			say.YearName AS SchoolAllottedYear,
			ph.PhaseName,
			vtp.VTPName,
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			vt.DateOfJoining AS VTDateOfJoining,
			vc.FullName AS VCName,
			vc.Mobile AS VCMobile,
			vc.EmailId AS VCEmail,
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
			d.DivisionName,
			ds.DistrictName,
			s.BlockName,
			s.UDISE,
			s.SchoolName,
			se.SectorName,
			jr.JobRoleName,
			sc.Name AS ClassName,        
			fvc.MonthYear,
			'NA' AS FieldVisitStatus,
			fvc.NoOfFVConducted        
		FROM VTFieldIndustryVisitConductedData fvc
		INNER JOIN VTSchoolSectors vss ON fvc.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
        INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1  
        INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1
        INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1        
        INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1  
        INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId AND vc.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1    				
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
		INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode	    		 
		INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement'        
        INNER JOIN SchoolClasses sc ON fvc.ClassTaughtId = sc.ClassId		        
        LEFT JOIN HeadMasters hm ON vss.SchoolId = hm.SchoolId AND hm.IsActive = 1
        LEFT JOIN Sectors se ON vss.SectorId = se.SectorId        
		LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows		 
        ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName, fvc.MonthYear;

		DROP TEMPORARY TABLE IF EXISTS VTFieldIndustryVisitConductedData;
	END;   
        
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetFieldAndIndustryVisitStatusReportV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetFieldAndIndustryVisitStatusReportV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10),
	IN HMId VARCHAR(36)
	)
BEGIN
	DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
    
	IF(HMId IS NOT NULL) THEN
	BEGIN
		SELECT hm.SchoolId INTO schoolId FROM HeadMasters hm WHERE hm.HMId = HMId AND hm.IsActive = 1;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
	
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS VTFieldIndustryVisitConductedData;
		
		CREATE TEMPORARY TABLE VTFieldIndustryVisitConductedData   
		SELECT DISTINCT fvc.VTSchoolSectorId, 			
			fvc.ClassTaughtId,
			DATE_FORMAT(fvc.ReportingDate, "%M-%Y") AS MonthYear,
			COUNT(fvc.VTFieldIndustryVisitConductedId) AS NoOfFVConducted
		FROM VTFieldIndustryVisitConducted fvc
		INNER JOIN VTSchoolSectors vss ON fvc.VTSchoolSectorId = vss.VTSchoolSectorId AND fvc.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	            
		INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1        
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE DATE(fvc.ReportingDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth)
			AND (UserId IS NULL OR vtm.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (ClassId IS NULL OR fvc.ClassTaughtId = ClassId)
            AND (MonthId IS NULL OR Month(fvc.ReportingDate) = CAST(MonthId AS UNSIGNED))   
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)	
            AND ((HMId IS NULL AND schoolId IS NULL) OR vss.SchoolId = schoolId)
		GROUP BY fvc.VTSchoolSectorId, fvc.ClassTaughtId, MonthYear;
  
		SELECT DISTINCT
			CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			ay.YearName AS AcademicYear,		
			say.YearName AS SchoolAllottedYear,
			ph.PhaseName,
			vtp.VTPName,
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			vtm.DateOfJoining AS VTDateOfJoining,
			vc.FullName AS VCName,
			vc.Mobile AS VCMobile,
			vc.EmailId AS VCEmail,
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
			d.DivisionName,
			ds.DistrictName,
			s.BlockName,
			s.UDISE,
			s.SchoolName,
			se.SectorName,
			jr.JobRoleName,
			sc.Name AS ClassName,        
			fvc.MonthYear,
			'NA' AS FieldVisitStatus,
			fvc.NoOfFVConducted        
		FROM VTFieldIndustryVisitConductedData fvc
		INNER JOIN VTSchoolSectors vss ON fvc.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
        INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1  
        INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1        
        INNER JOIN Sectors se ON vss.SectorId = se.SectorId        
		INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId
        INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1  
        INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
		INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode	    		 
		INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement'        
        INNER JOIN SchoolClasses sc ON fvc.ClassTaughtId = sc.ClassId		                
        LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
        LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId 
		LEFT JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
        LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId 
        LEFT JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
        LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId 
 		LEFT JOIN HMSchoolsMap hmm ON vss.AcademicYearId = hmm.AcademicYearId AND vss.SchoolId = hmm.SchoolId AND vtpm.IsActive = 1		
        LEFT JOIN HeadMasters hm ON hmm.HMId = hm.HMId AND hm.IsActive = 1        
        CROSS JOIN (SELECT @rowIndex := 0) AS DataRows		 
        ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName, fvc.MonthYear;

		DROP TEMPORARY TABLE IF EXISTS VTFieldIndustryVisitConductedData;
	END;   
        
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetFieldVisitIndustryVisitConductedReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetFieldVisitIndustryVisitConductedReport`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN  
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS VTFieldIndustryVisitConductedData;
		
		CREATE TEMPORARY TABLE VTFieldIndustryVisitConductedData   
		SELECT DISTINCT fvc.VTFieldIndustryVisitConductedId, 
            COUNT(vts.IsPresent) AS TotalStudentsPresent
		FROM VTFieldIndustryVisitConducted fvc
		LEFT JOIN VTFStudentAttendances vts ON fvc.VTFieldIndustryVisitConductedId = vts.VTFieldIndustryVisitConductedId	
        INNER JOIN VTSchoolSectors vss ON fvc.VTSchoolSectorId = vss.VTSchoolSectorId AND fvc.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	            
		INNER JOIN VocationalTrainers vt ON fvc.VTId = vt.VTId AND vt.IsActive = 1
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE DATE(fvc.ReportingDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth)
			AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR fvc.ClassTaughtId = ClassId)
			AND (MonthId IS NULL OR MONTH(fvc.ReportingDate) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)   
		GROUP BY fvc.VTFieldIndustryVisitConductedId;
		
		SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear, 
			sc.Name AS ClassName, 
			s.SchoolName, 
			s.UDISE, 
			s.BlockName, 
			dv.DivisionName, 
			ds.DistrictName, 
			se.SectorName, 
			jr.JobRoleName, 
			ph.PhaseName, 
			vtp.VTPName,
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			vt.FullName AS VTName, 
			vt.Mobile AS VTMobile, 
			vt.Email AS VTEmail,
			hm.FullName AS HMName, 
			hm.Mobile AS HMMobile, 
			hm.Email AS HMEmail,            			  
			fvc.ReportingDate AS FieldVisitDate, 
			vts.TotalStudentsPresent,
			fvc.FieldVisitTheme AS FieldVisitTopic, 
			fvc.FieldVisitActivities AS FieldVisitModule,
			fvc.FVOrganisation AS OrganisationName, 
			fvc.FVOrganisationAddress AS OrganisationAddress, 
			fvc.FVContactPersonName AS ContactPersonName,
			fvc.FVContactPersonMobile AS ContactPersonMobile, 
			fvc.FVContactPersonEmail AS ContactPersonEmail,
			fvc.FVContactPersonDesignation AS ContactPersonDesignation
		FROM VTFieldIndustryVisitConductedData vts 
		INNER JOIN VTFieldIndustryVisitConducted fvc ON vts.VTFieldIndustryVisitConductedId = fvc.VTFieldIndustryVisitConductedId		
		INNER JOIN VTSchoolSectors vss ON fvc.VTSchoolSectorId = vss.VTSchoolSectorId AND fvc.VTId = vss.VTId AND vss.IsActive = 1
        INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1		 
        INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1		 
		INNER JOIN VocationalTrainers vt ON fvc.VTId = vt.VTId AND vt.IsActive = 1
        INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId AND vc.IsActive = 1          
		INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1 
        INNER JOIN SchoolClasses sc ON fvc.ClassTaughtId = sc.ClassId	    				
		INNER JOIN Divisions dv ON s.DivisionId = dv.DivisionId
		INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode		
        INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN Sectors se ON vss.SectorId = se.SectorId		           				
        LEFT JOIN HeadMasters hm ON vss.SchoolId = hm.SchoolId AND hm.IsActive = 1
        LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId			
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows           
        ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName, fvc.ReportingDate DESC;
        
		DROP TEMPORARY TABLE IF EXISTS VTFieldIndustryVisitConductedData;
	END;
        
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetFieldVisitIndustryVisitConductedReportV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetFieldVisitIndustryVisitConductedReportV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10),
	IN HMId VARCHAR(36)
	)
BEGIN
	DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
    
	IF(HMId IS NOT NULL) THEN
	BEGIN
		SELECT hm.SchoolId INTO schoolId FROM HeadMasters hm WHERE hm.HMId = HMId AND hm.IsActive = 1;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN  
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS VTFieldIndustryVisitConductedData;
		
		CREATE TEMPORARY TABLE VTFieldIndustryVisitConductedData   
		SELECT DISTINCT fvc.VTFieldIndustryVisitConductedId, 
            COUNT(vts.IsPresent) AS TotalStudentsPresent
		FROM VTFieldIndustryVisitConducted fvc
		LEFT JOIN VTFStudentAttendances vts ON fvc.VTFieldIndustryVisitConductedId = vts.VTFieldIndustryVisitConductedId	
        INNER JOIN VTSchoolSectors vss ON fvc.VTSchoolSectorId = vss.VTSchoolSectorId AND fvc.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	            		
        INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1        
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE DATE(fvc.ReportingDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth)
			AND (UserId IS NULL OR vtm.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (ClassId IS NULL OR fvc.ClassTaughtId = ClassId)
			AND (MonthId IS NULL OR MONTH(fvc.ReportingDate) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)   
            AND ((HMId IS NULL AND schoolId IS NULL) OR vss.SchoolId = schoolId)
		GROUP BY fvc.VTFieldIndustryVisitConductedId;
		
		SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear, 
			sc.Name AS ClassName, 
			s.SchoolName, 
			s.UDISE, 
			s.BlockName, 
			dv.DivisionName, 
			ds.DistrictName, 
			se.SectorName, 
			jr.JobRoleName, 
			ph.PhaseName, 
			vtp.VTPName,
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			vt.FullName AS VTName, 
			vt.Mobile AS VTMobile, 
			vt.Email AS VTEmail,
			hm.FullName AS HMName, 
			hm.Mobile AS HMMobile, 
			hm.Email AS HMEmail,            			  
			fvc.ReportingDate AS FieldVisitDate, 
			vts.TotalStudentsPresent,
			fvc.FieldVisitTheme AS FieldVisitTopic, 
			fvc.FieldVisitActivities AS FieldVisitModule,
			fvc.FVOrganisation AS OrganisationName, 
			fvc.FVOrganisationAddress AS OrganisationAddress, 
			fvc.FVContactPersonName AS ContactPersonName,
			fvc.FVContactPersonMobile AS ContactPersonMobile, 
			fvc.FVContactPersonEmail AS ContactPersonEmail,
			fvc.FVContactPersonDesignation AS ContactPersonDesignation
		FROM VTFieldIndustryVisitConductedData vts 
		INNER JOIN VTFieldIndustryVisitConducted fvc ON vts.VTFieldIndustryVisitConductedId = fvc.VTFieldIndustryVisitConductedId		
		INNER JOIN VTSchoolSectors vss ON fvc.VTSchoolSectorId = vss.VTSchoolSectorId AND fvc.VTId = vss.VTId AND vss.IsActive = 1
        INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1		 
        INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1		 
        INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
        INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId			
		INNER JOIN SchoolClasses sc ON fvc.ClassTaughtId = sc.ClassId	    				
		INNER JOIN Divisions dv ON s.DivisionId = dv.DivisionId
		INNER JOIN Districts ds ON s.DivisionId = ds.DivisionId AND s.DistrictCode = ds.DistrictCode		
        INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
        LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
        LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId 
		LEFT JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
        LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId 
        LEFT JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
        LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId 
        LEFT JOIN HMSchoolsMap hmm ON vss.AcademicYearId = hmm.AcademicYearId AND vss.SchoolId = hmm.SchoolId AND vtpm.IsActive = 1		
        LEFT JOIN HeadMasters hm ON hmm.HMId = hm.HMId AND hmm.IsActive = 1  
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows           
        ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName, fvc.ReportingDate DESC;
        
		DROP TEMPORARY TABLE IF EXISTS VTFieldIndustryVisitConductedData;
	END;
        
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetForgotPasswordHistoriesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetForgotPasswordHistoriesByCriteria`(

	IN name  VARCHAR(100),

	IN charBy VARCHAR(5),

	IN pageIndex INT,

	IN pageSize INT

	)
BEGIN

	DECLARE offSetValue INT DEFAULT 0;

	SET offSetValue = (pageIndex-1) * pageSize;



	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;



	SELECT f.ForgotPasswordId, f.EmailId, f.PasswordResetUrl, f.UserIPAddress, f.RequestDate, f.ResetPasswordDate
	FROM ForgotPasswordHistories f

	WHERE (name IS NULL OR (f.EmailId LIKE CONCAT(name, '%')))

		AND ((charBy IS NULL OR charBy = 'All') OR (f.EmailId LIKE CONCAT(charBy, '%')))

	ORDER BY f.EmailId

	LIMIT pageSize

	OFFSET offSetValue;



    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;



    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetGuestLectureConductedReportsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetGuestLectureConductedReportsByCriteria`(
	IN UserId VARCHAR(150),
	IN AcademicYearId VARCHAR(36),    
	IN DivisionId VARCHAR(36), 
	IN DistrictId VARCHAR(100),
	IN SectorId VARCHAR(36), 
	IN JobRoleId VARCHAR(36), 
	IN VTPId VARCHAR(36), 
	IN ClassId VARCHAR(36),
	IN MonthId VARCHAR(10),
	IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;

		DROP TEMPORARY TABLE IF EXISTS VTGuestLectureConductedData;
		
		CREATE TEMPORARY TABLE VTGuestLectureConductedData   
		SELECT DISTINCT glc.VTGuestLectureId, 
			GROUP_CONCAT(DISTINCT dvm.Name) AS GuestLectureMethodology,        
            COUNT(vts.IsPresent) AS TotalStudentsPresent
		FROM VTGuestLectureConducted glc
		LEFT JOIN VTGStudentAttendances vts ON glc.VTGuestLectureId = vts.VTGuestLectureId		
		INNER JOIN VTSchoolSectors vss ON glc.VTSchoolSectorId = vss.VTSchoolSectorId AND glc.VTId = vss.VTId AND vss.IsActive = 1
        INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND glc.ClassTaughtId = vtc.ClassId AND vtc.IsActive = 1 
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	            
        INNER JOIN VocationalTrainers vt ON glc.VTId = vt.VTId AND vt.IsActive = 1
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1		
		LEFT JOIN VTGMethodologies vtm ON glc.VTGuestLectureId = vtm.VTGuestLectureId
		LEFT JOIN DataValues dvm ON vtm.MethodologyId = dvm.DataValueId AND dvm.DataTypeId = 'GLMethodology'
        WHERE DATE(glc.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
			AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR glc.ClassTaughtId = ClassId)
			AND (MonthId IS NULL OR MONTH(glc.ReportingDate) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)   
		GROUP BY glc.VTGuestLectureId;
        
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,    
			ay.YearName AS AcademicYear,         
			say.YearName AS SchoolAllottedYear, 
			sc.Name AS ClassName, 
			s.SchoolName, 
			s.UDISE, 
			s.BlockName, 
			dv.DivisionName, 
			ds.DistrictName, 
			se.SectorName, 
			jr.JobRoleName, 
			ph.PhaseName, 
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			vt.FullName AS VTName, 
			vt.Mobile AS VTMobile, 
			vt.Email AS VTEmail, 
			hm.FullName AS HMName, 
			hm.Mobile AS HMMobile, 
			hm.Email AS HMEmail, 
			glc.ReportingDate AS GuestLectureDate, 
			vts.TotalStudentsPresent, 
			glc.GLTopic AS GuestLectureTopic, 
			vts.GuestLectureMethodology,        
			dvt.Name AS GuestLectureModule, 
			glc.GLName AS GuestLecturerName, 
			glc.GLMobile AS GuestLecturerMobile, 
			glc.GLEmail AS GuestLecturerEmail, 
			glc.GLQualification AS GuestLecturerQualification, 
			glc.GLAddress AS GuestLecturerAddress, 
			glc.GLCompany AS GuestLecturerOrganisation, 
			glc.GLDesignation AS GuestLecturerDesignation	
		FROM VTGuestLectureConductedData vts 
        INNER JOIN VTGuestLectureConducted glc ON vts.VTGuestLectureId = glc.VTGuestLectureId		
		INNER JOIN VTSchoolSectors vss ON glc.VTSchoolSectorId = vss.VTSchoolSectorId AND glc.VTId = vss.VTId AND vss.IsActive = 1
        INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1		 
        INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1		 
		INNER JOIN VocationalTrainers vt ON glc.VTId = vt.VTId AND vt.IsActive = 1
        INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId AND vc.IsActive = 1          
		INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1 
        INNER JOIN SchoolClasses sc ON glc.ClassTaughtId = sc.ClassId	    				
		INNER JOIN Divisions dv ON s.DivisionId = dv.DivisionId
		INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode		
        INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN Sectors se ON vss.SectorId = se.SectorId		           				
        LEFT JOIN HeadMasters hm ON vss.SchoolId = hm.SchoolId AND hm.IsActive = 1
        LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId			       
		LEFT JOIN DataValues dvt ON glc.GLType = dvt.DataValueId AND dvt.DataTypeId = 'GLType'
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    		 
        ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName, glc.ReportingDate DESC;
	
		DROP TEMPORARY TABLE IF EXISTS VTGuestLectureConductedData;
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetGuestLectureConductedReportsByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetGuestLectureConductedReportsByCriteriaV2`(
	IN UserId VARCHAR(150),
	IN AcademicYearId VARCHAR(36),    
	IN DivisionId VARCHAR(36), 
	IN DistrictId VARCHAR(100),
	IN SectorId VARCHAR(36), 
	IN JobRoleId VARCHAR(36), 
	IN VTPId VARCHAR(36), 
	IN ClassId VARCHAR(36),
	IN MonthId VARCHAR(10),
	IN SchoolManagementId VARCHAR(10),
    IN HMId VARCHAR(36)
	)
BEGIN
	DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
    
	IF(HMId IS NOT NULL) THEN
	BEGIN
		SELECT hm.SchoolId INTO schoolId FROM HeadMasters hm WHERE hm.HMId = HMId AND hm.IsActive = 1;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;

		DROP TEMPORARY TABLE IF EXISTS VTGuestLectureConductedData;
		
		CREATE TEMPORARY TABLE VTGuestLectureConductedData   
		SELECT DISTINCT glc.VTGuestLectureId, 
			GROUP_CONCAT(DISTINCT dvm.Name) AS GuestLectureMethodology,        
			COUNT(vts.IsPresent) AS TotalStudentsPresent
		FROM VTGuestLectureConducted glc
		INNER JOIN VTSchoolSectors vss ON glc.VTSchoolSectorId = vss.VTSchoolSectorId AND glc.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1		        
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	            
		INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1        				
		LEFT JOIN VTGStudentAttendances vts ON glc.VTGuestLectureId = vts.VTGuestLectureId		
		LEFT JOIN VTGMethodologies vgm ON glc.VTGuestLectureId = vgm.VTGuestLectureId
		INNER JOIN DataValues dvm ON vgm.MethodologyId = dvm.DataValueId AND dvm.DataTypeId = 'GLMethodology'
		WHERE DATE(glc.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
			AND (UserId IS NULL OR vtm.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (ClassId IS NULL OR glc.ClassTaughtId = ClassId)
			AND (MonthId IS NULL OR MONTH(glc.ReportingDate) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)  
            AND ((hmId IS NULL AND schoolId IS NULL) OR vss.SchoolId = schoolId)
		GROUP BY glc.VTGuestLectureId;
        
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,    
			ay.YearName AS AcademicYear,         
			say.YearName AS SchoolAllottedYear, 
			sc.Name AS ClassName, 
			s.SchoolName, 
			s.UDISE, 
			s.BlockName, 
			dv.DivisionName, 
			ds.DistrictName, 
			se.SectorName, 
			jr.JobRoleName, 
			ph.PhaseName, 
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			vt.FullName AS VTName, 
			vt.Mobile AS VTMobile, 
			vt.Email AS VTEmail, 
			hm.FullName AS HMName, 
			hm.Mobile AS HMMobile, 
			hm.Email AS HMEmail, 
			glc.ReportingDate AS GuestLectureDate, 
			vts.TotalStudentsPresent, 
			glc.GLTopic AS GuestLectureTopic, 
			vts.GuestLectureMethodology,        
			dvt.Name AS GuestLectureModule, 
			glc.GLName AS GuestLecturerName, 
			glc.GLMobile AS GuestLecturerMobile, 
			glc.GLEmail AS GuestLecturerEmail, 
			glc.GLQualification AS GuestLecturerQualification, 
			glc.GLAddress AS GuestLecturerAddress, 
			glc.GLCompany AS GuestLecturerOrganisation, 
			glc.GLDesignation AS GuestLecturerDesignation	
		FROM VTGuestLectureConductedData vts 
        INNER JOIN VTGuestLectureConducted glc ON vts.VTGuestLectureId = glc.VTGuestLectureId		
		INNER JOIN VTSchoolSectors vss ON glc.VTSchoolSectorId = vss.VTSchoolSectorId AND glc.VTId = vss.VTId AND vss.IsActive = 1
        INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1		 
        INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1		 		        
		INNER JOIN Divisions dv ON s.DivisionId = dv.DivisionId
		INNER JOIN Districts ds ON s.DivisionId = ds.DivisionId AND s.DistrictCode = ds.DistrictCode		
        INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN Sectors se ON vss.SectorId = se.SectorId		           				
        INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId			       
		INNER JOIN DataValues dvt ON glc.GLType = dvt.DataValueId AND dvt.DataTypeId = 'GLType'
        INNER JOIN SchoolClasses sc ON glc.ClassTaughtId = sc.ClassId	    	
        INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
        INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
        INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
        LEFT JOIN HMSchoolsMap hmm ON vss.AcademicYearId = hmm.AcademicYearId AND vss.SchoolId = hmm.SchoolId AND vtpm.IsActive = 1		
        LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId 
        LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId 
        LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId  		
        LEFT JOIN HeadMasters hm ON hmm.HMId = hm.HMId AND hm.IsActive = 1        
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    		 
        ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName, glc.ReportingDate DESC;
	
		DROP TEMPORARY TABLE IF EXISTS VTGuestLectureConductedData;
	END;
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetGuestLectureStatusReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetGuestLectureStatusReport`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
	
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS VTGuestLectureConductedData;
		
		CREATE TEMPORARY TABLE VTGuestLectureConductedData   
		SELECT DISTINCT glc.VTSchoolSectorId,
			glc.ClassTaughtId,  
			DATE_FORMAT(glc.ReportingDate, "%M-%Y") AS MonthYear,
			glc.GLType,
			COUNT(glc.VTGuestLectureId) AS NoOfGLConducted
		FROM VTGuestLectureConducted glc 
		INNER JOIN VTSchoolSectors vss ON glc.VTSchoolSectorId = vss.VTSchoolSectorId AND glc.VTId = vss.VTId AND vss.IsActive = 1
        INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND glc.ClassTaughtId = vtc.ClassId AND vtc.IsActive = 1 
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	            
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1        		
		WHERE glc.ReportingDate BETWEEN ay.StartMonth AND ay.EndMonth
			AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vt.VTPId = VTPId)
			AND (ClassId IS NULL OR glc.ClassTaughtId = ClassId)
            AND (MonthId IS NULL OR Month(glc.ReportingDate) = CAST(MonthId AS UNSIGNED))   
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)	  
		GROUP BY glc.VTSchoolSectorId, glc.ClassTaughtId, glc.GLType, MonthYear;
         
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			ay.YearName AS AcademicYear,		
			say.YearName AS SchoolAllottedYear,
			ph.PhaseName,
			vtp.VTPName,
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			vt.DateOfJoining AS VTDateOfJoining,
			vc.FullName AS VCName,
			vc.Mobile AS VCMobile,
			vc.EmailId AS VCEmail,
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
			d.DivisionName,
			ds.DistrictName,
			s.BlockName,
			s.UDISE,
			s.SchoolName,
			se.SectorName,
			jr.JobRoleName,
			sc.Name AS ClassName, 
			glc.MonthYear,
			dvt.Name AS GuestLectureStatus,
			glc.NoOfGLConducted        
		FROM VTGuestLectureConductedData glc
		INNER JOIN VTSchoolSectors vss ON glc.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
        INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1  
        INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1
        INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1        
        INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1  
        INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId AND vc.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1    				
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
		INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode	    		 
		INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement'
        INNER JOIN DataValues dvt ON glc.GLType = dvt.DataValueId AND dvt.DataTypeId = 'GLType'
        INNER JOIN SchoolClasses sc ON glc.ClassTaughtId = sc.ClassId		        
        LEFT JOIN HeadMasters hm ON vss.SchoolId = hm.SchoolId AND hm.IsActive = 1
        LEFT JOIN Sectors se ON vss.SectorId = se.SectorId        
		LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows		 
        ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName;

		DROP TEMPORARY TABLE IF EXISTS VTGuestLectureConductedData;
	END;  
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetGuestLectureStatusReportV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetGuestLectureStatusReportV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
	IN SchoolManagementId VARCHAR(10),
    IN HMId VARCHAR(36)
	)
BEGIN
	DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
    
	IF(HMId IS NOT NULL) THEN
	BEGIN
		SELECT hm.SchoolId INTO schoolId FROM HeadMasters hm WHERE hm.HMId = HMId AND hm.IsActive = 1;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
	
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		DROP TEMPORARY TABLE IF EXISTS VTGuestLectureConductedData;
		
		CREATE TEMPORARY TABLE VTGuestLectureConductedData   
		SELECT DISTINCT glc.VTSchoolSectorId,
			glc.ClassTaughtId,  
			DATE_FORMAT(glc.ReportingDate, "%M-%Y") AS MonthYear,
			glc.GLType,
			COUNT(glc.VTGuestLectureId) AS NoOfGLConducted
		FROM VTGuestLectureConducted glc 
		INNER JOIN VTSchoolSectors vss ON glc.VTSchoolSectorId = vss.VTSchoolSectorId AND glc.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	            
        INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId  
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1        		
		WHERE glc.ReportingDate BETWEEN ay.StartMonth AND ay.EndMonth
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
            AND (UserId IS NULL OR vtm.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)			
			AND (ClassId IS NULL OR glc.ClassTaughtId = ClassId)
            AND (MonthId IS NULL OR Month(glc.ReportingDate) = CAST(MonthId AS UNSIGNED))   
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)	  
            AND ((hmId IS NULL AND schoolId IS NULL) OR vss.SchoolId = schoolId)
		GROUP BY glc.VTSchoolSectorId, glc.ClassTaughtId, glc.GLType, MonthYear;
         
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			ay.YearName AS AcademicYear,		
			say.YearName AS SchoolAllottedYear,
			ph.PhaseName,
			vtp.VTPName,
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			vtm.DateOfJoining AS VTDateOfJoining,
			vc.FullName AS VCName,
			vc.Mobile AS VCMobile,
			vc.EmailId AS VCEmail,
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
			d.DivisionName,
			ds.DistrictName,
			s.BlockName,
			s.UDISE,
			s.SchoolName,
			se.SectorName,
			jr.JobRoleName,
			sc.Name AS ClassName, 
			glc.MonthYear,
			dvt.Name AS GuestLectureStatus,
			glc.NoOfGLConducted        
		FROM VTGuestLectureConductedData glc
		INNER JOIN VTSchoolSectors vss ON glc.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
        INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1          
        INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1        
		INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
        INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1        
        INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1          
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
		INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode	    		 
		INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement'
        INNER JOIN DataValues dvt ON glc.GLType = dvt.DataValueId AND dvt.DataTypeId = 'GLType'
        INNER JOIN SchoolClasses sc ON glc.ClassTaughtId = sc.ClassId		        
        LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
        LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId 
		LEFT JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
        LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId 
        LEFT JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
        LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId 
 		LEFT JOIN HMSchoolsMap hmm ON vss.AcademicYearId = hmm.AcademicYearId AND vss.SchoolId = hmm.SchoolId AND vtpm.IsActive = 1		
        LEFT JOIN HeadMasters hm ON hmm.HMId = hm.HMId AND hm.IsActive = 1      
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows		 
        ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName;

		DROP TEMPORARY TABLE IF EXISTS VTGuestLectureConductedData;
	END;  
	
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetHeadMastersByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetHeadMastersByCriteria`(
	IN academicYearId VARCHAR(36),
    IN vtpId VARCHAR(36),
    IN vcId VARCHAR(36),
	IN vtId VARCHAR(36),
    IN schoolId VARCHAR(36),
    IN sectorId VARCHAR(36),
    IN jobRoleId VARCHAR(36),
    IN status BIT,
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = pageIndex * pageSize;
	
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    SELECT DISTINCT hsm.AcademicYearId, hsm.SchoolId, hsm.HMId, ay.YearName AS AcademicYear, s.SchoolName, s.UDISE AS SchoolUDISE, hm.FullName, hm.Mobile, hm.Email, dvg.Name AS Gender, 
		hm.YearsInSchool, (CASE WHEN(hsm.DateOfResignation IS NULL) THEN 0 ELSE 1 END) AS IsResigned, hsm.IsActive, COUNT(*) OVER() AS TotalRows
	FROM HMSchoolsMap hsm
    INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId 
    INNER JOIN Schools s ON hsm.SchoolId = s.SchoolId AND s.IsActive = 1
    INNER JOIN DataValues dvg ON hm.Gender = dvg.DataValueId AND dvg.DataTypeId = 'Gender'
    INNER JOIN AcademicYears ay ON hsm.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1   
    LEFT JOIN VTSchoolSectors vss ON hsm.AcademicYearId = vss.AcademicYearId AND hsm.SchoolId = vss.SchoolId AND vss.IsActive = 1
    LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
    LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId
    WHERE hsm.AcademicYearId = academicYearId
		AND (vtpId IS NULL OR vtm.VTPId = vtpId)
		AND (vcId IS NULL OR vtm.VCId = vcId)
        AND (vtId IS NULL OR vss.VTId = vtId)
        AND (schoolId IS NULL OR s.SchoolId = schoolId)
        AND (status IS NULL OR (hsm.IsActive = status AND hm.IsActive = status))
		AND (name IS NULL OR (s.SchoolName LIKE CONCAT('%', name, '%') OR s.UDISE LIKE CONCAT('%', name, '%')) OR hm.FullName LIKE CONCAT('%', name, '%'))
		AND ((charBy IS NULL OR charBy = 'All') OR (hm.FullName LIKE CONCAT(charBy, '%')))
	ORDER BY s.SchoolName, hm.FullName     
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

	# CALL GetHeadMastersByCriteria ('bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 15);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetHMIssueReportingsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetHMIssueReportingsByCriteria`(
	IN userId VARCHAR(100),
	IN name VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    SELECT v.HMIssueReportingId AS IssueReportingId, s.SchoolName, se.SectorName, 
    v.IssueReportDate, mi.Name AS MainIssue, si.IssueName AS SubIssue,  
    sit.Name AS StudentType, v.NoOfStudents, dvas.Name AS ApprovalStatus 
	FROM HMIssueReporting v  
    LEFT JOIN HeadMasters hm ON v.HMId = hm.HMId  
    INNER JOIN VTSchoolSectors vtss ON hm.VTId = vtss.VTId
    INNER JOIN Schools s ON vtss.SchoolId = s.SchoolId
    INNER JOIN Sectors se ON vtss.SectorId = se.SectorId    
    LEFT JOIN MainIssues mi ON v.MainIssue = mi.MainIssueId
    LEFT JOIN SubIssues si ON v.SubIssue = si.SubIssueId    
    LEFT JOIN DataValues dvc ON v.StudentClass = dvc.DataValueId    
    LEFT JOIN DataValues sit ON v.StudentType = sit.DataValueId
    LEFT JOIN DataValues dvas ON v.ApprovalStatus = dvas.DataValueId
	WHERE (userId IS NULL OR v.HMId = userId)     
    AND (name IS NULL OR (mi.Name LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (mi.Name LIKE CONCAT(charBy, '%')))
	GROUP BY v.IssueReportDate
    ORDER BY v.IssueReportDate DESC, mi.Name, si.IssueName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetIssueByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetIssueByCriteria`(
	IN userId VARCHAR(150),
    IN reportedBy VARCHAR(10),
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    BEGIN		 
        SELECT r.Code, a.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
         		
		SELECT ir.IssueReportingId, @roleName AS ReviewBy, ir.ReportedType, ir.ReportedBy, ir.IssueReportDate, 
			mi.Name AS MainIssue, si.IssueName AS SubIssue, dvic.Name AS IssueCategory, ir.IssueDetails, dvas.Name AS ApprovalStatus
        FROM (
			SELECT vci.VCIssueReportingId AS IssueReportingId, 'VC' AS ReportedType, vc.FullName AS ReportedBy, vci.IssueReportDate, vci.IssueDetails, vci.ApprovalStatus, vci.MainIssue, vci.SubIssue
			FROM VCIssueReporting vci
            INNER JOIN VTPCoordinatorsMap vcm ON vci.AcademicYearId = vcm.AcademicYearId AND vci.VCId = vcm.VCId AND vcm.IsActive = 1 		
            INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId 
            INNER JOIN SubIssues si ON vci.SubIssue = si.SubIssueId
            WHERE ((@roleName = 'ADM' AND si.AssignForReviewPMU = 1) OR 
				(@roleName = 'VC' AND si.AssignForReviewVC = 1) OR 
                (@roleName = 'HM' AND si.AssignForReviewHM = 1))
            
			UNION
			SELECT DISTINCT vti.VTIssueReportingId AS IssueReportingId, 'VT' AS ReportedType, vt.FullName AS ReportedBy, vti.IssueReportDate, vti.IssueDetails, vti.ApprovalStatus, vti.MainIssue, vti.SubIssue
			FROM VTIssueReporting vti			
            INNER JOIN AcademicYears ay ON vti.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1    
            INNER JOIN SubIssues si ON vti.SubIssue = si.SubIssueId                        
            INNER JOIN VCTrainersMap vtm ON vti.AcademicYearId = vtm.AcademicYearId AND vti.VTId = vtm.VTId AND vtm.IsActive = 1            
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId			
			WHERE ((@roleName = 'ADM' AND si.AssignForReviewPMU = 1) OR 
				(@roleName = 'VC' AND si.AssignForReviewVC = 1 AND vtm.VCId = @accountId) OR 
                (@roleName = 'HM' AND si.AssignForReviewHM = 1))
                
            UNION
			SELECT DISTINCT hmi.HMIssueReportingId AS IssueReportingId, 'HM' AS ReportedType, hm.FullName AS ReportedBy, hmi.IssueReportDate, hmi.IssueDetails, hmi.ApprovalStatus, hmi.MainIssue, hmi.SubIssue
			FROM HMIssueReporting hmi
            INNER JOIN AcademicYears ay ON hmi.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1    
            INNER JOIN SubIssues si ON hmi.SubIssue = si.SubIssueId
            INNER JOIN HMSchoolsMap hsm ON hmi.AcademicYearId = hsm.AcademicYearId AND hmi.HMId = hsm.HMId AND hsm.IsActive = 1                        
            INNER JOIN SchoolVTPSectors svs ON hsm.AcademicYearId = svs.AcademicYearId AND hsm.SchoolId = svs.SchoolId 
            INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId 
            INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId                 
            WHERE ((@roleName = 'ADM' AND si.AssignForReviewPMU = 1) OR 
				(@roleName = 'VC' AND si.AssignForReviewVC = 1 AND vcss.VCId = @accountId) OR 
                (@roleName = 'HM' AND si.AssignForReviewHM = 1))
                
		) AS ir
		LEFT JOIN MainIssues mi ON ir.MainIssue = mi.MainIssueId
        LEFT JOIN SubIssues si ON ir.SubIssue = si.SubIssueId		
		LEFT JOIN DataValues dvic ON si.IssueCategoryId = dvic.DataValueId
		LEFT JOIN DataValues dvas ON ir.ApprovalStatus = dvas.DataValueId
		WHERE ((@roleName = 'ADM' AND ir.ReportedType = reportedBy) OR @roleName <> 'ADM')
			AND (name IS NULL OR (si.IssueName LIKE CONCAT(name, '%')))
			AND ((charBy IS NULL OR charBy = 'All') OR (si.IssueName LIKE CONCAT(charBy, '%')))
		ORDER BY ir.IssueReportDate DESC
		LIMIT pageSize
		OFFSET offSetValue;

	END;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetIssueMappingByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetIssueMappingByCriteria`(
	IN userId VARCHAR(36),
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    SELECT im.IssueMappingId, dvm.Name AS MainIssue, dvs.Name AS SubIssue, dvic.Name AS IssueCategory, im.IssuePriority, im.IsApplicableForVC, im.IsApplicableForVT, im.IsApplicableForHM, im.IsActive
	FROM IssueMapping im
	LEFT JOIN DataValues dvm ON im.MainIssueId = dvm.DataValueId
	LEFT JOIN DataValues dvs ON im.SubIssueId = dvs.DataValueId
	LEFT JOIN DataValues dvic ON im.IssueCategoryId = dvic.DataValueId
	WHERE (name IS NULL OR (dvm.Name LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (dvm.Name LIKE CONCAT(charBy, '%')))
	ORDER BY im.IssueMappingId
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetJobRoleByVTIdAyIdSchoolId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetJobRoleByVTIdAyIdSchoolId`(
    IN VTId VARCHAR(36),
    IN AcademicYearId VARCHAR(36),
    IN SchoolId VARCHAR(36)
	)
BEGIN 	
	SELECT DISTINCT jr.JobRoleId AS Id, jr.JobRoleName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo	
	FROM VTSchoolSectors vss
    INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vss.IsActive = 1	
	INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
	INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND jr.IsActive = 1
	WHERE vss.IsActive = 1 
	AND (VTId IS NULL OR vss.VTId = VTId)
	AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
    AND (SchoolId IS NULL OR s.SchoolId = SchoolId);
    
    # CALL GetJobRoleByVTIdAyIdSchoolId ('e072f7ff-1382-4bda-8ffd-a810ca37a14e','bb46d443-08ac-43d3-b31a-8b640be6be6f','00040a37-82c2-44ac-a858-bfd235a3d66b');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetJobRolesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetJobRolesByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT j.JobRoleId, s.SectorName, j.JobRoleName, j.QPCode, j.DisplayOrder, j.IsActive
	FROM JobRoles j
    INNER JOIN Sectors s ON j.SectorId = s.SectorId
	WHERE (name IS NULL OR (j.JobRoleName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (j.JobRoleName LIKE CONCAT(charBy, '%')))
	ORDER BY s.SectorName, j.DisplayOrder
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetLabConditionReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetLabConditionReport`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
	IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10),
	IN HMId VARCHAR(36)
)
BEGIN	   
   	DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
    
	IF(HMId IS NOT NULL) THEN
	BEGIN
		SELECT hm.SchoolId INTO schoolId 
        FROM HMSchoolsMap hsm
        INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive = 1
        WHERE hsm.AcademicYearId = AcademicYearId AND hsm.HMId = HMId AND hsm.IsActive = 1;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN  
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC' AND @roleName <> 'VT' ) THEN				
			SET UserId = NULL;		 
		END IF;
 
		SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY ted.ToolEquipmentId ASC) AS SrNo,	
			ted.AcademicYear, 
			ted.UDISE, 
			ted.SchoolName,
			ted.DistrictName, 		
			ted.SectorName, 
			ted.JobRoleName, 
			ted.Composite,
			ted.VTPName, 
			ted.VCName, 
			ted.VCEmail, 
			ted.VTName, 
			ted.VTEmail,  
			ted.TEReceiveStatus, 
			ted.ReceiptDate, 
			ted.OATEStatus,
			ted.OFTEStatus,
			ted.Reason,
			ted.IsSelected,
			ted.IsSpecify,
			ted.RFNReceiveStatus,
			ted.IsCommunicated,
			ted.IsSetUpWorkShop,
			ted.RoomType,
			ted.AccommodateTools,
			ted.RoomSize,
			ted.IsDoorLock,
			ted.Flooring,
			ted.RoomWindows,
			ted.TotalWindowCount,
			ted.IsWindowGrills,
			ted.IsWindowLocked,
			ted.IsRoomActive,
			ted.REFInstalled,
			ted.WorkingSwitchBoard,
			ted.PSSCount,
			ted.WLCount,
			ted.WFCount,
			x.RoomDamaged ,
			ted.RawMaterialRequired,
			ted.ImgToolList,
			ted.ImgLab,
			ted.Remark,
			ted.ToolEquipmentId
		FROM (
			SELECT DISTINCT ay.YearName AS AcademicYear, 
				vtp.VTPName,		
				vc.FullName AS VCName, 
				vc.EmailId AS VCEmail, 
				vt.FullName AS VTName, 
				vt.Email AS VTEmail,				
				ds.DistrictName, 
				sc.CategoryName As Composite,
				s.UDISE, 
				s.SchoolName, 
				se.SectorName, 
				jr.JobRoleName, 		
				te.ReceiptDate,
				te.TEReceiveStatus,
				te.OATEStatus,
				te.OFTEStatus,
				te.Reason,
				te.IsSelected,
				te.IsSpecify,
				te.RFNReceiveStatus,
				te.IsCommunicated,
				te.IsSetUpWorkShop,
				te.RoomType,
				te.AccommodateTools,
				te.RoomSize,
				te.IsDoorLock,
				te.Flooring,
				te.RoomWindows,
				te.TotalWindowCount,
				te.IsWindowGrills,
				te.IsWindowLocked,
				te.IsRoomActive,
				te.REFInstalled,
				te.WorkingSwitchBoard,
				te.PSSCount,
				te.WLCount,
				te.WFCount,
				te.RawMaterialRequired,
				te.TLFilepath As ImgToolList,
				te.LabFilePath As ImgLab,
				te.Remarks as Remark,
				te.ToolEquipmentId      
			FROM ToolEquipments te		
			INNER JOIN VTSchoolSectors vss ON te.AcademicYearId = vss.AcademicYearId AND te.SectorId = vss.VTSchoolSectorId AND vss.IsActive = 1           
			INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1			    
            INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
            INNER JOIN SchoolCategories sc ON sc.SchoolCategoryId = s.SchoolCategoryId AND sc.IsActive = 1	
			INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1  
			INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
			INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1            
            INNER JOIN Divisions dv ON s.DivisionId = dv.DivisionId
			INNER JOIN Districts ds ON s.DivisionId = ds.DivisionId AND s.DistrictCode = ds.DistrictCode	
            INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 										
   			INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VTPId = vcm.VTPId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
            INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
            INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
			INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
            LEFT JOIN HMSchoolsMap hmm ON vss.AcademicYearId = hmm.AcademicYearId AND vss.SchoolId = hmm.SchoolId AND hmm.IsActive = 1		
			LEFT JOIN HeadMasters hm ON hmm.HMId = hm.HMId AND hmm.IsActive = 1 		            			
			WHERE te.IsActive = 1 				
				AND ((@roleName = 'VT' AND vtm.VTId = @accountId) OR (@roleName = 'VC' AND vcm.VCId = @accountId)  OR UserId IS NULL)	 
				AND (AcademicYearId IS NULL OR te.AcademicYearId = AcademicYearId)
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
				AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vtm.VTPId = VTPId)
				AND (MonthId IS NULL OR MONTH(te.ReceiptDate) = CAST(MonthId AS UNSIGNED)) 
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)   
				AND ((HMId IS NULL AND schoolId IS NULL) OR vss.SchoolId = schoolId)
			) AS ted
		LEFT JOIN (SELECT terd.ToolEquipmentId, GROUP_CONCAT(terd.RoomDamaged) AS RoomDamaged FROM ToolEquipmentsRoomDamaged terd WHERE terd.IsActive = 1 GROUP BY terd.ToolEquipmentId) x ON x.ToolEquipmentId = ted.ToolEquipmentId 
		ORDER BY ted.AcademicYear,  ted.VTPName, ted.SectorName, ted.VCName, ted.SchoolName, ted.VTName;
    END;
    
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    # CALL GetLabConditionReport ('amol.shinde@lend-a-hand-india.org', Null,NULL,NULL,NULL,NULL,NULL,NUll,NULL,NULL,NULL);
	# CALL GetLabConditionReport ('rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f',NULL,NULL,NULL,NULL,NULL,NUll,NULL,NULL,NULL);
    # CALL GetLabConditionReport ('sachinkuldharan246@gmail.com','bb46d443-08ac-43d3-b31a-8b640be6be6f',NULL,NULL,NULL,NULL,NULL,NUll,NULL,NULL,NULL);
	# CALL GetLabConditionReport ('pradipdhangar29@gmail.com','bb46d443-08ac-43d3-b31a-8b640be6be6f',NULL,NULL,NULL,NULL,NULL,NUll,NULL,NULL,NULL);    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetMasterDataForDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetMasterDataForDropdown`(
	IN dataType  VARCHAR(50), 
    IN roleId    VARCHAR(100), 
    IN userId    VARCHAR(100), 
    IN parentId  VARCHAR(100)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
 
    BEGIN			
		IF(dataType = 'AcademicYears') THEN
			SELECT DISTINCT ay.AcademicYearId AS Id, ay.YearName AS Name, "" AS Description, ay.IsCurrentAcademicYear AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM AcademicYears ay   
			WHERE ay.IsActive = 1
			ORDER BY ay.YearName;	
		ELSEIF(dataType = 'AcademicYearsForTransfer') THEN
			SELECT StartMonth INTO @StartMonth FROM AcademicYears ay WHERE ay.IsCurrentAcademicYear = 1;
            
			SELECT DISTINCT ay.AcademicYearId AS Id, ay.YearName AS Name, "" AS Description, ay.IsCurrentAcademicYear AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM AcademicYears ay   
			WHERE ay.IsActive = 1 AND DATE(StartMonth) >= @StartMonth
			ORDER BY ay.YearName;	        
		ELSEIF(dataType = 'AcademicYearsByVC') THEN
			SELECT DISTINCT vcs.AcademicYearId AS Id, ay.YearName AS Name, "" AS Description, ay.IsCurrentAcademicYear AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VCSchoolSectors vcs
			INNER JOIN AcademicYears ay ON vcs.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
			WHERE vcs.IsActive = 1 
				AND ((roleId = 'VC' AND vcs.VCId = userId) OR vcs.AcademicYearId IS NOT NULL)
			ORDER BY ay.YearName;
 
        ELSEIF(dataType = 'Divisions') THEN
			IF(POSITION(roleId IN 'Roles: DisEO,DisRP,DivEO,BRP') > 0) THEN				
            BEGIN
				SELECT DISTINCT d.DivisionId AS Id, d.DivisionName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
				FROM AccountWorkLocations awl
                INNER JOIN Divisions d ON d.StateCode = 'MH' AND awl.DivisionId = d.DivisionId AND d.IsActive = 1  
				WHERE awl.IsActive = 1 AND awl.AccountId = userId
				ORDER BY d.DivisionName;	            
            END;
            ELSE
            BEGIN            
				SELECT DISTINCT d.DivisionId AS Id, d.DivisionName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
				FROM Divisions d   
				WHERE d.StateCode = 'MH' AND d.IsActive = 1 AND (parentId IS NULL OR d.StateCode = parentId)  
				ORDER BY d.DivisionName;	
            END;
            END IF;
		ELSEIF(dataType = 'JobRoles') THEN
			SELECT DISTINCT jr.JobRoleId AS Id, jr.JobRoleName AS Name, CAST(jr.SectorId AS NCHAR) AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM JobRoles jr   
			WHERE jr.IsActive = 1
				AND (parentId IS NULL OR jr.SectorId = parentId)
			ORDER BY jr.JobRoleName;	
		ELSEIF(dataType = 'Phases') THEN
			SELECT DISTINCT p.PhaseId AS Id, p.PhaseName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, p.DisplayOrder AS SequenceNo
			FROM Phases p   		 
			WHERE p.IsActive = 1  		
			ORDER BY p.DisplayOrder;	
		ELSEIF(dataType = 'ApprovalPhases') THEN
			SELECT DISTINCT p.PhaseId AS Id, p.PhaseName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM Phases p   
			INNER JOIN AcademicYears ay ON p.PhaseId = ay.PhaseId
			WHERE p.IsActive = 1 AND ay.AcademicYearId = parentId 
			ORDER BY p.PhaseName;             
		ELSEIF(dataType = 'Roles') THEN
			SELECT DISTINCT r.RoleId AS Id, r.Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM Roles r   
			WHERE r.Code <> 'SUR' AND r.IsActive = 1
			ORDER BY r.Name;	
		ELSEIF(dataType = 'SchoolCategories') THEN
			SELECT DISTINCT sc.SchoolCategoryId AS Id, sc.CategoryName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM SchoolCategories sc   
			WHERE sc.IsActive = 1
			ORDER BY sc.CategoryName;	
		ELSEIF(dataType = 'SchoolClasses') THEN
			SELECT DISTINCT sc.ClassId AS Id, sc.Name AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, sc.DisplayOrder AS SequenceNo
			FROM SchoolClasses sc   
			WHERE sc.IsActive = 1
			ORDER BY sc.DisplayOrder;	
		ELSEIF(dataType = 'Sections') THEN
			SELECT DISTINCT s.SectionId AS Id, s.Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM Sections s   
			WHERE s.IsActive = 1
			ORDER BY s.Name;	
		ELSEIF(dataType = 'Sectors') THEN
			SELECT DISTINCT s.SectorId AS Id, s.SectorName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM Sectors s   
			WHERE s.IsActive = 1
			ORDER BY s.SectorName;	
		ELSEIF(dataType = 'SiteHeaders') THEN
			SELECT DISTINCT sh.SiteHeaderId AS Id, sh.ShortName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM SiteHeaders sh   
			WHERE sh.IsActive = 1
			ORDER BY sh.DisplayOrder;	
		ELSEIF(dataType = 'Transactions') THEN
			SELECT DISTINCT t.TransactionId AS Id, t.Name AS Name, t.PageTitle AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM Transactions t   
			WHERE t.IsActive = 1
			ORDER BY t.Name;
		ELSEIF(dataType = 'AccountsByRole') THEN
			SELECT DISTINCT a.AccountId AS Id, CONCAT(a.UserName, '-', a.LoginId) AS Name, a.UserName AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM Accounts a
            INNER JOIN AccountRoles ar ON a.AccountId = ar.AccountId
			WHERE a.IsActive = 1 AND ar.RoleId = parentId
			ORDER BY a.UserName;
		ELSEIF(dataType = 'RoleTransactions') THEN
			SELECT DISTINCT rt.TransactionId AS Id, t.Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM RoleTransactions rt
            INNER JOIN Transactions t ON rt.TransactionId = t.TransactionId AND t.IsActive = 1
			WHERE rt.IsActive = 1 AND t.IsActive = 1 
			ORDER BY t.Name;
		ELSEIF(dataType = 'States') THEN
			SELECT DISTINCT s.StateCode AS Id, s.StateName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM States s   
			WHERE s.CountryCode = 'IN' AND s.IsActive = 1 
			ORDER BY s.StateName;	
		ELSEIF(dataType = 'Districts') THEN  			
			IF(POSITION(roleId IN 'Roles: DisEO,DisRP,BEO,BRP') > 0) THEN				
				SELECT DISTINCT d.DistrictCode AS Id, d.DistrictName AS Name, d.DivisionId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
				FROM AccountWorkLocations awl
				INNER JOIN Districts d ON awl.DivisionId = d.DivisionId AND awl.DistrictId = d.DistrictCode AND d.IsActive = 1  
				WHERE awl.IsActive = 1 AND awl.AccountId = userId AND awl.DivisionId = parentId				
				ORDER BY d.DistrictName;
			ELSE
				SELECT DISTINCT d.DistrictCode AS Id, d.DistrictName AS Name, d.DivisionId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
				FROM Districts d   			
				WHERE d.StateCode = 'MH' AND d.DivisionId = parentId AND d.IsActive = 1  
				ORDER BY d.DistrictName;
			END IF;					
		ELSEIF(dataType = 'DistrictsBySateCode') THEN
			SELECT DISTINCT d.DistrictCode AS Id, d.DistrictName AS Name, d.DivisionId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM Districts d   			
			WHERE d.IsActive = 1 AND d.StateCode = parentId 
			ORDER BY d.DistrictName;
		ELSEIF(dataType = 'DistrictsForSurvey') THEN  
			SELECT DISTINCT d.DistrictCode AS Id, d.DistrictName AS Name, d.DivisionId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM Districts d   			
			WHERE d.StateCode = 'MH' AND d.IsActive = 1  
			ORDER BY d.DistrictName;
		ELSEIF(dataType = 'DistrictForBlock') THEN  
			SELECT DISTINCT d.DistrictCode AS Id, d.DistrictName AS Name, d.DivisionId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM Districts d           
			WHERE d.IsActive = 1 AND d.StateCode = userId
			ORDER BY d.DistrictName;
		ELSEIF(dataType = 'Blocks') THEN
			SELECT DISTINCT b.BlockId AS Id, b.BlockName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM Blocks b		
			WHERE b.IsActive = 1 AND b.DistrictId = parentId 
			ORDER BY b.BlockName;     
		ELSEIF(dataType = 'Clusters') THEN
			SELECT DISTINCT c.ClusterId AS Id, c.ClusterName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM Clusters c		
			WHERE c.IsActive = 1 AND c.BlockId = parentId 
			ORDER BY c.ClusterName;     
		ELSEIF(dataType = 'DataTypes') THEN
			SELECT DISTINCT CAST(dt.DataTypeId AS CHAR) AS Id, dt.Name, dt.Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM DataTypes dt  
			WHERE dt.IsActive = 1
			ORDER BY dt.Name;	
		ELSEIF(dataType = 'DataValues') THEN
			SELECT DISTINCT dv.DataValueId AS Id, dv.Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, dv.DisplayOrder AS SequenceNo
			FROM DataValues dv   
			WHERE dv.IsActive = 1 AND dv.DataTypeId = parentId 
			ORDER BY dv.DisplayOrder;	
		ELSEIF(dataType = 'HeadMasters') THEN
			SELECT DISTINCT hm.HMId AS Id, hm.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM HMSchoolsMap hsm   
            INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive = 1
            INNER JOIN AcademicYears ay ON hsm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
			WHERE hsm.IsActive = 1 AND hsm.DateOfResignation IS NULL
			ORDER BY hm.FullName;	
		ELSEIF(dataType = 'VocationalTrainingProviders') THEN
			SELECT DISTINCT vtp.VTPId AS Id, vtp.VTPName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTPAcademicYearsMap vtpm   
            INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
			WHERE vtpm.IsActive = 1 AND vtpm.DateOfResignation IS NULL
				AND (parentId IS NULL OR vtpm.AcademicYearId = parentId)
			ORDER BY vtp.VTPName;
		ELSEIF(dataType = 'VocationalCoordinators') THEN
			SELECT DISTINCT vc.VCId AS Id, vc.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTPCoordinatorsMap vcm   
            INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
            INNER JOIN AcademicYears ay ON vcm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
			WHERE vcm.IsActive = 1 AND vcm.DateOfResignation IS NULL 
				AND (parentId IS NULL OR vcm.VTPId = parentId)  
			ORDER BY vc.FullName;	
		ELSEIF(dataType = 'AllVCs') THEN
			SELECT DISTINCT vc.VCId AS Id, vc.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo			
            FROM VTPCoordinatorsMap vcm   
            INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
            INNER JOIN AcademicYears ay ON vcm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
            WHERE vcm.IsActive = 1 AND vcm.DateOfResignation IS NULL 
			ORDER BY vc.FullName;	
		ELSEIF(dataType = 'VocationalTrainers') THEN
			SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VCTrainersMap vtm   
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
            INNER JOIN AcademicYears ay ON vtm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
			WHERE vtm.IsActive = 1 AND vtm.DateOfResignation IS NULL 			
			ORDER BY vt.FullName;	
		ELSEIF(dataType = 'AllVTs') THEN
			SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VCTrainersMap vtm   
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
            INNER JOIN AcademicYears ay ON vtm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
			WHERE vtm.IsActive = 1 AND vtm.DateOfResignation IS NULL 			
			ORDER BY vt.FullName;	            
		ELSEIF(dataType = 'Schools') THEN
			SELECT DISTINCT s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, s.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM Schools s   
			WHERE s.IsActive = 1 AND (parentId IS NULL OR s.SchoolId = parentId)  
			ORDER BY Name;	
		ELSEIF(dataType = 'AllSchools') THEN
			SELECT DISTINCT s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, s.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM Schools s   
			WHERE s.IsActive = 1  
			ORDER BY Name;	
		ELSEIF(dataType = 'SchoolsByVT') THEN
			SELECT DISTINCT s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, s.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTSchoolSectors vss
			INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
            INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
            INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1            
			WHERE vss.IsActive = 1 AND vss.VTId = parentId
			ORDER BY Name;			
		ELSEIF(dataType = 'SchoolsByRole') THEN
			IF (roleId = 'HM') THEN
             BEGIN
				SELECT DISTINCT s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, s.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
				FROM HMSchoolsMap hsm
                INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive = 1 
                INNER JOIN Schools s ON hsm.SchoolId = s.SchoolId AND s.IsActive = 1 
				WHERE hsm.IsActive = 1 AND hsm.DateOfResignation IS NULL AND hsm.HMId = parentId
				ORDER BY Name;	
			END;
            ELSE 
            BEGIN
				SELECT DISTINCT s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, s.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
				FROM Schools s   
				WHERE (roleId = 'ADM' OR (roleId = 'HM' AND s.SchoolId = parentId))
				ORDER BY Name;	
            END;
            END IF;
		ELSEIF(dataType = 'AcademicYearsByVT') THEN
			IF(POSITION(roleId IN 'Roles: VT') = 0) THEN				
				SET parentId = NULL;
            END IF;
            
			SELECT DISTINCT vss.AcademicYearId AS Id, ay.YearName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTSchoolSectors vss
            INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
			INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1 
			WHERE vss.IsActive = 1 
				AND (parentId IS NULL OR vss.VTId = parentId)
			ORDER BY ay.YearName;
		ELSEIF(dataType = 'ClassesByVT') THEN
			SELECT DISTINCT vc.ClassId AS Id, sc.Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, sc.DisplayOrder AS SequenceNo
			FROM VTClasses vc
			INNER JOIN VCTrainersMap vtm ON vc.AcademicYearId = vtm.AcademicYearId AND vc.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1            
			INNER JOIN SchoolClasses sc ON vc.ClassId = sc.ClassId AND sc.IsActive = 1
			WHERE vc.IsActive = 1 AND vc.VTId = userId AND vc.AcademicYearId = parentId
			ORDER BY sc.DisplayOrder;
		ELSEIF(dataType = 'ClassesByVTForCM') THEN
			SELECT DISTINCT vc.VTClassId AS Id, sc.Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, sc.DisplayOrder AS SequenceNo
			FROM VTClasses vc
            INNER JOIN VCTrainersMap vtm ON vc.AcademicYearId = vtm.AcademicYearId AND vc.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1            
			INNER JOIN SchoolClasses sc ON vc.ClassId = sc.ClassId AND sc.IsActive = 1
			WHERE vc.IsActive = 1 AND vc.VTId = userId AND vc.AcademicYearId = parentId
			ORDER BY sc.DisplayOrder;
		ELSEIF(dataType = 'SectorsByVT') THEN
			SELECT DISTINCT vss.VTSchoolSectorId AS Id, se.SectorName AS Name, vss.SectorId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTSchoolSectors vss
            INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1                        
			INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
            INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
			WHERE vss.IsActive = 1 AND vss.VTId = userId
			ORDER BY se.SectorName;
		ELSEIF(dataType = 'JobRolesForVT') THEN
			SELECT DISTINCT jr.JobRoleId AS Id, jr.JobRoleName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTSchoolSectors vss
            INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1      
			INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1     
			INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
			WHERE vss.IsActive = 1 AND vss.VTSchoolSectorId = parentId
			ORDER BY jr.JobRoleName;
		ELSEIF(dataType = 'JobRolesByVT') THEN
			SELECT DISTINCT jr.JobRoleId AS Id, jr.JobRoleName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTSchoolSectors vss
			INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1      
			INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1          
			INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
			WHERE vss.IsActive = 1 AND vss.VTId = parentId
			ORDER BY jr.JobRoleName;
		ELSEIF(dataType = 'TEJobRolesForVT') THEN
			SELECT DISTINCT jr.JobRoleId AS Id, jr.JobRoleName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTSchoolSectors vss
            INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1      
			INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1            
			INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
			WHERE vss.IsActive = 1 AND vss.AcademicYearId = roleId AND vss.VTId = userId AND vss.VTSchoolSectorId = parentId
			ORDER BY jr.JobRoleName;                       
		ELSEIF(dataType = 'SectionsByVT') THEN
			SELECT DISTINCT vcs.SectionId AS Id, s.Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, s.DisplayOrder AS SequenceNo
			FROM VTClassSections vcs
			INNER JOIN VTClasses vc ON vcs.VTClassId = vc.VTClassId AND vc.IsActive = 1
			INNER JOIN VCTrainersMap vtm ON vc.AcademicYearId = vtm.AcademicYearId AND vc.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1      
			INNER JOIN AcademicYears ay ON vc.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1            
			INNER JOIN Sections s ON vcs.SectionId = s.SectionId AND s.IsActive = 1
			WHERE vcs.IsActive = 1 AND vc.VTId = userId AND vc.ClassId = parentId
			ORDER BY s.DisplayOrder;
		ELSEIF(dataType = 'VocationalTrainersByVC') THEN
			IF(roleId <> 'VC') THEN													  
				SET parentId = NULL;		 
			END IF;
		  
			SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VCTrainersMap vtm
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
            INNER JOIN AcademicYears ay ON vtm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1            
			WHERE vtm.IsActive = 1 AND vtm.DateOfResignation IS NULL 
				AND (parentId IS NULL OR vtm.VCId = parentId)
			ORDER BY vt.FullName;
		ELSEIF(dataType = 'SchoolVTPSectors') THEN
			SELECT DISTINCT svs.SchoolVTPSectorId AS Id, CONCAT(s.SchoolName, ' - ', vtp.VTPName, ' - ', se.SectorName) AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM SchoolVTPSectors svs   
			INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
			INNER JOIN VTPAcademicYearsMap vtpm ON svs.AcademicYearId = vtpm.AcademicYearId AND svs.VTPId = vtpm.VTPId AND vtpm.DateOfResignation IS NULL AND vtpm.IsActive = 1
            INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
			INNER JOIN AcademicYears ay ON svs.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
            INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1            
			WHERE svs.IsActive = 1 
			ORDER BY Name;	
		ELSEIF(dataType = 'SectorJobRoles') THEN
			SELECT DISTINCT jr.JobRoleId AS Id, CONCAT(jr.JobRoleName, ' - ', s.SectorName) AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM JobRoles jr   
			INNER JOIN Sectors s ON jr.SectorId = s.SectorId AND s.IsActive = 1
			WHERE jr.IsActive = 1
			ORDER BY Name;
      ELSEIF(dataType = 'JobRolesBySector') THEN
			SELECT DISTINCT jr.JobRoleId AS Id, CONCAT(jr.JobRoleName) AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM JobRoles jr   
			INNER JOIN Sectors s ON jr.SectorId = s.SectorId AND s.IsActive = 1
			WHERE jr.IsActive = 1 And s.SectorId = ParentId
			ORDER BY Name;            
		ELSEIF(dataType = 'Students') THEN
			SELECT DISTINCT sc.StudentId AS Id, sc.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM StudentClasses sc              
			WHERE sc.IsActive = 1 AND sc.DateOfDropout IS NULL AND sc.DeletedBy IS NULL
			ORDER BY sc.FullName;		
		ELSEIF(dataType = 'VTClasses') THEN
			SELECT DISTINCT vtc.VTClassId AS Id, CONCAT(vt.FullName, ' - ', sc.Name, ' - ', s.Name) AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTClasses vtc   
            INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
            INNER JOIN AcademicYears ay ON vtc.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
			INNER JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId AND sc.IsActive = 1
            LEFT JOIN VTClassSections vtcs ON vtc.VTClassId = vtcs.VTClassId 
			INNER JOIN Sections s ON vtcs.SectionId = s.SectionId AND s.IsActive = 1
			WHERE vtc.IsActive = 1
			ORDER BY Name;	
		ELSEIF(dataType = 'VTPSectors') THEN
			SELECT DISTINCT vs.VTPSectorId AS Id, CONCAT(vtp.VTPName, ' - ', s.SectorName) AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTPSectors vs  
            INNER JOIN VTPAcademicYearsMap vtpm ON vs.AcademicYearId = vtpm.AcademicYearId AND vs.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
			INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
			INNER JOIN Sectors s ON vs.SectorId = s.SectorId AND s.IsActive = 1
			WHERE vs.IsActive = 1
			ORDER BY Name;	
		ELSEIF(dataType = 'VTSchoolSectors') THEN
			SELECT DISTINCT ss.VTSchoolSectorId AS Id, CONCAT(vt.FullName, ' - ', s.SchoolName, ' - ', se.SectorName) AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTSchoolSectors ss  
            INNER JOIN VCTrainersMap vtm ON ss.AcademicYearId = vtm.AcademicYearId AND ss.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
			INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
			INNER JOIN Schools s ON ss.SchoolId = s.SchoolId AND s.IsActive = 1
			INNER JOIN Sectors se ON ss.SectorId = se.SectorId AND se.IsActive = 1
			WHERE ss.IsActive = 1
			ORDER BY Name;	
		ELSEIF(dataType = 'VCSchoolSectors') THEN
			SELECT DISTINCT ss.VCSchoolSectorId AS Id, CONCAT(vc.FullName, ' - ', s.SchoolName, ' - ', se.SectorName) AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VCSchoolSectors ss   
            INNER JOIN SchoolVTPSectors svs ON ss.AcademicYearId = svs.AcademicYearId AND ss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
            INNER JOIN VTPCoordinatorsMap vcm ON ss.AcademicYearId = vcm.AcademicYearId AND svs.VTPId = vcm.VTPId AND ss.VCId = vcm.VCId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1
			INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1			
			INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
			INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1
			WHERE ss.IsActive = 1
			ORDER BY Name;			 
		ELSEIF(dataType = 'MainIssue') THEN
			SELECT DISTINCT mi.MainIssueId AS Id, mi.Name AS Name, mi.Code AS Description, 0 AS IsSelected, 0 AS IsDisabled, mi.DisplayOrder AS SequenceNo
			FROM MainIssues mi
            INNER JOIN SubIssues si ON mi.MainIssueId = si.MainIssueId AND si.IsActive = 1
			WHERE mi.IsActive = 1
				AND ((userId = 'VT' AND si.IsApplicableForVT = 1) OR (userId = 'VC' AND si.IsApplicableForVC = 1) OR (userId = 'HM' AND si.IsApplicableForHM = 1))
			ORDER BY mi.DisplayOrder, mi.Name;             
		ELSEIF(dataType = 'SubIssue') THEN        
			SELECT DISTINCT si.SubIssueId AS Id, si.IssueName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, si.DisplayOrder AS SequenceNo
			FROM SubIssues si   
			WHERE si.IsActive = 1 AND si.MainIssueId = parentId 
            AND ((userId = 'VT' AND si.IsApplicableForVT = 1) OR (userId = 'VC' AND si.IsApplicableForVC = 1) OR (userId = 'HM' AND si.IsApplicableForHM = 1))
			ORDER BY si.DisplayOrder, si.IssueName;
		ELSEIF(dataType = 'SubIssueForMobile') THEN        
			SELECT DISTINCT si.SubIssueId AS Id, si.IssueName AS Name, si.MainIssueId AS Description, 0 AS IsSelected, 0 AS IsDisabled, si.DisplayOrder AS SequenceNo
			FROM SubIssues si   
			WHERE si.IsActive = 1 
            AND ((userId = 'VT' AND si.IsApplicableForVT = 1) OR (userId = 'VC' AND si.IsApplicableForVC = 1) OR (userId = 'HM' AND si.IsApplicableForHM = 1))
			ORDER BY si.DisplayOrder, si.IssueName;
		ELSEIF(dataType = 'MainIssueView') THEN
			SELECT DISTINCT mi.MainIssueId AS Id, mi.Name AS Name, mi.Code AS Description, 0 AS IsSelected, 0 AS IsDisabled, mi.DisplayOrder AS SequenceNo
			FROM MainIssues mi
            INNER JOIN SubIssues si ON mi.MainIssueId = si.MainIssueId
			WHERE mi.IsActive = 1				
			ORDER BY mi.DisplayOrder, mi.Name;
		ELSEIF(dataType = 'SubIssueView') THEN        
			SELECT DISTINCT si.SubIssueId AS Id, si.IssueName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, si.DisplayOrder AS SequenceNo
			FROM SubIssues si   
			WHERE si.IsActive = 1 AND si.MainIssueId = parentId             
			ORDER BY si.DisplayOrder, si.IssueName;
		ELSEIF(dataType = 'VocationalTrainingProvidersByVTP') THEN
			SELECT DISTINCT v.VTPId AS Id, vtp.VTPName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTPSectors v
			INNER JOIN AcademicYears ay ON v.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
			INNER JOIN VTPAcademicYearsMap vtpm ON v.AcademicYearId = vtpm.AcademicYearId AND v.VTPId = vtpm.VTPId AND vtpm.DateOfResignation IS NULL AND vtpm.IsActive = 1
            INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
			WHERE v.IsActive = 1 AND v.AcademicYearId = parentId 
			ORDER BY vtp.VTPName;
		ELSEIF(dataType = 'SectorsByVTP') THEN
			SELECT DISTINCT s.SectorId AS Id, s.SectorName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTPSectors vs
            INNER JOIN VTPAcademicYearsMap vtpm ON vs.AcademicYearId = vtpm.AcademicYearId AND vs.VTPId = vtpm.VTPId AND vtpm.DateOfResignation IS NULL AND vtpm.IsActive = 1
            INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
			INNER JOIN Sectors s ON vs.SectorId = s.SectorId AND s.IsActive = 1
			WHERE vs.IsActive = 1 AND vs.VTPId = parentId 
			ORDER BY s.SectorName;        
		ELSEIF(dataType = 'VTPSectorJobRoles') THEN
			SELECT DISTINCT sjr.VTPSectorJobRoleId AS Id, sjr.VTPSectorJobRoleName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTPSectorJobRoles sjr   
			WHERE sjr.IsActive = 1
			ORDER BY sjr.VTPSectorJobRoleName;
		ELSEIF(dataType = 'CourseModules') THEN
			SELECT DISTINCT d.DataValueId AS Id, d.Name AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, d.DisplayOrder AS SequenceNo
			FROM DataValues d   
			WHERE d.DataTypeId = 'CourseModule' AND d.IsActive = 1
			ORDER BY d.DisplayOrder, d.Name;
		ELSEIF(dataType = 'WorkingDayType') THEN
			SELECT DISTINCT d.DataValueId AS Id, d.Name AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, d.DisplayOrder AS SequenceNo
			FROM DataValues d   
			WHERE d.DataTypeId = 'WorkingDayType' AND d.IsActive = 1 AND d.ParentId = parentId 
			ORDER BY d.DisplayOrder, d.Name;
		ELSEIF(dataType = 'VCWorkType') THEN
			SELECT DISTINCT d.DataValueId AS Id, d.Name AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, d.DisplayOrder AS SequenceNo
			FROM DataValues d   
			WHERE d.DataTypeId = 'VCWorkType' AND d.IsActive = 1 AND d.ParentId = parentId 
			ORDER BY d.DisplayOrder, d.Name;
		ELSEIF(dataType = 'DRPWorkType') THEN
			SELECT DISTINCT d.DataValueId AS Id, d.Name AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, d.DisplayOrder AS SequenceNo
			FROM DataValues d   
			WHERE d.DataTypeId = 'DRPWorkType' AND d.IsActive = 1 AND d.ParentId = parentId 
			ORDER BY d.DisplayOrder, d.Name;
		ELSEIF(dataType = 'VTOtherWork') THEN
			SELECT DISTINCT d.DataValueId AS Id, d.Name AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, d.DisplayOrder AS SequenceNo
			FROM DataValues d   
			WHERE d.DataTypeId = 'VTOtherWork' AND d.IsActive = 1 
			ORDER BY d.DisplayOrder, d.Name;
		ELSEIF(dataType = 'BasicList') THEN
			SELECT DISTINCT d.DataValueId AS Id, d.Name AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, d.DisplayOrder AS SequenceNo
			FROM DataValues d   
			WHERE d.IsActive = 1 AND d.DataTypeId = parentId
			ORDER BY d.DisplayOrder, d.Name;
		ELSEIF(dataType = 'AcademicYearsByVC') THEN
			SELECT DISTINCT vcss.AcademicYearId AS Id, ay.YearName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VCSchoolSectors vcss
			INNER JOIN SchoolVTPSectors svs ON vcss.AcademicYearId = svs.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
            INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND svs.VTPId = vcm.VTPId AND vcss.VCId = vcm.VCId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1 			
            INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1 									
            INNER JOIN AcademicYears ay ON vcss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1 									
			WHERE vcss.IsActive = 1 AND vcss.VCId = parentId
			ORDER BY ay.YearName;		 
		ELSEIF(dataType = 'SchoolsByVC') THEN
            SELECT DISTINCT s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, s.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VCSchoolSectors vcss
			INNER JOIN SchoolVTPSectors svs ON vcss.AcademicYearId = svs.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
            INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND svs.VTPId = vcm.VTPId AND vcss.VCId = vcm.VCId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1 			
            INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1 			
            INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
			WHERE vcss.IsActive = 1 AND vcss.VCId = parentId
				AND (userId IS NULL OR vcss.AcademicYearId = userId)
			ORDER BY Name;	
		ELSEIF(dataType = 'SectorsByVC') THEN
			SELECT DISTINCT se.SectorId AS Id, CONCAT(vc.FullName, ' - ', s.SchoolName, ' - ', se.SectorName) AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM SchoolVTPSectors svtps
			INNER JOIN VCSchoolSectors vcss ON svtps.AcademicYearId = vcss.AcademicYearId AND svtps.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1 
            INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND svtps.VTPId = vcm.VTPId AND vcss.VCId = vcm.VCId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1 
            INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1 
			INNER JOIN Sectors se ON se.SectorId = svtps.SectorId AND se.IsActive = 1
			INNER JOIN Schools s ON s.SchoolId = svtps.SchoolId AND s.IsActive = 1
			WHERE svtps.IsActive = 1 AND vcss.VCId = parentId
			ORDER BY Name;
		ELSEIF(dataType = 'VTPForCTS') THEN
            SELECT DISTINCT vtp.VTPId AS Id, vtp.VTPShortName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM SchoolVTPSectors svs 
			INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1
            INNER JOIN VTPAcademicYearsMap vtpm ON svs.AcademicYearId = vtpm.AcademicYearId AND svs.VTPId = vtpm.VTPId AND vtpm.DateOfResignation IS NULL AND vtpm.IsActive = 1            
            INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
			WHERE svs.IsActive = 1 AND svs.SchoolId = parentId
            ORDER BY Name;	
		ELSEIF(dataType = 'VCForCTS') THEN
			SELECT DISTINCT vc.VCId AS Id, vc.FullName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM SchoolVTPSectors svs 
			INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1
			INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND svs.VTPId = vcm.VTPId AND vcss.VCId = vcm.VCId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1            
			INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
			WHERE svs.IsActive = 1 AND vcm.VTPId = userId AND svs.SchoolId = parentId
            ORDER BY Name;	
		ELSEIF(dataType = 'VTForCTS') THEN
			SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTSchoolSectors vtss
			INNER JOIN VCTrainersMap vtm ON vtss.AcademicYearId = vtm.AcademicYearId AND vtss.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1     
			INNER JOIN AcademicYears ay ON vtm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
			INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
			WHERE vtss.IsActive = 1 AND vtss.SchoolId = parentId AND vtm.VCId = userId
            ORDER BY Name;
		ELSEIF(dataType = 'TrainersBySchool') THEN			
			SELECT DISTINCT vts.VTId AS Id, vt.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTSchoolSectors vts
			INNER JOIN VCTrainersMap vtm ON vts.AcademicYearId = vtm.AcademicYearId AND vts.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
            INNER JOIN AcademicYears ay ON vts.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1  
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
			WHERE vts.IsActive = 1 AND vts.SchoolId = parentId
			ORDER BY vt.FullName;
		ELSEIF(dataType = 'TETrainersBySchool') THEN			
			SELECT DISTINCT vts.VTId AS Id, vt.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTSchoolSectors vts
			INNER JOIN VCTrainersMap vtm ON vts.AcademicYearId = vtm.AcademicYearId AND vts.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
            INNER JOIN VocationalTrainers vt ON vts.VTId = vt.VTId AND vt.IsActive = 1 
			WHERE vts.IsActive = 1 AND vts.SchoolId = parentId
			ORDER BY vt.FullName;            
		ELSEIF(dataType = 'SectionsByAYVTCL') THEN			
			SELECT DISTINCT se.SectionId AS Id, se.Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTClassSections vtcs
			INNER JOIN VTClasses vtc ON vtcs.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
            INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
			INNER JOIN AcademicYears ay ON vtc.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
			INNER JOIN Sections se ON vtcs.SectionId = se.SectionId AND se.IsActive = 1
			WHERE vtc.VTId = userId AND vtc.SchoolId = parentId AND vtc.ClassId = roleId
			ORDER BY se.Name; 											   
		ELSEIF(dataType = 'TrainersFromEvv') THEN		
			SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VocationalTrainers vt             
            INNER JOIN temp_vocationaltrainer tv ON vt.Email = tv.vchEmail OR vt.Mobile = tv.vchMobile
            INNER JOIN temp_schools ts ON tv.vchUdiseCode = ts.vchUdiseCode
            INNER JOIN Schools s ON ts.vchUdiseCode = s.UDISE
			WHERE vt.IsActive = 1 AND s.SchoolId = parentId
			ORDER BY vt.FullName;        
		ELSEIF(dataType = 'StudentsFromEvv') THEN			
			SELECT DISTINCT st.studentId AS Id, st.vchStudentName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM temp_studentdetails st 
			WHERE st.lahi_uploaded_flag = 0
			ORDER BY st.vchStudentName;											 
		ELSEIF(dataType = 'ClassesForCMByVT') THEN
			SELECT DISTINCT vtc.ClassId AS Id, sc.Name AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTClasses vtc
            INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
            INNER JOIN AcademicYears ay ON vtc.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
			INNER JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId AND sc.IsActive = 1
			WHERE vtc.IsActive = 1 AND vtc.VTId = parentId
			ORDER BY sc.DisplayOrder;
		ELSEIF(dataType = 'VTPByVC') THEN
			SELECT DISTINCT vcm.VTPId AS Id, vcm.VCId AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VTPCoordinatorsMap vcm		
            INNER JOIN AcademicYears ay ON vcm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
            INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1            
			WHERE vcm.IsActive = 1 AND vcm.DateOfResignation IS NULL AND vcm.VCId = parentId;
		ELSEIF(dataType = 'VCVTPByVT') THEN
			SELECT DISTINCT vtm.VTPId AS Id, vtm.VCId AS Name, vtm.VTId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM VCTrainersMap vtm 
            INNER JOIN AcademicYears ay ON vtm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1            
			WHERE vtm.IsActive = 1 AND vtm.DateOfResignation IS NULL AND vtm.VTId = parentId;            
            
		ELSEIF(dataType = 'VocationalCoordinatorsByUserId') THEN
			BEGIN
				IF(roleId = 'VC') THEN				
					SELECT DISTINCT vc.VCId AS Id, vc.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM VTPCoordinatorsMap vcm 
                    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
                    INNER JOIN AcademicYears ay ON vcm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
					WHERE vcm.IsActive = 1 AND vcm.DateOfResignation IS NULL AND vcm.VTPId = parentId AND vc.EmailId = userId
					ORDER BY vc.FullName;
				ELSEIF(roleId = 'ADM') THEN 			
					SELECT DISTINCT vc.VCId AS Id, vc.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM VTPCoordinatorsMap vcm   
                    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
                    INNER JOIN AcademicYears ay ON vcm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
					WHERE vcm.IsActive = 1 AND vcm.DateOfResignation IS NULL AND vcm.VTPId = parentId
					ORDER BY vc.FullName;					
				ELSE 
					SELECT DISTINCT vc.VCId AS Id, vc.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM VTPCoordinatorsMap vcm   
                    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
                    INNER JOIN AcademicYears ay ON vcm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
					WHERE vcm.IsActive = 1 AND vcm.DateOfResignation IS NULL 
					ORDER BY vc.FullName;
				END IF;
			END;
		ELSEIF(dataType = 'VocationalTrainingProvidersByUserId') THEN
			BEGIN
				IF(roleId = 'VC') THEN				
					SELECT DISTINCT vtp.VTPId AS Id, vtp.VTPName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM VTPAcademicYearsMap vtpm  
					INNER JOIN VTPCoordinatorsMap vcm ON vtpm.AcademicYearId = vcm.AcademicYearId AND vtpm.VTPId = vcm.VTPId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1                    
                    INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1                    
                    INNER JOIN AcademicYears ay ON vtpm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
					WHERE vtpm.IsActive = 1 AND (userId IS NULL OR vcm.VCId = userId)
					ORDER BY vtp.VTPName;	
				ELSEIF(roleId = 'ADM') THEN 			
					SELECT DISTINCT vtp.VTPId AS Id, vtp.VTPName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM VTPAcademicYearsMap vtpm  
					INNER JOIN VTPCoordinatorsMap vcm ON vtpm.AcademicYearId = vcm.AcademicYearId AND vtpm.VTPId = vcm.VTPId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1                    
                    INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1                    
                    INNER JOIN AcademicYears ay ON vtpm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
					WHERE vtpm.IsActive = 1
					ORDER BY vtp.VTPName;	
				ELSEIF(roleId = 'HM') THEN 							
					SELECT DISTINCT svs.VTPId AS Id, vtp.VTPShortName AS Name, vtp.VTPName AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM HMSchoolsMap hsm
					INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive = 1
					INNER JOIN SchoolVTPSectors svs ON hsm.AcademicYearId = svs.AcademicYearId AND hsm.SchoolId = svs.SchoolId AND svs.IsActive = 1
					INNER JOIN VTPAcademicYearsMap vtpm ON svs.AcademicYearId = vtpm.AcademicYearId AND svs.VTPId = vtpm.VTPId AND vtpm.DateOfResignation IS NULL AND vtpm.IsActive = 1                    
                    INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1                    					
					WHERE hsm.IsActive = 1 AND hsm.HMId = UserId
                    ORDER BY vtp.VTPName;
				ELSE 
					SELECT DISTINCT vtp.VTPId AS Id, vtp.VTPName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM VTPAcademicYearsMap vtpm   
                    INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1                    
                    INNER JOIN AcademicYears ay ON vtpm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1                    					
					WHERE vtpm.IsActive = 1 AND vtpm.DateOfResignation IS NULL  
					ORDER BY vtp.VTPName;
				END IF;
			END;
		ELSEIF(dataType = 'SchoolsByUserId') THEN
			BEGIN            
				IF(roleId = 'VC') THEN				
					SELECT DISTINCT s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, s.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM Schools s  
					INNER JOIN SchoolVTPSectors svtps ON svtps.SchoolId = s.SchoolId AND svtps.IsActive = 1
					INNER JOIN VCSchoolSectors vcss ON svtps.AcademicYearId = vcss.AcademicYearId AND vcss.SchoolVTPSectorId = svtps.SchoolVTPSectorId AND vcss.IsActive = 1	
					INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND svtps.VTPId = vcm.VTPId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1
                    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
					WHERE s.IsActive = 1 AND vc.VCId = userId 
					ORDER BY Name;
				ELSEIF(roleId = 'ADM') THEN 			
					SELECT DISTINCT s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, s.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM Schools s   
					WHERE s.IsActive = 1 
					ORDER BY Name;
				ELSE 
					SELECT DISTINCT s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, s.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM Schools s   
					WHERE s.IsActive = 1  
					ORDER BY Name;
				END IF;        
			END;
		ELSEIF(dataType = 'SectorsByUserId') THEN
			BEGIN				 
				IF(roleId = 'VC') THEN				
					SELECT DISTINCT s.SectorId AS Id, s.SectorName AS Name, svtps.SchoolId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM Sectors s   
					INNER JOIN SchoolVTPSectors svtps ON svtps.SectorId = s.SectorId AND svtps.IsActive = 1
					INNER JOIN VCSchoolSectors vcss ON vcss.SchoolVTPSectorId = svtps.SchoolVTPSectorId AND vcss.IsActive = 1 
					INNER JOIN VocationalCoordinators vc ON vc.VCId = vcss.VCId AND vc.IsActive = 1
					WHERE s.IsActive = 1 AND vc.VCId = userId AND (parentId IS NULL OR svtps.SchoolId = parentId)
					ORDER BY s.SectorName;
				ELSEIF(roleId = 'ADM') THEN 			
					SELECT DISTINCT s.SectorId AS Id, s.SectorName AS Name, svtps.SchoolId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM Sectors s   
					INNER JOIN SchoolVTPSectors svtps ON svtps.SectorId = s.SectorId AND svtps.IsActive = 1
					WHERE s.IsActive = 1 AND (parentId IS NULL OR svtps.SchoolId = parentId) 
					ORDER BY s.SectorName;
				ELSE 
					SELECT DISTINCT s.SectorId AS Id, s.SectorName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM Sectors s   
					WHERE s.IsActive = 1
					ORDER BY s.SectorName;
				END IF;        
			END;		
		ELSEIF(dataType = 'SectorsForVCReporting') THEN
			BEGIN				 
				SELECT DISTINCT svs.SchoolId AS Id, se.SectorName AS Name, svs.SectorId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
				FROM SchoolVTPSectors svs
				INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND vcss.IsActive = 1 
				INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1
				INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1
				WHERE svs.IsActive = 1 AND vcss.VCId = userId 
					AND vcss.AcademicYearId = parentId
				ORDER BY Name;				 
			END;	
        ELSEIF( dataType = 'SectorsForVC') THEN 
			BEGIN 
				SELECT DISTINCT se.SectorId AS Id, se.SectorName AS Name , '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
				FROM SchoolVTPSectors svs
				INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1 
				INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1
				INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1 
				WHERE svs.IsActive = 1 AND vcss.AcademicYearId = parentId 
					AND vcss.VCId = userId AND svs.SchoolId = roleId 
				ORDER BY se.SectorName;
            END;
		ELSEIF(dataType = 'JobRolesByUserId') THEN
			BEGIN
				SELECT r.Code, ar.AccountId INTO @roleCode, @accountId
				FROM AccountRoles ar 
				INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
				INNER JOIN Roles r ON ar.RoleId = r.RoleId
				WHERE a.LoginId = userId;
				
				IF(@roleCode = 'VC') THEN				
					SELECT DISTINCT jr.JobRoleId AS Id, jr.JobRoleName AS Name, IFNULL(jr.SectorId, '') AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM JobRoles jr
					INNER JOIN SchoolVTPSectors svtps ON svtps.SectorId = jr.SectorId AND svtps.IsActive = 1
					INNER JOIN VCSchoolSectors vcss ON vcss.SchoolVTPSectorId = svtps.SchoolVTPSectorId AND vcss.IsActive = 1
					WHERE jr.IsActive = 1 AND vcss.VCId = @accountId
					ORDER BY jr.JobRoleName;
				ELSEIF(@roleCode = 'ADM') THEN 			
					SELECT DISTINCT jr.JobRoleId AS Id, jr.JobRoleName AS Name, jr.SectorId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM JobRoles jr
					WHERE jr.IsActive = 1
					ORDER BY jr.JobRoleName;
				ELSE 
					SELECT DISTINCT jr.JobRoleId AS Id, jr.JobRoleName AS Name, IFNULL(jr.SectorId, '') AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
					FROM JobRoles jr
					WHERE jr.IsActive = 1
					ORDER BY jr.JobRoleName;
				END IF;        
			END;													
		ELSEIF(dataType = 'EligibleVTPsForTransfer') THEN
			BEGIN		 
                SELECT DISTINCT vtp.VTPId AS Id, vtp.VTPName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
				FROM VTPAcademicYearsMap vtpm
                INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
				LEFT JOIN VTPSectors vs ON vtpm.AcademicYearId = vs.AcademicYearId AND vtpm.VTPId = vs.VTPId AND vs.IsActive = 1                
				WHERE vtpm.IsActive = 1 AND vtpm.DateOfResignation IS NULL
					AND vtpm.AcademicYearId = parentId
				ORDER BY vtp.VTPName;
            END;
		ELSEIF(dataType = 'EligibleVCsForTransfer') THEN
			BEGIN
				SELECT DISTINCT vc.VCId AS Id, vc.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
				FROM VTPCoordinatorsMap vcm
                INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1				
				WHERE vc.IsActive = 1 AND vcm.DateOfResignation IS NULL 
					AND vcm.AcademicYearId = parentId 
				ORDER BY vc.FullName;
            END;
        ELSEIF(dataType = 'EligibleVTsForTransfer') THEN
			BEGIN
				SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
				FROM VCTrainersMap vtm
                INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1				
				WHERE vt.IsActive = 1 AND vtm.DateOfResignation IS NULL 
					AND vss.AcademicYearId = parentId
				ORDER BY vt.FullName;                
            END;
		ELSEIF(dataType = 'MessageTypes') THEN
			BEGIN
				SELECT DISTINCT dv.Code AS Id, dv.Name, dv.DataValueId AS Description, 0 AS IsSelected, 0 AS IsDisabled, dv.DisplayOrder AS SequenceNo
				FROM DataValues dv 
				WHERE dv.DataTypeId = 'MessageType'
				ORDER BY dv.DisplayOrder;             
            END;
		ELSEIF(dataType = 'MessageSubTypes') THEN
			BEGIN
				SELECT DISTINCT dv.Code AS Id, dv.Name, dv.DataValueId AS Description, 0 AS IsSelected, 0 AS IsDisabled, dv.DisplayOrder AS SequenceNo
				FROM DataValues dv 
				WHERE dv.DataTypeId = 'MessageSubType' AND dv.ParentId = parentId
				ORDER BY dv.DisplayOrder;            
            END;
		ELSEIF(dataType = 'MessageVariables') THEN
			BEGIN
				SELECT DISTINCT dv.Code AS Id, dv.Name, dv.DataValueId AS Description, 0 AS IsSelected, 0 AS IsDisabled, dv.DisplayOrder AS SequenceNo
				FROM DataValues dv 
				WHERE dv.DataTypeId = 'MessageVariables' AND dv.ParentId = parentId
				ORDER BY dv.DisplayOrder;         
            END;
		ELSEIF(dataType = 'ClassesForPA') THEN
			BEGIN
				SELECT DISTINCT vtc.ClassId AS Id, sc.Name AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
				FROM VTClasses vtc
				INNER JOIN AcademicYears ay ON vtc.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
				INNER JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId AND sc.Name IN ('Class 10', 'Class 12') AND sc.IsActive = 1
				WHERE vtc.IsActive = 1 AND vtc.AcademicYearId = roleId AND vtc.SchoolId = userId AND vtc.VTId = parentId 
				ORDER BY sc.Name;
            END;
		ELSEIF(dataType = 'StudentEnrolledCount') THEN
			BEGIN
				SELECT '1' AS Id, 'StudentCount' AS Name, CAST(COUNT(DISTINCT scm.StudentId) AS CHAR(10)) AS Description, 0 AS IsSelected, 0 AS IsDisabled, 0 AS SequenceNo 
				FROM StudentClasses sc
				INNER JOIN StudentClassMapping scm ON sc.AcademicYearId = scm.AcademicYearId AND sc.SchoolId = scm.SchoolId AND sc.ClassId = scm.ClassId AND sc.StudentId = scm.StudentId AND scm.IsActive = 1
				INNER JOIN AcademicYears ay ON sc.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
				WHERE sc.IsActive = 1 AND sc.DateOfDropout IS NULL AND sc.DeletedBy IS NULL
					AND scm.SchoolId = roleId
					AND scm.VTId = userId AND scm.ClassId = parentId;         
            END;
		END IF;
    END;
    
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    # CALL GetMasterDataForDropdown ('SectorsForVCReporting', 'VC', 'b4b24128-1e40-4229-bdd7-989d58dd3293', 'bb46d443-08ac-43d3-b31a-8b640be6be6f');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetMaterialListReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetMaterialListReport`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10),
	IN HMId VARCHAR(36)
)
BEGIN	   
   	DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
    
	IF(HMId IS NOT NULL) THEN
	BEGIN
		SELECT hm.SchoolId INTO schoolId 
        FROM HMSchoolsMap hsm
        INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive = 1
        WHERE hsm.AcademicYearId = AcademicYearId AND hsm.HMId = HMId AND hsm.IsActive = 1;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN  
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC' AND @roleName <> 'VT' ) THEN				
			SET UserId = NULL;		 
		END IF;
 
		SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY ted.ToolEquipmentId ASC) AS SrNo,	
			ted.AcademicYear, 
			ted.UDISE, 
			ted.SchoolName,
            ted.DistrictName, 		
			ted.SectorName, 
			ted.JobRoleName, 
			ted.Composite,
			ted.VTPName, 
			ted.VCName, 
			ted.VCEmail, 
			ted.VTName, 
			ted.VTEmail,  
            ted.RawMaterialRequired,
			ted.ReceiptDate,
			ted.MaterialName,
			ted.RawMaterialStatus,
			ted.Action,
			ted.QuantityCount,
			ted.ToolEquipmentId
		FROM (    
			SELECT DISTINCT ay.YearName AS AcademicYear, 
				vtp.VTPName,		
				vc.FullName AS VCName, 
				vc.EmailId AS VCEmail, 
				vt.FullName AS VTName, 
				vt.Email AS VTEmail,				
				ds.DistrictName, 
                sc.CategoryName As Composite,
				s.UDISE, 
				s.SchoolName, 
				se.SectorName, 
				jr.JobRoleName, 
				te.RawMaterialRequired,
                te.ReceiptDate,
				trm.ToolEquipmentName As MaterialName,
				terl.RawMaterialStatus,
                terl.RawMaterialAction as Action,
                terl.QuantityCount,
				te.ToolEquipmentId        
			FROM ToolEquipments te		
			INNER JOIN VTSchoolSectors vss ON te.AcademicYearId = vss.AcademicYearId AND te.SectorId = vss.VTSchoolSectorId AND vss.IsActive = 1           
			INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1			    
            INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
            INNER JOIN SchoolCategories sc ON sc.SchoolCategoryId = s.SchoolCategoryId AND sc.IsActive = 1	
			INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1  
			INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
			INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1            
            INNER JOIN Divisions dv ON s.DivisionId = dv.DivisionId
			INNER JOIN Districts ds ON s.DivisionId = ds.DivisionId AND s.DistrictCode = ds.DistrictCode	
			#INNER JOIN TEAndRMList trm ON te.RawMaterialId = trm.TEAndRMId AND trm.TEType = 'RawMaterial' AND trm.IsActive = 1
   			INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VTPId = vcm.VTPId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
            INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
            INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
			INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
			INNER JOIN TEMaterialLists terl ON te.ToolEquipmentId = terl.ToolEquipmentId AND  terl.IsActive = 1
            LEFT JOIN TEAndRMList trm ON terl.RawMaterialId = trm.TEAndRMId AND trm.TEType = 'RawMaterial' AND trm.IsActive = 1
            LEFT JOIN HMSchoolsMap hmm ON vss.AcademicYearId = hmm.AcademicYearId AND vss.SchoolId = hmm.SchoolId AND hmm.IsActive = 1		
			LEFT JOIN HeadMasters hm ON hmm.HMId = hm.HMId AND hmm.IsActive = 1 			
			WHERE te.IsActive = 1 				
				AND ((@roleName = 'VT' AND vtm.VTId = @accountId) OR (@roleName = 'VC' AND vcm.VCId = @accountId)  OR UserId IS NULL)	 
				AND (AcademicYearId IS NULL OR te.AcademicYearId = AcademicYearId)
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
				AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vtm.VTPId = VTPId)
				AND (MonthId IS NULL OR MONTH(te.ReceiptDate) = CAST(MonthId AS UNSIGNED)) 
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)   
				AND ((HMId IS NULL AND schoolId IS NULL) OR vss.SchoolId = schoolId)
		) AS ted
		ORDER BY ted.AcademicYear,  ted.VTPName, ted.SectorName, ted.VCName, ted.SchoolName, ted.VTName;
    END;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	# CALL GetMaterialListReport ('amol.shinde@lend-a-hand-india.org', Null,'b447e36a-dad9-4087-8cc7-7837217c4061','KO,SN,ST',NULL,NULL,NULL,NUll,NULL,NULL,NULL);
	# CALL GetMaterialListReport ('rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f',NULL,NULL,NULL,NULL,NULL,NUll,NULL,NULL,NULL);
    # CALL GetMaterialListReport ('sachinkuldharan246@gmail.com','bb46d443-08ac-43d3-b31a-8b640be6be6f',NULL,NULL,NULL,NULL,NULL,NUll,NULL,NULL,NULL);
	# CALL GetMaterialListReport ('pradipdhangar29@gmail.com','bb46d443-08ac-43d3-b31a-8b640be6be6f',NULL,NULL,NULL,NULL,NULL,NUll,NULL,NULL,NULL);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetMessageTemplatesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetMessageTemplatesByCriteria`(
	IN messageTypeId VARCHAR(50),
	IN status BIT,
	IN name VARCHAR(150),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;    
	SET offSetValue = pageIndex * pageSize;
 
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT mt.MessageTemplateId, mt.TemplateFlowId, mt.TemplateName, dvmt.Name AS MessageType, dvmst.Name AS MessageSubType, mt.ApplicableFor, mt.IsActive
	FROM MessageTemplates mt
    INNER JOIN DataValues dvmt ON mt.MessageTypeId = dvmt.Code AND dvmt.DataTypeId = 'MessageType'
    INNER JOIN DataValues dvmst ON mt.MessageSubTypeId = dvmst.Code AND dvmst.DataTypeId = 'MessageSubType'
	WHERE (messageTypeId IS NULL OR (mt.MessageTypeId = messageTypeId))
		AND (name IS NULL OR (mt.TemplateName LIKE CONCAT(name, '%')))
		AND (status IS NULL OR mt.IsActive = status)
		AND (name IS NULL OR (mt.TemplateName LIKE CONCAT('%', name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (mt.TemplateName LIKE CONCAT(charBy, '%')))
	ORDER BY mt.TemplateName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNextYearForAcademicRollover` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetNextYearForAcademicRollover`()
BEGIN
	SELECT * FROM AcademicYears WHERE CAST(CONCAT(YEAR(NOW()),'/10/01') AS DATE) BETWEEN StartMonth AND EndMonth;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPhasesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetPhasesByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT p.PhaseId, p.PhaseName, p.Description, p.IsActive
	FROM Phases p
	WHERE (name IS NULL OR (p.PhaseName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (p.PhaseName LIKE CONCAT(charBy, '%')))
	ORDER BY p.DisplayOrder
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPracticalAssessmentReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetPracticalAssessmentReport`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
		  
		SELECT DISTINCT vpa.VTRPraticalId AS VCRPraticalId, vtp.VTPName, vc.FullName AS VCName, vc.Mobile, vc.EmailId, vdr.ReportDate, vpa.IsPratical,
			s.UDISE, s.SchoolName, vt.FullName AS VTName, se.SectorName, jr.JobRoleName, sc.Name AS ClassName,
			vpa.StudentCount AS EnrolledStudents, vpa.PresentStudentCount AS PresentStudents, vpa.VTPresent, 
            vpa.AssesorName, vpa.AssesorMobileNo AS AssessorMobile, vpa.Remarks, 1 AS SrNo
		FROM VCRPraticals vpa
		INNER JOIN VCDailyReporting vdr ON vpa.VCDailyReportingId = vdr.VCDailyReportingId AND vpa.VCId = vdr.VCId
		INNER JOIN VTPCoordinatorsMap vcm ON vpa.AcademicYearId = vcm.AcademicYearId AND vpa.VCId = vcm.VCId AND vcm.IsActive = 1
		INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
		INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
		INNER JOIN VCTrainersMap vtm ON vpa.AcademicYearId = vtm.AcademicYearId AND vpa.VTId = vtm.VTId AND vtm.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
		INNER JOIN Sectors se ON vpa.SectorId = se.SectorId AND se.IsActive = 1    
		INNER JOIN JobRoles jr ON vpa.SectorId = se.SectorId AND vpa.JobRoleId = jr.JobRoleId AND jr.IsActive = 1    
		INNER JOIN Schools s ON vpa.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN SchoolClasses sc ON vpa.ClassId = sc.ClassId AND sc.IsActive = 1
		WHERE (UserId IS NULL OR vpa.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vpa.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vpa.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vpa.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vcm.VTPId = VTPId)
			AND (MonthId IS NULL OR MONTH(vdr.ReportDate) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		ORDER BY vtp.VTPName, vc.FullName, se.SectorName, s.SchoolName, vt.FullName;
    END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    	
    # CALL GetPracticalAssessmentReport ('rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetRolesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetRolesByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT r.RoleId, r.Code, r.Name, r.Description, r.Remarks, r.IsActive
	FROM Roles r
	WHERE Code <> 'SUR' AND (name IS NULL OR (r.Name LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (r.Name LIKE CONCAT(charBy, '%')))
	ORDER BY r.Name
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetRoleTransactionsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetRoleTransactionsByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    SELECT r.RoleTransactionId, r.RoleId, ar.Name AS RoleName, t.Name AS TransactionName, r.Rights, r.CanAdd, r.CanEdit, r.CanDelete, r.CanView, r.CanExport, r.ListView, r.BasicView, r.DetailView, r.IsPublic, r.Remarks, r.IsActive
	FROM RoleTransactions r
    LEFT JOIN Roles ar ON r.RoleId = ar.RoleId
    LEFT JOIN Transactions t ON r.TransactionId = t.TransactionId
    LEFT JOIN SiteSubHeaders ssh ON r.TransactionId = ssh.TransactionId
	WHERE (name IS NULL OR (ar.Name LIKE CONCAT(name, '%') OR t.Name LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (ar.Name LIKE CONCAT(charBy, '%') OR t.Name LIKE CONCAT(charBy, '%')))
	ORDER BY ar.Name, t.Name, ssh.DisplayOrder
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetRoleTransactionsByUserId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetRoleTransactionsByUserId`(
	IN userId VARCHAR(150)    
	)
BEGIN	 
	DECLARE vtRoleId VARCHAR(36) DEFAULT '259b3087-4e2a-435a-accc-cf8980ffbcca';
    SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
					
	SELECT DISTINCT vs.VTId INTO @VTIdForPhases
    FROM VTSchoolSectors vs 
    INNER JOIN Accounts a ON vs.VTId = a.AccountId AND a.IsActive = 1
    INNER JOIN Schools s ON vs.SchoolId = s.SchoolId AND s.IsActive = 1
    INNER JOIN Phases p ON s.PhaseId = p.PhaseId AND p.IsActive = 1 
    WHERE vs.IsActive= 1 AND p.DisplayOrder IN (1,2,3,4) AND a.LoginId = userId
    LIMIT 1;

	SELECT 
		DISTINCT ROW_NUMBER() OVER (
			ORDER BY sh.DisplayOrder
				,ssh.DisplayOrder
			) AS SrNo
		,u.LoginId
		,IFNULL(sh.ShortName, 'Main') AS HeaderName
		,IFNULL(sh.DisplayOrder, 1) AS HeaderOrder
        ,IFNULL(ssh.DisplayOrder, 1) AS TransactionOrder
		,IFNULL(ssh.IsActive, 1) AS IsHeaderMenu
		,t.TransactionId
		,t.Code
		,t.Name
		,t.PageTitle
		,t.PageDescription
		,'' AS TransactionIcon
		,t.UrlAction
		,t.UrlController
		,t.UrlPara
		,rtm.Rights AS Rights
		,rtm.CanAdd AS IsAdd
		,rtm.CanEdit AS IsEdit
		,rtm.CanDelete AS IsDelete
		,rtm.CanView AS IsView
		,rtm.CanExport AS IsExport
		,rtm.ListView AS ListView
		,rtm.BasicView AS BasicView
		,rtm.DetailView AS DetailView
		,rtm.IsPublic AS IsPublic
		,t.RouteUrl        
	FROM Accounts u 
    LEFT JOIN AccountRoles urm ON u.AccountId = urm.AccountId  
	LEFT JOIN RoleTransactions rtm ON urm.RoleId = rtm.RoleId AND rtm.IsActive = 1    
	LEFT JOIN Transactions t  ON rtm.TransactionId = t.TransactionId AND t.IsActive = 1
	LEFT JOIN SiteSubHeaders ssh ON t.TransactionId = ssh.TransactionId
	LEFT JOIN SiteHeaders sh ON ssh.SiteHeaderId = sh.SiteHeaderId AND t.IsActive = 1
	WHERE u.IsActive = 1 AND t.TransactionId IS NOT NULL
		AND u.LoginId = userId;
		
				  
				  
																			  
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolByAYAndVCId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSchoolByAYAndVCId`(
	IN RoleId VARCHAR(15),
    IN UserId VARCHAR(36),
    IN AcademicYearId VARCHAR(36),
	IN VTPId VARCHAR(36),
    IN VCId VARCHAR(36)
)
BEGIN 
	IF(RoleId = 'ADM') THEN
    BEGIN
		SELECT DISTINCT svs.VTPId, vcss.VCId, s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, s.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VCSchoolSectors vcss
		INNER JOIN SchoolVTPSectors svs ON vcss.AcademicYearId = svs.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1 			
		INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1 			
		WHERE vcss.IsActive = 1 
		AND vcss.AcademicYearId = AcademicYearId
		AND svs.VTPId = VTPId
		AND vcss.VCId = VCId
ORDER BY Name;	
	END;
    ELSEIF(RoleId = 'VC') THEN
    BEGIN
		SELECT DISTINCT svs.VTPId, vcss.VCId, s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, s.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VCSchoolSectors vcss
		INNER JOIN SchoolVTPSectors svs ON vcss.AcademicYearId = svs.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1 			
		INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1 			
		WHERE vcss.IsActive = 1 
		AND vcss.AcademicYearId = AcademicYearId
		AND svs.VTPId = VTPId
		AND vcss.VCId = UserId
		ORDER BY vt.FullName;
	END;
    ELSEIF(RoleId = 'VT') THEN
    BEGIN
		SELECT DISTINCT svs.VTPId, vcss.VCId, s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, s.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VCSchoolSectors vcss
		INNER JOIN SchoolVTPSectors svs ON vcss.AcademicYearId = svs.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1 			
		INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1 			
		WHERE vcss.IsActive = 1 
		AND vcss.AcademicYearId = AcademicYearId
		AND svs.VTPId = VTPId
        AND vcss.VTId = UserId
		AND vcss.VCId = VCId;			
	END;
    ELSEIF(RoleId = 'HM') THEN
    BEGIN
	    SELECT DISTINCT sc.SchoolId AS Id, sc.SchoolName AS Name, vc.EmailId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM HeadMasters hm
		INNER JOIN HMSchoolsMap hmm ON hm.HMId = hmm.HMId AND hmm.IsActive =1
		INNER JOIN SchoolVTPSectors svs ON hmm.AcademicYearId = svs.AcademicYearId AND hmm.SchoolId = svs.SchoolId AND svs.IsActive =1
		INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive =1
		INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1
		INNER JOIN Schools sc ON svs.SchoolId = sc.SchoolId AND sc.IsActive = 1
		WHERE hm.IsActive = 1
		AND hmm.AcademicYearId = AcademicYearId 
		AND hm.HMId = UserId
        AND svs.VTPId = VTPId
        And vc.VCId =VCId;
	END;
    END IF;
    
    # CALL GetSchoolByAYAndVCId ('ADM', 'fac71e7e-6661-4691-9e20-842a92948958', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '1418bec9-d5a4-4c37-ab42-17d4d13ac159');
    # CALL GetSchoolByAYAndVCId ('VC', '7565921d-753e-4502-8982-dd2a182cc48e', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL);
    # CALL GetSchoolByAYAndVCId ('VT', 'ad9ec0ed-9021-4598-92fe-586907f96612', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '1418bec9-d5a4-4c37-ab42-17d4d13ac159');
    # CALL GetSchoolByAYAndVCId ('HM', '765d2f73-a4be-430a-9cec-692116d7aeb3', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '86847cbc-9447-4495-b6db-78e7e8bb23ad');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolByAYIdAndRoleId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSchoolByAYIdAndRoleId`(
	IN RoleId VARCHAR(15),
    IN UserId VARCHAR(36),
    IN AcademicYearId VARCHAR(36)
)
BEGIN 
	IF(RoleId = 'ADM') THEN
    BEGIN
		SELECT DISTINCT svs.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM SchoolVTPSectors svs   
		INNER JOIN AcademicYears ay ON svs.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1		
		WHERE svs.IsActive = 1 
		AND svs.AcademicYearId = AcademicYearId
	ORDER BY Name;		
	END;
    ELSEIF(RoleId = 'VC') THEN
    BEGIN
		SELECT DISTINCT  s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, s.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VCSchoolSectors vcss
		INNER JOIN SchoolVTPSectors svs ON vcss.AcademicYearId = svs.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1 			
		INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1 			
		WHERE vcss.IsActive = 1 
		AND vcss.AcademicYearId = AcademicYearId
		AND vcss.VCId = UserId;
	END;
    ELSEIF(RoleId = 'VT') THEN
    BEGIN
		SELECT DISTINCT s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, s.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VTSchoolSectors vss	
		INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1 
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		WHERE vss.IsActive = 1 
		AND vss.AcademicYearId = AcademicYearId
        AND vss.VTId = UserId;	
	END;
    ELSEIF(RoleId = 'HM') THEN
    BEGIN
	    SELECT DISTINCT sc.SchoolId AS Id, CONCAT(sc.UDISE, '-', sc.SchoolName) AS Name, sc.UDISE AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM HeadMasters hm
		INNER JOIN HMSchoolsMap hmm ON hm.HMId = hmm.HMId AND hmm.IsActive =1
		INNER JOIN SchoolVTPSectors svs ON hmm.AcademicYearId = svs.AcademicYearId AND hmm.SchoolId = svs.SchoolId AND svs.IsActive =1
		INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive =1
		INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1
		INNER JOIN Schools sc ON svs.SchoolId = sc.SchoolId AND sc.IsActive = 1
		WHERE hm.IsActive = 1
		AND hmm.AcademicYearId = AcademicYearId 
		AND hm.HMId = UserId;
	END;
    END IF;
    
    # CALL GetSchoolByAYIdAndRoleId ('ADM', 'fac71e7e-6661-4691-9e20-842a92948958', 'bb46d443-08ac-43d3-b31a-8b640be6be6f');
    # CALL GetSchoolByAYIdAndRoleId ('VC', '7565921d-753e-4502-8982-dd2a182cc48e', 'bb46d443-08ac-43d3-b31a-8b640be6be6f');
    # CALL GetSchoolByAYIdAndRoleId ('VT', 'ad9ec0ed-9021-4598-92fe-586907f96612', 'bb46d443-08ac-43d3-b31a-8b640be6be6f');
    # CALL GetSchoolByAYIdAndRoleId ('HM', '765d2f73-a4be-430a-9cec-692116d7aeb3', 'bb46d443-08ac-43d3-b31a-8b640be6be6f');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolByHMId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSchoolByHMId`(
	IN AcademicYearId VARCHAR(36),
	IN HMId VARCHAR(36),
    IN VCId VARCHAR(36)
)
BEGIN	
    SELECT DISTINCT sc.SchoolId AS Id, CONCAT(sc.UDISE, '-', sc.SchoolName) AS Name, vc.EmailId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
	FROM HeadMasters hm
	INNER JOIN HMSchoolsMap hmm ON hm.HMId = hmm.HMId AND hmm.IsActive =1
	INNER JOIN SchoolVTPSectors svs ON hmm.AcademicYearId = svs.AcademicYearId AND hmm.SchoolId = svs.SchoolId AND svs.IsActive =1
	INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive =1
    INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1
    INNER JOIN Schools sc ON svs.SchoolId = sc.SchoolId AND sc.IsActive = 1
	WHERE hm.IsActive = 1
		AND hmm.AcademicYearId = AcademicYearId 
		AND hm.HMId = HMId
        And vc.VCId =VCId;
        
    # CALL GetSchoolByHMId ('bb46d443-08ac-43d3-b31a-8b640be6be6f', 'fcefa07d-4ced-4a02-8ada-591e8d57422a', 'fdd84d6b-1745-495a-b640-c27bf00b5c17');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolByVTPIdSectorId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSchoolByVTPIdSectorId`(
    IN AcademicYearId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN SectorId VARCHAR(36)
	)
BEGIN 	
	SELECT vcss.VCSchoolSectorId, svs.SchoolVTPSectorId, svs.AcademicYearId, svs.VTPId, svs.SectorId,  svs.SchoolId, 
		CONCAT(s.UDISE, '-', s.SchoolName) AS School, NULL AS ToVTPId, NULL AS ToVCId,null As DateOfAllocation,
        NULL AS DateOfJoining, NULL AS ToSectorId, "" AS Remarks
	FROM VCSchoolSectors vcss
    INNER JOIN SchoolVTPSectors svs ON vcss.AcademicYearId = svs.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
    INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND svs.VTPId = vcm.VTPId AND vcss.VCId = vcm.VCId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1
    INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
    INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1
	WHERE vcss.IsActive = 1 AND vcss.DateOfRemoval IS NULL
		AND svs.AcademicYearId = AcademicYearId
		AND svs.VTPId = VTPId
		AND svs.SectorId = SectorId
	ORDER BY se.SectorName, s.SchoolName;
    
    # CALL GetSchoolByVTPIdSectorId ('bb46d443-08ac-43d3-b31a-8b640be6be6f','1e5e0936-a75a-46f2-9bae-4f7edec8920b','37d3d1f1-ff66-480f-8e96-253ca58d3789');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolByVTPIdVCIdSectorId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSchoolByVTPIdVCIdSectorId`(
    IN AcademicYearId VARCHAR(36),
    IN VTPId VARCHAR(36),
	IN VCId VARCHAR(36),
    IN SectorId VARCHAR(36)
	)
BEGIN 	

SELECT DISTINCT s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo from SchoolVTPSectors svs 
	INNER JOIN VCSchoolSectors vcss on svs.AcademicYearId = vcss.AcademicYearId and svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId and vcss.IsActive =1
	INNER JOIN VTPSectors vs on svs.AcademicYearId = vs.AcademicYearId and svs.VTPId = vs.VTPId and svs.SectorId = vs.SectorId and vs.IsActive =1
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
    INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1
	WHERE  vcss.IsActive = 1 AND svs.AcademicYearId = AcademicYearId
		AND svs.VTPId = VTPId
        AND vcss.VCId = VCId
		AND svs.SectorId = SectorId;
    
    # CALL GetSchoolByVTPIdVCIdSectorId ('bb46d443-08ac-43d3-b31a-8b640be6be6f','1e5e0936-a75a-46f2-9bae-4f7edec8920b','37d3d1f1-ff66-480f-8e96-253ca58d3789');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolCategoriesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetSchoolCategoriesByCriteria`(

	IN name  VARCHAR(100),

	IN charBy VARCHAR(5),

	IN pageIndex INT,

	IN pageSize INT

	)
BEGIN

	DECLARE offSetValue INT DEFAULT 0;

	SET offSetValue = (pageIndex-1) * pageSize;



	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;



	SELECT s.SchoolCategoryId, s.CategoryName, s.Description, s.IsActive
	FROM SchoolCategories s

	WHERE (name IS NULL OR (s.CategoryName LIKE CONCAT(name, '%')))

		AND ((charBy IS NULL OR charBy = 'All') OR (s.CategoryName LIKE CONCAT(charBy, '%')))

	ORDER BY s.CategoryName

	LIMIT pageSize

	OFFSET offSetValue;



    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;



    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolClassesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetSchoolClassesByCriteria`(

	IN name  VARCHAR(100),

	IN charBy VARCHAR(5),

	IN pageIndex INT,

	IN pageSize INT

	)
BEGIN

	DECLARE offSetValue INT DEFAULT 0;

	SET offSetValue = (pageIndex-1) * pageSize;



	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;



	SELECT s.ClassId, s.Name, s.Description, s.Remarks, s.IsActive
	FROM SchoolClasses s

	WHERE (name IS NULL OR (s.Name LIKE CONCAT(name, '%')))

		AND ((charBy IS NULL OR charBy = 'All') OR (s.Name LIKE CONCAT(charBy, '%')))

	ORDER BY s.Name

	LIMIT pageSize

	OFFSET offSetValue;



    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;



    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolDetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetSchoolDetails`(IN userId varchar(100))
BEGIN
	SELECT SchoolName, UDISE FROM Schools WHERE IsActive = 1;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolInformationReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetSchoolInformationReport`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
		   
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			ay.YearName AS AcademicYear,		
			ph.PhaseName,
			say.YearName AS SchoolAllottedYear,     
			vtp.VTPName,				
			vc.FullName AS VCName,
			vc.Mobile AS VCMobile,
			vc.EmailId AS VCEmail,       
            vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,
			vt.DateOfJoining AS VTDateOfJoining,
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
			d.DivisionName,
			ds.DistrictName,
			s.BlockName,
			s.UDISE,
			s.SchoolName,
            dvst.Name AS SchoolType,
			se.SectorName,
			jr.JobRoleName,
			GROUP_CONCAT(DISTINCT sc.Name ORDER BY sc.DisplayOrder) AS ClassName
		FROM Schools AS s
		LEFT JOIN SchoolVTPSectors svtps ON s.SchoolId = svtps.SchoolId AND svtps.IsActive = 1 
		LEFT JOIN AcademicYears ay ON svtps.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1        
		LEFT JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1        
		LEFT JOIN VocationalTrainingProviders vtp ON svtps.VTPId = vtp.VTPId AND vtp.IsActive = 1        
		LEFT JOIN Sectors se ON svtps.SectorId = se.SectorId				
			
		LEFT JOIN VTSchoolSectors vss ON svtps.AcademicYearId = vss.AcademicYearId AND svtps.SchoolId = vss.SchoolId AND svtps.SectorId = vss.SectorId AND vss.IsActive = 1
		LEFT JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1		
		LEFT JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId 
		LEFT JOIN HeadMasters hm ON svtps.SchoolId = hm.SchoolId AND hm.IsActive = 1 		
		LEFT JOIN Divisions d ON s.DivisionId = d.DivisionId
		LEFT JOIN Districts ds ON s.DistrictCode = ds.DistrictCode	
		LEFT JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		LEFT JOIN DataValues dvs ON dvs.DataValueId = s.SchoolManagementId AND dvs.DataTypeId = 'SchoolManagement' 		
        LEFT JOIN DataValues dvst ON dvst.DataValueId = s.SchoolTypeId AND dvst.DataTypeId = 'SchoolType' 		
		LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId
		LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1
		LEFT JOIN SchoolClasses sc ON sc.ClassId = vtc.ClassId
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    
        WHERE s.IsActive = 1 			
			AND (UserId IS NULL OR vt.VCId = @accountId)			
            AND (AcademicYearId IS NULL OR (svtps.AcademicYearId = AcademicYearId OR svtps.AcademicYearId IS NULL)) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR svtps.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtp.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			AND (MonthId IS NULL OR Month(vss.DateOfAllocation) = MonthId)                 
		GROUP BY ay.YearName, ph.PhaseName, SchoolAllottedYear, vtp.VTPName,
			vt.FullName, vt.Mobile, vt.Email, vt.DateOfJoining, vc.FullName, vc.Mobile, vc.EmailId, 
            hm.FullName, hm.Mobile, hm.Email, dvs.Name, d.DivisionName, ds.DistrictName, s.BlockName,
			s.UDISE, s.SchoolName, se.SectorName, jr.JobRoleName
		ORDER BY ay.YearName, ph.PhaseName, SchoolAllottedYear, vtp.VTPName, vc.FullName, vt.FullName, se.SectorName, s.SchoolName;
    END;

	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolInformationReportV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSchoolInformationReportV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10),
    IN hmId VARCHAR(36)
	)
BEGIN
	DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
  
	IF(hmId IS NOT NULL) THEN
	BEGIN
		SELECT hm.SchoolId INTO schoolId FROM HeadMasters hm WHERE hm.HMId = hmId AND hm.IsActive = 1;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
		   
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			ay.YearName AS AcademicYear,		
			ph.PhaseName,
			say.YearName AS SchoolAllottedYear,     
			vtp.VTPName,				
			vc.FullName AS VCName,
			vc.Mobile AS VCMobile,
			vc.EmailId AS VCEmail,       
            vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,
			vtm.DateOfJoining AS VTDateOfJoining,
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
			d.DivisionName,
			ds.DistrictName,
			s.BlockName,
			s.UDISE,
			s.SchoolName,
            dvst.Name AS SchoolType,
			se.SectorName,
			jr.JobRoleName,
			GROUP_CONCAT(DISTINCT sc.Name ORDER BY sc.DisplayOrder) AS ClassName
		FROM Schools AS s
		LEFT JOIN SchoolVTPSectors svtps ON s.SchoolId = svtps.SchoolId AND svtps.IsActive = 1 
        LEFT JOIN VCSchoolSectors vcss ON svtps.AcademicYearId = vcss.AcademicYearId AND svtps.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1 
		LEFT JOIN AcademicYears ay ON svtps.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1        
		LEFT JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1        
        LEFT JOIN Divisions d ON s.DivisionId = d.DivisionId
		LEFT JOIN Districts ds ON s.DistrictCode = ds.DistrictCode	
		LEFT JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		LEFT JOIN DataValues dvs ON dvs.DataValueId = s.SchoolManagementId AND dvs.DataTypeId = 'SchoolManagement' 		
        LEFT JOIN DataValues dvst ON dvst.DataValueId = s.SchoolTypeId AND dvst.DataTypeId = 'SchoolType' 		
		LEFT JOIN VTSchoolSectors vss ON svtps.AcademicYearId = vss.AcademicYearId AND svtps.SchoolId = vss.SchoolId AND svtps.SectorId = vss.SectorId AND vss.IsActive = 1		
        LEFT JOIN Sectors se ON svtps.SectorId = se.SectorId				
        LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId
		LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1
		LEFT JOIN SchoolClasses sc ON sc.ClassId = vtc.ClassId
        LEFT JOIN VTPAcademicYearsMap vtpm ON svtps.AcademicYearId = vtpm.AcademicYearId AND svtps.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
        LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1		
        LEFT JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1
        LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1		 
        LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
        LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1	
		LEFT JOIN HMSchoolsMap hmm ON svtps.AcademicYearId = hmm.AcademicYearId AND svtps.SchoolId = hmm.SchoolId AND hmm.IsActive = 1		
        LEFT JOIN HeadMasters hm ON hmm.HMId = hm.HMId 
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    
        WHERE s.IsActive = 1 			
			AND (UserId IS NULL OR vcss.VCId = @accountId)			
            AND (AcademicYearId IS NULL OR (svtps.AcademicYearId = AcademicYearId OR svtps.AcademicYearId IS NULL)) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR svtps.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR svtps.VTPId = VTPId)
            AND ((hmId IS NULL AND schoolId IS NULL) OR vss.SchoolId = schoolId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			AND (MonthId IS NULL OR Month(vss.DateOfAllocation) = MonthId)                 
		GROUP BY ay.YearName, ph.PhaseName, SchoolAllottedYear, vtp.VTPName,
			vt.FullName, vt.Mobile, vt.Email, vtm.DateOfJoining, vc.FullName, vc.Mobile, vc.EmailId, 
            hm.FullName, hm.Mobile, hm.Email, d.DivisionName, ds.DistrictName, s.BlockName,
			s.UDISE, s.SchoolName, se.SectorName, jr.JobRoleName
		ORDER BY ay.YearName, ph.PhaseName, SchoolAllottedYear, vtp.VTPName, vc.FullName, vt.FullName, se.SectorName, s.SchoolName;
    END;

	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	# CALL GetSchoolInformationReportV2 ('rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);    
    # CALL GetSchoolInformationReportV2 ('rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);    
    # CALL GetSchoolInformationReportV2 ('vinayzote@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolsByAYId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSchoolsByAYId`(
	IN AcademicYearId VARCHAR(36)
)
BEGIN 
	SELECT DISTINCT svs.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
	FROM SchoolVTPSectors svs 
    INNER JOIN VTPAcademicYearsMap vtpm ON svs.AcademicYearId = vtpm.AcademicYearId AND svs.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
	INNER JOIN AcademicYears ay ON svs.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1		
	WHERE svs.IsActive = 1 AND svs.AcademicYearId = AcademicYearId
	ORDER BY Name;	

	# CALL GetSchoolsByAYId ('bb46d443-08ac-43d3-b31a-8b640be6be6f');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSchoolsByCriteria`(
	IN divisionId VARCHAR(36),
	IN districtId VARCHAR(15),
	IN schoolCategoryId VARCHAR(36),
	IN schoolManagementId VARCHAR(25),
	IN isImplemented BIT,
    IN status BIT,
	IN name VARCHAR(150),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;    
	SET offSetValue = pageIndex * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
    SELECT s.SchoolId, ay.YearName AS AcademicYear, st.StateName, d.DivisionName, dt.DistrictName, 
		s.SchoolName, s.Udise, sc.CategoryName, dst.Name AS SchoolType, dvs.Name AS SchoolManagement, p.PhaseName, b.BlockName, 
        s.Pincode, s.IsImplemented, s.IsActive, COUNT(*) OVER() AS TotalRows
	FROM Schools s
    INNER JOIN SchoolCategories sc ON s.SchoolCategoryId = sc.SchoolCategoryId
    INNER JOIN AcademicYears ay ON s.AcademicYearId = ay.AcademicYearId
    INNER JOIN Phases p ON s.PhaseId = p.PhaseId
    INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
    INNER JOIN States st ON s.StateCode = st.StateCode
    INNER JOIN Districts dt ON s.DistrictCode = dt.DistrictCode
    LEFT JOIN DataValues dst ON s.SchoolTypeId = dst.DataValueId AND dst.DataTypeId = 'SchoolType'
    LEFT JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement'
    LEFT JOIN Blocks b ON s.BlockId = b.BlockId
	WHERE (divisionId IS NULL OR s.DivisionId = divisionId)
		AND (districtId IS NULL OR s.DistrictCode = districtId)        
        AND (schoolCategoryId IS NULL OR s.SchoolCategoryId = schoolCategoryId)
        AND (schoolManagementId IS NULL OR s.SchoolManagementId = schoolManagementId)
        AND (isImplemented IS NULL OR s.IsImplemented = isImplemented)
        AND (status IS NULL OR s.IsActive = status)
		AND (name IS NULL OR (s.SchoolName LIKE CONCAT('%', name, '%') OR s.UDISE LIKE CONCAT('%', name, '%') OR d.DivisionName LIKE CONCAT('%', name, '%')	OR dt.DistrictName LIKE CONCAT('%', name, '%') OR sc.CategoryName LIKE CONCAT('%', name, '%') OR dvs.Name LIKE CONCAT('%', name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (s.SchoolName LIKE CONCAT(charBy, '%')))
	ORDER BY ay.YearName, st.StateName, d.DivisionName, dt.DistrictName, s.SchoolName
	LIMIT offSetValue, pageSize;

	# CALL GetSchoolsByCriteria (NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 25);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolsByDRPId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetSchoolsByDRPId`(
	IN userId VARCHAR(100),
    IN drpId VARCHAR(36)	 
	)
BEGIN
	SELECT DISTINCT s.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo    
	FROM Schools s
    INNER JOIN SchoolVTPSectors svs ON s.SchoolId = svs.SchoolId AND svs.IsActive = 1
    INNER JOIN AcademicYears ay ON svs.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1  
    INNER JOIN AccountWorkLocations awl ON s.DivisionId = awl.DivisionId AND s.DistrictCode = awl.DistrictId	
    WHERE s.IsActive = 1 AND awl.AccountId = drpId
	ORDER BY s.SchoolName;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolsByVCId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSchoolsByVCId`(
	IN userId VARCHAR(150),
    IN vcId VARCHAR(36)	 
	)
BEGIN
	SELECT DISTINCT svs.SchoolId AS Id, CONCAT(s.UDISE, '-', s.SchoolName) AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo    
	FROM VCSchoolSectors vss	
    INNER JOIN SchoolVTPSectors svs ON vss.AcademicYearId = svs.AcademicYearId AND vss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
    INNER JOIN VTPCoordinatorsMap vcm ON vss.AcademicYearId = vcm.AcademicYearId AND vss.VCId = vcm.VCId AND vcm.IsActive = 1
    INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
    INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
	WHERE vss.IsActive = 1 AND vss.VCId = vcId
	ORDER BY Name;

	# CALL GetSchoolsByVCId ('prabeenacharya@gmail.com', 'af569a93-bd88-4840-af16-2eb3f6623a39');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolStudentDetailsByVTId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetSchoolStudentDetailsByVTId`(
	IN vtId  VARCHAR(36)
)
BEGIN 
	SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY sc.AcademicYearId, sc.SchoolId, sc.ClassId, sc.SectionId, vss.VTId, vss.SectorId, vss.JobRoleId) AS SrNo, 
		sc.AcademicYearId, sc.SchoolId, sc.ClassId, sc.SectionId, vss.VTId, sc.StudentId, vss.SectorId, vss.JobRoleId, vss.VTSchoolSectorId, vtc.VTClassId	
	FROM StudentClassMapping scm
	INNER JOIN StudentClasses sc ON scm.AcademicYearId = sc.AcademicYearId AND scm.SchoolId = sc.SchoolId AND scm.ClassId = sc.ClassId AND scm.SectionId = sc.SectionId AND scm.StudentId = sc.StudentId AND sc.IsActive = 1
	INNER JOIN VTClasses vtc ON sc.AcademicYearId = vtc.AcademicYearId AND sc.SchoolId = vtc.SchoolId AND sc.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1	
	INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1   				
	INNER JOIN VocationalTrainers vt ON scm.VTId = vt.VTId AND vt.IsActive = 1   
	WHERE sc.DeletedBy IS NULL AND scm.IsActive = 1
		AND scm.VTId = vtId
	ORDER BY sc.AcademicYearId, sc.SchoolId, sc.ClassId, sc.SectionId, vss.VTId, vss.SectorId, vss.JobRoleId;		

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolStudentsByVTId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSchoolStudentsByVTId`(
	IN AcademicYearId VARCHAR(36),
	IN VTId VARCHAR(36)
)
BEGIN    
	SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY ay.YearName, s.SchoolName, se.SectorName, jr.JobRoleName, vt.FullName, cls.DisplayOrder, sec.DisplayOrder) AS SrNo,
		ay.YearName AS AcademicYear, s.SchoolId, s.SchoolName, se.SectorId, se.SectorName, jr.JobRoleName, vt.FullName AS VTName, 
		cls.Name As ClassName, sec.Name AS SectionName, 
        (CASE WHEN (sc.ClassId  != vtc.ClassId ) THEN 0 ELSE COUNT(sc.StudentId) END) AS StudentCount 			      
	FROM StudentClassMapping scm
	INNER JOIN StudentClasses sc ON scm.SchoolId = sc.SchoolId AND scm.ClassId = sc.ClassId AND scm.SectionId = sc.SectionId AND sc.StudentId = scm.StudentId AND sc.IsActive = 1 AND sc.DeletedBy IS NULL 
	LEFT JOIN VTClasses vtc ON sc.AcademicYearId = vtc.AcademicYearId AND sc.SchoolId = vtc.SchoolId AND scm.VTId = vtc.VTId   AND vtc.IsActive = 1	
	INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1   				
	INNER JOIN VCTrainersMap vtm ON scm.AcademicYearId = vtm.AcademicYearId AND scm.VTId = vtm.VTId AND vtm.IsActive = 1   
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1   
	INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1 
	INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1 
	INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1 
	INNER JOIN Sections sec ON sc.SectionId = sec.SectionId AND sec.IsActive = 1 
	LEFT JOIN AcademicYears ay ON sc.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1   
	LEFT JOIN SchoolClasses cls ON vtc.ClassId = cls.ClassId
	WHERE scm.IsActive = 1
		AND scm.AcademicYearId = AcademicYearId
		AND scm.VTId = VTId
	GROUP BY ay.YearName, scm.AcademicYearId, sc.SchoolId, vss.SectorId, vss.JobRoleId,  vtc.ClassId, sc.SectionId, vss.VTId
	ORDER BY ay.YearName, s.SchoolName, se.SectorName, jr.JobRoleName, vt.FullName;

    # Call GetSchoolStudentsByVTId('bb46d443-08ac-43d3-b31a-8b640be6be6f','23be8d4b-b0c7-440e-899b-af1e952a8ba9');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolVEInchargesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetSchoolVEInchargesByCriteria`(
	IN academicYearId VARCHAR(36),
    IN vtpId VARCHAR(36),
    IN vcId VARCHAR(36),
    IN vtId VARCHAR(36),
    IN hmId VARCHAR(36),
    IN schoolId VARCHAR(36),	
    IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = pageIndex * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT hm.SchoolId INTO @HmSchoolId FROM HeadMasters hm WHERE hm.HMId = hmId AND hm.IsActive = 1 LIMIT 1;
    SELECT vss.SchoolId INTO @VtSchoolId FROM VTSchoolSectors vss WHERE vss.VTId = vtId AND vss.IsActive = 1 LIMIT 1;

	SELECT DISTINCT sv.VEIId, s.SchoolName, sv.FullName, sv.Mobile, sv.Email, dvg.Name AS Gender, sv.DateOfJoining, sv.IsActive,
		COUNT(*) OVER() AS TotalRows
	FROM SchoolVEIncharges sv
    INNER JOIN Schools s ON sv.SchoolId = s.SchoolId
    LEFT JOIN VTSchoolSectors vss ON sv.SchoolId = vss.SchoolId AND vss.IsActive = 1	
    LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
    LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId 
    LEFT JOIN DataValues dvg ON sv.Gender = dvg.DataValueId
	WHERE vss.AcademicYearId = academicYearId
		AND (vtpId IS NULL OR vtm.VTPId = vtpId)
        AND (vcId IS NULL OR vtm.VCId = vcId)
        AND (vtId IS NULL OR vss.SchoolId = @VtSchoolId)        
        AND (hmId IS NULL OR vss.SchoolId = @HmSchoolId)        
        AND (schoolId IS NULL OR vss.SchoolId = schoolId)		
        AND (name IS NULL OR (vt.FullName LIKE CONCAT('%', name, '%') OR s.SchoolName LIKE CONCAT('%', name, '%') OR s.UDISE LIKE CONCAT('%', name, '%') OR sv.FullName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (sv.FullName LIKE CONCAT(charBy, '%')))
	ORDER BY s.SchoolName, sv.FullName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolVTPSectorReportsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetSchoolVTPSectorReportsByCriteria`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN  
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
		
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear, 
			se.SectorName, 
			ph.PhaseName, 
			s.SchoolName, 
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail
		FROM SchoolVTPSectors svs    
		LEFT JOIN VCSchoolSectors vss ON svs.SchoolVTPSectorId = vss.SchoolVTPSectorId AND vss.IsActive = 1    
		LEFT JOIN VocationalCoordinators vc ON vss.VCId = vc.VCId AND vc.IsActive = 1   
		LEFT JOIN VocationalTrainingProviders vtp ON svs.VTPId = vtp.VTPId AND vtp.IsActive = 1    
		INNER JOIN AcademicYears ay ON svs.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1  	
		INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1  	    
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1  	
		INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1  	
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    
		WHERE svs.IsActive = 1
			AND (UserId IS NULL OR vss.VCId = @accountId)
			AND (AcademicYearId IS NULL OR svs.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR svs.SectorId = SectorId)			
			AND (VTPId IS NULL OR svs.VTPId = VTPId)
			AND (MonthId IS NULL OR MONTH(vss.DateOfAllocation) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, se.SectorName, s.SchoolName;
    END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolVTPSectorReportsByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetSchoolVTPSectorReportsByCriteriaV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN  
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
		
		SELECT DISTINCT svs.SchoolVTPSectorId,
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear, 
			se.SectorName, 
			ph.PhaseName, 
			CONCAT(s.UDISE, '-', s.SchoolName) AS SchoolName, 
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail,            
            ROW_NUMBER() OVER (ORDER BY svs.SchoolVTPSectorId, svs.SectorId) AS SrNo
		FROM SchoolVTPSectors svs    
		INNER JOIN AcademicYears ay ON svs.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1  	
		INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1  	    
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1  	
		INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1  	
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
        INNER JOIN VTPAcademicYearsMap vtpm ON svs.AcademicYearId = vtpm.AcademicYearId AND svs.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
        INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId 		        
        LEFT JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1    
        LEFT JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1
        LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId 		
		WHERE svs.IsActive = 1
			AND (UserId IS NULL OR vcss.VCId = @accountId)
			AND (AcademicYearId IS NULL OR svs.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR svs.SectorId = SectorId)			
			AND (VTPId IS NULL OR svs.VTPId = VTPId)
			AND (MonthId IS NULL OR MONTH(vcss.DateOfAllocation) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, se.SectorName, s.SchoolName;
    END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolVTPSectorsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSchoolVTPSectorsByCriteria`( 
	IN academicYearId VARCHAR(36),
    IN vtpId VARCHAR(36),
    IN sectorId VARCHAR(36),
    IN schoolId VARCHAR(36),
	IN status BIT,
	IN name  VARCHAR(100),
    IN isRollover BIT,
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT 
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = pageIndex * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    IF(academicYearId IS NULL) THEN 
		SELECT ay.AcademicYearId INTO academicYearId FROM AcademicYears ay WHERE ay.IsCurrentAcademicYear = 1;         
	END IF;

    SELECT DISTINCT svs.SchoolVTPSectorId, ay.YearName AS AcademicYear, vtp.VTPShortName AS VTPName, se.SectorName, s.SchoolName, s.UDISE, 
		svs.IsActive, svs.IsAYRollover, COUNT(*) OVER() AS TotalRows    
	FROM SchoolVTPSectors svs
    INNER JOIN VTPSectors vs ON svs.AcademicYearId = vs.AcademicYearId AND svs.VTPId = vs.VTPId AND svs.SectorId = vs.SectorId AND vs.IsActive = 1	
    INNER JOIN AcademicYears ay ON svs.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1  
	INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1 
    INNER JOIN VTPAcademicYearsMap vay ON svs.AcademicYearId = vay.AcademicYearId AND svs.VTPId = vay.VTPId AND vay.IsActive = 1 
    INNER JOIN VocationalTrainingProviders vtp ON vay.VTPId = vtp.VTPId AND vtp.IsActive = 1	
	WHERE svs.AcademicYearId =  academicYearId
		AND (vtpId IS NULL OR svs.VTPId = vtpId)
        AND (sectorId IS NULL OR svs.SectorId = sectorId)
        AND (schoolId IS NULL OR svs.SchoolId = schoolId)
		AND (status IS NULL OR svs.IsActive = status)
        AND (name IS NULL OR (s.SchoolName LIKE CONCAT('%', name, '%') OR s.UDISE LIKE CONCAT('%', name, '%') 
			OR vtp.VTPName LIKE CONCAT('%', name, '%') OR se.SectorName LIKE CONCAT('%', name, '%')))
        AND (isRollover = FALSE OR vs.IsAYRollover = TRUE)
		AND ((charBy IS NULL OR charBy = 'All') OR (s.SchoolName LIKE CONCAT(charBy, '%')))		
    ORDER BY ay.YearName, vtp.VTPName, se.SectorName, s.SchoolName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

	# 2021-2022: fda59df6-729e-493c-8d48-fc65b90008fe		2021-2022: bb46d443-08ac-43d3-b31a-8b640be6be6f
    # CALL GetSchoolVTPSectorsByCriteria ('bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, 1, NULL, 0, NULL, 0, 25);        
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSchoolVTPSectorsByUserId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSchoolVTPSectorsByUserId`(
	IN userId  VARCHAR(36), 
    IN userTypeId    VARCHAR(20), 
    IN academicYearId  VARCHAR(36)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
    BEGIN				 
		SELECT vcm.VTPId INTO @vtpId
		FROM VTPCoordinatorsMap vcm 
        WHERE vcm.IsActive = 1 AND vcm.AcademicYearId = academicYearId AND vcm.VCId = userId;
		
		IF(userTypeId = 'VC') THEN				
			SELECT DISTINCT svs.SchoolVTPSectorId AS Id, CONCAT(s.UDISE, ' - ', s.SchoolName, ' - ', vtp.VTPName, ' - ', se.SectorName) AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM SchoolVTPSectors svs   
			INNER JOIN VCSchoolSectors vss ON svs.SchoolVTPSectorId = vss.SchoolVTPSectorId AND vss.IsActive = 1
            INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
			INNER JOIN VocationalTrainingProviders vtp ON svs.VTPId = vtp.VTPId AND vtp.IsActive = 1
			INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1
			INNER JOIN AcademicYears ay ON svs.AcademicYearId = ay.AcademicYearId  
			WHERE svs.IsActive = 1 AND vss.VCId = userId
			ORDER BY Name;	 		  
		ELSE
			SELECT DISTINCT svs.SchoolVTPSectorId AS Id, CONCAT(s.UDISE, ' - ', s.SchoolName, ' - ', vtp.VTPName, ' - ', se.SectorName) AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
			FROM SchoolVTPSectors svs   
			INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
			INNER JOIN VocationalTrainingProviders vtp ON svs.VTPId = vtp.VTPId AND vtp.IsActive = 1
			INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1
			INNER JOIN AcademicYears ay ON svs.AcademicYearId = ay.AcademicYearId 
			WHERE svs.IsActive = 1 AND svs.AcademicYearId = academicYearId AND svs.VTPId = @vtpId
			ORDER BY Name;	 				 
		END IF;        
	END;
 
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

 
	# CALL GetSchoolVTPSectorsByUserId ('54988ae0-efa9-4cec-b4be-822abb662bd0', 'ADM', 'bb46d443-08ac-43d3-b31a-8b640be6be6f');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSectionByClassId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSectionByClassId`(
	IN ClassId VARCHAR(36)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;

	SELECT DISTINCT vcs.SectionId AS Id, s.Name AS Name,vtc.ClassId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
	FROM VTClasses vtc
    #INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.IsActive = 1
	INNER JOIN VTClassSections vcs ON vtc.VTClassId = vcs.VTClassId
	INNER JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId
	INNER JOIN Sections s ON vcs.SectionId = s.SectionId
	WHERE vtc.IsActive = 1 AND vtc.ClassId = ClassId
	ORDER BY sc.DisplayOrder, s.DisplayOrder;
    
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSectionsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetSectionsByCriteria`(

	IN name  VARCHAR(100),

	IN charBy VARCHAR(5),

	IN pageIndex INT,

	IN pageSize INT

	)
BEGIN

	DECLARE offSetValue INT DEFAULT 0;

	SET offSetValue = (pageIndex-1) * pageSize;



	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;



	SELECT s.SectionId, s.Name, s.Description, s.Remarks, s.IsActive
	FROM Sections s

	WHERE (name IS NULL OR (s.Name LIKE CONCAT(name, '%')))

		AND ((charBy IS NULL OR charBy = 'All') OR (s.Name LIKE CONCAT(charBy, '%')))

	ORDER BY s.Name

	LIMIT pageSize

	OFFSET offSetValue;



    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;



    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSectionsByVTClassId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetSectionsByVTClassId`(
	IN vtId VARCHAR(36),
    IN classId VARCHAR(36)	 
	)
BEGIN
	SELECT DISTINCT s.SectionId AS Id, s.Name AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo    
	FROM VTClassSections vtcs	
    INNER JOIN VTClasses vtc ON vtcs.VTClassId = vtc.VTClassId AND vtc.IsActive = 1
    INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.IsActive = 1
    INNER JOIN AcademicYears ay ON vtc.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
    INNER JOIN Sections s ON vtcs.SectionId = s.SectionId
	WHERE vtc.VTId = vtId AND vtc.ClassId = classId
	ORDER BY s.DisplayOrder, s.Name;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSectorByAyIdVCId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSectorByAyIdVCId`(
    IN AcademicYearId VARCHAR(36),
    IN VCId VARCHAR(36)
	)
BEGIN 	
	SELECT DISTINCT st.SectorId AS Id, st.SectorName AS Name, vcs.VCId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo	
	FROM VCSchoolSectors vcs
   INNER JOIN SchoolVTPSectors svtp ON vcs.SchoolVTPSectorId = svtp.SchoolVTPSectorId AND svtp.IsActive = 1
	INNER JOIN Sectors st ON svtp.SectorId = st.SectorId AND st.IsActive = 1
	WHERE vcs.IsActive = 1 
		AND vcs.AcademicYearId = AcademicYearId
        AND vcs.VCId = VCId;
    
    # CALL GetSectorByAyIdVCId ('bb46d443-08ac-43d3-b31a-8b640be6be6f','00040a37-82c2-44ac-a858-bfd235a3d66b');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSectorByAyIdVTPId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSectorByAyIdVTPId`(
    IN AcademicYearId VARCHAR(36),
    IN VTPId VARCHAR(36)
	)
BEGIN 	
	SELECT DISTINCT st.SectorId AS Id, st.SectorName AS Name, vtps.VTPId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo	
	FROM VTPSectors vtps
	INNER JOIN Sectors st ON vtps.SectorId = st.SectorId AND st.IsActive = 1
	WHERE vtps.IsActive = 1 
		AND vtps.AcademicYearId = AcademicYearId
        AND vtps.VTPId = VTPId;
    
    # CALL GetSectorByAyIdVTPId ('bb46d443-08ac-43d3-b31a-8b640be6be6f','00040a37-82c2-44ac-a858-bfd235a3d66b');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSectorByVTIdAyIdSchoolId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetSectorByVTIdAyIdSchoolId`(
    IN VTId VARCHAR(36),
    IN AcademicYearId VARCHAR(36),
    IN SchoolId VARCHAR(36)
	)
BEGIN 	
	SELECT DISTINCT st.SectorId AS Id, st.SectorName AS Name, vss.JobRoleId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo	
	FROM VTSchoolSectors vss
    INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vss.IsActive = 1	
	INNER JOIN Sectors st ON vss.SectorId = st.SectorId AND st.IsActive = 1
	WHERE vss.IsActive = 1 
		AND vss.AcademicYearId = AcademicYearId
        AND vss.SchoolId = SchoolId
        AND vss.VTId = VTId;
    
    # CALL GetSectorByVTIdAyIdSchoolId ('4af8744d-9606-d4cc-000b-40ef87995b3b', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', 'b1152920-db33-4416-83f8-2d6129272ee5');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSectorJobRolesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetSectorJobRolesByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	
	SELECT s.SectorJobRoleId, se.SectorName, jr.JobRoleName, s.QPCode, s.Remarks, s.IsActive 
	FROM SectorJobRoles s    
    LEFT JOIN Sectors se ON s.SectorId = se.SectorId
    LEFT JOIN JobRoles jr ON s.JobRoleId = jr.JobRoleId    
	WHERE (name IS NULL OR (s.CreatedBy LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (s.CreatedBy LIKE CONCAT(charBy, '%')))
	ORDER BY se.SectorName, jr.JobRoleName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSectorsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetSectorsByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT s.SectorId, s.SectorName, s.Description, s.DisplayOrder, s.IsActive
	FROM Sectors s
	WHERE (name IS NULL OR (s.SectorName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (s.SectorName LIKE CONCAT(charBy, '%')))
	ORDER BY s.DisplayOrder, s.SectorName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSessionsByUnitId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetSessionsByUnitId`(
	IN unitId VARCHAR(36)
	)
BEGIN
 	
	SELECT cm.CourseUnitSessionId AS Id, cm.SessionName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo        
	FROM CourseUnitSessions cm	
	WHERE cm.CourseModuleId = unitId
	ORDER BY cm.SessionName;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSiteHeadersByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetSiteHeadersByCriteria`(

	IN name  VARCHAR(100),

	IN charBy VARCHAR(5),

	IN pageIndex INT,

	IN pageSize INT

	)
BEGIN

	DECLARE offSetValue INT DEFAULT 0;

	SET offSetValue = (pageIndex-1) * pageSize;



	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;



	SELECT s.SiteHeaderId, s.ShortName, s.LongName, s.Description, s.DisplayOrder, s.Remarks, s.IsActive
	FROM SiteHeaders s

	WHERE (name IS NULL OR (s.ShortName LIKE CONCAT(name, '%')))

		AND ((charBy IS NULL OR charBy = 'All') OR (s.ShortName LIKE CONCAT(charBy, '%')))

	ORDER BY s.ShortName

	LIMIT pageSize

	OFFSET offSetValue;



    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;



    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSiteSubHeadersByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetSiteSubHeadersByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	
	SELECT s.SiteSubHeaderId, sh.ShortName AS SiteHeaderName, t.Name AS TransactionName, s.IsHeaderMenu, s.DisplayOrder, s.Remarks, s.IsActive
	FROM SiteSubHeaders s
    LEFT JOIN SiteHeaders sh ON s.SiteHeaderId = sh.SiteHeaderId
    LEFT JOIN Transactions t ON s.TransactionId = t.TransactionId
	WHERE (name IS NULL OR (s.Remarks LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (s.Remarks LIKE CONCAT(charBy, '%')))
	ORDER BY s.Remarks
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStatesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetStatesByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	
	SELECT s.StateCode, s.StateId, s.CountryCode, c.CountryName, s.StateName, s.Description, s.SequenceNo, s.IsActive
	FROM States s
    LEFT JOIN Countries c ON s.CountryCode = c.CountryCode
	WHERE (name IS NULL OR (s.StateName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (s.StateName LIKE CONCAT(charBy, '%')))
	ORDER BY s.StateName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentAssesmentReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetStudentAssesmentReport`(
    IN UserId VARCHAR(36),  
    IN AcademicYearId VARCHAR(36),
	IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
	IN VCId VARCHAR(36),
	IN SchoolId VARCHAR(36),
    IN VTId VARCHAR(36), 
    IN HMId VARCHAR(36), 
	IN ClassId VARCHAR(36),
	IN GenderId VARCHAR(36),
	IN Name  VARCHAR(100),
	IN PageIndex INT,
	IN PageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;    
	SET offSetValue = PageIndex * PageSize;
    
	IF(HMId IS NOT NULL) THEN
	BEGIN
		SELECT hsm.SchoolId INTO SchoolId 
		FROM HMSchoolsMap hsm
		INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive	= 1                
		WHERE hsm.IsActive = 1 AND hsm.DateOfResignation IS NULL
			AND hsm.AcademicYearId = AcademicYearId AND hsm.HMId = HMId;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;

	SELECT ROW_NUMBER() OVER (ORDER BY sc.YearName) AS SrNo, sc.StudentId, sc.YearName, sc.State, sc.DistrictName As District, 
		sc.SchoolName As School, sc.UDISE, sc.HMName, sc.HMMobile, sc.HMEmail, sc.VTPName, sc.VCName, sc.VCMobile, 
		sc.VCEmail,	sc.VTName, sc.VTMobile, sc.VTEmail, sc.FirstName, sc.MiddleName, sc.LastName, sc.ClassName As Class, 
        sc.Gender, sc.DateOfBirth As DOB, sc.AadhaarNumber, sc.StudentRollNumber As RollNo,	sc.FatherName, sc.MotherName, 
        sc.PrimaryContact, sc.AlternativeContact, sc.Category, sc.SectorName As Sector, sc.JobRoleName As JobRole, 
        sc.StreamName, COUNT(*) OVER() AS TotalRows
	FROM (
		SELECT DISTINCT sc.AcademicYearId, sc.SchoolId, sc.ClassId, sc.StudentId, se.SectorName As Sector, jr.JobRoleName As JobRole, 
			sc.FirstName, sc.MiddleName, sc.LastName, cls.Name AS ClassName, scd.AadhaarNumber, scd.StudentRollNumber, 
            scd.FatherName, scd.MotherName, scd.DateOfBirth, scd.Mobile AS PrimaryContact, scd.Mobile1 As AlternativeContact, 
            dvg.Name AS Gender, dv1.Name AS Category, scm.VTId, sc.DateOfDropout, vtp.VTPName, ar.YearName , st.StateName As State, 
            ds.DistrictName, s.SchoolName, s.UDISE, hm.FullName AS HMName, hm.Mobile As HMMobile, hm.Email As HMEmail, 
            vc.FullName As VCName, vc.Mobile As VCMobile, vc.EmailId As VCEmail, vt.FullName AS VTName, vt.Mobile As VTMobile, 
            vt.Email As VTEmail, se.SectorName, jr.JobRoleName, dvs.Name AS StreamName
		FROM StudentClassDetails scd
		INNER JOIN StudentClasses sc ON scd.StudentId = sc.StudentId AND sc.IsActive = 1			
		INNER JOIN StudentClassMapping scm ON sc.AcademicYearId = scm.AcademicYearId AND sc.SchoolId = scm.SchoolId AND sc.ClassId = scm.ClassId AND sc.StudentId = scm.StudentId AND scm.IsActive = 1
		INNER JOIN VTClasses vtc ON scm.AcademicYearId = vtc.AcademicYearId AND scm.SchoolId = vtc.SchoolId AND scm.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1	
		INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1   				
		INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1 
		INNER JOIN VocationalCoordinators vc ON vtm.VCId = vc.VCId AND vc.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vtm.VTPId = vtp.VTPId AND vtp.IsActive = 1
		INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1 
		INNER JOIN States st ON s.StateCode = st.StateCode AND st.IsActive = 1
        INNER JOIN Divisions d ON s.DivisionId = d.DivisionId AND d.IsActive = 1
		INNER JOIN Districts ds ON s.DivisionId = ds.DivisionId AND s.DistrictCode = ds.DistrictCode AND ds.IsActive = 1
        INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
		INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
		INNER JOIN AcademicYears ar ON scm.AcademicYearId = ar.AcademicYearId AND ar.IsActive = 1   
        LEFT JOIN HMSchoolsMap hms ON vss.AcademicYearId = hms.AcademicYearId AND vss.SchoolId = hms.SchoolId AND hms.IsActive = 1 
		LEFT JOIN HeadMasters hm ON hms.HMId = hm.HMId AND hm.IsActive = 1 		
		LEFT JOIN DataValues dv1 ON scd.SocialCategory = dv1.DataValueId AND dv1.DataTypeId = 'SocialCategory' 
		LEFT JOIN VTClassSections vtcs ON vtc.VTClassId = vtcs.VTClassId AND vtcs.IsActive = 1 					
		LEFT JOIN SchoolClasses cls ON sc.ClassId = cls.ClassId AND cls.IsActive = 1
		LEFT JOIN Sections sec ON sc.SectionId = sec.SectionId AND sec.IsActive = 1
		LEFT JOIN DataValues dvg ON sc.Gender = dvg.DataValueId AND dvg.DataTypeId = 'StudentGender'
        LEFT JOIN DataValues dvs ON scd.StreamId = dvs.DataValueId AND dvs.DataTypeId = 'Streams'
		WHERE sc.IsActive = 1 AND scd.AssessmentConducted IS NOT NULL
			AND (AcademicYearId IS NULL OR scm.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR d.DivisionId = DivisionId) 			
			AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (VCId IS NULL OR vtm.VCId = VCId)
			AND (SchoolId IS NULL OR s.SchoolId = SchoolId) 
            AND ((HMId IS NULL AND schoolId IS NULL) OR sc.SchoolId = schoolId)
			AND (VTId IS NULL OR vtm.VTId = VTId)
			AND (ClassId IS NULL OR cls.ClassId = ClassId)
			AND (GenderId IS NULL OR dvg.DataValueId = GenderId)
	) AS sc
	ORDER BY sc.VTPName, sc.VCName, sc.VTName, sc.UDISE, sc.FirstName
	LIMIT offSetValue, PageSize;
        	
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    #PMU: CALL GetStudentAssesmentReport('fac71e7e-6661-4691-9e20-842a92948958', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NUll, NULL, NULL, NULL, NULL, NULL, 0, 25);
    #DRP: CALL GetStudentAssesmentReport('9c4f13c9-4800-4510-aeca-72ae0427b7c6', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '5a461857-c3ab-11eb-a9b6-000c29808af1', 'OR22', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NUll, NULL, 0, 25);
    #VC: CALL GetStudentAssesmentReport('af569a93-bd88-4840-af16-2eb3f6623a39', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, '463e9a9f-14d1-425c-8d94-895674cc1632', 'af569a93-bd88-4840-af16-2eb3f6623a39', NULL, NULL, NULL, NULL, NUll, NULL, 0, 25);
    #VT: CALL GetStudentAssesmentReport('74d6a5dd-1ea8-460e-a8e2-b988d2eb54f1', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, '74d6a5dd-1ea8-460e-a8e2-b988d2eb54f1', NULL, NULL, NUll, NULL, 0, 25);
    #HM: CALL GetStudentAssesmentReport('7e79543b-aaac-437a-b158-1945c650f7b5', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '7e79543b-aaac-437a-b158-1945c650f7b5', NULL, NUll, NULL, 0, 25);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentAttendanceReportingReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetStudentAttendanceReportingReport`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		SET @rowIndex = 0;  
		
		SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY ay.YearName, vtp.VTPName, vc.FullName, dvs.Name, se.SectorName, d.DivisionName, ds.DistrictName, s.SchoolName, vt.FullName, dvm.DisplayOrder DESC, sc.DisplayOrder DESC) AS SrNo,			
			ay.YearName AS AcademicYear,		
			say.YearName AS SchoolAllottedYear,
			ph.PhaseName,
			vtp.VTPName,			
			vc.FullName AS VCName,
			vc.Mobile AS VCMobile,
			vc.EmailId AS VCEmail,
            vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			DATE(vt.DateOfJoining) AS VTDateOfJoining,
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
			d.DivisionName,
			ds.DistrictName,
			s.BlockName,
			s.UDISE,
			s.SchoolName,
			se.SectorName,
			jr.JobRoleName,
			sc.Name AS ClassName,           
			DATE_FORMAT(sca.ReportingMonth, '%b-%Y') AS MonthYear,
			sca.VTWorkingDays AS VTReportSubmitted,
			sca.VTWorkingDays AS VTWorkingDays,
			sca.VTWorkingDays AS AttendanceDays,
			sca.EnrolledBoys,            
            sca.EnrolledGirls,
            sca.EnrolledStudents,
            sca.AttendanceBoys,
            sca.AttendanceGirls,
            sca.StudentAttendances,
			IF(sca.AttendanceBoysInPerc, ROUND(sca.AttendanceBoysInPerc, 2), 0) AS AverageBoysAttendance,
			IF(sca.AttendanceGirlsInPerc, ROUND(sca.AttendanceGirlsInPerc, 2), 0) AS AverageGirlsAttendance,
            IF(sca.AttendancesInPerc, ROUND(sca.AttendancesInPerc, 2), 0) AS AverageAttendance
		FROM VTSchoolSectors vss
		INNER JOIN DsStudentAttendances sca ON vss.VTSchoolSectorId = sca.VTSchoolSectorId 
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId 
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId 
		LEFT JOIN VocationalCoordinators vc ON vt.VTPId = vc.VTPId AND vt.VCId = vc.VCId AND vc.IsActive = 1
		LEFT JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1    	
		LEFT JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	
		LEFT JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1         		
		LEFT JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
		LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
		LEFT JOIN SchoolClasses sc ON sca.ClassId = sc.ClassId AND sc.IsActive = 1
		LEFT JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		LEFT JOIN Divisions d ON s.DivisionId = d.DivisionId AND d.IsActive = 1
		LEFT JOIN Districts ds ON s.DivisionId = ds.DivisionId AND s.DistrictCode = ds.DistrictCode AND ds.IsActive = 1
		LEFT JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 	        
		LEFT JOIN DataValues dvm ON DATE_FORMAT(sca.ReportingMonth, "%b") = dvm.Description AND dvm.DataTypeId = 'Months'
		LEFT JOIN HeadMasters hm ON s.SchoolId = hm.SchoolId AND hm.IsActive = 1         		
		WHERE (UserId IS NULL OR vt.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR d.DivisionId = DivisionId) 			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtp.VTPId = VTPId)
            
			AND (ClassId IS NULL OR sca.ClassId = ClassId)
            AND (MonthId IS NULL OR MONTH(sca.ReportingMonth) = CAST(MonthId AS UNSIGNED))            
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		ORDER BY ay.YearName, vtp.VTPName, vc.FullName, dvs.Name, se.SectorName, d.DivisionName, ds.DistrictName, s.SchoolName, vt.FullName, dvm.DisplayOrder DESC, sc.DisplayOrder DESC;        
		
	END;

    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentAttendanceReportingReportV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetStudentAttendanceReportingReportV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
 
		SET @rowIndex = 0;  
		
		SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY ay.YearName, vtp.VTPName, vc.FullName, dvs.Name, se.SectorName, d.DivisionName, ds.DistrictName, s.SchoolName, vt.FullName, dvm.DisplayOrder DESC, sc.DisplayOrder DESC) AS SrNo,			
			ay.YearName AS AcademicYear,		
			say.YearName AS SchoolAllottedYear,
			ph.PhaseName,
			vtp.VTPName,			
			vc.FullName AS VCName,
			vc.Mobile AS VCMobile,
			vc.EmailId AS VCEmail,
            vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			DATE(vtm.DateOfJoining) AS VTDateOfJoining,
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
			d.DivisionName,
			ds.DistrictName,
			s.BlockName,
			s.UDISE,
			s.SchoolName,
			se.SectorName,
			jr.JobRoleName,
			sc.Name AS ClassName,           
			DATE_FORMAT(sca.ReportingMonth, '%b-%Y') AS MonthYear,
			sca.VTWorkingDays AS VTReportSubmitted,
			sca.VTWorkingDays AS VTWorkingDays,
			sca.VTWorkingDays AS AttendanceDays,
			sca.EnrolledBoys,            
            sca.EnrolledGirls,
            sca.EnrolledStudents,
            sca.AttendanceBoys,
            sca.AttendanceGirls,
            sca.StudentAttendances,
			IF(sca.AttendanceBoysInPerc, ROUND(sca.AttendanceBoysInPerc, 2), 0) AS AverageBoysAttendance,
			IF(sca.AttendanceGirlsInPerc, ROUND(sca.AttendanceGirlsInPerc, 2), 0) AS AverageGirlsAttendance,
            IF(sca.AttendancesInPerc, ROUND(sca.AttendancesInPerc, 2), 0) AS AverageAttendance
		FROM VTSchoolSectors vss
		INNER JOIN DsStudentAttendances sca ON vss.VTSchoolSectorId = sca.VTSchoolSectorId 
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1	
        INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
		INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId 
        LEFT JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1         		
		LEFT JOIN SchoolClasses sc ON sca.ClassId = sc.ClassId AND sc.IsActive = 1
		LEFT JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		LEFT JOIN Divisions d ON s.DivisionId = d.DivisionId AND d.IsActive = 1
		LEFT JOIN Districts ds ON s.DivisionId = ds.DivisionId AND s.DistrictCode = ds.DistrictCode AND ds.IsActive = 1
		LEFT JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 	        
		LEFT JOIN DataValues dvm ON DATE_FORMAT(sca.ReportingMonth, "%b") = dvm.Description AND dvm.DataTypeId = 'Months'
		LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
		LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId 
		LEFT JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
		LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId 
		LEFT JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
		LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId 
		LEFT JOIN HMSchoolsMap hmm ON vss.AcademicYearId = hmm.AcademicYearId AND vss.SchoolId = hmm.SchoolId AND hmm.IsActive = 1
		LEFT JOIN HeadMasters hm ON hmm.HMId = hm.HMId AND hm.IsActive = 1
		WHERE (UserId IS NULL OR vtm.VCId = @accountId) 
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR d.DivisionId = DivisionId) 			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (ClassId IS NULL OR sca.ClassId = ClassId)
            AND (MonthId IS NULL OR MONTH(sca.ReportingMonth) = CAST(MonthId AS UNSIGNED))            
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		ORDER BY ay.YearName, vtp.VTPName, vc.FullName, dvs.Name, se.SectorName, d.DivisionName, ds.DistrictName, s.SchoolName, vt.FullName, dvm.DisplayOrder DESC, sc.DisplayOrder DESC;        
	END;

    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentAttendancesByFVId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetStudentAttendancesByFVId`(	 
	IN fieldIndustryVisitId VARCHAR(36) 
	)
BEGIN	 
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT sa.ClassId, sa.StudentId, sd.FullName AS StudentName, sa.IsPresent
	FROM VTFStudentAttendances sa
    INNER JOIN StudentClasses sd ON sa.StudentId = sd.StudentId
	WHERE sa.VTFieldIndustryVisitConductedId = fieldIndustryVisitId
	ORDER BY sd.FullName ASC;
	 
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentAttendancesByGLId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetStudentAttendancesByGLId`(	 
	IN guestLectureId VARCHAR(36) 
	)
BEGIN	 
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT sa.ClassId, sa.StudentId, sd.FullName AS StudentName, sa.IsPresent
	FROM VTGStudentAttendances sa
    INNER JOIN StudentClasses sd ON sa.StudentId = sd.StudentId
	WHERE sa.VTGuestLectureId = guestLectureId
	ORDER BY sd.FullName ASC;
	 
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentAttendancesByTransId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetStudentAttendancesByTransId`(
	IN transTypeId  VARCHAR(30),
	IN transId VARCHAR(36) 
	)
BEGIN	 
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT sa.ClassId, sa.StudentId, sd.StudentName, sa.IsPresent
	FROM VTFStudentAttendances sa
    INNER JOIN StudentClasses sd ON sa.StudentId = sd.StudentId
	WHERE sa.VTFieldIndustryVisitConductedId
	ORDER BY sd.StudentName ASC;
	 
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentAttendancesByVTDRId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetStudentAttendancesByVTDRId`(	 
	IN teachingVocationalEducationId VARCHAR(36) 
	)
BEGIN	 
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT sa.ClassId, sa.StudentId, sd.FullName AS StudentName, sa.IsPresent
	FROM VTRStudentAttendances sa
    INNER JOIN StudentClasses sd ON sa.StudentId = sd.StudentId
	WHERE sa.VTRTeachingVocationalEducationId = teachingVocationalEducationId
	ORDER BY sd.FullName ASC;
	 
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentClassDetailsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetStudentClassDetailsByCriteria`(
	IN academicYearId VARCHAR(36),
    IN vtpId VARCHAR(36),
    IN vcId VARCHAR(36),
    IN vtId VARCHAR(36),
    IN sectorId VARCHAR(36),
    IN jobRoleId VARCHAR(36),
    IN schoolId VARCHAR(36),
    IN classId VARCHAR(36),
    IN hmId VARCHAR(36),
	IN userId  VARCHAR(36),
    IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;    
	SET offSetValue = pageIndex * pageSize;
    
	IF(hmId IS NOT NULL) THEN
	BEGIN
		SELECT hsm.SchoolId INTO schoolId 
		FROM HMSchoolsMap hsm
		INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive	= 1                
		WHERE hsm.AcademicYearId = academicYearId AND hsm.HMId = hmId AND hsm.IsActive = 1;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
     
	SELECT DISTINCT sc.StudentId, CONCAT(s.UDISE, '-', s.SchoolName) AS SchoolName, cls.Name As ClassName, se.Name AS SectionName, 
		vt.FullName AS VTName, sc.FullName AS StudentName, scd.FatherName, scd.MotherName, scd.GuardianName, scd.AadhaarNumber, 
        scd.StudentRollNumber, scd.DateOfBirth, sc.IsActive, IF(scd.StudentId IS NOT NULL, 1, 0) AS IsSubmittedClassDetails, 
        scd.AssessmentConducted, COUNT(*) OVER() AS TotalRows
	FROM StudentClasses sc 
    INNER JOIN StudentClassMapping scm ON sc.AcademicYearId = scm.AcademicYearId AND sc.SchoolId = scm.SchoolId AND sc.ClassId = scm.ClassId AND sc.SectionId = scm.SectionId AND sc.StudentId = scm.StudentId AND scm.IsActive = 1
	INNER JOIN AcademicYears ay ON scm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
    INNER JOIN VTClasses vtc ON scm.AcademicYearId = vtc.AcademicYearId AND scm.SchoolId = vtc.SchoolId AND scm.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1	
	INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1   				
	INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1 
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1 
	INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1 	
    LEFT JOIN StudentClassDetails scd ON scm.StudentId = scd.StudentId
	LEFT JOIN SchoolClasses cls ON scm.ClassId = cls.ClassId
	LEFT JOIN Sections se ON scm.SectionId = se.SectionId	
	WHERE sc.IsActive = 1 AND sc.DeletedBy IS NULL AND sc.DateOfDropout IS NULL 
		AND scm.AcademicYearId = academicYearId            
		AND (vtpId IS NULL OR vtm.VTPId = vtpId)
		AND (vcId IS NULL OR vtm.VCId = vcId)
		AND (vtId IS NULL OR vss.VTId = vtId)
		AND (sectorId IS NULL OR vss.SectorId = sectorId)
		AND (jobRoleId IS NULL OR vss.JobRoleId = jobRoleId)
		AND (schoolId IS NULL OR vss.SchoolId = schoolId)		
		AND (classId IS NULL OR vtc.ClassId = classId)	
        AND (name IS NULL OR (sc.FullName LIKE CONCAT('%', name, '%') OR scd.StudentRollNumber LIKE CONCAT('%', name, '%')))
        #AND (name IS NULL OR (vt.FullName LIKE CONCAT('%', name, '%') OR s.SchoolName LIKE CONCAT('%', name, '%') OR s.UDISE LIKE CONCAT('%', name, '%') OR sc.FullName LIKE CONCAT('%', name, '%') OR scd.StudentRollNumber LIKE CONCAT('%', name, '%') OR scd.FatherName LIKE CONCAT('%', name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (sc.FullName LIKE CONCAT(charBy, '%')))
	ORDER BY cls.Name, se.Name, sc.FullName, scd.FatherName, scd.MotherName
	LIMIT offSetValue, pageSize;

    # CALL GetStudentClassDetailsByCriteria('bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,  0, 25);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentClassesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetStudentClassesByCriteria`(
	IN academicYearId VARCHAR(36),
    IN vtpId VARCHAR(36),
    IN vcId VARCHAR(36),
    IN vtId VARCHAR(36),
    IN sectorId VARCHAR(36),
    IN jobRoleId VARCHAR(36),
    IN schoolId VARCHAR(36),
    IN classId VARCHAR(36),
    IN hmId VARCHAR(36),
	IN status BIT,
    IN IsRollover BIT,
    IN name  VARCHAR(100),    
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT    
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;    
	SET offSetValue = pageIndex * pageSize;

	IF(hmId IS NOT NULL) THEN
	BEGIN
		SELECT hsm.SchoolId INTO schoolId 
        FROM HMSchoolsMap hsm
        INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive	= 1                
        WHERE hsm.AcademicYearId = academicYearId AND hsm.HMId = hmId AND hsm.IsActive = 1;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	  
	SELECT DISTINCT scr.StudentId, scr.AcademicYear, scr.SchoolName, scr.ClassName, scr.SectionName, scr.VTName, scr.StudentName, 
		scr.Gender, scr.DateOfEnrollment, scr.DeletedBy, scr.IsActive, scr.IsAYRollover, scr.DisplayOrder, COUNT(*) OVER() AS TotalRows
	FROM (
		SELECT DISTINCT sc.StudentId, ar.YearName AS AcademicYear, CONCAT(s.UDISE, '-', s.SchoolName) AS SchoolName, cls.Name As ClassName, se.Name AS SectionName, vt.FullName AS VTName, 
			sc.FullName AS StudentName, dvg.Name AS Gender, DATE(sc.DateOfEnrollment) AS DateOfEnrollment, sc.DeletedBy, sc.IsActive, scm.IsAYRollover, cls.DisplayOrder    
		FROM StudentClasses sc
        INNER JOIN StudentClassMapping scm ON sc.AcademicYearId = scm.AcademicYearId AND sc.SchoolId = scm.SchoolId AND sc.StudentId = scm.StudentId AND sc.ClassId = scm.ClassId AND sc.SectionId = scm.SectionId AND sc.IsActive = scm.IsActive
        INNER JOIN VTClasses vtc ON scm.AcademicYearId = vtc.AcademicYearId AND scm.SchoolId = vtc.SchoolId AND scm.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1	
		INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1   				
		INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1 
        INNER JOIN AcademicYears ar ON scm.AcademicYearId = ar.AcademicYearId AND ar.IsActive = 1
        INNER JOIN DataValues dvg ON sc.Gender = dvg.DataValueId AND dvg.DataTypeId = 'StudentGender'
        INNER JOIN SchoolClasses cls ON scm.ClassId = cls.ClassId AND cls.IsActive = 1
        INNER JOIN VCTrainersMap vtm ON scm.AcademicYearId = vtm.AcademicYearId AND scm.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1 
        INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1  		
        LEFT JOIN Sections se ON scm.SectionId = se.SectionId AND se.IsActive = 1																				 
		WHERE sc.DeletedBy IS NULL 
			AND scm.AcademicYearId = academicYearId            
			AND (vtpId IS NULL OR vtm.VTPId = vtpId)
			AND (vcId IS NULL OR vtm.VCId = vcId)
			AND (vtId IS NULL OR vss.VTId = vtId)
			AND (sectorId IS NULL OR vss.SectorId = sectorId)
			AND (jobRoleId IS NULL OR vss.JobRoleId = jobRoleId)
			AND (schoolId IS NULL OR vss.SchoolId = schoolId)		
			AND (classId IS NULL OR vtc.ClassId = classId)		
            AND (status IS NULL OR sc.IsActive = status)           
            AND (name IS NULL OR sc.FullName LIKE CONCAT(name, '%'))
            #AND (name IS NULL OR (vt.FullName LIKE CONCAT('%', name, '%') OR s.SchoolName LIKE CONCAT('%', name, '%') OR s.UDISE LIKE CONCAT('%', name, '%') OR sc.FullName LIKE CONCAT('%', name, '%')))
	) AS scr
    ORDER BY scr.AcademicYear, scr.SchoolName, scr.DisplayOrder, scr.SectionName, scr.VTName, scr.StudentName
    LIMIT offSetValue, pageSize;
    
	# 2021-2022: fda59df6-729e-493c-8d48-fc65b90008fe		2021-2022: bb46d443-08ac-43d3-b31a-8b640be6be6f
    # CALL GetStudentClassesByCriteria ('bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'a65a7bdd-073f-46ef-84ff-0338146c42bf', NULL, NULL, 0, NULL, 0, 25);
    # CALL GetStudentClassesByCriteria ('bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 25);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentDetailsReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetStudentDetailsReport`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
   
		SELECT DISTINCT	CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,	
			sd.AcademicYear, 
			sd.SchoolAllottedYear, 
			sd.PhaseName, 
			sd.VTPName, 
			sd.VTName, 
			sd.VTMobile, 
			sd.VTEmail, 
			sd.VTDateOfJoining, 
			sd.VCName, 
			sd.VCMobile, 
			sd.VCEmail, 
			sd.HMName, 
			sd.HMMobile, 
			sd.HMEmail, 
			sd.SchoolManagement, 
			sd.DivisionName, 
			sd.DistrictName, 
			sd.BlockName, 
			sd.UDISE, 
			sd.SchoolName, 
			sd.SectorName, 
			sd.JobRoleName, 
			sd.ClassName, 
			sd.StudentName, 
			sd.StudentGender, 
			sd.StudentCategory, 
			sd.RoleNo, 
			sd.FatherName, 
			sd.MotherName, 
			sd.GuardianName, 
			sd.DateOfBirth, 
			sd.SocialCategory, 
			sd.Religion, 
			sd.StudentId
		FROM (
			SELECT DISTINCT
				ay.YearName AS AcademicYear,		
				say.YearName AS SchoolAllottedYear,
				ph.PhaseName,
				vtp.VTPName, 
				vt.FullName AS VTName,
				vt.Mobile AS VTMobile,
				vt.Email AS VTEmail,	
				DATE(vt.DateOfJoining) AS VTDateOfJoining,
				vc.FullName AS VCName,
				vc.Mobile AS VCMobile,
				vc.EmailId AS VCEmail,
				hm.FullName AS HMName,
				hm.Mobile AS HMMobile,
				hm.Email AS HMEmail,
				dvsm.Name AS SchoolManagement,
				d.DivisionName,
				ds.DistrictName,
				s.BlockName,
				s.UDISE,
				s.SchoolName, 
				sec.SectorName,
				jr.JobRoleName,
				cls.Name AS ClassName, 
				sc.FullName AS StudentName,
				dvg.Name AS StudentGender,
				'' AS StudentCategory,
				srd.StudentRollNumber AS RoleNo,
				srd.FatherName,
				srd.MotherName,
				srd.GuardianName,
				srd.DateOfBirth,
				dvs.Name AS SocialCategory,
				dvr.Name AS Religion,
				sc.StudentId      
			FROM StudentClasses sc			
            INNER JOIN StudentClassMapping scm ON sc.SchoolId = scm.SchoolId AND sc.StudentId = scm.StudentId AND scm.IsActive = 1
			INNER JOIN VTClasses vtc ON scm.AcademicYearId = vtc.AcademicYearId AND scm.SchoolId = vtc.SchoolId AND scm.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1	
			INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1   				
			INNER JOIN VocationalTrainers vt ON scm.VTId = vt.VTId AND vt.IsActive = 1 
			INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1 
			LEFT JOIN VTClassSections vtcs ON vtc.VTClassId = vtcs.VTClassId AND vtcs.IsActive = 1 			
			LEFT JOIN AcademicYears ay ON sc.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1   
            LEFT JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1   
			LEFT JOIN SchoolClasses cls ON sc.ClassId = cls.ClassId AND cls.IsActive = 1
			LEFT JOIN Sections se ON sc.SectionId = se.SectionId
			LEFT JOIN DataValues dvg ON sc.Gender = dvg.DataValueId AND dvg.DataTypeId = 'StudentGender'
            LEFT JOIN StudentClassDetails srd ON sc.StudentId = srd.StudentId 		
			LEFT JOIN Sectors sec ON vss.SectorId = sec.SectorId AND sec.IsActive = 1  
			LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1			
			LEFT JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId AND vc.IsActive = 1  
			LEFT JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1 		
			LEFT JOIN HeadMasters hm ON sc.SchoolId = hm.SchoolId AND hm.IsActive = 1
			LEFT JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
			LEFT JOIN Divisions d ON s.DivisionId = d.DivisionId
			LEFT JOIN Districts ds ON s.DistrictCode = ds.DistrictCode
			LEFT JOIN DataValues dvsm ON s.SchoolManagementId = dvsm.DataValueId AND dvsm.DataTypeId = 'SchoolManagement'		
			LEFT JOIN DataValues dvs ON srd.SocialCategory = dvs.DataValueId AND dvs.DataTypeId = 'SocialCategory'
			LEFT JOIN DataValues dvr ON srd.Religion = dvr.DataValueId AND dvr.DataTypeId = 'Religion'				
			WHERE sc.IsActive = 1 AND sc.DeletedBy IS NULL   
				AND (UserId IS NULL OR vt.VCId = @accountId)
				AND (AcademicYearId IS NULL OR scm.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 				
                AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vt.VTPId = VTPId)
				AND (ClassId IS NULL OR sc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				AND (MonthId IS NULL OR MONTH(sc.DateOfEnrollment) = CAST(MonthId AS UNSIGNED))
		) AS sd
        CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
		ORDER BY sd.AcademicYear, sd.SchoolAllottedYear, sd.PhaseName, sd.VTPName, sd.VCName, sd.VTName, sd.SectorName, sd.SchoolName, sd.ClassName, sd.StudentName;        
	END;   
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
     
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentDetailsReportV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetStudentDetailsReportV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10),
	IN HMId VARCHAR(36),
    IN Name VARCHAR(36),
	IN PageIndex INT,
	IN PageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;    
	DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
	SET offSetValue = pageIndex * pageSize;
  
	IF(HMId IS NOT NULL) THEN
	BEGIN
		SELECT hsm.SchoolId INTO schoolId 
        FROM HMSchoolsMap hsm
        INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive = 1
        WHERE hsm.AcademicYearId = AcademicYearId AND hsm.HMId = HMId AND hsm.IsActive = 1;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(POSITION(@roleName IN 'Role: VC, VT') = 0) THEN				
			SET UserId = NULL;		 
		END IF;
   
		SELECT DISTINCT 1 AS SrNo, ay.YearName AS AcademicYear, sc.StudentId AS LHStudentId, 
			sc.FirstName, sc.MiddleName, sc.LastName, sc.FullName AS StudentName, dvg.Name AS StudentGender, 
            sc.Mobile AS PrimaryContact, srd.Mobile AS AlternativeContact, cls.Name AS ClassName, se.Name AS SectionName, dstm.Name AS StreamName, srd.StudentRollNumber AS RoleNo,
            srd.FatherName, srd.MotherName, srd.GuardianName, srd.DateOfBirth, dvs.Name AS SocialCategory, dvr.Name AS Religion,
            srd.AssessmentConducted AS ReadyForAssesment, s.UDISE, s.SchoolName, st.StateName, d.DivisionName, ds.DistrictName, s.BlockName, 
            dvsm.Name AS SchoolManagement, say.YearName AS SchoolAllottedYear, ph.PhaseName,
			hm.FullName AS HMName, hm.Mobile AS HMMobile, hm.Email AS HMEmail, sec.SectorName, jr.JobRoleName, 
            vtp.VTPName, vc.FullName AS VCName, vc.Mobile AS VCMobile, vc.EmailId AS VCEmail,
            vt.FullName AS VTName, vt.Mobile AS VTMobile, vt.Email AS VTEmail, DATE(vtm.DateOfJoining) AS VTDateOfJoining,
			sc.CreatedOn, sc.UpdatedOn, COUNT(*) OVER() AS TotalRows
		FROM StudentClasses sc			
		INNER JOIN StudentClassMapping scm ON sc.AcademicYearId = scm.AcademicYearId AND sc.SchoolId = scm.SchoolId AND sc.ClassId = scm.ClassId AND sc.SectionId = scm.SectionId AND sc.StudentId = scm.StudentId AND scm.IsActive = 1
		INNER JOIN VTClasses vtc ON scm.AcademicYearId = vtc.AcademicYearId AND scm.SchoolId = vtc.SchoolId AND scm.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1	
		INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1   				
		INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1 
		INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
        INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
		INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
		INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1 
		INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
        INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
		INNER JOIN Sectors sec ON vss.SectorId = sec.SectorId AND sec.IsActive = 1  
		INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1	
		LEFT JOIN SchoolClasses cls ON scm.ClassId = cls.ClassId AND cls.IsActive = 1
		LEFT JOIN AcademicYears ay ON scm.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1   
		LEFT JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1   
        LEFT JOIN Sections se ON scm.SectionId = se.SectionId
		LEFT JOIN DataValues dvg ON sc.Gender = dvg.DataValueId AND dvg.DataTypeId = 'StudentGender'
		LEFT JOIN StudentClassDetails srd ON sc.StudentId = srd.StudentId 		
		LEFT JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		LEFT JOIN States st ON s.StateCode = st.StateCode
        LEFT JOIN Divisions d ON s.DivisionId = d.DivisionId
		LEFT JOIN Districts ds ON s.DistrictCode = ds.DistrictCode
		LEFT JOIN DataValues dvsm ON s.SchoolManagementId = dvsm.DataValueId AND dvsm.DataTypeId = 'SchoolManagement'		
		LEFT JOIN DataValues dvs ON srd.SocialCategory = dvs.DataValueId AND dvs.DataTypeId = 'SocialCategory'
		LEFT JOIN DataValues dvr ON srd.Religion = dvr.DataValueId AND dvr.DataTypeId = 'Religion'						
        LEFT JOIN DataValues dstm ON srd.StreamId = dstm.DataValueId AND dstm.DataTypeId = 'Streams'	
		LEFT JOIN HMSchoolsMap hsm ON scm.AcademicYearId = hsm.AcademicYearId AND scm.SchoolId = hsm.SchoolId AND hsm.IsActive = 1
		LEFT JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive = 1     
		WHERE sc.IsActive = 1 AND sc.DateOfDropout IS NULL AND sc.DeletedBy IS NULL    				
			AND (UserId IS NULL OR (@roleName = 'VC' AND vtm.VCId = @accountId) OR (@roleName = 'VT' AND vtm.VTId = @accountId))
			AND (AcademicYearId IS NULL OR scm.AcademicYearId = AcademicYearId) 
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 				
			AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND ((HMId IS NULL AND schoolId IS NULL) OR vss.SchoolId = schoolId)
			AND (ClassId IS NULL OR sc.ClassId = ClassId)
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			AND (MonthId IS NULL OR MONTH(sc.DateOfEnrollment) = CAST(MonthId AS UNSIGNED))
            AND (Name IS NULL OR srd.StudentRollNumber LIKE CONCAT('%', Name, '%'))
		ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName, sec.SectorName, s.SchoolName, cls.Name, se.Name, sc.FullName    
		LIMIT offSetValue, pageSize;		
	END;   
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	# CALL GetStudentDetailsReportV2 ('rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 25);
    # CALL GetStudentDetailsReportV2 ('VC.AISECT@email.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 25);
    # CALL GetStudentDetailsReportV2 ('pradipdhangar29@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 25);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentEnrollmentReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetStudentEnrollmentReport`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
  
		DROP TEMPORARY TABLE IF EXISTS StudentEnrollmentData;
		
		CREATE TEMPORARY TABLE StudentEnrollmentData          
        SELECT sr.AcademicYearId, sr.VTId, sr.SchoolId, cls.Name AS ClassName,
			COUNT(DISTINCT IF(sr.DateOfDropout IS NULL AND sr.IsActive = 1, sr.StudentId, NULL)) AS TotalEnrollmentStudents,
			SUM(IF((sr.DateOfDropout IS NULL AND sr.IsActive = 1 AND sr.Gender = '207'), 1, 0)) AS EnrolledBoys, 
			SUM(IF((sr.DateOfDropout IS NULL AND sr.IsActive = 1 AND sr.Gender = '208'), 1, 0)) AS EnrolledGirls, 
			SUM(IF((sr.IsActive = 0 AND sr.DateOfDropout IS NOT NULL), 1, 0)) AS Dropout	
		FROM (
			SELECT DISTINCT sc.AcademicYearId, sc.SchoolId, sc.ClassId, sc.StudentId, sc.Gender, scm.VTId, sc.DateOfDropout, sc.DeletedBy, sc.IsActive
            FROM StudentClasses sc			
            INNER JOIN StudentClassMapping scm ON sc.SchoolId = scm.SchoolId AND sc.StudentId = scm.StudentId AND scm.IsActive = 1
			INNER JOIN VTClasses vtc ON scm.AcademicYearId = vtc.AcademicYearId AND scm.SchoolId = vtc.SchoolId AND scm.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1	
			INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1   				
			INNER JOIN VocationalTrainers vt ON scm.VTId = vt.VTId AND vt.IsActive = 1 
			INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1 
			LEFT JOIN VTClassSections vtcs ON vtc.VTClassId = vtcs.VTClassId AND vtcs.IsActive = 1 			
			LEFT JOIN AcademicYears ar ON sc.AcademicYearId = ar.AcademicYearId AND ar.IsActive = 1   
			LEFT JOIN SchoolClasses cls ON sc.ClassId = cls.ClassId
			LEFT JOIN Sections se ON sc.SectionId = se.SectionId
			LEFT JOIN DataValues dvg ON sc.Gender = dvg.DataValueId AND dvg.DataTypeId = 'StudentGender'
			WHERE sc.DeletedBy IS NULL AND sc.IsActive = 1
				AND (UserId IS NULL OR vt.VCId = @accountId) 
				AND (AcademicYearId IS NULL OR scm.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 				
                AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vt.VTPId = VTPId)
				AND (ClassId IS NULL OR sc.ClassId = ClassId)
				AND (MonthId IS NULL OR MONTH(sc.DateOfEnrollment) = CAST(MonthId AS UNSIGNED))   
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		) AS sr
		INNER JOIN SchoolClasses cls ON sr.ClassId = cls.ClassId
		GROUP BY sr.AcademicYearId, sr.SchoolId, sr.VTId, sr.ClassId;		

		SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName, se.SectorName) AS SrNo,			
			ay.YearName AS AcademicYear,		
			say.YearName AS SchoolAllottedYear,
			ph.PhaseName,
			vtp.VTPName, 
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			DATE(vt.DateOfJoining) AS VTDateOfJoining,
			vc.FullName AS VCName,
			vc.Mobile AS VCMobile,
			vc.EmailId AS VCEmail,
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
			d.DivisionName,
			ds.DistrictName,
			s.BlockName,
			s.UDISE,
			s.SchoolName, 
			se.SectorName,
			jr.JobRoleName,
			sc.ClassName, 
			sc.TotalEnrollmentStudents, 
			sc.EnrolledBoys, 
			sc.EnrolledGirls, 
            0 AS NewEnrollment,
			sc.Dropout
		FROM StudentEnrollmentData sc
        INNER JOIN AcademicYears ay ON sc.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
		INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1		
        INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1
        INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
		INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode
		INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 	
		LEFT JOIN VocationalTrainers vt ON sc.VTId = vt.VTId AND vt.IsActive = 1
		LEFT JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId AND vc.IsActive = 1
		LEFT JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1
		LEFT JOIN HeadMasters hm ON sc.SchoolId = hm.SchoolId AND hm.IsActive = 1 				
        LEFT JOIN VTSchoolSectors vss ON sc.AcademicYearId = vss.AcademicYearId AND sc.SchoolId = vss.SchoolId AND sc.VTId = vss.VTId AND vss.IsActive = 1 	        
		LEFT JOIN Sectors se ON vss.SectorId = se.SectorId
		LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows        
		ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName, se.SectorName;
    
		DROP TEMPORARY TABLE IF EXISTS StudentEnrollmentData;
	END;    
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentEnrollmentReportV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetStudentEnrollmentReportV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10),
    IN HMId VARCHAR(36)
	)
BEGIN
	DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
  	
	IF(HMId IS NOT NULL) THEN
	BEGIN
		SELECT hsm.SchoolId INTO schoolId 
        FROM HMSchoolsMap hsm 
        INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive = 1
        WHERE hsm.AcademicYearId = AcademicYearId AND hsm.HMId = HMId AND hsm.IsActive = 1;
	END;
	END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
  
		DROP TEMPORARY TABLE IF EXISTS StudentEnrollmentData;
		
		CREATE TEMPORARY TABLE StudentEnrollmentData          
        SELECT sr.AcademicYearId, sr.VTId, sr.SchoolId, cls.Name AS ClassName,
			COUNT(DISTINCT IF(sr.DateOfDropout IS NULL AND sr.IsActive = 1, sr.StudentId, NULL)) AS TotalEnrollmentStudents,
			SUM(IF((sr.DateOfDropout IS NULL AND sr.IsActive = 1 AND sr.Gender = '207'), 1, 0)) AS EnrolledBoys, 
			SUM(IF((sr.DateOfDropout IS NULL AND sr.IsActive = 1 AND sr.Gender = '208'), 1, 0)) AS EnrolledGirls, 
			SUM(IF((sr.IsActive = 0 AND sr.DateOfDropout IS NOT NULL), 1, 0)) AS Dropout	
		FROM (
			SELECT DISTINCT scm.AcademicYearId, sc.SchoolId, sc.ClassId, sc.StudentId, sc.Gender, scm.VTId, sc.DateOfDropout, sc.DeletedBy, sc.IsActive
            FROM StudentClassMapping scm 
			INNER JOIN StudentClasses sc ON scm.SchoolId = sc.SchoolId AND scm.StudentId = sc.StudentId             
			INNER JOIN VTClasses vtc ON scm.AcademicYearId = vtc.AcademicYearId AND scm.SchoolId = vtc.SchoolId AND scm.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1	
			INNER JOIN VTClassSections vtcs ON vtc.VTClassId = vtcs.VTClassId
            INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1   				
			INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1 
            INNER JOIN AcademicYears ar ON scm.AcademicYearId = ar.AcademicYearId AND ar.IsActive = 1   
			INNER JOIN SchoolClasses cls ON sc.ClassId = cls.ClassId
			INNER JOIN Sections se ON sc.SectionId = se.SectionId
			INNER JOIN DataValues dvg ON sc.Gender = dvg.DataValueId AND dvg.DataTypeId = 'StudentGender'
            LEFT JOIN VCTrainersMap vtm ON scm.AcademicYearId = vtm.AcademicYearId AND scm.VTId = vtm.VTId AND vtm.IsActive = 1
			WHERE (UserId IS NULL OR vtm.VCId = @accountId) 
				AND (AcademicYearId IS NULL OR scm.AcademicYearId = AcademicYearId) 
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId) 				
                AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vtm.VTPId = VTPId)
                AND ((HMId IS NULL AND schoolId IS NULL) OR vss.SchoolId = schoolId)
				AND (ClassId IS NULL OR sc.ClassId = ClassId)
				AND (MonthId IS NULL OR MONTH(sc.DateOfEnrollment) = CAST(MonthId AS UNSIGNED))   
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		) AS sr
		INNER JOIN SchoolClasses cls ON sr.ClassId = cls.ClassId
		GROUP BY sr.AcademicYearId, sr.SchoolId, sr.VTId, sr.ClassId;		
        
		SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName, se.SectorName) AS SrNo,			
			ay.YearName AS AcademicYear,		
			say.YearName AS SchoolAllottedYear,
			ph.PhaseName,
			vtp.VTPName, 
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			DATE(vtm.DateOfJoining) AS VTDateOfJoining,
			vc.FullName AS VCName,
			vc.Mobile AS VCMobile,
			vc.EmailId AS VCEmail,
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
			d.DivisionName,
			ds.DistrictName,
			s.BlockName,
			s.UDISE,
			s.SchoolName, 
			se.SectorName,
			jr.JobRoleName,            
			sc.ClassName, 
			sc.TotalEnrollmentStudents, 
			sc.EnrolledBoys, 
			sc.EnrolledGirls, 
            0 AS NewEnrollment,
			sc.Dropout
		FROM StudentEnrollmentData sc
        INNER JOIN AcademicYears ay ON sc.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
		INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1		
        INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1
        INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
		INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode
		INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 	
		INNER JOIN VTSchoolSectors vss ON sc.AcademicYearId = vss.AcademicYearId AND sc.SchoolId = vss.SchoolId AND sc.VTId = vss.VTId AND vss.IsActive = 1 	        
		LEFT JOIN Sectors se ON vss.SectorId = se.SectorId
		LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId        
        LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
        LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1 
		LEFT JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1
        LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1  
        LEFT JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.DateOfResignation IS NULL AND vtpm.IsActive = 1
        LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1 
        LEFT JOIN HMSchoolsMap hmm ON vss.AcademicYearId = hmm.AcademicYearId AND vss.SchoolId = hmm.SchoolId AND hmm.IsActive = 1		
        LEFT JOIN HeadMasters hm ON hmm.HMId = hm.HMId AND hm.IsActive = 1       
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows   
		ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName, se.SectorName;        
    
		DROP TEMPORARY TABLE IF EXISTS StudentEnrollmentData;
	END;    
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	# CALL GetStudentDetailsReportV2 ('rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);    	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentExitSurveyById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetStudentExitSurveyById`(
	IN UserType  VARCHAR(30),	
	IN UserId  VARCHAR(100),
	IN AcademicYearId VARCHAR(100),
    IN ClassId VARCHAR(100),
    IN StudentId VARCHAR(100)
)
BEGIN 
	SELECT ay.YearName INTO @YearName FROM AcademicYears ay WHERE ay.AcademicYearId = AcademicYearId;
    SELECT sc.Name INTO @ClassName FROM SchoolClasses sc WHERE sc.ClassId = ClassId;
    
	IF(@YearName = '2020-2021') THEN
	BEGIN
		SELECT st.ExitStudentId,
			st.StudentUniqueId,
			st.StudentFullName,
			st.FatherName,
			st.MotherName,			
			st.NameOfSchool,
			st.UdiseCode,
			st.District,
			st.Class,
			st.Gender,
			st.DOB,
			st.Category,
			st.Sector,
			st.JobRole,
			st.VTId,
			st.VTName,
			st.VTMobile,
			st.VCId,
			st.VCName,
			st.VTPId,
			st.VTPName,
			ex.DateOfIntv,
			ex.CityOfResidence,
			ex.DistrictOfResidence,
			ex.BlockOfResidence,
			ex.PinCode,
			ex.StudentMobileNo,
			ex.ParentMobileNo,
			ex.ParentName,
			ex.DoneInternship,
			ex.CurrentlyEmployed,
			ex.DetailsOfEmployment,
			ex.IsFullTime,
			ex.SectorsOfEmployment,
			ex.IsRelevantToVocCourse,
			ex.WillContHigherStudies,
			ex.WillBeFullTime,
			ex.CourseToPursue,
			ex.StreamOfEducation,
			ex.WillContVocEdu,
			ex.ReasonsNOTToContinue,
			ex.OtherReasons,
			ex.WillContSameSector,
			ex.DoesFieldStudyHveVocSub,
			ex.HveRegisteredOnEmploymentPortal,
			ex.WillingToGetRegisteredOnNAPS,
			ex.InterestedInSkillDevelopmentPgms,
			ex.SectorsInterestedIn,
			ex.InterestedInJobOrSelfEmployment,
			ex.TopicsOfInterest,
			ex.AnyPreferredLocForEmployment,
			ex.PreferredLocations,
			ex.CanSendTheUpdates,
			ex.WantToKnowAboutOpportunities,
			ex.CollectedEmailId,
			ex.SurveyCompletedByStudentORParent,
			ex.StudentWANo,
			ex.Religion,
			ex.WillingToContSkillTraining,
			ex.CourseForTraining,
			ex.CourseNameIfOther,
			ex.SkillTrainingType,
			ex.SectorForTraining,
			ex.OtherSectorsIfAny,
			ex.WantToKnowAbtSkillsUnivByGvt,
			ex.WantToKnowAbtPgmsForJobsNContEdu,
			ex.WantToPursueAnySkillTraining,
			ex.TrainingType,
			ex.SectorForSkillTraining,
			ex.OthersIfAny,
			ex.SeatNo,
			ex.WillingToGoForTechHighEdu,
			ex.Remark,
			1 AS TotalRows,
            ex.CanLahiGetInTouch
		FROM StudentsForExitForm st
		LEFT JOIN ExitSurveyDetails ex ON st.ExitStudentId = ex.ExitStudentId 
		WHERE st.AcademicYear = @YearName AND st.Class = @ClassName AND st.ExitStudentId = StudentId;
	END;
	ELSE 
	BEGIN 
    SELECT st.ExitStudentId,
		st.StudentUniqueId,
        st.StudentFullName,
		st.FatherName,
        st.MotherName,
		st.NameOfSchool,
		st.UdiseCode,
		st.District,
		st.Class,
		st.Gender,
		st.DOB,
		st.Category,
		st.Sector,
        st.JobRole,
		st.VTId,
		st.VTName,
        st.VTMobile,
		st.VCId,
		st.VCName,
        NULL AS VTPId,
		st.VTPName,
		ex.DateOfIntv,
		ex.CityOfResidence,
		ex.DistrictOfResidence,
		ex.BlockOfResidence,
		ex.PinCode,
		ex.StudentMobileNo,
		ex.ParentMobileNo,
		ex.ParentName,
		ex.DoneInternship,
		ex.CurrentlyEmployed,
		ex.DetailsOfEmployment,
		ex.IsFullTime,
		ex.SectorsOfEmployment,
		ex.IsRelevantToVocCourse,
		ex.WillContHigherStudies,
		ex.WillBeFullTime,
		ex.CourseToPursue,
		ex.StreamOfEducation,
		ex.WillContVocEdu,
		ex.ReasonsNOTToContinue,
		ex.OtherReasons,
		ex.WillContSameSector,
		ex.DoesFieldStudyHveVocSub,
		ex.HveRegisteredOnEmploymentPortal,
		ex.WillingToGetRegisteredOnNAPS,
		ex.InterestedInSkillDevelopmentPgms,
		ex.SectorsInterestedIn,
		ex.InterestedInJobOrSelfEmployment,
		ex.TopicsOfInterest,
		ex.AnyPreferredLocForEmployment,
		ex.PreferredLocations,
		ex.CanSendTheUpdates,
        ex.WantToKnowAboutOpportunities,
        ex.CollectedEmailId,
        ex.SurveyCompletedByStudentORParent,
        ex.StudentWANo,
        ex.Religion,
        ex.WillingToContSkillTraining,
        ex.CourseForTraining,
        ex.CourseNameIfOther,
        ex.SkillTrainingType,
        ex.SectorForTraining,
        ex.OtherSectorsIfAny,
        ex.WantToKnowAbtSkillsUnivByGvt,
        ex.WantToKnowAbtPgmsForJobsNContEdu,
		ex.WantToPursueAnySkillTraining,
        ex.TrainingType,
        ex.SectorForSkillTraining,
        ex.OthersIfAny,
		ex.SeatNo,
        ex.WillingToGoForTechHighEdu,
		ex.Remark,
        1 TotalRows,
        ex.CanLahiGetInTouch
	FROM (SELECT 
			sc.StudentId AS ExitStudentId, 
            scd.StudentRollNumber AS StudentUniqueId,
            sc.FullName AS StudentFullName, 
            scd.FatherName,
            scd.MotherName,
            s.SchoolName AS NameOfSchool, 
            s.Udise AS UdiseCode, 
            s.DistrictCode AS District,
            scl.Name AS Class, 
            dv.Name AS Gender,
            DATE(scd.DateOfBirth) AS DOB, 
            dv1.Name AS Category,
            sec.SectorName AS Sector,
            jr.JobRoleName AS JobRole,
            sc.VTId, 
            vt.FullName AS VTName, 
            vt.Mobile AS VTMobile,
            vt.VCId,
            vc.FullName AS VCName, 
            vt.VTPId, 
            vtp.VTPName
		FROM StudentClasses sc 
        INNER JOIN VTClassStudents vcs ON sc.StudentId = vcs.StudentId
        INNER JOIN AcademicYears ay ON sc.AcademicYearId = ay.AcademicYearId		
		INNER JOIN Schools s ON sc.SchoolId = s.SchoolId 
		INNER JOIN DataValues dv ON sc.Gender = dv.DataValueId AND dv.DataTypeId='StudentGender' 
		INNER JOIN SchoolClasses scl ON sc.ClassId = scl.ClassId  
        LEFT JOIN VTSchoolSectors vss ON sc.VTId = vss.VTId AND sc.SchoolId = vss.SchoolId AND sc.AcademicYearId = vss.AcademicYearId and vss.IsActive =1
		LEFT JOIN JobRoles jr ON vss.JobRoleId = jr.JobRoleId 
		LEFT JOIN Sectors sec ON vss.SectorId = sec.SectorId  
        LEFT JOIN StudentClassDetails scd ON sc.StudentId = scd.StudentId 
        LEFT JOIN DataValues dv1 ON scd.SocialCategory = dv1.DataValueId AND dv1.DataTypeId='SocialCategory' 
		LEFT JOIN VocationalTrainers vt ON vss.VTId = vt.VTId 
		LEFT JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId 
		LEFT JOIN VocationalTrainingProviders vtp ON vt.VTPId = vtp.VTPId
		WHERE sc.AcademicYearId = AcademicYearId AND sc.ClassId = ClassId AND sc.StudentId = StudentId
	) st
	LEFT JOIN ExitSurveyDetails ex ON st.ExitStudentId = ex.ExitStudentId
	WHERE st.ExitStudentId = StudentId
	UNION 
	 (SELECT st.ExitStudentId,
		st.StudentUniqueId,
		st.StudentFullName,
		st.FatherName,
        st.MotherName,
		st.NameOfSchool,
		st.UdiseCode,
		st.District,
		st.Class,
		st.Gender,
		st.DOB,
		st.Category,
		st.Sector,
		st.JobRole,
        st.VTId,
		st.VTName,
        st.VTMobile,
		st.VCId,
		st.VCName,
		st.VTPId,
		st.VTPName,
        ex.DateOfIntv,
		ex.CityOfResidence,
		ex.DistrictOfResidence,
		ex.BlockOfResidence,
		ex.PinCode,
		ex.StudentMobileNo,
		ex.ParentMobileNo,
		ex.ParentName,
		ex.DoneInternship,
		ex.CurrentlyEmployed,
		ex.DetailsOfEmployment,
		ex.IsFullTime,
		ex.SectorsOfEmployment,
		ex.IsRelevantToVocCourse,
		ex.WillContHigherStudies,
		ex.WillBeFullTime,
		ex.CourseToPursue,
		ex.StreamOfEducation,
		ex.WillContVocEdu,
		ex.ReasonsNOTToContinue,
		ex.OtherReasons,
		ex.WillContSameSector,
		ex.DoesFieldStudyHveVocSub,
		ex.HveRegisteredOnEmploymentPortal,
		ex.WillingToGetRegisteredOnNAPS,
		ex.InterestedInSkillDevelopmentPgms,
		ex.SectorsInterestedIn,
		ex.InterestedInJobOrSelfEmployment,
		ex.TopicsOfInterest,
		ex.AnyPreferredLocForEmployment,
		ex.PreferredLocations,
		ex.CanSendTheUpdates,
        ex.WantToKnowAboutOpportunities,
        ex.CollectedEmailId,
        ex.SurveyCompletedByStudentORParent,
        ex.StudentWANo,
        ex.Religion,
        ex.WillingToContSkillTraining,
        ex.CourseForTraining,
        ex.CourseNameIfOther,
        ex.SkillTrainingType,
        ex.SectorForTraining,
        ex.OtherSectorsIfAny,
        ex.WantToKnowAbtSkillsUnivByGvt,
        ex.WantToKnowAbtPgmsForJobsNContEdu,
        ex.WantToPursueAnySkillTraining,
        ex.TrainingType,
        ex.SectorForSkillTraining,
        ex.OthersIfAny,
		ex.SeatNo,
        ex.WillingToGoForTechHighEdu,        
		ex.Remark,
		1 AS TotalRows,
        ex.CanLahiGetInTouch
	FROM StudentsForExitForm st
	LEFT JOIN ExitSurveyDetails ex ON st.ExitStudentId = ex.ExitStudentId
	WHERE st.AcademicYear = @YearName AND st.Class = @ClassName AND st.ExitStudentId = StudentId 
	);
	END;
    
	END IF;

	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentExitSurveyByIdV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetStudentExitSurveyByIdV2`(
	IN UserType  VARCHAR(30),	
	IN UserId  VARCHAR(36),
	IN AcademicYearId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN StudentId VARCHAR(36)
)
BEGIN  
    SELECT sc.StudentId AS ExitStudentId, 
		ex.AcademicYearId, 
        ay.YearName AS AcademicYear, 
		vtp.VTPName,
        vt.FullName AS VTName,
        vt.Mobile AS VTMobile,
        vc.FullName AS VCName,
        sec.SectorName AS Sector, 
		jr.JobRoleName AS JobRole, 
        s.SchoolName AS NameOfSchool, 
		s.Udise AS UdiseCode, 
		scl.Name AS Class,
		st.StateName AS State, 
        dvs.DivisionName AS Division, 
        ds.DistrictName AS District, 
        
        scd.StudentRollNumber AS StudentUniqueId, 
        sc.FirstName AS StudentFirstName, 
        sc.MiddleName AS StudentMiddleName, 
        sc.LastName AS StudentLastName, 
        sc.FullName AS StudentFullName, 
		scd.FatherName, 
		scd.MotherName,
		dv.Name AS Gender, 
		scd.DateOfBirth AS DOB, 
		dv1.Name AS Category,
        scd.Mobile AS StudentMobileNo,
        scd.WhatsAppNo AS StudentWhatsAppNo,
        scd.Mobile1 AS ParentMobileNo,
        
		ex.DateOfIntv,
		ex.CityOfResidence,
		ex.DistrictOfResidence,
		ex.BlockOfResidence,
		ex.PinCode,
		ex.StudentAddress,
 
		#ex.ParentName,
        ex.WillContHigherStudies,
        ex.IsFullTime,
		ex.CourseToPursue,       
		ex.StreamOfEducation,
        ex.WillContVocEdu,
        ex.WillContVocational11,
        ex.ReasonsNOTToContinue,
        ex.WillContSameSector,
        ex.SectorForTraining,
        
		ex.DoneInternship,
        ex.WorkTitle,
		ex.CurrentlyEmployed,
		ex.DetailsOfEmployment,		
		ex.SectorsOfEmployment,
		ex.IsRelevantToVocCourse,
		ex.WillBeFullTime,
		ex.OtherReasons,		
		ex.DoesFieldStudyHveVocSub,
		ex.HveRegisteredOnEmploymentPortal,
		ex.WillingToGetRegisteredOnNAPS,
		#ex.InterestedInSkillDevelopmentPgms,
		#ex.SectorsInterestedIn,
		ex.InterestedInJobOrSelfEmployment,
		ex.TopicsOfInterest,
		ex.AnyPreferredLocForEmployment,
		ex.PreferredLocations,
		ex.CanSendTheUpdates,
        ex.WantToKnowAboutOpportunities,
        ex.CollectedEmailId,
        ex.SurveyCompletedByStudentORParent,
        ex.StudentWANo,
        ex.Religion,
        ex.WillingToContSkillTraining,
        ex.CourseForTraining,
        ex.CourseNameIfOther,
        ex.SkillTrainingType,        
        ex.IsVSCompleted,
        ex.OtherSectorsIfAny,
        ex.WantToKnowAbtSkillsUnivByGvt,
        ex.WantToKnowAbtPgmsForJobsNContEdu,
		ex.WantToPursueAnySkillTraining,
        ex.TrainingType,
        ex.SectorForSkillTraining,
        ex.OthersIfAny,
		ex.SeatNo,
        ex.WillingToGoForTechHighEdu,
        ex.DifferentProgramOpportunities,
        ex.IsFulltimeWillingness,
		ex.Remark,
        ex.CanLahiGetInTouch,
        1 TotalRows
	FROM StudentClassMapping scm
	INNER JOIN StudentClasses sc ON scm.StudentId = sc.StudentId AND sc.IsActive = 1
	INNER JOIN VTSchoolSectors vss ON scm.AcademicYearId = vss.AcademicYearId AND scm.SchoolId = vss.SchoolId AND scm.VTId = vss.VTId AND vss.IsActive = 1    
	INNER JOIN Sectors sec ON vss.SectorId = sec.SectorId AND sec.IsActive = 1
    INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
    INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1
	INNER JOIN DataValues dv ON sc.Gender = dv.DataValueId AND dv.DataTypeId = 'StudentGender' 	
	INNER JOIN SchoolClasses scl ON sc.ClassId = scl.ClassId AND scl.IsActive = 1 
	INNER JOIN VCTrainersMap vtm ON scm.AcademicYearId = vtm.AcademicYearId AND scm.VTId = vtm.VTId AND vtm.IsActive = 1
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
	INNER JOIN VocationalCoordinators vc ON vtm.VCId = vc.VCId AND vc.IsActive = 1 
	INNER JOIN VocationalTrainingProviders vtp ON vtm.VTPId = vtp.VTPId AND vtp.IsActive = 1 
    INNER JOIN AcademicYears ay ON scm.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
    INNER JOIN States st ON s.StateCode = st.StateCode AND st.IsActive = 1
    INNER JOIN Divisions dvs ON s.DivisionId = dvs.DivisionId AND dvs.IsActive = 1
    INNER JOIN Districts ds ON s.DivisionId = ds.DivisionId AND s.DistrictCode = ds.DistrictCode AND ds.IsActive = 1
    LEFT JOIN StudentClassDetails scd ON sc.StudentId = scd.StudentId 
    LEFT JOIN DataValues dv1 ON scd.SocialCategory = dv1.DataValueId AND dv1.DataTypeId = 'SocialCategory' 	
    LEFT JOIN ExitSurveyDetails ex ON scm.AcademicYearId = ex.AcademicYearId AND scm.StudentId = ex.ExitStudentId 
    WHERE scm.IsActive = 1 
		AND ((UserType = 'VT' AND scm.VTId = UserId) OR (UserType = 'VC' AND vt.VCId = UserId) OR (UserType = 'PMU'))
		AND scm.AcademicYearId = AcademicYearId
		AND scm.ClassId = ClassId 
        AND (StudentId IS NULL OR scm.StudentId = StudentId)
	ORDER BY sc.FullName;
    
    # CALL GetStudentExitSurveyByIdV2 ('VT', 'd54c545f-dc5b-4aad-9c93-ad1e3d8e7bad', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc', 'f8ce3e01-79e0-4696-a9e6-419ea55531d0');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentsByClassAndAcademicYear` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetStudentsByClassAndAcademicYear`(
	IN UserType  VARCHAR(30),	
	IN UserId  VARCHAR(36),
	IN AcademicYearId VARCHAR(36),
    IN ClassId VARCHAR(36)
)
BEGIN
	SELECT DISTINCT sc.StudentId AS ExitStudentId, 
        ay.YearName AS AcademicYear, 
		vtp.VTPName, 	
        vc.FullName AS VCName, 
        vt.FullName AS VTName,
		vt.Mobile AS VTMobile,
        sec.SectorName AS Sector, 
		jr.JobRoleName AS JobRole, 
        s.SchoolName AS NameOfSchool, 
		s.Udise AS UdiseCode, 
		s.DistrictCode AS District, 
		scl.Name AS Class, 
		sc.FirstName, 
		sc.MiddleName, 
		sc.LastName, 		
		sc.FullName AS StudentFullName, 
		scd.FatherName, 
		scd.MotherName,
		scd.StudentRollNumber AS StudentUniqueId, 
		dv.Name AS Gender, 
		scd.DateOfBirth AS DOB, 
		dv1.Name AS Category, 
        IF(esd.ExitStudentId IS NULL, 0, 1) AS IsExitSurveyFilled
	FROM StudentClassMapping scm
	INNER JOIN StudentClasses sc ON scm.StudentId = sc.StudentId AND sc.IsActive = 1
	INNER JOIN VTSchoolSectors vss ON scm.AcademicYearId = vss.AcademicYearId AND scm.SchoolId = vss.SchoolId AND scm.VTId = vss.VTId AND vss.IsActive = 1    
	INNER JOIN Sectors sec ON vss.SectorId = sec.SectorId AND sec.IsActive = 1
    INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
    INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1
	INNER JOIN DataValues dv ON sc.Gender = dv.DataValueId AND dv.DataTypeId = 'StudentGender' 	
	INNER JOIN SchoolClasses scl ON sc.ClassId = scl.ClassId AND scl.IsActive = 1 
	INNER JOIN VCTrainersMap vtm ON scm.AcademicYearId = vtm.AcademicYearId AND scm.VTId = vtm.VTId AND vtm.IsActive = 1
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
	INNER JOIN VocationalCoordinators vc ON vtm.VCId = vc.VCId AND vc.IsActive = 1 
	INNER JOIN VocationalTrainingProviders vtp ON vtm.VTPId = vtp.VTPId AND vtp.IsActive = 1 
    INNER JOIN AcademicYears ay ON scm.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
    LEFT JOIN StudentClassDetails scd ON sc.StudentId = scd.StudentId 
    LEFT JOIN DataValues dv1 ON scd.SocialCategory = dv1.DataValueId AND dv1.DataTypeId = 'SocialCategory' 	
    LEFT JOIN ExitSurveyDetails esd ON scm.AcademicYearId = esd.AcademicYearId AND scm.StudentId = esd.ExitStudentId 
	WHERE scm.IsActive = 1 
		AND ((UserType = 'VT' AND scm.VTId = UserId) OR (UserType = 'VC' AND vt.VCId = UserId) OR (UserType = 'PMU'))
		AND scm.AcademicYearId = AcademicYearId
		AND scm.ClassId = ClassId 
																										 
	ORDER BY sc.FullName;
	
    # CALL GetStudentsByClassAndAcademicYear ('VT', 'd54c545f-dc5b-4aad-9c93-ad1e3d8e7bad', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc');    
																																											
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentsByClassAndAcademicYearV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetStudentsByClassAndAcademicYearV2`(
	IN UserType  VARCHAR(30),	
	IN UserId  VARCHAR(36),
	IN AcademicYearId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN StudentId VARCHAR(36)
)
BEGIN
	SELECT DISTINCT sc.StudentId AS ExitStudentId, 
        ay.YearName AS AcademicYear, 
		vtp.VTPName, 	
        vc.FullName AS VCName, 
        vt.FullName AS VTName,
		vt.Mobile AS VTMobile,
        sec.SectorName AS Sector, 
		jr.JobRoleName AS JobRole, 
        s.SchoolName AS NameOfSchool, 
		s.Udise AS UdiseCode, 
		s.DistrictCode AS District, 
		scl.Name AS Class, 
		sc.FirstName, 
		sc.MiddleName, 
		sc.LastName, 		
		sc.FullName AS StudentFullName, 
		scd.FatherName, 
		scd.MotherName,
		scd.StudentRollNumber AS StudentUniqueId, 
		dv.Name AS Gender, 
		scd.DateOfBirth AS DOB, 
		dv1.Name AS Category, 
        scd.AssessmentConducted,
        IF(esd.ExitStudentId IS NULL, 0, 1) AS IsExitSurveyFilled
	FROM StudentClassMapping scm
	INNER JOIN StudentClasses sc ON scm.StudentId = sc.StudentId AND sc.IsActive = 1
	INNER JOIN VTSchoolSectors vss ON scm.AcademicYearId = vss.AcademicYearId AND scm.SchoolId = vss.SchoolId AND scm.VTId = vss.VTId AND vss.IsActive = 1    
	INNER JOIN Sectors sec ON vss.SectorId = sec.SectorId AND sec.IsActive = 1
    INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
    INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1
	INNER JOIN DataValues dv ON sc.Gender = dv.DataValueId AND dv.DataTypeId = 'StudentGender' 	
	INNER JOIN SchoolClasses scl ON sc.ClassId = scl.ClassId AND scl.IsActive = 1 
	INNER JOIN VCTrainersMap vtm ON scm.AcademicYearId = vtm.AcademicYearId AND scm.VTId = vtm.VTId AND vtm.IsActive = 1
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
	INNER JOIN VocationalCoordinators vc ON vtm.VCId = vc.VCId AND vc.IsActive = 1 
	INNER JOIN VocationalTrainingProviders vtp ON vtm.VTPId = vtp.VTPId AND vtp.IsActive = 1 
    INNER JOIN AcademicYears ay ON scm.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
    LEFT JOIN StudentClassDetails scd ON sc.StudentId = scd.StudentId 
    LEFT JOIN DataValues dv1 ON scd.SocialCategory = dv1.DataValueId AND dv1.DataTypeId = 'SocialCategory' 	
    LEFT JOIN ExitSurveyDetails esd ON scm.AcademicYearId = esd.AcademicYearId AND scm.StudentId = esd.ExitStudentId 
	WHERE scm.IsActive = 1 
		AND ((UserType = 'VT' AND scm.VTId = UserId) OR (UserType = 'VC' AND vt.VCId = UserId) OR (UserType = 'PMU'))
		AND scm.AcademicYearId = AcademicYearId
		AND scm.ClassId = ClassId 
	ORDER BY sc.FullName;
	
    # CALL GetStudentsByClassAndAcademicYearV2 ('VT', 'd54c545f-dc5b-4aad-9c93-ad1e3d8e7bad', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc');    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentsByClassIdForVT` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetStudentsByClassIdForVT`(
	IN userId VARCHAR(150), 
	IN classId VARCHAR(36),
    IN sectionId VARCHAR(36)
	)
BEGIN  
	SELECT DISTINCT scm.ClassId, sc.StudentId, CONCAT(sc.FullName, '-' , IFNULL(scd.FatherName,'')) AS StudentName, 1 AS IsPresent
	FROM StudentClassMapping scm
	INNER JOIN StudentClasses sc ON scm.SchoolId = sc.SchoolId AND sc.StudentId = scm.StudentId AND sc.IsActive = 1 AND sc.DeletedBy IS NULL    
    INNER JOIN AcademicYears ay ON scm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1	
    INNER JOIN VTClasses vtc ON scm.AcademicYearId = vtc.AcademicYearId AND scm.SchoolId = vtc.SchoolId AND scm.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1
	LEFT JOIN VTClassSections scme ON vtc.VTClassId = scme.VTClassId AND scm.SectionId = scme.SectionId
    LEFT JOIN StudentClassDetails scd ON sc.StudentId = scd.StudentId AND scd.IsActive = 1
	WHERE scm.IsActive = 1 AND scm.VTId = userId AND scm.ClassId = classId AND scm.SectionId = sectionId
	ORDER BY scm.ClassId, scm.SectionId, StudentName;
 
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentsByClassIdSectionId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetStudentsByClassIdSectionId`(
	IN AcademicYearId VARCHAR(36),
	IN SchoolId VARCHAR(36),
    IN VTId VARCHAR(36),
	IN ClassId VARCHAR(36),
    IN SectionId VARCHAR(36)
	)
BEGIN  
	SELECT DISTINCT sc.StudentId AS Id, sc.FullName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
	FROM StudentClassMapping scm
	INNER JOIN StudentClasses sc ON scm.SchoolId = sc.SchoolId AND sc.StudentId = scm.StudentId AND sc.DeletedBy IS NULL AND sc.IsActive = 1    
    INNER JOIN AcademicYears ay ON scm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1	
    INNER JOIN VTClasses vtc ON scm.AcademicYearId = vtc.AcademicYearId AND scm.SchoolId = vtc.SchoolId AND scm.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1
	LEFT JOIN VTClassSections scme ON vtc.VTClassId = scme.VTClassId AND scm.SectionId = scme.SectionId
    LEFT JOIN StudentClassDetails scd ON sc.StudentId = scd.StudentId AND scd.IsActive = 1
	WHERE scm.IsActive = 1 
		AND scm.AcademicYearId = AcademicYearId
        AND scm.SchoolId = SchoolId
        AND scm.VTId = VTId
		AND scm.ClassId = ClassId
		AND scm.SectionId = SectionId
	ORDER BY Name;
    
	# CALL GetStudentsByClassIdSectionId ('bb46d443-08ac-43d3-b31a-8b640be6be6f', '62cd3256-36dc-4732-8dc8-d97661387803', 'd54c545f-dc5b-4aad-9c93-ad1e3d8e7bad', 'ef71e220-ed0a-4cec-a5b0-e06325d3dbf4', '40b2d9eb-0dbf-11eb-ba32-0a761174c048');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentsByRoleANDAcadYear` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetStudentsByRoleANDAcadYear`(
	IN UserType  VARCHAR(30),	
	IN UserId  VARCHAR(36),
	IN AcademicYear VARCHAR(36)    
)
BEGIN
	SELECT sc.StudentId AS ExitStudentId, 
		sc.FirstName, 
		sc.MiddleName, 
		sc.LastName, 
		ay.YearName AS AcademicYear, 
		sc.FullName AS StudentFullName, 
		scd.FatherName, 
        scd.MotherName, 
		scd.StudentRollNumber AS StudentUniqueId, 
		s.SchoolName AS NameOfSchool, 
		s.Udise AS UdiseCode, 
		s.DistrictCode AS District, 
		scl.Name AS Class, 
		dv.Name AS Gender, 
		scd.DateOfBirth AS DOB, 
		dv1.Name AS Category, 
		sec.SectorName AS Sector, 
		jr.JobRoleName AS JobRole, 
		scm.VTId, 
		vt.FullName AS VTName,
		vt.Mobile AS VTMobile,
		vt.VCId, 
		vc.FullName AS VCName, 
		vt.VTPId, 
		vtp.VTPName, 
		sc.CreatedBy, 
		sc.CreatedOn, 
		sc.UpdatedBy,
		sc.UpdatedOn,
		sc.IsActive
	FROM StudentClasses sc 
    LEFT JOIN StudentClassMapping scm ON sc.SchoolId = scm.SchoolId AND sc.StudentId = scm.StudentId 
	LEFT JOIN StudentClassDetails scd ON sc.StudentId = scd.StudentId 
	LEFT JOIN Schools s ON sc.SchoolId = s.SchoolId 
	LEFT JOIN DataValues dv ON sc.Gender = dv.DataValueId AND dv.DataTypeId='StudentGender' 
	LEFT JOIN DataValues dv1 ON scd.SocialCategory = dv1.DataValueId AND dv1.DataTypeId='SocialCategory' 
	LEFT JOIN SchoolClasses scl ON scm.ClassId = scl.ClassId  
	LEFT JOIN VTSchoolSectors vss ON scm.AcademicYearId = vss.AcademicYearId AND scm.SchoolId = vss.SchoolId AND scm.VTId = vss.VTId AND vss.IsActive = 1
	LEFT JOIN JobRoles jr ON vss.JobRoleId = jr.JobRoleId 
	LEFT JOIN Sectors sec ON vss.SectorId = sec.SectorId  
	LEFT JOIN VocationalTrainers vt ON scm.VTId = vt.VTId 
	LEFT JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId 
	LEFT JOIN VocationalTrainingProviders vtp ON vt.VTPId = vtp.VTPId 
	LEFT JOIN AcademicYears ay ON scm.AcademicYearId = ay.AcademicYearId
	WHERE ((UserType = 'VT' AND scm.VTId = UserId) OR (UserType = 'VC' AND vt.VCId = UserId) OR (UserType = 'PMU'))
		AND sc.IsActive = 1 
		AND ay.YearName = AcademicYear
		AND scl.ClassId IN ('3d99b3d3-f955-4e8f-9f2e-ec697a774bbc','e0302e36-a8a7-49a0-b621-21d48986c43e') 
	ORDER BY sc.FullName;

    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentsBySchoolId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetStudentsBySchoolId`(
	IN SchoolId VARCHAR(36)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;

	SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY ay.YearName) AS SrNo, ay.YearName AS AcademicYearId, s.UDISE, vt.FullName AS VTName, cls.Name As ClassName, sec.Name AS SectionName, sc.StudentId, sc.FullName AS StudentName,
    NULL AS ToVTId, NULL AS ToClassId, NULL AS ToSectionId, "" As Remarks
	FROM StudentClassMapping scm
	INNER JOIN StudentClasses sc ON scm.SchoolId = sc.SchoolId AND sc.StudentId = scm.StudentId AND sc.IsActive = 1 AND sc.DeletedBy IS NULL    
    INNER JOIN AcademicYears ay ON scm.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1  
    INNER JOIN VTClasses vtc ON scm.AcademicYearId = vtc.AcademicYearId AND scm.SchoolId = vtc.SchoolId AND scm.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1
    INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1 
	INNER JOIN VocationalTrainers vt ON scm.VTId = vt.VTId AND vt.IsActive = 1 
    INNER JOIN Sections sec ON sc.SectionId = sec.SectionId AND sec.IsActive = 1 
    LEFT JOIN SchoolClasses cls ON vtc.ClassId = cls.ClassId
	LEFT JOIN VTClassSections scme ON vtc.VTClassId = scme.VTClassId AND scm.SectionId = scme.SectionId
    LEFT JOIN StudentClassDetails scd ON sc.StudentId = scd.StudentId AND scd.IsActive = 1
	WHERE scm.IsActive = 1 AND scm.SchoolId = SchoolId 
	ORDER BY scm.ClassId, scm.SectionId, StudentName;
    
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentsByUserId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetStudentsByUserId`(
	IN userType  VARCHAR(30),	
    IN userId  VARCHAR(100)	
	)
BEGIN	 
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT sc.StudentId AS Id, sc.FullName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
	FROM StudentClasses sc
	LEFT JOIN VTClasses vtc ON sc.VTClassId = vtc.VTClassId    
	LEFT JOIN VTSchoolSectors vss ON vtc.VTSchoolSectorId = vss.VTSchoolSectorId
	LEFT JOIN VocationalTrainers vt ON vss.VTId = vt.VTId	
	
	ORDER BY sc.FullName;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentsByVTId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetStudentsByVTId`(
	IN vtId VARCHAR(36)
	)
BEGIN 	  
	SELECT DISTINCT scm.VTId, scm.ClassId, scm.SectionId, sc.StudentId, CONCAT(sc.FullName, '-' , IFNULL(scd.FatherName,'')) AS StudentName, 1 AS IsPresent
	FROM StudentClassMapping scm
	INNER JOIN StudentClasses sc ON scm.SchoolId = sc.SchoolId AND sc.StudentId = scm.StudentId AND sc.IsActive = 1 AND sc.DeletedBy IS NULL    
    INNER JOIN AcademicYears ay ON scm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1	
    INNER JOIN VTClasses vtc ON scm.AcademicYearId = vtc.AcademicYearId AND scm.SchoolId = vtc.SchoolId AND scm.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1
	LEFT JOIN VTClassSections scme ON vtc.VTClassId = scme.VTClassId AND scm.SectionId = scme.SectionId
    LEFT JOIN StudentClassDetails scd ON sc.StudentId = scd.StudentId AND scd.IsActive = 1
	WHERE scm.IsActive = 1 AND scm.VTId = vtId 
	ORDER BY scm.ClassId, scm.SectionId, StudentName;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetTargetVocationalTrainers` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetTargetVocationalTrainers`(
    IN academicYearId VARCHAR(36), 
    IN schoolId VARCHAR(36),
	IN vtId VARCHAR(36), 
    IN classId VARCHAR(36)
)
BEGIN
	SELECT ay.AcademicYearId INTO @NextAcademicYearId
    FROM AcademicYears ay
    WHERE CAST(CONCAT(YEAR(NOW()),'/10/01') AS DATE) BETWEEN ay.StartMonth AND ay.EndMonth;
    
    SELECT vss.SectorId, vss.JobRoleId INTO @SectorId, @JobRoleId
    FROM VTSchoolSectors vss 
    WHERE vss.AcademicYearId = @NextAcademicYearId AND vss.VTId = vtId AND vss.IsActive = 1;
    
	SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, sc.Name AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
	FROM VTSchoolSectors vss 
	INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1 
    INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1     
	INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1 
    INNER JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId AND sc.IsActive = 1
	WHERE vss.IsActive = 1 
		AND vss.AcademicYearId = @NextAcademicYearId
        AND vss.SchoolId = schoolId
        AND vss.SectorId = @SectorId
        AND vss.JobRoleId = @JobRoleId
		AND vtc.ClassId = CASE WHEN (classId = 'ef71e220-ed0a-4cec-a5b0-e06325d3dbf4') THEN '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc' 
		   WHEN (classId = '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc') THEN '69257ab5-e836-46f1-b888-dfae5da5489c' 
		   WHEN (classId = '69257ab5-e836-46f1-b888-dfae5da5489c') THEN 'e0302e36-a8a7-49a0-b621-21d48986c43e'  
		END;		
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetTermsConditionsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetTermsConditionsByCriteria`(

	IN name  VARCHAR(100),

	IN charBy VARCHAR(5),

	IN pageIndex INT,

	IN pageSize INT

	)
BEGIN

	DECLARE offSetValue INT DEFAULT 0;

	SET offSetValue = (pageIndex-1) * pageSize;



	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;



	SELECT t.TermsConditionId, t.Name, t.Description, t.ApplicableFrom, t.IsActive
	FROM TermsConditions t

	WHERE (name IS NULL OR (t.Name LIKE CONCAT(name, '%')))

		AND ((charBy IS NULL OR charBy = 'All') OR (t.Name LIKE CONCAT(charBy, '%')))

	ORDER BY t.Name

	LIMIT pageSize

	OFFSET offSetValue;



    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;



    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetToolEquipmentsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetToolEquipmentsByCriteria`(
	IN academicYearId VARCHAR(36),
    IN vtpId VARCHAR(36),
    IN vcId VARCHAR(36),
    IN vtId VARCHAR(36),
    IN hmId VARCHAR(36),
    IN sectorId VARCHAR(36),
    IN jobRoleId VARCHAR(36),
    IN schoolId VARCHAR(36),
	IN name  VARCHAR(100),        
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = pageIndex * pageSize;

	IF(hmId IS NOT NULL) THEN
	BEGIN
		SELECT hsm.SchoolId INTO schoolId 
		FROM HMSchoolsMap hsm
		INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive	= 1                
		WHERE hsm.AcademicYearId = academicYearId AND hsm.HMId = hmId AND hsm.IsActive = 1;
	END;
    END IF;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT t.ToolEquipmentId, ay.YearName AS AcademicYear, vtp.VTPShortName AS VTPName, vc.FullName AS VCName, vt.FullName AS VTName, 
		CONCAT(s.UDISE,'-', s.SchoolName) AS SchoolName, se.SectorName, jr.JobRoleName, t.ReceiptDate, t.TEReceiveStatus, t.TEStatus, t.IsActive
	FROM ToolEquipments t
    INNER JOIN AcademicYears ay ON t.AcademicYearId = ay.AcademicYearId
	INNER JOIN VTSchoolSectors vss ON t.SectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
	INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
    INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1 
    INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1     	
    INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
	INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
	INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
	LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId 
	LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId
	LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId      
	WHERE vss.AcademicYearId = academicYearId
		AND (vtpId IS NULL OR vtm.VTPId = vtpId)
        AND (vcId IS NULL OR vtm.VCId = vcId)
        AND (vtId IS NULL OR vtm.VTId = vtId)
        AND (sectorId IS NULL OR vss.SectorId = sectorId)
        AND (jobRoleId IS NULL OR vss.JobRoleId = jobRoleId)
        AND (schoolId IS NULL OR vss.SchoolId = schoolId)	
  		AND (name IS NULL OR (vtp.VTPName LIKE CONCAT('%', name, '%') OR vc.FullName LIKE CONCAT('%', name, '%') OR vt.FullName LIKE CONCAT('%', name, '%') 
			OR se.SectorName LIKE CONCAT('%', name, '%') OR jr.JobRoleName LIKE CONCAT('%', name, '%') OR s.SchoolName LIKE CONCAT('%', name, '%') OR s.UDISE LIKE CONCAT('%', name, '%')))
    ORDER BY ay.YearName, vtp.VTPName, vc.FullName, se.SectorName, jr.JobRoleName, s.SchoolName, vt.FullName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

	# CALL GetToolEquipmentsByCriteria('bb46d443-08ac-43d3-b31a-8b640be6be6f',NULL, NULL,NULL,'ff5ec7cf-9d34-46c6-ba20-904ea6ff0382', NULL,NULL,NULL,NULL,NULL,0,10);    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetToolListReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetToolListReport`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10),
	IN HMId VARCHAR(36)
)
BEGIN	
  	DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
    
	IF(HMId IS NOT NULL) THEN
	BEGIN
		SELECT hm.SchoolId INTO schoolId 
        FROM HMSchoolsMap hsm
        INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive = 1
        WHERE hsm.AcademicYearId = AcademicYearId AND hsm.HMId = HMId AND hsm.IsActive = 1;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN  
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC' AND @roleName <> 'VT') THEN				
			SET UserId = NULL;		 
		END IF;
 
		SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY ted.ToolEquipmentId ASC) AS SrNo,	
			ted.AcademicYear, 
			ted.UDISE, 
			ted.SchoolName,
            ted.DistrictName, 		
			ted.SectorName, 
			ted.JobRoleName, 
			ted.Composite,
			ted.VTPName, 
			ted.VCName, 
			ted.VCEmail, 
			ted.VTName, 
			ted.VTEmail,  
			ted.TEReceiveStatus, 
			ted.ReceiptDate, 			
			ted.ToolName,
			ted.Status,
			ted.Action1,
			ted.Action2,
			ted.ToolEquipmentId
		FROM (    
			SELECT DISTINCT ay.YearName AS AcademicYear, 
				vtp.VTPName,		
				vc.FullName AS VCName, 
				vc.EmailId AS VCEmail, 
				vt.FullName AS VTName, 
				vt.Email AS VTEmail,				
				ds.DistrictName, 
				sc.CategoryName As Composite,
				s.UDISE, 
				s.SchoolName, 
				se.SectorName, 
				jr.JobRoleName, 		
				te.ReceiptDate,
				te.TEReceiveStatus,			
                trm.ToolEquipmentName As ToolName,
				tetl.ToolListStatus As Status,
				tetl.TLActionNeeded1 as Action1,
                tetl.TLActionNeeded2 as Action2,
				te.ToolEquipmentId        
			FROM ToolEquipments te		
			INNER JOIN VTSchoolSectors vss ON te.AcademicYearId = vss.AcademicYearId AND te.SectorId = vss.VTSchoolSectorId AND vss.IsActive = 1           
			INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
            INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1			    
            INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
            INNER JOIN SchoolCategories sc ON sc.SchoolCategoryId = s.SchoolCategoryId AND sc.IsActive = 1	
			INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1  
			INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
			INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1            
            INNER JOIN Divisions dv ON s.DivisionId = dv.DivisionId
			INNER JOIN Districts ds ON s.DivisionId = ds.DivisionId AND s.DistrictCode = ds.DistrictCode							            
   			INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VTPId = vcm.VTPId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
            INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
            INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
			INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
            INNER JOIN TEToolLists tetl ON te.ToolEquipmentId = tetl.ToolEquipmentId AND  tetl.IsActive = 1
            LEFT JOIN TEAndRMList trm ON tetl.ToolListId = trm.TEAndRMId AND trm.TEType = 'ToolEquipment' AND trm.IsActive = 1
            LEFT JOIN HMSchoolsMap hmm ON vss.AcademicYearId = hmm.AcademicYearId AND vss.SchoolId = hmm.SchoolId AND hmm.IsActive = 1		
			LEFT JOIN HeadMasters hm ON hmm.HMId = hm.HMId AND hmm.IsActive = 1 			
			WHERE te.IsActive = 1 				
				AND ((@roleName = 'VT' AND vtm.VTId = @accountId)
                OR (@roleName = 'VC' AND vcm.VCId = @accountId)
                OR UserId IS NULL )	 
				AND (AcademicYearId IS NULL OR te.AcademicYearId = AcademicYearId)
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
				AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vtm.VTPId = VTPId)
				AND (MonthId IS NULL OR MONTH(te.ReceiptDate) = CAST(MonthId AS UNSIGNED)) 
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)   
				AND ((HMId IS NULL AND schoolId IS NULL) OR vss.SchoolId = schoolId)
		) AS ted
		ORDER BY ted.AcademicYear,  ted.VTPName, ted.SectorName, ted.VCName, ted.SchoolName, ted.VTName;
    END;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    # CALL GetToolListReport ('amol.shinde@lend-a-hand-india.org', Null,'b447e36a-dad9-4087-8cc7-7837217c4061','KO,SN,ST',NULL,NULL,NULL,NUll,NULL,NULL,NULL);
	# CALL GetToolListReport ('rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f',NULL,NULL,NULL,NULL,NULL,NUll,NULL,NULL,NULL);
    # CALL GetToolListReport ('sachinkuldharan246@gmail.com','bb46d443-08ac-43d3-b31a-8b640be6be6f',NULL,NULL,NULL,NULL,NULL,NUll,NULL,NULL,NULL);
	# CALL GetToolListReport ('pradipdhangar29@gmail.com','bb46d443-08ac-43d3-b31a-8b640be6be6f',NULL,NULL,NULL,NULL,NULL,NUll,NULL,NULL,NULL);
    # CALL GetToolListReport (NULL,null,NULL,NULL,NULL,NULL,NULL,NUll,NULL,NULL,'f560fb64-ad33-4c20-9f2a-9ce086d006dd');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetToolsAndEquipmentStatusReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetToolsAndEquipmentStatusReport`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
			 
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN    
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
	 
		SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY ted.ToolEquipmentId ASC) AS SrNo,	
			ted.AcademicYear, 
			ted.SchoolAllottedYear, 
			ted.PhaseName, 
			ted.VTPName, 
			ted.VCName, 
			ted.VCMobile, 
			ted.VCEmail, 
			ted.VTName, 
			ted.VTMobile, 
			ted.VTEmail, 
			ted.VTDateOfJoining, 
			ted.HMName, 
			ted.HMMobile, 
			ted.HMEmail, 
			ted.SchoolManagement, 
			ted.DivisionName, 
			ted.DistrictName, 
			ted.BlockName, 
			ted.UDISE, 
			ted.SchoolName, 
			ted.SectorName, 
			ted.JobRoleName, 
			ted.ReceiptDate, 
			ted.ToolsAvailabilityStatus, 
			ted.ToolsReceiptStatus, 
			ted.MonthOfReceipt, 
			ted.ToolEquipmentId
		FROM (    
			SELECT DISTINCT ay.YearName AS AcademicYear, 
				say.YearName AS SchoolAllottedYear,   
				ph.PhaseName, 
				vtp.VTPName,		
				vc.FullName AS VCName, 
				vc.Mobile AS VCMobile, 
				vc.EmailId AS VCEmail, 
				vt.FullName AS VTName, 
				vt.Mobile AS VTMobile, 
				vt.Email AS VTEmail,
				DATE(vt.DateOfJoining) AS VTDateOfJoining,        
				hm.FullName AS HMName, 
				hm.Mobile AS HMMobile, 
				hm.Email AS HMEmail,
				dvs.Name AS SchoolManagement,	
				d.DivisionName, 
				ds.DistrictName, 
				s.BlockName, 
				s.UDISE, 
				s.SchoolName, 
				se.SectorName, 
				jr.JobRoleName, 		
				te.ReceiptDate,
				te.TEStatus AS ToolsAvailabilityStatus,
				te.TEReceiveStatus AS ToolsReceiptStatus,
				DATE_FORMAT(te.ReceiptDate, "%M") AS MonthOfReceipt,
				te.ToolEquipmentId        
			FROM ToolEquipments te		
			INNER JOIN VTSchoolSectors vss ON te.SectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
			INNER JOIN VocationalTrainers vt ON te.VTId = vt.VTId AND vt.IsActive = 1			    
			INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1	
			INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1  
			INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId 
			INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1		
			INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1	
			INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId AND vc.IsActive = 1
			INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1    			
			INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
			INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode
			INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1			
			INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 		
			LEFT JOIN HeadMasters hm ON vss.SchoolId = hm.SchoolId AND hm.IsActive = 1 	
			LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1
			WHERE te.IsActive = 1 				
				AND (UserId IS NULL OR vt.VCId = @accountId)
				AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
                AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vc.VTPId = VTPId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				AND (MonthId IS NULL OR MONTH(te.ReceiptDate) = CAST(MonthId AS UNSIGNED))
		) AS ted
		ORDER BY ted.AcademicYear, ted.SchoolAllottedYear, ted.PhaseName, ted.VTPName, ted.SectorName, ted.VCName, ted.SchoolName, ted.VTName;
	END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetToolsAndEquipmentStatusReportV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetToolsAndEquipmentStatusReportV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10),
    IN hmId VARCHAR(36)
	)
BEGIN
	DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
  
	IF(hmId IS NOT NULL) THEN
	BEGIN
		SELECT hsm.SchoolId INTO schoolId 
        FROM HMSchoolsMap hsm 
        INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive = 1
        WHERE hsm.AcademicYearId = AcademicYearId AND hsm.HMId = hmId AND hsm.IsActive = 1;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
			 
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN    
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
	 
		SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY ted.ToolEquipmentId ASC) AS SrNo,	
			ted.AcademicYear, 
			ted.SchoolAllottedYear, 
			ted.PhaseName, 
			ted.VTPName, 
			ted.VCName, 
			ted.VCMobile, 
			ted.VCEmail, 
			ted.VTName, 
			ted.VTMobile, 
			ted.VTEmail, 
			ted.VTDateOfJoining, 
			ted.HMName, 
			ted.HMMobile, 
			ted.HMEmail, 
			ted.SchoolManagement, 
			ted.DivisionName, 
			ted.DistrictName, 
			ted.BlockName, 
			ted.UDISE, 
			ted.SchoolName, 
			ted.SectorName, 
			ted.JobRoleName, 
			ted.ReceiptDate, 
			ted.ToolsAvailabilityStatus, 
			ted.ToolsReceiptStatus, 
			ted.MonthOfReceipt, 
			ted.ToolEquipmentId
		FROM (    
			SELECT DISTINCT ay.YearName AS AcademicYear, 
				say.YearName AS SchoolAllottedYear,   
				ph.PhaseName, 
				vtp.VTPName,		
				vc.FullName AS VCName, 
				vc.Mobile AS VCMobile, 
				vc.EmailId AS VCEmail, 
				vt.FullName AS VTName, 
				vt.Mobile AS VTMobile, 
				vt.Email AS VTEmail,
				DATE(vtm.DateOfJoining) AS VTDateOfJoining,        
				hm.FullName AS HMName, 
				hm.Mobile AS HMMobile, 
				hm.Email AS HMEmail,
				dvs.Name AS SchoolManagement,	
				d.DivisionName, 
				ds.DistrictName, 
				s.BlockName, 
				s.UDISE, 
				s.SchoolName, 
				se.SectorName, 
				jr.JobRoleName, 		
				te.ReceiptDate,
				te.TEStatus AS ToolsAvailabilityStatus,
				te.TEReceiveStatus AS ToolsReceiptStatus,
				DATE_FORMAT(te.ReceiptDate, "%M") AS MonthOfReceipt,
				te.ToolEquipmentId        
			FROM VTSchoolSectors vss
			INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
			INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId 
			INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
			INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId
			INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
			INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId 
			INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1		
			INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1	
			INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1  
			INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId 
			INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1	
			INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
			INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode 
			INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1			
			INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 		
			LEFT JOIN HMSchoolsMap hmm ON vss.AcademicYearId = hmm.AcademicYearId AND vss.SchoolId = hmm.SchoolId AND hmm.IsActive = 1 	
			LEFT JOIN HeadMasters hm ON hmm.HMId = hm.HMId
			LEFT JOIN ToolEquipments te ON vss.AcademicYearId = te.AcademicYearId AND vss.VTSchoolSectorId = te.SectorId AND vss.VTId = te.VTId
			LEFT JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId AND vtc.IsActive = 1
			WHERE vss.IsActive = 1 				
				AND (UserId IS NULL OR vtm.VCId = @accountId)
				AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
                AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
				AND (SectorId IS NULL OR vss.SectorId = SectorId)
				AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
				AND (VTPId IS NULL OR vtm.VTPId = VTPId)
                AND ((hmId IS NULL AND schoolId IS NULL) OR vss.SchoolId = schoolId)
				AND (ClassId IS NULL OR vtc.ClassId = ClassId)
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
				AND (MonthId IS NULL OR MONTH(te.ReceiptDate) = CAST(MonthId AS UNSIGNED))
		) AS ted
		ORDER BY ted.AcademicYear, ted.SchoolAllottedYear, ted.PhaseName, ted.VTPName, ted.SectorName, ted.VCName, ted.SchoolName, ted.VTName;
	END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    # CALL GetToolsAndEquipmentStatusReportV2 ('principal24030906909@ssguj.in', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'ff5ec7cf-9d34-46c6-ba20-904ea6ff0382')	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetTransactionsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetTransactionsByCriteria`(

	IN name  VARCHAR(100),

	IN charBy VARCHAR(5),

	IN pageIndex INT,

	IN pageSize INT

	)
BEGIN

	DECLARE offSetValue INT DEFAULT 0;

	SET offSetValue = (pageIndex-1) * pageSize;



	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;



	SELECT t.TransactionId, t.Code, t.Name, t.PageTitle, t.PageDescription, t.UrlAction, t.UrlController, t.UrlPara, t.DisplayOrder, t.Remarks, t.IsActive
	FROM Transactions t

	WHERE (name IS NULL OR (t.Name LIKE CONCAT(name, '%')))

		AND ((charBy IS NULL OR charBy = 'All') OR (t.Name LIKE CONCAT(charBy, '%')))

	ORDER BY t.Name

	LIMIT pageSize

	OFFSET offSetValue;



    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;



    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUnitsByClassAndModuleId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetUnitsByClassAndModuleId`(
	IN classId VARCHAR(36),
	IN moduleTypeId VARCHAR(36),
    IN userId VARCHAR(36)
	)
BEGIN
	
    IF (moduleTypeId = 121) THEN
    BEGIN
		SELECT DISTINCT cm.CourseModuleId AS Id, cm.UnitName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo        
		FROM CourseModules cm		
		WHERE cm.ClassId = classId AND cm.ModuleTypeId = moduleTypeId AND cm.IsActive = 1	
		ORDER BY cm.DisplayOrder, cm.UnitName;
	END;
    ELSEIF (moduleTypeId = 122) THEN
    BEGIN
		SELECT DISTINCT cm.CourseModuleId AS Id, cm.UnitName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo        
		FROM CourseModules cm
		INNER JOIN VTSchoolSectors vss ON cm.SectorId = vss.SectorId 
		WHERE cm.ModuleTypeId = moduleTypeId AND cm.IsActive = 1
        AND cm.ClassId = classId 		
        AND vss.VTId = userId		 
		ORDER BY cm.DisplayOrder, cm.UnitName;
	END;
    END IF;
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUnitSessionsTaughtsByFVId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetUnitSessionsTaughtsByFVId`(	 
	IN fieldIndustryVisitId VARCHAR(36) 
	)
BEGIN	 
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; 
    
	SELECT uuid() AS UnitSessionId, us.ModuleId, dvm.Name AS ModuleName, us.UnitId, cm.UnitName, 
    null AS SessionIds, GROUP_CONCAT(us.SessionId) AS SessionIdsValue,
    GROUP_CONCAT(cus.SessionName ORDER BY cus.SessionName) AS SessionNames
	FROM VTFUnitSessionsTaught us    
    LEFT JOIN DataValues dvm ON us.ModuleId = dvm.DataValueId
    LEFT JOIN CourseModules cm ON us.UnitId = cm.CourseModuleId
    LEFT JOIN CourseUnitSessions cus ON cm.CourseModuleId = cus.CourseModuleId AND us.SessionId = cus.CourseUnitSessionId
	WHERE us.VTFieldIndustryVisitConductedId = fieldIndustryVisitId
    GROUP BY us.ModuleId, us.UnitId
	ORDER BY dvm.Name, cm.UnitName ASC;
	 
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUnitSessionsTaughtsByGLId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetUnitSessionsTaughtsByGLId`(	 
	IN guestLectureId VARCHAR(36) 
	)
BEGIN	 
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; 
    
	SELECT uuid() AS UnitSessionId, us.ModuleId, dvm.Name AS ModuleName, us.UnitId, cm.UnitName, 
    null AS SessionIds, GROUP_CONCAT(us.SessionId) AS SessionIdsValue,
    GROUP_CONCAT(cus.SessionName ORDER BY cus.SessionName) AS SessionNames
	FROM VTGUnitSessionsTaught us    
    LEFT JOIN DataValues dvm ON us.ModuleId = dvm.DataValueId
    LEFT JOIN CourseModules cm ON us.UnitId = cm.CourseModuleId
    LEFT JOIN CourseUnitSessions cus ON cm.CourseModuleId = cus.CourseModuleId AND us.SessionId = cus.CourseUnitSessionId
	WHERE us.VTGuestLectureId = guestLectureId
    GROUP BY us.ModuleId, us.UnitId
	ORDER BY dvm.Name, cm.UnitName ASC;
	 
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUnitSessionsTaughtsByVTDRId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetUnitSessionsTaughtsByVTDRId`(	 
	IN teachingVocationalEducationId VARCHAR(36) 
	)
BEGIN	 
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; 
    
	SELECT uuid() AS UnitSessionId, us.ModuleId, dvm.Name AS ModuleName, us.UnitId, cm.UnitName, 
    null AS SessionIds, GROUP_CONCAT(us.SessionId) AS SessionIdsValue,
    GROUP_CONCAT(cus.SessionName ORDER BY cus.SessionName) AS SessionNames
	FROM VTRUnitSessionsTaught us    
    LEFT JOIN DataValues dvm ON us.ModuleId = dvm.DataValueId
    LEFT JOIN CourseModules cm ON us.UnitId = cm.CourseModuleId
    LEFT JOIN CourseUnitSessions cus ON cm.CourseModuleId = cus.CourseModuleId AND us.SessionId = cus.CourseUnitSessionId
	WHERE us.VTRTeachingVocationalEducationId = teachingVocationalEducationId
    GROUP BY us.ModuleId, us.UnitId
	ORDER BY dvm.Name, cm.UnitName ASC;
	 
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserOTPDetailsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetUserOTPDetailsByCriteria`(

	IN name  VARCHAR(100),

	IN charBy VARCHAR(5),

	IN pageIndex INT,

	IN pageSize INT

	)
BEGIN

	DECLARE offSetValue INT DEFAULT 0;

	SET offSetValue = (pageIndex-1) * pageSize;



	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;



	SELECT u.OTPId, u.Mobile, u.OTPToken, u.ExpireOn, u.IsRedeemed, u.IsActive
	FROM UserOTPDetails u

	WHERE (name IS NULL OR (u.Mobile LIKE CONCAT(name, '%')))

		AND ((charBy IS NULL OR charBy = 'All') OR (u.Mobile LIKE CONCAT(charBy, '%')))

	ORDER BY u.Mobile

	LIMIT pageSize

	OFFSET offSetValue;



    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;



    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserTransactionsById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetUserTransactionsById`(
	IN userId VARCHAR(150)    
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
	SET @rowIndex = 0;
 
	
	SELECT DISTINCT (@rowIndex :=@rowIndex + 1) AS SrNo
		,u.LoginId
		,IFNULL(sh.ShortName, 'Main') AS HeaderName
		,IFNULL(sh.DisplayOrder, 1) AS HeaderOrder
		,IFNULL(ssh.IsHeaderMenu, 1) AS IsHeaderMenu
		,t.TransactionId
		,t.Code
		,t.Name
		,t.PageTitle
		,t.PageDescription
		,'' AS TransactionIcon
		,t.UrlAction
		,t.UrlController
		,t.UrlPara
		,rtm.Rights AS Rights
		,rtm.CanAdd AS IsAdd
		,rtm.CanEdit AS IsEdit
		,rtm.CanDelete AS IsDelete
		,rtm.CanView AS IsView
		,rtm.CanExport AS IsExport
		,rtm.ListView AS ListView
		,rtm.BasicView AS BasicView
		,rtm.DetailView AS DetailView
		,rtm.IsPublic AS IsPublic
		,t.RouteUrl
        ,ssh.DisplayOrder
	FROM Accounts u 
    LEFT JOIN AccountRoles urm ON u.AccountId = urm.AccountId 
	LEFT JOIN RoleTransactions rtm ON urm.RoleId = rtm.RoleId AND rtm.IsActive = 1    
	LEFT JOIN Transactions t  ON rtm.TransactionId = t.TransactionId AND t.IsActive = 1
	LEFT JOIN SiteSubHeaders ssh ON t.TransactionId = ssh.TransactionId
	LEFT JOIN SiteHeaders sh ON ssh.SiteHeaderId = sh.SiteHeaderId
	CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    
	WHERE t.TransactionId IS NOT NULL AND u.LoginId = userId
    
	ORDER BY HeaderOrder, ssh.DisplayOrder;
    
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserTransactionsByUserId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetUserTransactionsByUserId`(
	IN userId VARCHAR(150)    
	)
BEGIN
	DECLARE vtRoleId VARCHAR(36) DEFAULT '259b3087-4e2a-435a-accc-cf8980ffbcca';
    SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
 
	SELECT DISTINCT vs.VTId INTO @VTIdForPhases
    FROM VTSchoolSectors vs 
    INNER JOIN Accounts a ON vs.VTId = a.AccountId AND a.IsActive = 1
    INNER JOIN Schools s ON vs.SchoolId = s.SchoolId AND s.IsActive = 1
    INNER JOIN Phases p ON s.PhaseId = p.PhaseId AND p.IsActive = 1 
    WHERE vs.IsActive= 1 AND p.DisplayOrder IN (1,2,3,4) AND a.LoginId = userId
    LIMIT 1;
 
	SELECT 
		DISTINCT ROW_NUMBER() OVER (
			ORDER BY sh.DisplayOrder
				,ssh.DisplayOrder
			) AS SrNo
		,u.LoginId
		,IFNULL(sh.ShortName, 'Main') AS HeaderName
		,IFNULL(sh.DisplayOrder, 1) AS HeaderOrder
        ,IFNULL(ssh.DisplayOrder, 1) AS TransactionOrder
		,IFNULL(ssh.IsActive, 1) AS IsHeaderMenu
		,t.TransactionId
		,t.Code
		,t.Name
		,t.PageTitle
		,t.PageDescription
		,'' AS TransactionIcon
		,t.UrlAction
		,t.UrlController
		,t.UrlPara
		,atm.Rights AS Rights
		,atm.CanAdd AS IsAdd
		,atm.CanEdit AS IsEdit
		,atm.CanDelete AS IsDelete
		,atm.CanView AS IsView
		,atm.CanExport AS IsExport
		,atm.ListView AS ListView
		,atm.BasicView AS BasicView
		,atm.DetailView AS DetailView
		,atm.IsPublic AS IsPublic
		,t.RouteUrl        
	FROM AccountTransactions atm
	INNER JOIN Accounts u ON atm.AccountId = u.AccountId AND u.IsActive = 1
	INNER JOIN AccountRoles urm ON u.AccountId = urm.AccountId
	INNER JOIN Transactions t  ON atm.TransactionId = t.TransactionId AND t.IsActive = 1 	
	LEFT JOIN SiteSubHeaders ssh ON t.TransactionId = ssh.TransactionId
	LEFT JOIN SiteHeaders sh ON ssh.SiteHeaderId = sh.SiteHeaderId AND sh.IsActive = 1
	WHERE atm.IsActive = 1 AND t.TransactionId IS NOT NULL AND u.LoginId = userId
		AND (CASE WHEN t.Code = 'VTSTES' AND urm.RoleId = vtRoleId AND u.AccountId = @VTIdForPhases THEN 1 
				  WHEN urm.RoleId != vtRoleId THEN 1 
			      WHEN t.Code != 'VTSTES' AND urm.RoleId = vtRoleId THEN 1 ELSE 0 END);		
                  
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCAttendanceDetailForPDF` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVCAttendanceDetailForPDF`(
	IN userId VARCHAR(150),
    IN vcId VARCHAR(36), 
    IN reportDate DATETIME
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
 	SET @rowIndex = 0;

	SELECT DISTINCT vdr.VCId,
		vdr.ReportDate AS ReportingDate, 
		vdr.ReportType		
	FROM VCDailyReporting vdr	
	WHERE vdr.VCId = vcId 
		AND CAST(vdr.ReportDate AS DATE) BETWEEN CAST(DATE_FORMAT(reportDate,'%Y/%m/01') AS DATE) AND LAST_DAY(reportDate)	
    ORDER BY vdr.ReportDate DESC;
    
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCAttendanceHeaderForPDF` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVCAttendanceHeaderForPDF`(
	IN userId VARCHAR(150),
    IN vcId VARCHAR(36),
    IN reportDate DATETIME
	)
BEGIN
	DECLARE NoOfSunday INT DEFAULT 0;
    DECLARE StartMonthDate DATE DEFAULT CAST(DATE_FORMAT(reportDate,'%Y/%m/01') AS DATE);
    DECLARE EndMonthDate DATE DEFAULT LAST_DAY(reportDate);    
    SELECT ay.AcademicYearId INTO @AcademicYearId FROM AcademicYears ay WHERE DATE(reportDate) BETWEEN ay.StartMonth AND ay.EndMonth;
    
    DROP TABLE IF EXISTS CoordinatorWorkingData;
    SET reportDate = CAST(DATE_FORMAT(reportDate,'%Y/%m/01') AS DATE);
    
    SELECT vcm.DateOfJoining, vcm.DateOfResignation INTO @DateOfJoining, @DateOfResignation 
    FROM VTPCoordinatorsMap vcm 
    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
    WHERE vcm.AcademicYearId = @AcademicYearId AND vcm.VCId = vcId AND vcm.IsActive = 1;
    
    IF (reportDate <= @DateOfJoining) THEN
		SET StartMonthDate = CAST(@DateOfJoining AS DATE);
    END IF;
    																	  
    IF (DATE(CURRENT_DATE()) <= LAST_DAY(reportDate)) THEN
		SET EndMonthDate = CAST(CURRENT_DATE() AS DATE);
	END IF;
    
    IF (@DateOfResignation <= LAST_DAY(reportDate)) THEN
		SET EndMonthDate = @DateOfResignation;
    END IF;
     
    SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
    
    SET NoOfSunday = GetNoOfSundaysFromDateRange(StartMonthDate, EndMonthDate); 
    
	CREATE TEMPORARY TABLE CoordinatorWorkingData AS 
	SELECT vdr.VCId,	
		COUNT(DISTINCT IF(vdr.ReportType = '49', DATE(vdr.ReportDate), NULL)) AS WorkingDays,			
        COUNT(DISTINCT IF(vdr.ReportType = '47' AND vld.LeaveModeId = 2, DATE(vdr.ReportDate), NULL)) AS PaidLeaves,
		COUNT(DISTINCT IF(vdr.ReportType = '47' AND vld.LeaveModeId = 3, DATE(vdr.ReportDate), NULL)) AS UnpaidLeaves,
		COUNT(DISTINCT IF(vdr.ReportType = '47' AND vld.LeaveTypeId = '164', DATE(vdr.ReportDate), NULL)) AS LongTermHolidays,
		COUNT(DISTINCT IF(vdr.ReportType = '48' AND (vhd.HolidayTypeId = '166' OR vhd.HolidayTypeId = '167'), DATE(vdr.ReportDate), NULL)) AS LocalGovHolidays		
	FROM VCDailyReporting vdr 
	LEFT JOIN VCRWorkingDayTypes vwd ON vdr.VCDailyReportingId = vwd.VCDailyReportingId
	LEFT JOIN VCRLeaves vld ON vdr.VCDailyReportingId = vld.VCDailyReportingId
	LEFT JOIN VCRHolidays vhd ON vdr.VCDailyReportingId = vhd.VCDailyReportingId
	WHERE vdr.VCId = vcId		
        AND DATE(vdr.reportDate) BETWEEN DATE(StartMonthDate) AND DATE(EndMonthDate)
	GROUP BY vdr.VCId;
    
    SELECT vss.VCId,
		vtp.VTPName, 
		vc.FullName AS VCName, 		 
		vc.Mobile AS VCMobile,
		vcm.DateOfJoining AS VCDateOfJoining,	 
		s.UDISE,
		s.SchoolName,
		se.SectorName,
        DATE_FORMAT(CAST(reportDate AS DATE), "%M-%Y") AS MonthYear,
        IF(cws.WorkingDays IS NULL, 0, cws.WorkingDays) AS WorkingDays,		
        NoOfSunday AS Sundays,   
        IF(cws.PaidLeaves IS NULL, 0, cws.PaidLeaves) AS PaidLeaves,
        IF(cws.UnpaidLeaves IS NULL, 0, cws.UnpaidLeaves) AS UnpaidLeaves,
        IF(cws.LongTermHolidays IS NULL, 0, cws.LongTermHolidays) AS LongTermHolidays,
        IF(cws.LocalGovHolidays IS NULL, 0, cws.LocalGovHolidays) AS LocalGovHolidays,
        IF(cws.WorkingDays IS NULL, 0, cws.WorkingDays + NoOfSunday + cws.PaidLeaves + cws.LocalGovHolidays) AS TotalPaidDays,
        DAYOFMONTH(LAST_DAY(CAST(reportDate AS DATE))) AS TotalDays,
        0 AS AbsentDays
	FROM VTPCoordinatorsMap vcm
    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
    INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
    INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1    
    LEFT JOIN VCSchoolSectors vss ON vcm.AcademicYearId = vss.AcademicYearId AND vcm.VCId = vss.VCId AND vss.IsActive = 1    
	LEFT JOIN SchoolVTPSectors svs ON vss.AcademicYearId = svs.AcademicYearId AND vss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
    LEFT JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1	
	LEFT JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1	
    LEFT JOIN CoordinatorWorkingData cws ON vc.VCId = cws.VCId
	WHERE vcm.IsActive = 1 AND vcm.AcademicYearId = @AcademicYearId AND vcm.VCId = vcId
    LIMIT 1;
    
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCByAYAndVTPId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVCByAYAndVTPId`(
	IN RoleId VARCHAR(15),
    IN UserId VARCHAR(36),
    IN AcademicYearId VARCHAR(36),
    IN VTPId VARCHAR(36)
)
BEGIN 
	IF(RoleId = 'ADM') THEN
    BEGIN
		SELECT DISTINCT vc.VCId AS Id, vc.FullName AS Name, vcm.VTPId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VTPCoordinatorsMap vcm
		INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
        INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
		WHERE vcm.IsActive = 1
			AND vcm.AcademicYearId = AcademicYearId
            AND vcm.VTPId = VTPId
		ORDER BY vc.FullName;
	END;
    ELSEIF(RoleId = 'VC') THEN
    BEGIN
		SELECT DISTINCT vc.VCId AS Id, vc.FullName AS Name, vcm.VTPId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VTPCoordinatorsMap vcm
		INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
        INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
		WHERE vcm.IsActive = 1
			AND vcm.AcademicYearId = AcademicYearId
            And vcm.VCId=UserId
		ORDER BY vc.FullName;
	END;
    ELSEIF(RoleId = 'VT') THEN
    BEGIN
		SELECT DISTINCT vc.VCId AS Id, vc.FullName AS Name, vcm.VTPId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VCTrainersMap vtm
		INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vtm.VTPId = vcm.VTPId AND vcm.IsActive = 1
		INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
		INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
		WHERE vcm.IsActive = 1
			AND vcm.AcademicYearId = AcademicYearId
            AND vcm.VTPId = VTPId
            And vtm.VTId = UserId
		ORDER BY vc.FullName;			
	END;
    ELSEIF(RoleId = 'HM') THEN
    BEGIN
		SELECT DISTINCT vcss.VCId AS Id, vc.FullName AS Name, vc.EmailId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM HMSchoolsMap hmm
		INNER JOIN HeadMasters hm ON hm.HMId = hmm.HMId AND hmm.IsActive = 1
		INNER JOIN SchoolVTPSectors svs ON hmm.AcademicYearId = svs.AcademicYearId AND hmm.SchoolId = svs.SchoolId AND svs.IsActive = 1
		INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive =1
		INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1
        INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
		WHERE hm.IsActive = 1
			AND hmm.AcademicYearId = AcademicYearId 
			AND hm.HMId = UserId
			AND svs.VTPId = VTPId
		ORDER BY vc.FullName;
	END;
    END IF;
    
    # CALL GetVCByAYAndVTPId ('ADM', 'fac71e7e-6661-4691-9e20-842a92948958', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '1418bec9-d5a4-4c37-ab42-17d4d13ac159');
    # CALL GetVCByAYAndVTPId ('VC', '7565921d-753e-4502-8982-dd2a182cc48e', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL);
    # CALL GetVCByAYAndVTPId ('VT', 'ad9ec0ed-9021-4598-92fe-586907f96612', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '1418bec9-d5a4-4c37-ab42-17d4d13ac159');
    # CALL GetVCByAYAndVTPId ('HM', '6c94e29e-1bd5-489c-b528-3cc700c0638d', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCByHMId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVCByHMId`(
	IN AcademicYearId VARCHAR(36),
	IN HMId VARCHAR(36),
    IN VTPId VARCHAR(36)
)
BEGIN	
    SELECT DISTINCT vcss.VCId AS Id, vc.FullName AS Name, vc.EmailId AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
	FROM HeadMasters hm
	INNER JOIN HMSchoolsMap hmm ON hm.HMId = hmm.HMId AND hmm.IsActive =1
	INNER JOIN SchoolVTPSectors svs ON hmm.AcademicYearId = svs.AcademicYearId AND hmm.SchoolId = svs.SchoolId AND svs.IsActive =1
	INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive =1
    INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1
	WHERE hm.IsActive = 1
		AND hmm.AcademicYearId = AcademicYearId 
		AND hm.HMId = HMId
        AND svs.VTPId = VTPId;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCByVTPIdSectorId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVCByVTPIdSectorId`(
    IN AcademicYearId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN SectorId VARCHAR(36)
	)
BEGIN 	
	SELECT DISTINCT vc.VCId AS Id, vc.FullName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo 
    FROM VCSchoolSectors vcss 
	INNER JOIN SchoolVTPSectors svs ON vcss.AcademicYearId = svs.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
	INNER JOIN VTPSectors vs ON svs.AcademicYearId = vs.AcademicYearId AND svs.VTPId = vs.VTPId AND svs.SectorId = vs.SectorId AND vs.IsActive = 1
	INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND svs.VTPId = vcm.VTPId AND vcss.VCId = vcm.VCId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1
	INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId  AND vc.IsActive = 1
	WHERE vcss.IsActive = 1 AND vcm.AcademicYearId = AcademicYearId  
		AND vcm.VTPId = VTPId AND svs.SectorId = SectorId;
    
    # CALL GetVCByVTPIdSectorId ('bb46d443-08ac-43d3-b31a-8b640be6be6f','1e5e0936-a75a-46f2-9bae-4f7edec8920b','37d3d1f1-ff66-480f-8e96-253ca58d3789');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCDailyAttendanceTrackingByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVCDailyAttendanceTrackingByCriteria`(
	IN UserId VARCHAR(150),    
    IN FromDate DateTime,
    IN ToDate DateTime
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
	
    BEGIN        
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 			 
			vcm.DateOfJoining AS VCDateOfJoining,
			s.UDISE,
			s.SchoolName,
			GROUP_CONCAT(DISTINCT se.SectorName) AS SectorName,  
			dvr.Name AS ReportType,
			v.ReportDate AS DateOfReport,
			v.CreatedOn AS ActualSubmissionDateTime,
			v.GeoLocation
		FROM VCDailyReporting v
        INNER JOIN VCSchoolSectors vcss ON v.VCSchoolSectorId = vcss.VCSchoolSectorId AND v.VCId = vcss.VCId AND vcss.IsActive = 1
		INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1
        INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
        LEFT JOIN VTPCoordinatorsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
		LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
		LEFT JOIN VCRSchoolVisits vss ON v.VCDailyReportingId = vss.VCDailyReportingId AND vss.IsActive = 1	
		LEFT JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		LEFT JOIN SchoolVTPSectors svs ON s.SchoolId = svs.SchoolId AND svs.IsActive = 1
		LEFT JOIN Sectors se ON svs.SectorId = se.SectorId
		LEFT JOIN DataValues dvr ON v.ReportType = dvr.DataValueId AND dvr.DataTypeId = 'VCReportType' 
        CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    
		WHERE DATE(v.ReportDate) BETWEEN CAST(FromDate AS Date) AND CAST(ToDate AS Date)			
        GROUP BY vtp.VTPName, vc.FullName, vc.Mobile, vc.EmailId, vc.DateOfJoining, s.UDISE, s.SchoolName, dvr.Name, v.ReportDate, v.CreatedOn, v.GeoLocation
		ORDER BY vtp.VTPName, vc.FullName, s.SchoolName, v.ReportDate DESC;         
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCDailyAttendanceTrackingByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVCDailyAttendanceTrackingByCriteriaV2`(
	IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36), 
    IN SchoolManagementId VARCHAR(10),
	IN UserId VARCHAR(150),    
    IN FromDate DateTime,
    IN ToDate DateTime
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
	
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
	
    BEGIN        
		SELECT DISTINCT vdr.VCDailyReportingId,
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 			 
			vcm.DateOfJoining AS VCDateOfJoining,
			s.UDISE,
			s.SchoolName,
			'' AS SectorName,  
			dvr.Name AS ReportType,
			vdr.ReportDate AS DateOfReport,
			vdr.CreatedOn AS ActualSubmissionDateTime,
			vdr.GeoLocation,
            0 AS SrNo
		FROM VCDailyReporting vdr
		INNER JOIN VCSchoolSectors vcss ON vdr.VCId = vcss.VCId AND vdr.VCSchoolSectorId = vdr.VCSchoolSectorId AND vcss.IsActive = 1
		INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1
		INNER JOIN AcademicYears ay ON vcss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
		INNER JOIN DataValues dvr ON vdr.ReportType = dvr.DataValueId AND dvr.DataTypeId = 'VCReportType' 
		INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId
		INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId
		LEFT JOIN VCRSchoolVisits vss ON vdr.VCDailyReportingId = vss.VCDailyReportingId 
		LEFT JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN SchoolVTPSectors svs ON vcss.AcademicYearId = svs.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
        WHERE (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR svs.SectorId = SectorId)			
            #AND (JobRoleId IS NULL OR jr.JobRoleId = JobRoleId)			
			AND (VTPId IS NULL OR svs.VTPId = VTPId)						
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			AND DATE(vdr.ReportDate) BETWEEN ay.StartMonth AND ay.EndMonth
			AND DATE(vdr.ReportDate) BETWEEN CAST(FromDate AS Date) AND CAST(ToDate AS Date)	        
																																								   
		ORDER BY vtp.VTPName, vc.FullName, s.SchoolName, vdr.ReportDate;         
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
 	
    # CALL GetVCDailyAttendanceTrackingByCriteriaV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'rakesh.gtmcs@email.com', '2022/09/25', '2022/10/05');
    # CALL GetVCDailyAttendanceTrackingByCriteriaV2 ('fda59df6-729e-493c-8d48-fc65b90008fe', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'rakesh.gtmcs@email.com', '2022/04/01', '2022/04/15');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCDailyMonthlyTrackingByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVCDailyMonthlyTrackingByCriteria`(
    IN AcademicYearId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN VCId VARCHAR(36),
	IN HMId VARCHAR(36),
    IN SchoolId VARCHAR(36),
    IN DivisionId VARCHAR(36), 
	IN DistrictId VARCHAR(100),
	IN SectorId VARCHAR(36), 
    IN ReportDate DATE
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	IF(hmId IS NOT NULL) THEN
	BEGIN
		SELECT hm.SchoolId INTO SchoolId 
        FROM HMSchoolsMap hsm
        INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive	= 1                
        WHERE hsm.AcademicYearId = AcademicYearId AND hsm.HMId = HMId AND hsm.IsActive = 1;
	END;
    END IF;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
    DROP TEMPORARY TABLE IF EXISTS VCMonthlyViewData;
    
    CREATE TEMPORARY TABLE VCMonthlyViewData
    SELECT DISTINCT v.VCId, v.WorkdayType, v.ReportingDate, v.ReportingDay
    FROM (    
		SELECT DISTINCT vdr.VCId, 			
            CASE WHEN (dvs.Code = "VCRTW") THEN 'W'	WHEN (dvs.Code =  "VCRTWL") THEN 'L' ELSE 'H' END AS WorkdayType,            
			DATE(vdr.ReportDate) As ReportingDate,
			DAY(vdr.ReportDate) As ReportingDay
		FROM VCDailyReporting vdr
		INNER JOIN VCSchoolSectors vcss ON vdr.VCSchoolSectorId = vcss.VCSchoolSectorId AND vcss.IsActive = 1
        INNER JOIN AcademicYears ay ON vcss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
        INNER JOIN SchoolVTPSectors svs ON vcss.AcademicYearId = svs.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
        INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vdr.VCId = vcm.VCId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1
		INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1		
		INNER JOIN DataValues dvs ON vdr.ReportType = dvs.DataValueId AND dvs.DataTypeId = 'VCReportType'        
        INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1		
		WHERE vcss.AcademicYearId = AcademicYearId
			AND DATE(vdr.ReportDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth)
            AND (VTPId IS NULL OR svs.VTPId = VTPId)
            AND (VCId IS NULL OR vcss.VCId = VCId)
            AND (VTPId IS NULL OR svs.VTPId = VTPId)
            AND (SchoolId IS NULL OR svs.SchoolId = SchoolId)
            AND (SectorId IS NULL OR svs.SectorId = SectorId)
            AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts))
            AND MONTH(vdr.ReportDate) = MONTH(ReportDate)
            # AND vcss.VCId = 'd4823211-e249-4a02-b792-077ec1bf9d73'
    ) AS v
    ORDER BY v.VCId, v.ReportingDay;

    SELECT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName, vc.FullName) AS SrNo,
		vtp.VTPShortName AS VTPName,	
        vc.FullName AS VCName,
		vc.EmailId AS VCEmailId,
		vc.Mobile AS VCMobile,
        CASE WHEN (vcm.DateOfResignation IS NULL AND vc.IsActive = 1) THEN 'Active' WHEN (vcm.DateOfResignation IS NOT NULL AND vc.IsActive = 0) THEN 'Inactive' ELSE 'NA' END AS VCStatus,        
        DATE(vcm.DateOfResignation) As VCDateOfResignation,
		MAX(CASE WHEN md.ReportingDay = 1 THEN md.WorkdayType ELSE '' END) AS Day1, 
		MAX(CASE WHEN md.ReportingDay = 2 THEN md.WorkdayType ELSE '' END) AS Day2, 
		MAX(CASE WHEN md.ReportingDay = 3 THEN md.WorkdayType ELSE '' END) AS Day3, 
		MAX(CASE WHEN md.ReportingDay = 4 THEN md.WorkdayType ELSE '' END) AS Day4, 
		MAX(CASE WHEN md.ReportingDay = 5 THEN md.WorkdayType ELSE '' END) AS Day5, 
		MAX(CASE WHEN md.ReportingDay = 6 THEN md.WorkdayType ELSE '' END) AS Day6, 
		MAX(CASE WHEN md.ReportingDay = 7 THEN md.WorkdayType ELSE '' END) AS Day7, 
		MAX(CASE WHEN md.ReportingDay = 8 THEN md.WorkdayType ELSE '' END) AS Day8, 
		MAX(CASE WHEN md.ReportingDay = 9 THEN md.WorkdayType ELSE '' END) AS Day9, 
		MAX(CASE WHEN md.ReportingDay = 10 THEN md.WorkdayType ELSE '' END) AS Day10, 
		MAX(CASE WHEN md.ReportingDay = 11 THEN md.WorkdayType ELSE '' END) AS Day11, 
		MAX(CASE WHEN md.ReportingDay = 12 THEN md.WorkdayType ELSE '' END) AS Day12, 
		MAX(CASE WHEN md.ReportingDay = 13 THEN md.WorkdayType ELSE '' END) AS Day13, 
		MAX(CASE WHEN md.ReportingDay = 14 THEN md.WorkdayType ELSE '' END) AS Day14, 
		MAX(CASE WHEN md.ReportingDay = 15 THEN md.WorkdayType ELSE '' END) AS Day15, 
		MAX(CASE WHEN md.ReportingDay = 16 THEN md.WorkdayType ELSE '' END) AS Day16, 
		MAX(CASE WHEN md.ReportingDay = 17 THEN md.WorkdayType ELSE '' END) AS Day17, 
		MAX(CASE WHEN md.ReportingDay = 18 THEN md.WorkdayType ELSE '' END) AS Day18, 
		MAX(CASE WHEN md.ReportingDay = 19 THEN md.WorkdayType ELSE '' END) AS Day19, 
		MAX(CASE WHEN md.ReportingDay = 20 THEN md.WorkdayType ELSE '' END) AS Day20, 
		MAX(CASE WHEN md.ReportingDay = 21 THEN md.WorkdayType ELSE '' END) AS Day21, 
		MAX(CASE WHEN md.ReportingDay = 22 THEN md.WorkdayType ELSE '' END) AS Day22, 
		MAX(CASE WHEN md.ReportingDay = 23 THEN md.WorkdayType ELSE '' END) AS Day23, 
		MAX(CASE WHEN md.ReportingDay = 24 THEN md.WorkdayType ELSE '' END) AS Day24, 
		MAX(CASE WHEN md.ReportingDay = 25 THEN md.WorkdayType ELSE '' END) AS Day25, 
		MAX(CASE WHEN md.ReportingDay = 26 THEN md.WorkdayType ELSE '' END) AS Day26, 
		MAX(CASE WHEN md.ReportingDay = 27 THEN md.WorkdayType ELSE '' END) AS Day27, 
		MAX(CASE WHEN md.ReportingDay = 28 THEN md.WorkdayType ELSE '' END) AS Day28, 
		MAX(CASE WHEN md.ReportingDay = 29 THEN md.WorkdayType ELSE '' END) AS Day29, 
		MAX(CASE WHEN md.ReportingDay = 30 THEN md.WorkdayType ELSE '' END) AS Day30, 
		MAX(CASE WHEN md.ReportingDay = 31 THEN md.WorkdayType ELSE '' END) AS Day31,
		COUNT(DISTINCT CASE WHEN md.WorkdayType = 'W' THEN md.ReportingDate ELSE NULL END) AS WorkingDays,
		IF(md.ReportingDate IS NULL, 0, GetNoOfSunday(md.ReportingDate)) AS Sundays,		        
        COUNT(DISTINCT CASE WHEN md.WorkdayType = 'H' THEN md.ReportingDate ELSE NULL END) AS Holidays,
        COUNT(DISTINCT CASE WHEN md.WorkdayType = 'L' THEN md.ReportingDate ELSE NULL END) AS Leaves,        
		IF(md.ReportingDate IS NULL, 0, DAYOFMONTH(LAST_DAY(md.ReportingDate))) AS DaysInMonth
	FROM VTPCoordinatorsMap vcm    
	INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId #AND vc.IsActive = 1
	INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
	INNER JOIN VocationalTrainingProviders vtp ON vcm.VTPId = vtp.VTPId AND vtp.IsActive = 1
	INNER JOIN VCSchoolSectors vcs ON vcm.AcademicYearId = vcs.AcademicYearId AND vcm.VCId = vcs.VCId AND vcs.IsActive = 1
    LEFT JOIN VCMonthlyViewData md ON vcm.VCId = md.VCId
    WHERE vcm.AcademicYearId = AcademicYearId #vcm.IsActive = 1 
		#AND vcm.VCId = 'd4823211-e249-4a02-b792-077ec1bf9d73'
	GROUP BY vtp.VTPShortName, vc.FullName
	ORDER BY vtp.VTPShortName, vc.FullName ASC;
    
	DROP TEMPORARY TABLE IF EXISTS VCMonthlyViewData;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	# CALL GetVCDailyMonthlyTrackingByCriteria ('bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2023/01/01');
	# CALL GetVCDailyMonthlyTrackingByCriteria ('fda59df6-729e-493c-8d48-fc65b90008fe', NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2021/12/01');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCDailyReportingsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVCDailyReportingsByCriteria`(
	IN userId  VARCHAR(40),
    IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
    SELECT ar.AccountId INTO @accountId
	FROM AccountRoles ar 
	INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
	INNER JOIN Roles r ON ar.RoleId = r.RoleId
	WHERE a.UserId = userId;
        
    SELECT DISTINCT vdr.VCDailyReportingId, vc.VCId, vc.FullName AS VCName, vdr.ReportDate, dvr.Name AS ReportType,
		GROUP_CONCAT(DISTINCT wdv.Name) AS WorkTypes, wdv.DataValueId As WorkCode , vdr.IsActive
	FROM VCDailyReporting vdr
    INNER JOIN VCSchoolSectors vcss ON vdr.VCId = vcss.VCId AND vcss.IsActive = 1
    INNER JOIN AcademicYears ay ON vcss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1    
    INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1
    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1	
    INNER JOIN DataValues dvr ON vdr.ReportType = dvr.DataValueId AND dvr.DataTypeId = 'VCReportType'
    LEFT JOIN VCRWorkingDayTypes vwt ON vdr.VCDailyReportingId = vwt.VCDailyReportingId 
    LEFT OUTER JOIN DataValues wdv ON vwt.WorkingTypeId = wdv.DataValueId AND wdv.DataTypeId = 'VCWorkType' 
	WHERE DATE(vdr.ReportDate) BETWEEN DATE(ay.StartMonth) AND DATE(ay.EndMonth)
		AND vdr.VCId = @accountId
		AND (name IS NULL OR (vc.FullName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (vc.FullName LIKE CONCAT(charBy, '%')))
	GROUP BY vdr.VCDailyReportingId, dvr.Name
    ORDER BY vc.FullName, vdr.ReportDate DESC
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
    # CALL GetVCDailyReportingsByCriteria('SACHINKULDHARAN246',null,null, 1, 10000)
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCIssueReportingsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVCIssueReportingsByCriteria`(
	IN userId VARCHAR(100),
	IN name VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    SELECT v.VCIssueReportingId AS IssueReportingId, s.SchoolName, se.SectorName, 
		v.IssueReportDate, mi.Name AS MainIssue, si.IssueName AS SubIssue,  
		sit.Name AS StudentType, v.NoOfStudents, dvas.Name AS ApprovalStatus 
	FROM VCIssueReporting v  
    INNER JOIN VocationalCoordinators vc ON v.VCId = vc.VCId  
    INNER JOIN VCSchoolSectors vcss ON v.VCId = vcss.VCId
    INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId 
    INNER JOIN Schools s ON svs.SchoolId = s.SchoolId
    INNER JOIN Sectors se ON svs.SectorId = se.SectorId  
    LEFT JOIN MainIssues mi ON v.MainIssue = mi.MainIssueId
    LEFT JOIN SubIssues si ON v.SubIssue = si.SubIssueId  
    LEFT JOIN DataValues dvc ON v.StudentClass = dvc.DataValueId    
    LEFT JOIN DataValues sit ON v.StudentType = sit.DataValueId
    LEFT JOIN DataValues dvas ON v.ApprovalStatus = dvas.DataValueId
	WHERE (userId IS NULL OR v.VCId = userId)     
    AND (name IS NULL OR (mi.Name LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (mi.Name LIKE CONCAT(charBy, '%')))
	GROUP BY v.IssueReportDate
    ORDER BY v.IssueReportDate DESC, mi.Name, si.IssueName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCIssueReportsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVCIssueReportsByCriteria`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    SELECT r.Code, ar.AccountId INTO @roleName, @accountId
	FROM AccountRoles ar 
	INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
	INNER JOIN Roles r ON ar.RoleId = r.RoleId
	WHERE a.LoginId = UserId;
	
	IF(@roleName <> 'VC') THEN				
		SET UserId = NULL;		 
	END IF;
	
    SELECT DISTINCT     
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear, 
			se.SectorName, 
			ph.PhaseName, 
			'' AS SchoolName, 
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			v.IssueReportDate, 
			mi.Name AS MainIssue, 
			si.IssueName AS SubIssue, 
			si.IssuePriority,
			v.StudentClass, 
			v.Month, 
			dvs.Name AS StudentType,
			v.NoOfStudents, 
			v.IssueDetails, 		
			dvi.Name AS ApprovalStatus, 
			v.ApprovedDate, 
			v.IsActive,
            0 AS SrNo,
            v.VCIssueReportingId
		FROM VCIssueReporting v    
		INNER JOIN VocationalCoordinators vc ON v.VCId = vc.VCId AND vc.IsActive = 1
		INNER JOIN VCSchoolSectors vcss ON v.VCId = vcss.VCId AND vcss.IsActive = 1  
		INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1	
		INNER JOIN AcademicYears ay ON vcss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1        
		INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1    
		INNER JOIN AcademicYears say ON vcss.AcademicYearId = say.AcademicYearId AND say.IsActive = 1        
		INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1      
		INNER JOIN MainIssues mi ON v.MainIssue = mi.MainIssueId AND mi.IsActive = 1
		INNER JOIN SubIssues si ON v.MainIssue = si.MainIssueId AND v.SubIssue = si.SubIssueId AND mi.IsActive = 1
		INNER JOIN DataValues dvs ON v.StudentType = dvs.DataValueId AND dvs.DataTypeId = 'StudentType'
		INNER JOIN DataValues dvi ON v.ApprovalStatus = dvi.DataValueId AND dvi.DataTypeId = 'IssueStatus'
		INNER JOIN JobRoles jr ON svs.SectorId = jr.SectorId
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1  
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1	
		WHERE (UserId IS NULL OR vcss.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictId IS NULL OR s.DistrictCode = DistrictId)
			AND (SectorId IS NULL OR svs.SectorId = SectorId)
			AND (JobRoleId IS NULL OR jr.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vc.VTPId = VTPId)		
			
			AND (MonthId IS NULL OR MONTH(v.IssueReportDate) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)		    
		ORDER BY ay.YearName, say.YearName, ph.PhaseName, vtp.VTPName, se.SectorName, s.SchoolName;
    
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
	
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCIssueReportsByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVCIssueReportsByCriteriaV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    SELECT r.Code, ar.AccountId INTO @roleName, @accountId
	FROM AccountRoles ar 
	INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
	INNER JOIN Roles r ON ar.RoleId = r.RoleId
	WHERE a.LoginId = UserId;
	
	IF(@roleName <> 'VC') THEN				
		SET UserId = NULL;		 
	END IF;
	
	SELECT DISTINCT     
		ay.YearName AS AcademicYear, 
		say.YearName AS SchoolAllottedYear, 
		se.SectorName, 
		ph.PhaseName, 
		'' AS SchoolName, 
		vtp.VTPName, 
		vc.FullName AS VCName, 
		vc.Mobile AS VCMobile, 
		vc.EmailId AS VCEmail, 
		v.IssueReportDate, 
		mi.Name AS MainIssue, 
		si.IssueName AS SubIssue, 
		si.IssuePriority,
		v.StudentClass, 
		v.Month, 
		dvs.Name AS StudentType,
		v.NoOfStudents, 
		v.IssueDetails, 		
		dvi.Name AS ApprovalStatus, 
		v.ApprovedDate, 
		v.IsActive,
		0 AS SrNo,
		v.VCIssueReportingId
	FROM VCIssueReporting v    
	INNER JOIN VocationalCoordinators vc ON v.VCId = vc.VCId AND vc.IsActive = 1
	INNER JOIN VCSchoolSectors vcss ON v.VCId = vcss.VCId AND vcss.IsActive = 1  
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1	
	INNER JOIN AcademicYears ay ON vcss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1        
	INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1    
	INNER JOIN AcademicYears say ON vcss.AcademicYearId = say.AcademicYearId AND say.IsActive = 1        
	INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1      
	INNER JOIN MainIssues mi ON v.MainIssue = mi.MainIssueId AND mi.IsActive = 1
	INNER JOIN SubIssues si ON v.MainIssue = si.MainIssueId AND v.SubIssue = si.SubIssueId AND mi.IsActive = 1
	INNER JOIN DataValues dvs ON v.StudentType = dvs.DataValueId AND dvs.DataTypeId = 'StudentType'
	INNER JOIN DataValues dvi ON v.ApprovalStatus = dvi.DataValueId AND dvi.DataTypeId = 'IssueStatus'
	INNER JOIN JobRoles jr ON svs.SectorId = jr.SectorId
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1  
	INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1	
	WHERE (UserId IS NULL OR vcss.VCId = @accountId)
		AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId)
		AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
		AND (DistrictId IS NULL OR s.DistrictCode = DistrictId)
		AND (SectorId IS NULL OR svs.SectorId = SectorId)
		AND (JobRoleId IS NULL OR jr.JobRoleId = JobRoleId)
		AND (VTPId IS NULL OR vc.VTPId = VTPId)		
		
		AND (MonthId IS NULL OR MONTH(v.IssueReportDate) = CAST(MonthId AS UNSIGNED)) 
		AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)		    
	ORDER BY ay.YearName, say.YearName, ph.PhaseName, vtp.VTPName, se.SectorName, s.SchoolName;
    
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
	
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCReportingAttendanceReportsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVCReportingAttendanceReportsByCriteria`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
		  
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
	 
		DROP TEMPORARY TABLE IF EXISTS VCReportingAttendanceData;
			
		CREATE TEMPORARY TABLE VCReportingAttendanceData
		SELECT DISTINCT vss.VCId, vss.VCSchoolSectorId, 
			DATE_FORMAT(v.ReportDate, "%Y/%m/01") AS ReportMonth, 
			MONTH(v.ReportDate) AS MonthNo,
			(CASE WHEN (v.ReportType = 49) THEN COUNT(v.ReportDate) ELSE 0 END) AS WorkingDays, 
			(CASE WHEN (v.ReportType = 47) THEN COUNT(v.ReportDate) ELSE 0 END) AS LeaveDays, 
			(CASE WHEN (v.ReportType = 48) THEN COUNT(v.ReportDate) ELSE 0 END) AS Holidays, 			
			COUNT(cw.WorkingTypeId) AS SchoolVisitDays,
			COUNT(DISTINCT svs.SchoolId) AS NumberOfSchools
		FROM VCDailyReporting v
		INNER JOIN VCSchoolSectors vss ON v.VCSchoolSectorId = vss.VCSchoolSectorId AND vss.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
		INNER JOIN DataValues dvr ON v.ReportType = dvr.DataValueId AND dvr.DataTypeId = 'VCReportType'
		INNER JOIN SchoolVTPSectors svs ON vss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
		LEFT JOIN VCRWorkingDayTypes cw ON v.VCDailyReportingId = cw.VCDailyReportingId AND cw.WorkingTypeId = 153
		WHERE DATE(v.ReportDate) BETWEEN ay.StartMonth AND ay.EndMonth
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
													
			AND (SectorId IS NULL OR svs.SectorId = SectorId)			
			AND (VTPId IS NULL OR svs.VTPId = VTPId)			
												  
			AND (MonthId IS NULL OR MONTH(v.ReportDate) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)	
		GROUP BY vss.VCId, vss.VCSchoolSectorId, v.ReportDate, v.ReportType;
			
		SELECT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			vdr.VCId,
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear, 
			ph.PhaseName, 
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 		 		 		 
			DAYOFMONTH(LAST_DAY(CAST(vdr.ReportMonth AS DATE))) AS TotalDays, 
			GetNoOfSunday(CAST(vdr.ReportMonth AS DATE)) AS NoOfSundays,	        
			(vdr.WorkingDays + vdr.Holidays + vdr.LeaveDays) AS VCReportsSubmitted,
			DATE_FORMAT(CAST(vdr.ReportMonth AS DATE), "%b-%Y") AS MonthYear,   
			vdr.MonthNo,
			vdr.WorkingDays, 
			vdr.Holidays, 
			vdr.LeaveDays,        
			vdr.NumberOfSchools, 
			vdr.SchoolVisitDays        
		FROM VCReportingAttendanceData AS vdr
		INNER JOIN VCSchoolSectors vss ON vdr.VCSchoolSectorId = vss.VCSchoolSectorId AND vdr.VCId = vss.VCId AND vss.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
		INNER JOIN SchoolVTPSectors svs ON vss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1
		INNER JOIN VocationalCoordinators vc ON vdr.VCId = vc.VCId AND vc.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1    	 	
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows        
		ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vdr.MonthNo DESC, vc.FullName;
		
		DROP TEMPORARY TABLE IF EXISTS VCReportingAttendanceData;
	END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    	   
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCReportingAttendanceReportsByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVCReportingAttendanceReportsByCriteriaV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
		  
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
	 
		DROP TEMPORARY TABLE IF EXISTS VCReportingAttendanceData;
			
		CREATE TEMPORARY TABLE VCReportingAttendanceData
		SELECT DISTINCT vc.AcademicYearId, vc.VCId, vc.ReportMonth, vc.MonthNo, SUM(vc.WorkingDays) AS WorkingDays, SUM(vc.LeaveDays) AS LeaveDays, 
			SUM(vc.Holidays) AS Holidays, SUM(vc.SchoolVisitDays) AS SchoolVisitDays, SUM(vc.NumberOfSchools) AS NumberOfSchools
		FROM (    
			SELECT DISTINCT vcss.AcademicYearId, vcss.VCId, DATE(DATE_FORMAT(vdr.ReportDate, "%Y/%m/01")) AS ReportMonth, MONTH(vdr.ReportDate) AS MonthNo,
				(CASE WHEN (vdr.ReportType = 49) THEN COUNT(DISTINCT DATE(vdr.ReportDate)) ELSE 0 END) AS WorkingDays, 
				(CASE WHEN (vdr.ReportType = 47) THEN COUNT(DISTINCT DATE(vdr.ReportDate)) ELSE 0 END) AS LeaveDays, 
				(CASE WHEN (vdr.ReportType = 48) THEN COUNT(DISTINCT DATE(vdr.ReportDate)) ELSE 0 END) AS Holidays, 			
				COUNT(cw.WorkingTypeId) AS SchoolVisitDays,	COUNT(DISTINCT svs.SchoolId) AS NumberOfSchools
			FROM VCSchoolSectors vcss
			INNER JOIN SchoolVTPSectors svs ON vcss.AcademicYearId = svs.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
			INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1
			INNER JOIN AcademicYears ay ON svs.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1																													
			INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
			LEFT JOIN VCDailyReporting vdr ON vcss.VCId = vdr.VCId AND vdr.ReportType = '49' 
			LEFT JOIN VCRWorkingDayTypes cw ON vdr.VCDailyReportingId = cw.VCDailyReportingId AND cw.WorkingTypeId = 153
			WHERE DATE(vdr.ReportDate) BETWEEN ay.StartMonth AND ay.EndMonth
				AND (AcademicYearId IS NULL OR vcss.AcademicYearId = AcademicYearId)
				AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
				AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
				AND (SectorId IS NULL OR svs.SectorId = SectorId)			
				AND (VTPId IS NULL OR svs.VTPId = VTPId)			
				AND (MonthId IS NULL OR MONTH(vdr.ReportDate) = CAST(MonthId AS UNSIGNED)) 
				AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)	
				#AND vdr.VCId = 'b4fb79f8-fe8b-42e7-917d-1c81c230bb13'                
			GROUP BY vcss.AcademicYearId, vcss.VCId, vdr.ReportType, ReportMonth
		) vc
		GROUP BY vc.AcademicYearId, vc.VCId, vc.ReportMonth, vc.MonthNo;

		SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY ay.YearName, vtp.VTPName, vc.FullName, vdr.ReportMonth DESC) AS SrNo, 
			vdr.VCId,
			ay.YearName AS AcademicYear, 
			'' AS SchoolAllottedYear, 
			'' AS PhaseName, 
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 		 		 		 
			DAYOFMONTH(LAST_DAY(CAST(vdr.ReportMonth AS DATE))) AS TotalDays, 
			GetNoOfSunday(CAST(vdr.ReportMonth AS DATE)) AS NoOfSundays,	        
			(vdr.WorkingDays + vdr.Holidays + vdr.LeaveDays) AS VCReportsSubmitted,
			DATE_FORMAT(CAST(vdr.ReportMonth AS DATE), "%b-%Y") AS MonthYear,   
			vdr.MonthNo,
			vdr.WorkingDays, 
			vdr.Holidays, 
			vdr.LeaveDays,        
			vdr.NumberOfSchools, 
			vdr.SchoolVisitDays        
		FROM VCReportingAttendanceData AS vdr
		INNER JOIN VTPCoordinatorsMap vcm ON vdr.AcademicYearId = vcm.AcademicYearId AND vdr.VCId = vcm.VCId AND vcm.IsActive = 1
		INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
        INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1  
		INNER JOIN AcademicYears ay ON vdr.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
        WHERE vdr.AcademicYearId = AcademicYearId 
		ORDER BY ay.YearName, vtp.VTPName, vc.FullName, vdr.ReportMonth DESC;
		
		DROP TEMPORARY TABLE IF EXISTS VCReportingAttendanceData;
	END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    	   
	# CALL GetVCReportingAttendanceReportsByCriteriaV2 ('rakesh.gtmcs@gmail.com', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);    
    # CALL GetVCReportingAttendanceReportsByCriteriaV2 ('rakesh.gtmcs@gmail.com', 'fda59df6-729e-493c-8d48-fc65b90008fe', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCSchoolsByVTPAndVCId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVCSchoolsByVTPAndVCId`(
	IN AcademicYearId VARCHAR(36),
	IN VTPId VARCHAR(36),
    IN VCId VARCHAR(36)
	)
BEGIN
	SELECT vcss.VCSchoolSectorId, svs.SchoolVTPSectorId, svs.AcademicYearId, svs.VTPId, vcss.VCId, svs.SchoolId, svs.SectorId, 
		se.SectorName, CONCAT(s.UDISE, '-', s.SchoolName) AS SchoolName, NULL AS ToVTPId, NULL AS ToVCId,
        NULL AS DateOfAllocation, NULL AS DateOfJoining,'' AS Remarks
	FROM VCSchoolSectors vcss
    INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1 AND vcm.DateOfResignation IS NULL
    INNER JOIN SchoolVTPSectors svs ON vcss.AcademicYearId = svs.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
    INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
    INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1
	WHERE vcss.IsActive = 1 AND vcss.DateOfRemoval IS NULL
		AND svs.AcademicYearId = AcademicYearId
		AND svs.VTPId = VTPId
		AND vcss.VCId = VCId
	ORDER BY se.SectorName, s.SchoolName;
	 
    # CALL GetVCSchoolsByVTPAndVCId ('bb46d443-08ac-43d3-b31a-8b640be6be6f', 'd983659f-c367-4457-b7fd-c8be4fa5c946', '3d3f132a-675b-4253-a825-ca318e478ec9');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCSchoolSectorReportsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVCSchoolSectorReportsByCriteria`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;

		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,  
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear, 
			ph.PhaseName, 
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			DATE(vss.DateOfAllocation) AS DateOfAllocation, 
			vss.DateOfRemoval,
			se.SectorName, 
			s.SchoolName
		FROM VCSchoolSectors vss
		INNER JOIN VocationalCoordinators vc ON vss.VCId = vc.VCId AND vc.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1
		INNER JOIN SchoolVTPSectors svs ON vss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1    
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1    
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears say ON vss.AcademicYearId = say.AcademicYearId AND say.IsActive = 1    
		INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    
		WHERE vss.IsActive = 1
			AND (UserId IS NULL OR vss.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR svs.SectorId = SectorId)
			AND (VTPId IS NULL OR vc.VTPId = VTPId)
			AND (MonthId IS NULL OR MONTH(vss.DateOfAllocation) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		ORDER BY ay.YearName, ph.PhaseName, vc.FullName, se.SectorName, s.SchoolName;	
    END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCSchoolSectorReportsByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVCSchoolSectorReportsByCriteriaV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;

		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,  
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear, 
			ph.PhaseName, 
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			DATE(vss.DateOfAllocation) AS DateOfAllocation, 
			vss.DateOfRemoval,
			se.SectorName, 
			CONCAT(s.UDISE, '-', s.SchoolName) AS SchoolName
		FROM VCSchoolSectors vss
		INNER JOIN VocationalCoordinators vc ON vss.VCId = vc.VCId AND vc.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1
		INNER JOIN SchoolVTPSectors svs ON vss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1    
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1    
		INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears say ON vss.AcademicYearId = say.AcademicYearId AND say.IsActive = 1    
		INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    
		WHERE vss.IsActive = 1
			AND (UserId IS NULL OR vss.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR svs.SectorId = SectorId)
			AND (VTPId IS NULL OR vc.VTPId = VTPId)
			AND (MonthId IS NULL OR MONTH(vss.DateOfAllocation) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		ORDER BY ay.YearName, ph.PhaseName, vc.FullName, se.SectorName, s.SchoolName;	
    END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCSchoolSectorsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVCSchoolSectorsByCriteria`(
	IN academicYearId VARCHAR(36),
	IN vtpId VARCHAR(36),
    IN vcId VARCHAR(36),
    IN schoolId VARCHAR(36),
    IN sectorId VARCHAR(36),
	IN status BIT,
    IN isRollover BIT,
	IN name  VARCHAR(100),    
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT    
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;	
    SET offSetValue = pageIndex * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
  
    IF(academicYearId IS NULL) THEN 
		SELECT ay.AcademicYearId INTO academicYearId FROM AcademicYears ay WHERE ay.IsCurrentAcademicYear = 1;         
	END IF;
        
	SELECT DISTINCT vcss.VCSchoolSectorId, ay.YearName AS AcademicYear, vc.FullName As VCName, s.SchoolName, 
		CONCAT(s.UDISE,'-', vtp.VTPShortName, '-', se.SectorName) AS SchoolVTPSector, vcss.DateOfAllocation, vcss.DateOfRemoval, 
        vcss.IsActive, vcss.IsAYRollover, COUNT(*) OVER() AS TotalRows
	FROM VCSchoolSectors vcss
    INNER JOIN SchoolVTPSectors svs ON vcss.AcademicYearId = svs.AcademicYearId AND vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
    INNER JOIN AcademicYears ay ON vcss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1																					
    INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1    
    INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1
    INNER JOIN VTPCoordinatorsMap vcm ON vcss.AcademicYearId = vcm.AcademicYearId AND vcss.VCId = vcm.VCId AND vcm.IsActive = 1     
    INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1  
    LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1   
    LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1       
	WHERE vcss.AcademicYearId = academicYearId
		AND (vtpId IS NULL OR svs.VTPId = vtpId)
        AND (vcId IS NULL OR vcss.VCId = vcId)
        AND (schoolId IS NULL OR svs.SchoolId = schoolId)
        AND (sectorId IS NULL OR svs.SectorId = sectorId)      
		AND (status IS NULL OR vcss.IsActive = status)	
        AND (name IS NULL OR (s.SchoolName LIKE CONCAT('%', name, '%') OR s.UDISE LIKE CONCAT('%', name, '%') 
			OR vtp.VTPName LIKE CONCAT('%', name, '%') OR vc.FullName LIKE CONCAT('%', name, '%') OR se.SectorName LIKE CONCAT('%', name, '%')))
        AND (isRollover = FALSE OR svs.IsAYRollover = TRUE)
		AND ((charBy IS NULL OR charBy = 'All') OR (vc.FullName LIKE CONCAT(charBy, '%')))		
    ORDER BY ay.YearName, vc.FullName, s.SchoolName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCSchoolVisitGeoLocationsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVCSchoolVisitGeoLocationsByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	
    SELECT v.VCSchoolVisitGeoLocationId, vc.FullName AS VCName, vcss.DateOfAllocation, v.ReportDate, v.GeoLocation, v.IsActive
	FROM VCSchoolVisitGeoLocations v
    LEFT JOIN VocationalCoordinators vc ON v.VCId = vc.VCId 
    LEFT JOIN VCSchoolSectors vcss ON v.VCSchoolSectorId = vcss.VCSchoolSectorId
	WHERE (name IS NULL OR (v.GeoLocation LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (v.GeoLocation LIKE CONCAT(charBy, '%')))
	ORDER BY v.GeoLocation
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCSchoolVisitReportingByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVCSchoolVisitReportingByCriteria`(
	IN userId  VARCHAR(40),
    IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
    SELECT DISTINCT vs.VCSchoolVisitReportingId, vc.FullName AS VCName, vt.FullName AS VTName, s.SchoolName, d.DistrictName, vs.VisitDate, vs.TotalBoys, vs.TotalGirls, vs.IsActive    
	FROM VCSchoolVisitReporting vs
	INNER JOIN VTPCoordinatorsMap vcm ON vs.VCId = vcm.VCId AND vcm.IsActive = 1
	INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
	INNER JOIN VCTrainersMap vtm ON vcm.AcademicYearId = vtm.AcademicYearId AND vcm.VCId = vtm.VCId AND vs.VTId = vtm.VTId AND vtm.IsActive = 1
	INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
	INNER JOIN Schools s ON vs.SchoolId = s.SchoolId AND s.IsActive = 1    
	INNER JOIN Districts d ON vs.DistrictCode = d.DistrictCode
	WHERE vc.VCId = userId
		AND (name IS NULL OR (vc.FullName LIKE CONCAT(name, '%')))
    ORDER BY vs.VisitDate DESC, vc.FullName, vt.FullName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

	# CALL GetVCSchoolVisitReportingByCriteria ('af569a93-bd88-4840-af16-2eb3f6623a39', NULL, NULL, 1, 25);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCSchoolVisitsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVCSchoolVisitsByCriteria`(
	IN userId VARCHAR(100),
    IN name VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SELECT r.Code INTO @roleName
	FROM AccountRoles ar 		
	INNER JOIN Roles r ON ar.RoleId = r.RoleId
	WHERE ar.AccountId = userId;
    
    IF(@roleName <> 'VC') THEN				
		SET userId = null;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
    SELECT v.VCSchoolVisitId, s.SchoolName, se.SectorName, v.ReportDate, v.VTReportSubmitted, v.VTWorkingDays, v.VTLeaveDays, v.IsActive
	FROM VCSchoolVisits v    
	INNER JOIN VCSchoolSectors vtss ON v.VCSchoolSectorId = vtss.VCSchoolSectorId
    INNER JOIN SchoolVTPSectors svs ON vtss.SchoolVTPSectorId = svs.SchoolVTPSectorId
    INNER JOIN Schools s ON svs.SchoolId = s.SchoolId
    INNER JOIN Sectors se ON svs.SectorId = se.SectorId    
    WHERE (userId IS NULL OR v.VCId = userId)
		AND (name IS NULL OR (s.SchoolName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (s.SchoolName LIKE CONCAT(charBy, '%')))
	ORDER BY v.ReportDate, s.SchoolName, se.SectorName
	LIMIT pageSize
	OFFSET offSetValue;
     
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCSchoolVisitSummaryReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVCSchoolVisitSummaryReport`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
		
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			ay.YearName AS AcademicYear,		
			say.YearName AS SchoolAllottedYear,
			ph.PhaseName,
			vtp.VTPName,
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			vt.DateOfJoining AS VTDateOfJoining,
			vc.FullName AS VCName,
			vc.Mobile AS VCMobile,
			vc.EmailId AS VCEmail,
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
			d.DivisionName,
			ds.DistrictName,
			s.BlockName,
			s.UDISE,
			s.SchoolName,
			se.SectorName,
			jr.JobRoleName,
			'' AS ClassName,        
			'' AS MonthYear,
			vsv.VisitDate AS DateOfSchoolVisit,
			'' AS VTPresentStatus,
			'' AS VTAttendanceRegisterMaintained,
			'' AS MovementRegisterMaintained,
			'' AS VisitorRegisterMaintained,
			'' AS ToolsDisplayStatus,
			'' AS RawMaterialAvailabilityStatus,
			'' AS ToolInventoryReportMaintained,
			'' AS ClassObserved,
			'' AS ClassActivityObserved,
			'' AS ClassStudentsTakingNotes,
			'' AS ClassSafetyObservedDetails,
			'' AS GLPlanMaintained,
			'' AS GLReportMaintained,
			'' AS FVPlanMaintained,
			'' AS FVReportMaintained,
			'' AS AttendanceRegisterMaintained,
			'' AS LessonPlanMaintained,
			'' AS SyllabusCoverageReportMaintained,
			'' AS StudentBookAvailable
		FROM VCSchoolVisitReporting vsv
		INNER JOIN VTSchoolSectors vtss ON vsv.VTId = vtss.VTId AND vsv.SchoolId = vtss.SchoolId AND vsv.SectorId = vtss.SectorId AND vsv.JobRoleId = vtss.JobRoleId 	
		INNER JOIN VocationalTrainers vt ON vtss.VTId = vt.VTId 
		INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId 
		INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId 
		INNER JOIN Schools s ON vtss.SchoolId = s.SchoolId 
		INNER JOIN Sectors se ON vsv.SectorId = se.SectorId AND se.IsActive = 1		
		INNER JOIN JobRoles jr ON vsv.SectorId = jr.SectorId AND vsv.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
		INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode
		INNER JOIN AcademicYears ay ON vtss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
		INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1  		
		LEFT JOIN HeadMasters hm ON vtss.SchoolId = hm.SchoolId AND hm.IsActive = 1 
		LEFT JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    
		WHERE vsv.IsActive = 1
			AND (UserId IS NULL OR vsv.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vtss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vtss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vtss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vc.VTPId = VTPId)
			
			AND (MonthId IS NULL OR MONTH(vsv.VisitDate) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, se.SectorName, s.SchoolName;
   	END;   

	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVCSchoolVisitSummaryReportV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVCSchoolVisitSummaryReportV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				#VC	Vocational Coordinator 			 
			SET UserId = NULL;		 
		END IF;
		
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			ay.YearName AS AcademicYear,		
			say.YearName AS SchoolAllottedYear,
			ph.PhaseName,
			vtp.VTPName,
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			vt.DateOfJoining AS VTDateOfJoining,
			vc.FullName AS VCName,
			vc.Mobile AS VCMobile,
			vc.EmailId AS VCEmail,
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
			d.DivisionName,
			ds.DistrictName,
			s.BlockName,
			s.UDISE,
			s.SchoolName,
			se.SectorName,
			jr.JobRoleName,
			'' AS ClassName,        
			'' AS MonthYear,
			vsv.VisitDate AS DateOfSchoolVisit,
			'' AS VTPresentStatus,
			'' AS VTAttendanceRegisterMaintained,
			'' AS MovementRegisterMaintained,
			'' AS VisitorRegisterMaintained,
			'' AS ToolsDisplayStatus,
			'' AS RawMaterialAvailabilityStatus,
			'' AS ToolInventoryReportMaintained,
			'' AS ClassObserved,
			'' AS ClassActivityObserved,
			'' AS ClassStudentsTakingNotes,
			'' AS ClassSafetyObservedDetails,
			'' AS GLPlanMaintained,
			'' AS GLReportMaintained,
			'' AS FVPlanMaintained,
			'' AS FVReportMaintained,
			'' AS AttendanceRegisterMaintained,
			'' AS LessonPlanMaintained,
			'' AS SyllabusCoverageReportMaintained,
			'' AS StudentBookAvailable
		FROM VCSchoolVisitReporting vsv
		INNER JOIN VTSchoolSectors vtss ON vsv.VTId = vtss.VTId AND vsv.SchoolId = vtss.SchoolId AND vsv.SectorId = vtss.SectorId AND vsv.JobRoleId = vtss.JobRoleId 	
		INNER JOIN VocationalTrainers vt ON vtss.VTId = vt.VTId #AND vt.IsActive = 1	
		INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId #AND vc.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId #AND vtp.IsActive = 1    
		INNER JOIN Schools s ON vtss.SchoolId = s.SchoolId #AND s.IsActive = 1
		INNER JOIN Sectors se ON vsv.SectorId = se.SectorId AND se.IsActive = 1		
		INNER JOIN JobRoles jr ON vsv.SectorId = jr.SectorId AND vsv.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
		INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode
		INNER JOIN AcademicYears ay ON vtss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
		INNER JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1  		
		LEFT JOIN HeadMasters hm ON vtss.SchoolId = hm.SchoolId AND hm.IsActive = 1 
		LEFT JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    
		WHERE vsv.IsActive = 1
			AND (UserId IS NULL OR vsv.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vtss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vtss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vtss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vc.VTPId = VTPId)
			#AND (ClassId IS NULL OR glc.ClassTaughtId = ClassId)
			AND (MonthId IS NULL OR MONTH(vsv.VisitDate) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, se.SectorName, s.SchoolName;
   	END;   

	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    # CALL GetVCSchoolVisitSummaryReport ('rakesh.gtmcs@gmail.com', 'fda59df6-729e-493c-8d48-fc65b90008fe', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    # CALL GetVCSchoolVisitSummaryReport ('VC.AISECT@email.com', 'fda59df6-729e-493c-8d48-fc65b90008fe', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL); 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVEAHeaderBySchoolAndVTId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVEAHeaderBySchoolAndVTId`(
    IN AcademicYearId VARCHAR(36),    
    IN VTId VARCHAR(36), 
    IN SchoolId VARCHAR(36)    
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	BEGIN
		SELECT DISTINCT vtss.SchoolId, 
			ay.YearName AS AcademicYear, 
            s.SchoolName As SchoolName, 
            s.UDISE,  
			hm.FullName AS HMName, 
            hm.Mobile AS HMMobile, 
            hm.Email AS HMEmailId, 
			CONCAT(s.BlockName, ', ', s.Village) As SchoolAddress, 			
			vtp.VTPShortName As VTPName, 
            vt.FullName As VTName,
			vt.Email As VTEmailId, 
            vt.Mobile As VTMobile, 
            vc.FullName As VCName, 
			vc.EmailId As VCEmailId,
            vc.Mobile As VCMobile,
            COUNT(scd.StudentId) AS TotalNoOfStudents
		FROM VTSchoolSectors vtss
		INNER JOIN VTClasses vtc ON vtss.AcademicYearId = vtc.AcademicYearId AND vtss.SchoolId = vtc.SchoolId AND vtss.VTId = vtc.VTId AND vtc.IsActive = 1	        		
		INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
        INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VTPId = vcm.VTPId AND vtm.VCId = vcm.VCId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1
        INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.DateOfResignation IS NULL AND vtpm.IsActive = 1
		INNER JOIN HMSchoolsMap hsm ON vtss.AcademicYearId = hsm.AcademicYearId AND vtss.SchoolId = hsm.SchoolId AND hsm.DateOfResignation IS NULL AND hsm.IsActive = 1
        INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1 
		INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
		INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive = 1 		
		INNER JOIN Schools s ON vtss.SchoolId = s.SchoolId AND s.IsActive = 1 										
		INNER JOIN AcademicYears ay ON vtss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1   		
        LEFT JOIN StudentClassMapping scm ON vtc.AcademicYearId = scm.AcademicYearId AND vtc.SchoolId = scm.SchoolId AND vtc.ClassId = scm.ClassId AND vtc.VTId = scm.VTId AND scm.IsActive = 1
        LEFT JOIN StudentClasses sc ON scm.SchoolId = sc.SchoolId AND scm.StudentId = sc.StudentId AND sc.DateOfDropout IS NULL AND sc.IsActive = 1  
        LEFT JOIN StudentClassDetails scd ON sc.StudentId = scd.StudentId
		WHERE vtss.IsActive = 1 AND scd.AssessmentConducted = 'Yes'
			AND vtss.AcademicYearId = AcademicYearId
            AND (SchoolId IS NULL OR vtss.SchoolId = SchoolId)
			AND (VTId IS NULL OR vtss.VTId = VTId)
		GROUP BY vtss.AcademicYearId, vtss.SchoolId, vtss.VTId;
	END;    
   
   # CALL GetVEAHeaderBySchoolAndVTId ('bb46d443-08ac-43d3-b31a-8b640be6be6f', 'd54c545f-dc5b-4aad-9c93-ad1e3d8e7bad', '62cd3256-36dc-4732-8dc8-d97661387803');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVocationalCoordinatorsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVocationalCoordinatorsByCriteria`(
	IN academicYearId VARCHAR(36),
	IN vtpId VARCHAR(36),
    IN natureOfAppointmentId VARCHAR(15),
    IN status BIT,
	IN name VARCHAR(150),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = pageIndex * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    SELECT DISTINCT vcm.AcademicYearId, vcm.VTPId, vcm.VCId, ay.YearName AS AcademicYear, dtn.Name AS NatureOfAppointment, vtp.VTPShortName AS VTPName, 
		vc.FullName, vc.Mobile, vc.EmailId, dtg.Name AS Gender, vcm.DateOfJoining, 
		(CASE WHEN(vcm.DateOfResignation IS NULL) THEN 0 ELSE 1 END) AS IsResigned, vcm.IsActive, COUNT(*) OVER() AS TotalRows
	FROM VTPCoordinatorsMap vcm
    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId 
    INNER JOIN AcademicYears ay ON vcm.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
	INNER JOIN DataValues dtg ON vc.Gender = dtg.DataValueId AND dtg.DataTypeId = 'Gender'
    INNER JOIN DataValues dtn ON vcm.NatureOfAppointment = dtn.DataValueId AND dtn.DataTypeId = 'NatureOfAppointment'    
    INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
    INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1  
	WHERE vcm.AcademicYearId = academicYearId
		AND (vtpId IS NULL OR vcm.VTPId = vtpId)
		AND (natureOfAppointmentId IS NULL OR vcm.NatureOfAppointment = natureOfAppointmentId)        
        AND (status IS NULL OR (vcm.IsActive = status AND vc.IsActive = status))
		AND (name IS NULL OR (vtp.VTPName LIKE CONCAT('%', name, '%') OR vc.FullName LIKE CONCAT('%', name, '%') OR vc.EmailId LIKE CONCAT('%', name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (vc.FirstName LIKE CONCAT(charBy, '%')))
	ORDER BY ay.YearName, vtp.VTPShortName, vc.FullName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    	
    # CALL GetVocationalCoordinatorsByCriteria ('bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, 0, 25);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVocationalCoordinatorsByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVocationalCoordinatorsByCriteriaV2`(
	IN academicYearId VARCHAR(36),
	IN vtpId VARCHAR(36),
    IN natureOfAppointmentId VARCHAR(15),
    IN status BIT,
	IN name VARCHAR(150),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = pageIndex * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    SELECT DISTINCT vcm.AcademicYearId, vcm.VTPId, vcm.VCId, ay.YearName AS AcademicYear, dtn.Name AS NatureOfAppointment, vtp.VTPShortName AS VTPName, 
		vc.FullName, vc.Mobile, vc.EmailId, dtg.Name AS Gender, vcm.DateOfJoining, 
		(CASE WHEN(vcm.DateOfResignation IS NULL) THEN 0 ELSE 1 END) AS IsResigned, vcm.IsActive, COUNT(*) OVER() AS TotalRows
	FROM VTPCoordinatorsMap vcm
    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId 
    INNER JOIN AcademicYears ay ON vcm.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
	INNER JOIN DataValues dtg ON vc.Gender = dtg.DataValueId AND dtg.DataTypeId = 'Gender'
    INNER JOIN DataValues dtn ON vcm.NatureOfAppointment = dtn.DataValueId AND dtn.DataTypeId = 'NatureOfAppointment'    
    INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
    INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1  
	WHERE vcm.AcademicYearId = academicYearId
		AND (vtpId IS NULL OR vcm.VTPId = vtpId)
		AND (natureOfAppointmentId IS NULL OR vcm.NatureOfAppointment = natureOfAppointmentId)        
        AND (status IS NULL OR (vcm.IsActive = status AND vc.IsActive = status))
		AND (name IS NULL OR (vtp.VTPName LIKE CONCAT('%', name, '%') OR vc.FullName LIKE CONCAT('%', name, '%') OR vc.EmailId LIKE CONCAT('%', name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (vc.FirstName LIKE CONCAT(charBy, '%')))
	ORDER BY ay.YearName, vtp.VTPShortName, vc.FullName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    	
    # CALL GetVocationalCoordinatorsByCriteriaV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, 0, 25);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVocationalEducationAssessmentBySchoolAndVTId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVocationalEducationAssessmentBySchoolAndVTId`(
    IN AcademicYearId VARCHAR(36),    
    IN VTId VARCHAR(36), 
    IN SchoolId VARCHAR(36)    
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY sr.AcademicYearId, sr.SchoolId, sr.VTId, sr.Class, sr.StudentName) AS SrNo,
		sr.VTId, sr.SchoolId, sr.AcademicYearId, sr.AcademicYear, sr.StudentName, sr.Class, sr.Gender, sr.DOB, sr.AadhaarNumber, 
		sr.StudentRollNumber, sr.PrimaryContact, sr.AlternativeContact, sr.FatherName, sr.MotherName, sr.Category, 
        sr.Sector, sr.JobRole, sr.Assesment, sr.StreamName, sr.StudentId
	FROM (
		SELECT DISTINCT ay.AcademicYearId, sc.SchoolId, scm.VTId, sc.StudentId, ay.YearName AS AcademicYear, sc.FullName AS StudentName, 
			cls.Name AS Class, scd.AadhaarNumber, scd.StudentRollNumber, scd.FatherName, scd.MotherName, DATE(scd.DateOfBirth) AS DOB, 
            scd.Mobile as PrimaryContact, scd.Mobile1 As AlternativeContact, dvg.Name AS Gender, dv1.Name AS Category, sc.IsActive,
            st.SectorName AS Sector, jr.JobRoleName AS JobRole, scd.AssessmentConducted AS Assesment, dvs.Name AS StreamName
		FROM StudentClassDetails scd
		INNER JOIN StudentClasses sc ON scd.StudentId = sc.StudentId AND sc.IsActive = 1
		INNER JOIN AcademicYears ay ON sc.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
		INNER JOIN StudentClassMapping scm ON sc.SchoolId = scm.SchoolId AND sc.StudentId = scm.StudentId AND scm.IsActive = 1
		INNER JOIN VTClasses vtc ON scm.AcademicYearId = vtc.AcademicYearId AND scm.SchoolId = vtc.SchoolId AND scm.ClassId = vtc.ClassId AND scm.VTId = vtc.VTId AND vtc.IsActive = 1	
		INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1   				
		INNER JOIN VocationalTrainers vt ON scm.VTId = vt.VTId AND vt.IsActive = 1 
		INNER JOIN Schools s ON sc.SchoolId = s.SchoolId AND s.IsActive = 1 
		LEFT JOIN DataValues dv1 ON scd.SocialCategory = dv1.DataValueId AND dv1.DataTypeId='SocialCategory' 
		LEFT JOIN VTClassSections vtcs ON vtc.VTClassId = vtcs.VTClassId AND vtcs.IsActive = 1 			
		LEFT JOIN AcademicYears ar ON sc.AcademicYearId = ar.AcademicYearId AND ar.IsActive = 1   
		LEFT JOIN SchoolClasses cls ON sc.ClassId = cls.ClassId
		LEFT JOIN Sections se ON sc.SectionId = se.SectionId
		LEFT JOIN DataValues dvg ON sc.Gender = dvg.DataValueId AND dvg.DataTypeId = 'StudentGender'
		LEFT JOIN Sectors st ON vss.SectorId = st.SectorId
		LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId   
		LEFT JOIN DataValues dvs ON scd.StreamId = dvs.DataValueId AND dvs.DataTypeId = 'Streams'
		WHERE sc.IsActive = 1 AND scd.AssessmentConducted = 'Yes'
			AND (AcademicYearId IS NULL OR scm.AcademicYearId = AcademicYearId) 
			AND (VTId IS NULL OR scm.VTId = VTId)
			AND (SchoolId IS NULL OR sc.SchoolId = SchoolId)
	) sr
	ORDER BY sr.AcademicYearId, sr.SchoolId, sr.VTId, sr.Class, sr.StudentName;
    	
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    # CALL GetVocationalEducationAssessmentBySchoolAndVTId (NULL, NULL, NULL);  # 27010101402-GOVT. POST BASIC ASHRAM SCHOOL
	# CALL GetVocationalEducationAssessmentBySchoolAndVTId ('bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, '4765ed20-bc16-48a0-b9f1-73d4fcd0aa23');
    # CALL GetVocationalEducationAssessmentBySchoolAndVTId ('fda59df6-729e-493c-8d48-fc65b90008fe', '00604d0a-ea10-463e-86b1-e859621cf889', '4765ed20-bc16-48a0-b9f1-73d4fcd0aa23');    
    # CALL GetVocationalEducationAssessmentBySchoolAndVTId('bb46d443-08ac-43d3-b31a-8b640be6be6f','31ff68e7-1ede-4a8e-b004-bf09bbde1a46' , '0fa956c7-23da-4a48-b12e-2fd61ba048d6');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVocationalTrainerAttendanceReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVocationalTrainerAttendanceReport`(
	IN userId VARCHAR(150),
    IN academicYearId VARCHAR(36),
    IN divisionId VARCHAR(36), 
    IN districtId VARCHAR(36), 
    IN sectorId VARCHAR(36), 
    IN jobRoleId VARCHAR(36), 
    IN vtpId VARCHAR(36), 
    IN classId VARCHAR(36)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
	SET @rowIndex = 0;
	
	SELECT DISTINCT 
		(@rowIndex :=@rowIndex + 1) AS SrNo, 
		ay.YearName AS AcademicYear,		
		DATE_FORMAT(vss.DateOfAllocation, "%Y") AS SchoolAllottedYear,
        p.PhaseName,
		vtp.VTPName,
		vt.FullName AS VTName,
		vt.Mobile AS VTMobile,
		vt.Email AS VTEmail,	
        vt.DateOfJoining AS VTDateOfJoining,
		vc.FullName AS VCName,
		vc.Mobile AS VCMobile,
		vc.EmailId AS VCEmail,
		hm.FullName AS HMName,
		hm.Mobile AS HMMobile,
		hm.Email AS HMEmail,
		'' AS SchoolManagement,
		d.DivisionName,
		ds.DistrictName,
		s.BlockName,
		s.UDISE,
		s.SchoolName,
		se.SectorName,
		jr.JobRoleName,
        '' AS ClassName,        
        '' AS MonthYear,           
		now() AS Date,
		'' AS TypeOfDay,
		'' AS Code,
		'' AS Description,
		'' AS VTReportType,
		'' AS ReportCode,
		'' AS CurrentStatus
	FROM VocationalTrainers vt
    INNER JOIN VocationalTrainingProviders vtp ON vt.VTPId = vtp.VTPId
    INNER JOIN VocationalCoordinators vc ON vtp.VTPId = vc.VTPId 
    INNER JOIN VTSchoolSectors vss ON vt.VTId = vss.VTId
    INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
	INNER JOIN Sectors se ON vss.SectorId = se.SectorId
	INNER JOIN JobRoles jr ON se.SectorId = jr.SectorId
	INNER JOIN Phases p ON s.PhaseId = p.PhaseId
	INNER JOIN Divisions d ON s.DivisionId = d.DivisionId
	INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode
	INNER JOIN AcademicYears ay ON s.AcademicYearId = ay.AcademicYearId
	LEFT JOIN HeadMasters hm ON s.SchoolId = hm.SchoolId 
	CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
	WHERE (academicYearId IS NULL OR s.AcademicYearId = academicYearId)
		
		
		AND (sectorId IS NULL OR se.SectorId = sectorId)
		AND (jobRoleId IS NULL OR jr.JobRoleId = jobRoleId)
		AND (vtpId IS NULL OR vtp.VTPId = vtpId);
		

	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVocationalTrainersByAYIdAndSchoolId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVocationalTrainersByAYIdAndSchoolId`(
	IN AcademicYearId VARCHAR(36),
    IN SchoolId VARCHAR(36)
)
BEGIN 
	SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
	FROM VTSchoolSectors vtss
	INNER JOIN VCTrainersMap vtm ON vtss.AcademicYearId = vtm.AcademicYearId AND vtss.VTId = vtm.VTId AND vtm.IsActive = 1 			
	INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1 			
	WHERE vtss.IsActive = 1 
		AND vtss.AcademicYearId = AcademicYearId
		AND vtss.SchoolId = SchoolId
	ORDER BY Name;	
    
    # CALL GetVocationalTrainersByAYIdAndSchoolId ( 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '4765ed20-bc16-48a0-b9f1-73d4fcd0aa23');
    # CALL GetVocationalTrainersByAYIdAndSchoolId ( 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '96fd1705-f883-4897-acdc-c23c5e1d223a');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVocationalTrainersByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVocationalTrainersByCriteria`(
	IN academicYearId VARCHAR(36),	
    IN vtpId VARCHAR(36),
    IN vcId VARCHAR(36),
	IN hmId VARCHAR(36),
    IN socialCategoryId VARCHAR(36),
    IN status BIT,
    IN name VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = pageIndex * pageSize;
    
    IF(hmId IS NOT NULL) THEN
	BEGIN
    	SELECT hsm.SchoolId INTO schoolId 
        FROM HMSchoolsMap hsm
        INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive	= 1
        WHERE hsm.AcademicYearId = academicYearId AND hsm.HMId = hmId AND hsm.IsActive = 1;
	END;
    END IF;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
   
	SELECT DISTINCT vtm.AcademicYearId, vtm.VTPId, vtm.VCId, vtm.VTId, ay.YearName AS AcademicYear, vtp.VTPShortName AS VTPName, 
		vc.FullName AS VCName, vt.FullName AS VTName, vt.Mobile, vt.Email, dvg.Name AS Gender, DATE(vt.DateOfBirth) AS DateOfBirth, 
        DATE(vtm.DateOfJoining) AS DateOfJoining, dv3.Name AS AcademicQualification, dv4.Name AS ProfessionalQualification, 
        vt.AadhaarNumber, dv2.Name AS NatureOfAppointment, dv1.Name AS SocialCategory, (CASE WHEN(vtm.DateOfResignation IS NULL) THEN 0 ELSE 1 END) AS IsResigned, 
        vtm.IsActive, COUNT(vt.VTId) OVER() AS TotalRows
	FROM VCTrainersMap vtm
    INNER JOIN VocationalTrainers vt ON vt.VTId = vtm.VTId AND vt.IsActive = 1
    INNER JOIN DataValues dv1 ON vt.SocialCategory = dv1.DataValueId AND dv1.DataTypeId = 'SocialCategory'
    INNER JOIN DataValues dv2 ON vtm.NatureOfAppointment = dv2.DataValueId AND dv2.DataTypeId = 'NatureOfAppointment'
    INNER JOIN DataValues dv3 ON vt.AcademicQualification = dv3.DataValueId AND dv3.DataTypeId = 'AcademicQualification'
    INNER JOIN DataValues dv4 ON vt.ProfessionalQualification = dv4.DataValueId AND dv4.DataTypeId = 'ProfessionalQualification'    
    INNER JOIN DataValues dvg ON vt.Gender = dvg.DataValueId AND dvg.DataTypeId = 'Gender'
    INNER JOIN AcademicYears ay ON vtm.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
    INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1 
    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
    INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1 
    INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
	LEFT JOIN VTSchoolSectors vtss ON vtm.AcademicYearId = vtss.AcademicYearId AND vtm.VTId = vtss.VTId AND vtss.IsActive = 1
    WHERE vtm.AcademicYearId = academicYearId
		AND (vtpId IS NULL OR vtm.VTPId = vtpId)
		AND (vcId IS NULL OR vtm.VCId = vcId)        
		AND (schoolId IS NULL OR vtss.SchoolId = schoolId)
		AND (socialCategoryId IS NULL OR vt.SocialCategory = socialCategoryId)        
		AND (status IS NULL OR (vtm.IsActive = status AND vt.IsActive = status))
		AND (name IS NULL OR (vtp.VTPName LIKE CONCAT('%', name, '%') OR vc.FullName LIKE CONCAT('%', name, '%') OR vt.FullName LIKE CONCAT('%', name, '%') OR vt.Email LIKE CONCAT('%', name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (vt.FullName LIKE CONCAT(charBy, '%')))
	ORDER BY vtp.VTPShortName, vc.FullName, vt.FullName
	LIMIT pageSize OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

	# CALL GetVocationalTrainersByCriteria ('bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 25);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVocationalTrainingProvidersByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVocationalTrainingProvidersByCriteria`(
	IN academicYearId VARCHAR(36),
	IN status BIT,
	IN name VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = pageIndex * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT DISTINCT vtp.VTPId, ay.YearName AS AcademicYear, vtp.VTPShortName, vtp.VTPName, vtp.ApprovalYear, vtp.CertificationNo, vtp.CertificationAgency, 
		(CASE WHEN(vtpm.DateOfResignation IS NULL) THEN 0 ELSE 1 END) AS IsResigned, vtpm.IsActive, COUNT(*) OVER() AS TotalRows
	FROM VocationalTrainingProviders vtp
    INNER JOIN VTPAcademicYearsMap vtpm ON vtp.VTPId = vtpm.VTPId 
    INNER JOIN AcademicYears ay ON vtpm.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1   
	WHERE vtpm.AcademicYearId = academicYearId
		AND (status IS NULL OR vtpm.IsActive = status)
		AND (name IS NULL OR (vtp.VTPShortName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (vtp.VTPShortName LIKE CONCAT(charBy, '%')))
	ORDER BY vtp.VTPShortName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTAttendanceDetailForPDF` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTAttendanceDetailForPDF`(
	IN userId VARCHAR(150),
    IN vtId VARCHAR(36), 
    IN reportDate DATETIME
	)
BEGIN 	
    DECLARE StartMonthDate DATE DEFAULT DATE(DATE_FORMAT(reportDate,'%Y/%m/01'));
    DECLARE EndMonthDate DATE DEFAULT DATE(LAST_DAY(reportDate));
    SELECT ay.AcademicYearId INTO @AcademicYearId FROM AcademicYears ay WHERE DATE(reportDate) BETWEEN ay.StartMonth AND ay.EndMonth;    

    SELECT DATE(vtss.DateOfAllocation), DATE(vtss.DateOfRemoval) INTO @DateOfSchoolAllocation, @DateOfRemoval 
    FROM VTSchoolSectors vtss
    INNER JOIN VCTrainersMap vtm ON vtss.AcademicYearId = vtm.AcademicYearId AND vtss.VTId = vtm.VTId AND vtm.IsActive = 1
    INNER JOIN AcademicYears ay ON vtss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
    WHERE vtss.IsActive = 1
		AND vtss.AcademicYearId = @AcademicYearId AND vtss.VTId = vtId;
    
    IF (reportDate <= @DateOfSchoolAllocation) THEN
		SET StartMonthDate = @DateOfSchoolAllocation;
    END IF;
    
    IF (DATE(CURRENT_DATE()) <= LAST_DAY(reportDate)) THEN
		SET EndMonthDate = CAST(CURRENT_DATE() AS DATE);
	END IF;
    
    IF (@DateOfRemoval <= LAST_DAY(reportDate)) THEN
		SET EndMonthDate = @DateOfRemoval;
    END IF;
    
    SELECT DISTINCT vdr.VTId, DATE(vdr.ReportingDate) AS ReportingDate, vdr.ReportType
	FROM VTDailyReporting vdr
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
	WHERE vss.AcademicYearId = @AcademicYearId AND vdr.VTId = vtId
		AND DATE(vdr.ReportingDate) BETWEEN DATE(StartMonthDate) AND DATE(EndMonthDate)
	UNION
	SELECT DISTINCT gl.VTId, DATE(gl.ReportingDate) AS ReportingDate, '37' AS ReportType
	FROM VTGuestLectureConducted gl
	INNER JOIN VTSchoolSectors vss ON gl.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
	WHERE vss.AcademicYearId = @AcademicYearId AND gl.VTId = vtId
		AND DATE(gl.ReportingDate) BETWEEN DATE(StartMonthDate) AND DATE(EndMonthDate)
	UNION
	SELECT DISTINCT fv.VTId, DATE(fv.ReportingDate) AS ReportingDate, '37' AS ReportType
	FROM VTFieldIndustryVisitConducted fv
	INNER JOIN VTSchoolSectors vss ON fv.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
	WHERE vss.AcademicYearId = @AcademicYearId AND fv.VTId = vtId
		AND DATE(fv.ReportingDate) BETWEEN DATE(StartMonthDate) AND DATE(EndMonthDate)
	ORDER BY ReportingDate;    
    
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;

    # CALL GetVTAttendanceDetailForPDF ('hiashish09@gmail.com',  '4e7ac8c5-28c9-474b-8565-9cd1d96b3491', '2022/10/19');
    # CALL GetVTAttendanceHeaderForPDF ('hiashish09@gmail.com',  '4e7ac8c5-28c9-474b-8565-9cd1d96b3491', '2022/10/19');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTAttendanceHeaderForPDF` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTAttendanceHeaderForPDF`(
	IN userId VARCHAR(150),
    IN vtId VARCHAR(36),
    IN reportDate DATETIME
	)
BEGIN
	DECLARE NoOfSunday INT DEFAULT 0;
    DECLARE StartMonthDate DATE DEFAULT DATE(DATE_FORMAT(reportDate,'%Y/%m/01'));
    DECLARE EndMonthDate DATE DEFAULT DATE(LAST_DAY(reportDate));
      
    DROP TABLE IF EXISTS TrainerWorkingData;
	DROP TABLE IF EXISTS VTDailyFVAndGLData;
        
    SELECT ay.AcademicYearId INTO @AcademicYearId FROM AcademicYears ay WHERE DATE(reportDate) BETWEEN ay.StartMonth AND ay.EndMonth;    
    SET reportDate = StartMonthDate;
    
    SELECT DATE(vtss.DateOfAllocation), DATE(vtss.DateOfRemoval) INTO @DateOfSchoolAllocation, @DateOfRemoval 
    FROM VTSchoolSectors vtss
    INNER JOIN VCTrainersMap vtm ON vtss.AcademicYearId = vtm.AcademicYearId AND vtss.VTId = vtm.VTId AND vtm.IsActive = 1
    INNER JOIN AcademicYears ay ON vtss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
    WHERE vtss.IsActive = 1
		AND vtss.AcademicYearId = @AcademicYearId AND vtss.VTId = vtId;
    
    IF (reportDate <= @DateOfSchoolAllocation) THEN
		SET StartMonthDate = @DateOfSchoolAllocation;
    END IF;
    
    IF (DATE(CURRENT_DATE()) <= LAST_DAY(reportDate)) THEN
		SET EndMonthDate = CAST(CURRENT_DATE() AS DATE);
	END IF;
    
    IF (@DateOfRemoval <= LAST_DAY(reportDate)) THEN
		SET EndMonthDate = @DateOfRemoval;
    END IF;
    
    SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
    
    SET NoOfSunday = GetNoOfSundaysFromDateRange(StartMonthDate, EndMonthDate); 
	
	CREATE TEMPORARY TABLE VTDailyFVAndGLData AS
    SELECT DISTINCT vdr.VTDailyReportingId, vdr.VTSchoolSectorId, vdr.VTId, DATE(vdr.ReportingDate) AS ReportingDate, vdr.ReportType
	FROM VTDailyReporting vdr
	INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
	WHERE vss.AcademicYearId = @AcademicYearId AND vdr.VTId = vtId
		AND DATE(vdr.ReportingDate) BETWEEN StartMonthDate AND EndMonthDate
	UNION
	SELECT DISTINCT gl.VTGuestLectureId AS VTDailyReportingId, gl.VTSchoolSectorId, gl.VTId, DATE(gl.ReportingDate) AS ReportingDate, '37' AS ReportType
	FROM VTGuestLectureConducted gl
	INNER JOIN VTSchoolSectors vss ON gl.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
	WHERE vss.AcademicYearId = @AcademicYearId AND gl.VTId = vtId
		AND DATE(gl.ReportingDate) BETWEEN StartMonthDate AND EndMonthDate
	UNION
	SELECT DISTINCT fv.VTFieldIndustryVisitConductedId AS VTDailyReportingId, fv.VTSchoolSectorId, fv.VTId, DATE(fv.ReportingDate) AS ReportingDate, '37' AS ReportType
	FROM VTFieldIndustryVisitConducted fv
	INNER JOIN VTSchoolSectors vss ON fv.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
	WHERE vss.AcademicYearId = @AcademicYearId AND fv.VTId = vtId
		AND DATE(fv.ReportingDate) BETWEEN StartMonthDate AND EndMonthDate
	ORDER BY ReportingDate;
    
	CREATE TEMPORARY TABLE TrainerWorkingData AS 
	SELECT vdr.VTId, vdr.VTSchoolSectorId, 
		COUNT(DISTINCT IF(vdr.ReportType = '37', DATE(vdr.ReportingDate), NULL)) AS WorkingDays,	
		COUNT(DISTINCT IF(vdr.ReportType = '38' AND vld.LeaveModeId = 2, DATE(vdr.ReportingDate), NULL)) AS PaidLeaves,
		COUNT(DISTINCT IF(vdr.ReportType = '38' AND vld.LeaveModeId = 3, DATE(vdr.ReportingDate), NULL)) AS UnpaidLeaves,
		COUNT(DISTINCT IF(vdr.ReportType = '38' AND vld.LeaveTypeId = '137', DATE(vdr.ReportingDate), NULL)) AS LongTermHolidays,
		COUNT(DISTINCT IF(vdr.ReportType = '40' AND (vhd.HolidayTypeId = '133' OR vhd.HolidayTypeId = '134'), DATE(vdr.ReportingDate), NULL)) AS LocalGovHolidays
	FROM VTDailyFVAndGLData vdr    
	LEFT JOIN VTRWorkingDayTypes vwd ON vdr.VTDailyReportingId = vwd.VTDailyReportingId
	LEFT JOIN VTRLeaves vld ON vdr.VTDailyReportingId = vld.VTDailyReportingId
	LEFT JOIN VTRHolidays vhd ON vdr.VTDailyReportingId = vhd.VTDailyReportingId
	GROUP BY vdr.VTId, vdr.VTSchoolSectorId;
 
	SELECT vss.VTId,
		vtp.VTPName, 
		vc.FullName AS VCName, 
		vt.FullName AS VTName,
		vt.Mobile AS VTMobile,
		vtm.DateOfJoining AS VTDateOfJoining,	 
		s.UDISE,
		s.SchoolName,
		se.SectorName,
		DATE_FORMAT(CAST(reportDate AS DATE), "%M-%Y") AS MonthYear,
        IF(tws.WorkingDays IS NULL, 0, tws.WorkingDays) AS WorkingDays,
		NoOfSunday AS Sundays,
        IF(tws.PaidLeaves IS NULL, 0, tws.PaidLeaves) AS PaidLeaves,
        IF(tws.UnpaidLeaves IS NULL, 0, tws.UnpaidLeaves) AS UnpaidLeaves,
        IF(tws.LongTermHolidays IS NULL, 0, tws.LongTermHolidays) AS LongTermHolidays,
        IF(tws.LocalGovHolidays IS NULL, 0, tws.LocalGovHolidays) AS LocalGovHolidays,
        IF(tws.WorkingDays IS NULL, 0, tws.WorkingDays + NoOfSunday + tws.PaidLeaves + tws.LocalGovHolidays) AS TotalPaidDays,
        DAYOFMONTH(LAST_DAY(CAST(reportDate AS DATE))) AS TotalDays
	FROM VCTrainersMap vtm
    INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VTPId = vcm.VTPId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
	INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1 	 
    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1 	 
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1 	
    INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1 	     
	INNER JOIN VTSchoolSectors vss ON vtm.AcademicYearId = vss.AcademicYearId AND vtm.VTId = vss.VTId AND vss.IsActive = 1     
    INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1 	
	INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1 
    LEFT JOIN TrainerWorkingData tws ON vss.VTSchoolSectorId = tws.VTSchoolSectorId AND vss.VTId = tws.VTId	
	WHERE vss.AcademicYearId = @AcademicYearId AND vtm.VTId = vtId AND vtm.IsActive = 1
    LIMIT 1;
    
    DROP TABLE IF EXISTS VTDailyFVAndGLData;
	DROP TABLE IF EXISTS TrainerWorkingData;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;  
    
    # CALL GetVTAttendanceHeaderForPDF ('hiashish09@gmail.com',  '4e7ac8c5-28c9-474b-8565-9cd1d96b3491', '2022/10/19');
	# CALL GetVTAttendanceHeaderForPDF ('ghodakeamar72@gmail.com', 'd54c545f-dc5b-4aad-9c93-ad1e3d8e7bad', '2023/01/19');
    # CALL GetVTAttendanceHeaderForPDF ('ghodakeamar72@gmail.com', 'b4e5910c-e41a-4526-853e-106a0663afe4', '2022/11/19');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTByAYAndSchoolId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVTByAYAndSchoolId`(
	IN RoleId VARCHAR(15),
    IN UserId VARCHAR(36),
	IN AcademicYearId VARCHAR(36),
	IN VTPId VARCHAR(36),
    IN VCId VARCHAR(36),
    IN SchoolId VARCHAR(36)
)
BEGIN 
	IF(RoleId = 'ADM') THEN
    BEGIN
		SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VTSchoolSectors vtss
		INNER JOIN SchoolVTPSectors svs ON vtss.AcademicYearId = svs.AcademicYearId AND vtss.SchoolId = svs.SchoolId AND vtss.SectorId = svs.SectorId AND svs.IsActive = 1
		INNER JOIN VCTrainersMap vtm ON vtss.AcademicYearId = vtm.AcademicYearId AND vtss.VTId = vtm.VTId AND vtm.IsActive = 1 			
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1 			
		WHERE vtss.IsActive = 1 
			AND vtss.AcademicYearId = AcademicYearId
			AND vtm.VTPId = VTPId
			AND vtm.VCId = VCId
			AND vtss.SchoolId = SchoolId
		ORDER BY Name;	
	END;
    ELSEIF(RoleId = 'VC') THEN
    BEGIN
		SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VTSchoolSectors vtss
		INNER JOIN SchoolVTPSectors svs ON vtss.AcademicYearId = svs.AcademicYearId AND vtss.SchoolId = svs.SchoolId AND vtss.SectorId = svs.SectorId AND svs.IsActive = 1
		INNER JOIN VCTrainersMap vtm ON vtss.AcademicYearId = vtm.AcademicYearId AND vtss.VTId = vtm.VTId AND vtm.IsActive = 1 			
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1 			
		WHERE vtss.IsActive = 1 
			AND vtss.AcademicYearId = AcademicYearId
			AND vtss.SchoolId = SchoolId
            AND vtm.VTPId = VTPId
			AND vtm.VCId = UserId			
		ORDER BY Name;
	END;
    ELSEIF(RoleId = 'VT') THEN
    BEGIN
		SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VTSchoolSectors vtss
		INNER JOIN SchoolVTPSectors svs ON vtss.AcademicYearId = svs.AcademicYearId AND vtss.SchoolId = svs.SchoolId AND vtss.SectorId = svs.SectorId AND svs.IsActive = 1
		INNER JOIN VCTrainersMap vtm ON vtss.AcademicYearId = vtm.AcademicYearId AND vtss.VTId = vtm.VTId AND vtm.IsActive = 1 			
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1 			
		WHERE vtss.IsActive = 1 
			AND vtss.AcademicYearId = AcademicYearId
            AND vtss.SchoolId = SchoolId
			AND vtm.VTPId = VTPId
			AND vtm.VCId = VCId
			And vt.VTId = UserId			
		ORDER BY Name;
	END;
    ELSEIF(RoleId = 'HM') THEN
    BEGIN
	    SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, vt.Email AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM HMSchoolsMap hmm
        INNER JOIN VTSchoolSectors vtss ON hmm.AcademicYearId = vtss.AcademicYearId AND hmm.SchoolId = vtss.SchoolId AND vtss.IsActive = 1
        INNER JOIN VCTrainersMap vtm ON vtss.AcademicYearId = vtm.AcademicYearId AND vtss.VTId = vtm.VTId AND vtm.IsActive = 1
		INNER JOIN Schools sc ON hmm.SchoolId = sc.SchoolId AND sc.IsActive = 1
        INNER JOIN HeadMasters hm ON hm.HMId = hmm.HMId AND hm.IsActive =1		
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
		WHERE hmm.IsActive = 1 AND hmm.DateOfResignation IS NULL
			AND hmm.AcademicYearId = AcademicYearId 
			And hmm.SchoolId = SchoolId
            AND hm.HMId = UserId
			AND vtm.VTPId = VTPId
			And vtm.VCId = VCId
		ORDER BY Name;
	END;
    END IF;
    
    # CALL GetVTByAYAndSchoolId ('ADM', 'fac71e7e-6661-4691-9e20-842a92948958', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '0ad92e76-96fc-49d6-9592-631b4caa3292', 'fdd84d6b-1745-495a-b640-c27bf00b5c17', '62cd3256-36dc-4732-8dc8-d97661387803');
    # CALL GetVTByAYAndSchoolId ('VC', 'fdd84d6b-1745-495a-b640-c27bf00b5c17', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '0ad92e76-96fc-49d6-9592-631b4caa3292', 'fdd84d6b-1745-495a-b640-c27bf00b5c17', '62cd3256-36dc-4732-8dc8-d97661387803');
    # CALL GetVTByAYAndSchoolId ('VT', 'd54c545f-dc5b-4aad-9c93-ad1e3d8e7bad', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '0ad92e76-96fc-49d6-9592-631b4caa3292', 'fdd84d6b-1745-495a-b640-c27bf00b5c17', '62cd3256-36dc-4732-8dc8-d97661387803');
    # CALL GetVTByAYAndSchoolId ('HM', 'fcefa07d-4ced-4a02-8ada-591e8d57422a', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '0ad92e76-96fc-49d6-9592-631b4caa3292', 'fdd84d6b-1745-495a-b640-c27bf00b5c17', '62cd3256-36dc-4732-8dc8-d97661387803');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTByAYAndVCId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVTByAYAndVCId`(
	IN RoleId VARCHAR(15),
    IN UserId VARCHAR(36),
    IN AcademicYearId VARCHAR(36),
    IN VCId VARCHAR(36)
)
BEGIN 
	IF(RoleId = 'ADM') THEN
    BEGIN
		SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VCTrainersMap vtm
		INNER JOIN AcademicYears ay ON vtm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
		WHERE vt.IsActive = 1 
		AND vtm.AcademicYearId = AcademicYearId
		AND vtm.VCId = VCId
		ORDER BY vt.FullName;	
	END;
    ELSEIF(RoleId = 'VC') THEN
    BEGIN
		SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VCTrainersMap vtm
		INNER JOIN AcademicYears ay ON vtm.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
		WHERE vt.IsActive = 1 
			AND vtm.AcademicYearId = AcademicYearId AND vtm.VCId = UserId
		ORDER BY vt.FullName;
	END;
    ELSEIF(RoleId = 'VT') THEN
    BEGIN
		SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VCTrainersMap vtm
		INNER JOIN AcademicYears ay ON vtm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
		WHERE vt.IsActive = 1  
			AND vtm.VTId = UserId
		ORDER BY vt.FullName;			
	END;
    ELSEIF(RoleId = 'HM') THEN
    BEGIN
		SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, vt.Email AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM HeadMasters hm
		INNER JOIN HMSchoolsMap hmm ON hm.HMId = hmm.HMId AND hmm.IsActive =1
		INNER JOIN SchoolVTPSectors svs ON hmm.AcademicYearId = svs.AcademicYearId AND hmm.SchoolId = svs.SchoolId AND svs.IsActive =1
		INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive =1
		INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1
		INNER JOIN VCTrainersMap vtm ON vcss.AcademicYearId = vtm.AcademicYearId AND  vcss.VCId = vtm.VCId AND vtm.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
		WHERE hm.IsActive = 1
			AND hmm.AcademicYearId = AcademicYearId 
			AND hm.HMId = UserId
			And vc.VCId = VCId
		ORDER BY vt.FullName;
	END;
    END IF;

    # CALL GetVTByAYAndVCId ('ADM', 'fac71e7e-6661-4691-9e20-842a92948958', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '1418bec9-d5a4-4c37-ab42-17d4d13ac159');
    # CALL GetVTByAYAndVCId ('VC', '7565921d-753e-4502-8982-dd2a182cc48e', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL);
    # CALL GetVTByAYAndVCId ('VT', 'ad9ec0ed-9021-4598-92fe-586907f96612', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '1418bec9-d5a4-4c37-ab42-17d4d13ac159');
    # CALL GetVTByAYAndVCId ('HM', '765d2f73-a4be-430a-9cec-692116d7aeb3', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '86847cbc-9447-4495-b6db-78e7e8bb23ad');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTByAYAndVTPIdVCId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVTByAYAndVTPIdVCId`(
	IN RoleId VARCHAR(15),
    IN UserId VARCHAR(36),
	IN AcademicYearId VARCHAR(36),
	IN VTPId VARCHAR(36),
    IN VCId VARCHAR(36)
)
BEGIN 
	IF(RoleId = 'ADM') THEN
    BEGIN
		SELECT vt.VTId AS Id, vt.FullName AS Name, vtm.VTPId, vtm.VCId, vt.Email AS Description,0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VCTrainersMap vtm
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
		LEFT JOIN VTSchoolSectors vtss ON vtm.AcademicYearId = vtss.AcademicYearId AND vtm.VTId = vtss.VTId AND vtss.IsActive = 1
		WHERE vtm.AcademicYearId = AcademicYearId
		AND vtm.VTPId = VTPId
		AND vtm.VCId = VCId
		AND vtss.VTId IS NULL;
	END;
    ELSEIF(RoleId = 'VC') THEN
    BEGIN
		SELECT vt.VTId AS Id, vt.FullName AS Name, vtm.VTPId, vtm.VCId, vt.Email AS Description,0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VCTrainersMap vtm
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
		LEFT JOIN VTSchoolSectors vtss ON vtm.AcademicYearId = vtss.AcademicYearId AND vtm.VTId = vtss.VTId AND vtss.IsActive = 1
		WHERE vtm.AcademicYearId = AcademicYearId
		AND vtm.VTPId = VTPId
		AND vtm.VCId = UserId
		AND vtss.VTId IS NULL;
	END;
    ELSEIF(RoleId = 'VT') THEN
    BEGIN
		SELECT vt.VTId AS Id, vt.FullName AS Name, vtm.VTPId, vtm.VCId, vt.Email AS Description,0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VCTrainersMap vtm
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
		LEFT JOIN VTSchoolSectors vtss ON vtm.AcademicYearId = vtss.AcademicYearId AND vtm.VTId = vtss.VTId AND vtss.IsActive = 1
		WHERE vtm.AcademicYearId = AcademicYearId
		AND vtm.VTPId = VTPId
		AND vtm.VCId = VCId
		AND vtss.VTId IS NULL;	
	END;
    ELSEIF(RoleId = 'HM') THEN
    BEGIN
	    SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, vt.Email AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM HeadMasters hm
		INNER JOIN HMSchoolsMap hmm ON hm.HMId = hmm.HMId AND hmm.IsActive =1
		INNER JOIN SchoolVTPSectors svs ON hmm.AcademicYearId = svs.AcademicYearId AND hmm.SchoolId = svs.SchoolId AND svs.IsActive =1
		INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive =1
		INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1
		INNER JOIN VCTrainersMap vtm ON vcss.AcademicYearId = vtm.AcademicYearId AND  vcss.VCId = vtm.VCId AND vtm.IsActive = 1
		INNER JOIN Schools sc ON svs.SchoolId = sc.SchoolId AND sc.IsActive = 1
		INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
		WHERE hm.IsActive = 1
		AND hmm.AcademicYearId = AcademicYearId 
		AND hm.HMId = UserId
        AND vtm.VTPId = VTPId
        And vc.VCId =VCId
        And sc.SchoolId= SchoolId;
	END;
    END IF;
    
    # CALL GetVTByAYAndVTPIdVCId ('ADM', 'fac71e7e-6661-4691-9e20-842a92948958', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '1418bec9-d5a4-4c37-ab42-17d4d13ac159');
    # CALL GetVTByAYAndVTPIdVCId ('VC', '7565921d-753e-4502-8982-dd2a182cc48e', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL);
    # CALL GetVTByAYAndVTPIdVCId ('VT', 'ad9ec0ed-9021-4598-92fe-586907f96612', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '1418bec9-d5a4-4c37-ab42-17d4d13ac159');
    # CALL GetVTByAYAndVTPIdVCId ('HM', '765d2f73-a4be-430a-9cec-692116d7aeb3', 'bb46d443-08ac-43d3-b31a-8b640be6be6f', '86847cbc-9447-4495-b6db-78e7e8bb23ad');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTByAYIdAndVTPIdVCId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVTByAYIdAndVTPIdVCId`(
	IN AcademicYearId VARCHAR(36),
	IN VTPId VARCHAR(36),
    IN VCId VARCHAR(36)
)
BEGIN 
	SELECT vt.VTId AS Id, vt.FullName AS Name, '' AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
	FROM VCTrainersMap vtm
	INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1   
	WHERE vtm.IsActive = 1 AND vtm.DateOfResignation IS NULL 
		AND vtm.AcademicYearId = AcademicYearId	AND vtm.VTPId = VTPId AND vtm.VCId = VCId;
 
    # CALL GetVTByAYIdAndVTPIdVCId ('bb46d443-08ac-43d3-b31a-8b640be6be6f', '0ad92e76-96fc-49d6-9592-631b4caa3292', '9a455d83-c97f-42bf-a372-d417f3a989f6');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTByHMId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTByHMId`(
	IN AcademicYearId VARCHAR(36),
	IN HMId VARCHAR(36),
    IN VCId VARCHAR(36)
)
BEGIN	
    SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, vt.Email AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
	FROM HeadMasters hm
	INNER JOIN HMSchoolsMap hmm ON hm.HMId = hmm.HMId AND hmm.IsActive =1
	INNER JOIN SchoolVTPSectors svs ON hmm.AcademicYearId = svs.AcademicYearId AND hmm.SchoolId = svs.SchoolId AND svs.IsActive =1
	INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive =1
    INNER JOIN VocationalCoordinators vc ON vcss.VCId = vc.VCId AND vc.IsActive = 1
    INNER JOIN VCTrainersMap vtm ON vcss.AcademicYearId = vtm.AcademicYearId AND  vcss.VCId = vtm.VCId AND vtm.IsActive = 1
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
	WHERE hm.IsActive = 1
		AND hmm.AcademicYearId = AcademicYearId 
		AND hm.HMId = HMId
        And vc.VCId =VCId;
        
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTBySchoolId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVTBySchoolId`(
    IN SchoolId VARCHAR(36)
)
BEGIN	
    SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, vt.Email AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
	FROM VTSchoolSectors vtss 
    INNER JOIN VCTrainersMap vtm ON vtss.AcademicYearId = vtm.AcademicYearId AND vtss.VTId = vtm.VTId AND vtm.IsActive = 1
	INNER JOIN Schools sc ON vtss.SchoolId = sc.SchoolId AND sc.IsActive = 1
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
	WHERE vtss.IsActive = 1
        And vtss.SchoolId = SchoolId;
	
    # CALL GetVTBySchoolId ( '62cd3256-36dc-4732-8dc8-d97661387803');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTBySchoolIdHMId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVTBySchoolIdHMId`(
	IN AcademicYearId VARCHAR(36),
	IN HMId VARCHAR(36),
    IN VCId VARCHAR(36),
    IN SchoolId VARCHAR(36)
)
BEGIN	
    SELECT DISTINCT vt.VTId AS Id, vt.FullName AS Name, vt.Email AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
	FROM HMSchoolsMap hsm
    INNER JOIN VTSchoolSectors vtss ON hsm.AcademicYearId = vtss.AcademicYearId AND hsm.SchoolId = vtss.SchoolId AND vtss.IsActive =1	    
    INNER JOIN VCTrainersMap vtm ON vtss.AcademicYearId = vtm.AcademicYearId AND vtss.VTId = vtm.VTId AND vtm.IsActive = 1
	INNER JOIN Schools sc ON vtss.SchoolId = sc.SchoolId AND sc.IsActive = 1
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
	WHERE vtss.IsActive = 1
		AND vtss.AcademicYearId = AcademicYearId 
		AND hsm.HMId = HMId
        And vtm.VCId = VCId
        And vtss.SchoolId = SchoolId;
	
    # CALL GetVTBySchoolIdHMId ('bb46d443-08ac-43d3-b31a-8b640be6be6f', 'fcefa07d-4ced-4a02-8ada-591e8d57422a', 'fdd84d6b-1745-495a-b640-c27bf00b5c17', '62cd3256-36dc-4732-8dc8-d97661387803');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTClassesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVTClassesByCriteria`(
	IN academicYearId VARCHAR(36),
    IN vtpId VARCHAR(36),
    IN vcId VARCHAR(36),
    IN vtId VARCHAR(36),
    IN sectorId VARCHAR(36),
    IN jobRoleId VARCHAR(36),
    IN schoolId VARCHAR(36),
    IN classId VARCHAR(36),
    IN hmId VARCHAR(36),
	IN status BIT,
	IN isRollover BIT,
    IN name  VARCHAR(100), 
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT    
	)
BEGIN
	DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = pageIndex * pageSize;

	IF(hmId IS NOT NULL) THEN
	BEGIN
		SELECT hsm.SchoolId INTO schoolId 
        FROM HMSchoolsMap hsm
        INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive	= 1                
        WHERE hsm.AcademicYearId = academicYearId AND hsm.HMId = hmId AND hsm.IsActive = 1;
	END;
    END IF;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	SELECT r.Code INTO @roleName
	FROM AccountRoles ar 
	INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
	INNER JOIN Roles r ON ar.RoleId = r.RoleId
	WHERE a.AccountId = userId;
      
	SELECT DISTINCT vtc.VTClassId, ay.YearName AS AcademicYear, vtp.VTPShortName AS VTPName, vc.FullName AS VCName, 
		IFNULL(vt.FullName, '') AS VTName, vt.Email AS VTEmailId, s.SchoolName, 
		s.UDISE, sc.Name AS ClassName, GROUP_CONCAT(DISTINCT sec.Name ORDER BY sec.Name) AS SectionName, vtc.IsAYRollover, vtc.IsActive, COUNT(*) OVER() AS TotalRows
	FROM VTClasses vtc
	INNER JOIN VTSchoolSectors vss ON vtc.AcademicYearId = vss.AcademicYearId AND vtc.SchoolId = vss.SchoolId AND vtc.VTId = vss.VTId AND vss.IsActive = 1
	INNER JOIN AcademicYears ay ON vtc.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1 
	INNER JOIN Schools s ON vtc.SchoolId = s.SchoolId AND s.IsActive = 1
	INNER JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId AND sc.IsActive = 1
	INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
    INNER JOIN VCTrainersMap vtm ON vtc.AcademicYearId = vtm.AcademicYearId AND vtc.VTId = vtm.VTId AND vtm.DateOfResignation IS NULL AND vtm.IsActive = 1
    INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.DateOfResignation IS NULL AND vcm.IsActive = 1 
    INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.DateOfResignation IS NULL AND vtpm.IsActive = 1 
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1        
    INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1        
	LEFT JOIN VTClassSections vcs ON vtc.VTClassId = vcs.VTClassId 
    LEFT JOIN Sections sec ON vcs.SectionId = sec.SectionId  
    WHERE vt.Email IS NOT NULL AND vtc.AcademicYearId = academicYearId		
		AND (vtpId IS NULL OR vtm.VTPId = vtpId)
        AND (vcId IS NULL OR vtm.VCId = vcId)
        AND (vtId IS NULL OR vss.VTId = vtId)
        AND (sectorId IS NULL OR vss.SectorId = sectorId)
        AND (jobRoleId IS NULL OR vss.JobRoleId = jobRoleId)
        AND (schoolId IS NULL OR vss.SchoolId = schoolId)		
        AND (classId IS NULL OR vtc.ClassId = classId)		
        AND (status IS NULL OR vtc.IsActive = status)	
		AND (name IS NULL OR (vtp.VTPName LIKE CONCAT('%', name, '%') OR vc.FullName LIKE CONCAT('%', name, '%') OR vt.FullName LIKE CONCAT('%', name, '%') 
			OR se.SectorName LIKE CONCAT('%', name, '%') OR s.SchoolName LIKE CONCAT('%', name, '%') OR s.UDISE LIKE CONCAT('%', name, '%')))    	
	GROUP BY vtc.VTClassId
    ORDER BY s.SchoolName, vt.FullName, ay.YearName DESC, sc.DisplayOrder 
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    # 2021-2022: fda59df6-729e-493c-8d48-fc65b90008fe		2021-2022: bb46d443-08ac-43d3-b31a-8b640be6be6f
    # CALL GetVTClassesByCriteria ('fda59df6-729e-493c-8d48-fc65b90008fe', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, NULL, 0, 25);    
    # CALL GetVTClassesByCriteria ('bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, NULL, 0, 500);    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTCourseModuleDailyTrackingByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTCourseModuleDailyTrackingByCriteria`(	
    IN UserId VARCHAR(150),    
    IN FromDate DateTime,
    IN ToDate DateTime,    
    IN VTId VARCHAR(36),
    IN SchoolId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN SectionId VARCHAR(36)    
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleCode, @accountId
        FROM AccountRoles ar
        INNER JOIN Accounts a ON ar.AccountId = a.AccountId
        INNER JOIN Roles r ON ar.RoleId = r.RoleId
        WHERE a.LoginId = UserId;
        
        IF(@roleCode <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
		SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName, vc.FullName, vt.FullName, vdr.ReportingDate DESC) AS SrNo,
			vtp.VTPShortName AS VTPName
			,vc.FullName AS VCName
			,vc.Mobile AS VCMobile
			,vc.EmailId AS VCEmail
			,vt.FullName AS VTName
			,vt.Mobile AS VTMobile
			,vt.Email AS VTEmail				
			,dvg.Name AS VTGender		
			,hm.FullName AS HMName
			,hm.Mobile AS HMMobile
			,hm.Email AS HMEmail
			,se.SectorName
			,jr.JobRoleName
			,s.SchoolName
			,s.UDISE
			,sc.Name AS ClassName
			,sec.Name AS SectionName		
			,d.DistrictName
			,b.BlockName				
			,vdr.ReportingDate
			,DAYNAME(vdr.ReportingDate) AS ReportingDay
			,'' AS ActivityType
			,dvc.Name AS ClassType
			,tve.ClassTime AS ClassDuration
			,dvm.Name AS ModulesTaught
			,cm.UnitName AS UnitsTaught
			,cus.SessionName AS SessionTaught
			,tve.ClassPicture AS ClassPictureUrl
			,tve.LessonPlanPicture AS LessonPlanPictureUrl
			,COUNT(DISTINCT IF(std.Gender = '207', std.StudentId, NULL)) AS EnrollmentBoys
			,COUNT(DISTINCT IF(std.Gender = '208', std.StudentId, NULL)) AS EnrollmentGirls
			,COUNT(DISTINCT std.StudentId) AS EnrollmentTotal
			,COUNT(DISTINCT IF(vsa.IsPresent = 1 AND stda.Gender = '207', stda.StudentId, NULL)) AS AttendanceBoys
			,COUNT(DISTINCT IF(vsa.IsPresent = 1 AND stda.Gender = '208', stda.StudentId, NULL)) AS AttendanceGirls
			,COUNT(DISTINCT IF(vsa.IsPresent = 1, vsa.StudentId, NULL)) AS AttendanceTotal									
		FROM VTRTeachingVocationalEducations tve
        INNER JOIN VTRUnitSessionsTaught ust ON tve.VTRTeachingVocationalEducationId = ust.VTRTeachingVocationalEducationId
        INNER JOIN VTDailyReporting vdr ON vdr.VTDailyReportingId = tve.VTDailyReportingId AND vdr.ReportType = '37'        
        INNER JOIN CourseModules cm ON ust.UnitId = cm.CourseModuleId
        INNER JOIN CourseUnitSessions cus ON ust.UnitId = cus.CourseModuleId AND ust.SessionId = cus.CourseUnitSessionId        
        INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
        INNER JOIN StudentClassMapping scm ON vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1
        INNER JOIN StudentClasses std ON scm.StudentId = std.StudentId AND std.IsActive = 1
        INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1
        INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId
        INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId
        INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
        INNER JOIN Districts d ON s.DistrictCode = d.DistrictCode
        INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
        INNER JOIN SchoolClasses sc ON tve.ClassTaughtId = sc.ClassId
        INNER JOIN Sections sec ON tve.SectionTaughtId = sec.SectionId
        INNER JOIN DataValues dvg ON vt.Gender = dvg.DataValueId AND dvg.DataTypeId = 'Gender'        
        INNER JOIN DataValues dvc ON tve.ClassTypeId = dvc.DataValueId AND dvc.DataTypeId = 'VTClassType'        
        INNER JOIN DataValues dvm ON ust.ModuleId = dvm.DataValueId AND dvm.DataTypeId = 'CourseModule'                
		LEFT JOIN VTRStudentAttendances vsa ON tve.VTRTeachingVocationalEducationId = vsa.VTRTeachingVocationalEducationId AND std.StudentId = vsa.StudentId
        LEFT JOIN StudentClasses stda ON vsa.StudentId = stda.StudentId AND stda.IsActive = 1 
        LEFT JOIN HeadMasters hm ON vss.SchoolId = hm.SchoolId
        LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND se.IsActive = 1                        
        LEFT JOIN Blocks b ON s.BlockId = b.BlockId
        WHERE DATE(vdr.ReportingDate) BETWEEN DATE(FromDate) AND DATE(ToDate)
            AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (VTId IS NULL OR vt.VTId = VTId)            
            AND (SchoolId IS NULL OR vss.SchoolId = SchoolId)
            AND (ClassId IS NULL OR tve.ClassTaughtId = ClassId)
            AND (SectionId IS NULL OR tve.SectionTaughtId = SectionId)
		GROUP BY vtp.VTPShortName, vc.FullName, vt.FullName, se.SectorName, jr.JobRoleName, s.UDISE, tve.ClassTaughtId, tve.SectionTaughtId, tve.ClassTypeId
		ORDER BY vtp.VTPShortName, vc.FullName, vt.FullName, vdr.ReportingDate DESC;        
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTCourseModuleDailyTrackingByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTCourseModuleDailyTrackingByCriteriaV2`(	
    IN UserId VARCHAR(150),    
    IN FromDate DateTime,
    IN ToDate DateTime,    
    IN VTId VARCHAR(36),
    IN SchoolId VARCHAR(36),
    IN ClassId VARCHAR(36),
    IN SectionId VARCHAR(36)    
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleCode, @accountId
        FROM AccountRoles ar
        INNER JOIN Accounts a ON ar.AccountId = a.AccountId
        INNER JOIN Roles r ON ar.RoleId = r.RoleId
        WHERE a.LoginId = UserId;
        
        IF(@roleCode <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
		SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY vtp.VTPShortName, vc.FullName, vt.FullName, vdr.ReportingDate DESC) AS SrNo,
			vtp.VTPShortName AS VTPName
			,vc.FullName AS VCName
			,vc.Mobile AS VCMobile
			,vc.EmailId AS VCEmail
			,vt.FullName AS VTName
			,vt.Mobile AS VTMobile
			,vt.Email AS VTEmail				
			,dvg.Name AS VTGender		
			,hm.FullName AS HMName
			,hm.Mobile AS HMMobile
			,hm.Email AS HMEmail
			,se.SectorName
			,jr.JobRoleName
			,s.SchoolName
			,s.UDISE
			,sc.Name AS ClassName
			,sec.Name AS SectionName		
			,d.DistrictName
			,b.BlockName				
			,vdr.ReportingDate
			,DAYNAME(vdr.ReportingDate) AS ReportingDay
			,'' AS ActivityType
			,dvc.Name AS ClassType
			,tve.ClassTime AS ClassDuration
			,dvm.Name AS ModulesTaught
			,cm.UnitName AS UnitsTaught
			,cus.SessionName AS SessionTaught
			,tve.ClassPicture AS ClassPictureUrl
			,tve.LessonPlanPicture AS LessonPlanPictureUrl
			,COUNT(DISTINCT IF(std.Gender = '207', std.StudentId, NULL)) AS EnrollmentBoys
			,COUNT(DISTINCT IF(std.Gender = '208', std.StudentId, NULL)) AS EnrollmentGirls
			,COUNT(DISTINCT std.StudentId) AS EnrollmentTotal
			,COUNT(DISTINCT IF(vsa.IsPresent = 1 AND stda.Gender = '207', stda.StudentId, NULL)) AS AttendanceBoys
			,COUNT(DISTINCT IF(vsa.IsPresent = 1 AND stda.Gender = '208', stda.StudentId, NULL)) AS AttendanceGirls
			,COUNT(DISTINCT IF(vsa.IsPresent = 1, vsa.StudentId, NULL)) AS AttendanceTotal									
		FROM VTRTeachingVocationalEducations tve
        INNER JOIN VTRUnitSessionsTaught ust ON tve.VTRTeachingVocationalEducationId = ust.VTRTeachingVocationalEducationId
        INNER JOIN VTDailyReporting vdr ON vdr.VTDailyReportingId = tve.VTDailyReportingId AND vdr.ReportType = '37'        
        INNER JOIN CourseModules cm ON ust.UnitId = cm.CourseModuleId
        INNER JOIN CourseUnitSessions cus ON ust.UnitId = cus.CourseModuleId AND ust.SessionId = cus.CourseUnitSessionId        
        INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId
        INNER JOIN StudentClassMapping scm ON vss.SchoolId = scm.SchoolId AND vss.VTId = scm.VTId AND scm.IsActive = 1
        INNER JOIN StudentClasses std ON scm.StudentId = std.StudentId AND std.IsActive = 1
        INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1
        INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId
        INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId
        INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
        INNER JOIN Districts d ON s.DistrictCode = d.DistrictCode
        INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
        INNER JOIN SchoolClasses sc ON tve.ClassTaughtId = sc.ClassId
        INNER JOIN Sections sec ON tve.SectionTaughtId = sec.SectionId
        INNER JOIN DataValues dvg ON vt.Gender = dvg.DataValueId AND dvg.DataTypeId = 'Gender'        
        INNER JOIN DataValues dvc ON tve.ClassTypeId = dvc.DataValueId AND dvc.DataTypeId = 'VTClassType'        
        INNER JOIN DataValues dvm ON ust.ModuleId = dvm.DataValueId AND dvm.DataTypeId = 'CourseModule'                
		LEFT JOIN VTRStudentAttendances vsa ON tve.VTRTeachingVocationalEducationId = vsa.VTRTeachingVocationalEducationId AND std.StudentId = vsa.StudentId
        LEFT JOIN StudentClasses stda ON vsa.StudentId = stda.StudentId AND stda.IsActive = 1 
        LEFT JOIN HeadMasters hm ON vss.SchoolId = hm.SchoolId
        LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND se.IsActive = 1                        
        LEFT JOIN Blocks b ON s.BlockId = b.BlockId
        WHERE DATE(vdr.ReportingDate) BETWEEN DATE(FromDate) AND DATE(ToDate)
            AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (VTId IS NULL OR vt.VTId = VTId)            
            AND (SchoolId IS NULL OR vss.SchoolId = SchoolId)
            AND (ClassId IS NULL OR tve.ClassTaughtId = ClassId)
            AND (SectionId IS NULL OR tve.SectionTaughtId = SectionId)
		GROUP BY vtp.VTPShortName, vc.FullName, vt.FullName, se.SectorName, jr.JobRoleName, s.UDISE, tve.ClassTaughtId, tve.SectionTaughtId, tve.ClassTypeId
		ORDER BY vtp.VTPShortName, vc.FullName, vt.FullName, vdr.ReportingDate DESC;        
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTDailyAttendanceTrackingByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTDailyAttendanceTrackingByCriteria`(
	IN UserId VARCHAR(150),    
    IN FromDate DateTime,
    IN ToDate DateTime
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
	
    BEGIN
		SET @rowIndex = 0;
        
		SELECT r.Code, a.DistrictId, ar.AccountId INTO @roleCode, @districtId, @accountId
        FROM AccountRoles ar
        INNER JOIN Accounts a ON ar.AccountId = a.AccountId
        INNER JOIN Roles r ON ar.RoleId = r.RoleId
        WHERE a.LoginId = UserId;
        
        IF(@roleCode <> 'DisRP') THEN        
			SET @districtId = NULL;
        END IF;
        
        IF(@roleCode <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
         
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			vt.DateOfJoining AS VTDateOfJoining,
			s.UDISE,
			s.SchoolName,
			se.SectorName,
			dvr.Name AS ReportType,
			v.ReportingDate AS DateOfReport,
			v.CreatedOn AS ActualSubmissionDateTime,
			v.GeoLocation	 
		FROM VTDailyReporting v
		INNER JOIN VTSchoolSectors vss ON v.VTSchoolSectorId = vss.VTSchoolSectorId AND v.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN VocationalTrainers vt ON v.VTId = vt.VTId AND vt.IsActive = 1
		INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId AND vc.IsActive = 1
        INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
        INNER JOIN Sectors se ON vss.SectorId = se.SectorId
        INNER JOIN DataValues dvr ON v.ReportType = dvr.DataValueId AND dvr.DataTypeId = 'VTReportType'
        CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    		
		WHERE (UserId IS NULL OR vt.VCId = @accountId)
			AND CAST(v.ReportingDate AS Date) BETWEEN CAST(FromDate AS Date) AND CAST(ToDate AS Date)
			AND (@districtId IS NULL OR s.DistrictCode = @districtId)
        ORDER BY vtp.VTPName, vc.FullName, vt.FullName, s.SchoolName, se.SectorName, v.ReportingDate; 
        
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    
	
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTDailyAttendanceTrackingByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVTDailyAttendanceTrackingByCriteriaV2`(
	IN AcademicYearId VARCHAR(36),    
    IN VTPId VARCHAR(36), 
    IN VCId VARCHAR(36),    
    IN VTId VARCHAR(36),    
    IN SchoolId VARCHAR(36),    
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
	IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN ClassId VARCHAR(36), 
    IN SchoolManagementId VARCHAR(10),
    IN FromDate DateTime,
    IN ToDate DateTime,
    IN PageIndex INT,
    IN PageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;    
	SET offSetValue = pageIndex * pageSize;
    
    SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DROP TEMPORARY TABLE IF EXISTS tblVTDailyAttendanceDetails;
    DROP TEMPORARY TABLE IF EXISTS tblDistrictsFoNotSubmitted;
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
    CREATE TEMPORARY TABLE tblDistrictsFoNotSubmitted(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
        
        INSERT INTO tblDistrictsFoNotSubmitted
        SELECT * FROM tblDistricts;
	END IF;
	
    BEGIN
		DROP TEMPORARY TABLE IF EXISTS tblVTDailyAttendanceDetails;
		
        CREATE TEMPORARY TABLE tblVTDailyAttendanceDetails AS
		SELECT DISTINCT vdr.VTDailyReportingId, vss.AcademicYearId, vdr.VTSchoolSectorId, vdr.VTId, vdr.ReportingDate, vdr.ReportType, vdr.CreatedOn AS ActualSubmissionDateTime, vdr.GeoLocation
		FROM VTDailyReporting vdr
		INNER JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId AND vdr.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
		WHERE (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (VCId IS NULL OR vtm.VCId = VCId)
			AND (VTId IS NULL OR vtm.VTId = VTId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
			AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)			
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)			
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			AND DATE(vdr.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
			AND DATE(vdr.ReportingDate) BETWEEN DATE(FromDate) AND DATE(ToDate)
		
        UNION
		 
		SELECT UUID() AS VTDailyReportingId, vss.AcademicYearId, vrs.VTSchoolSectorId, vrs.VTId, vrs.ReportingDate, CASE WHEN vrs.IsHoliday = 1 THEN 42 ELSE 41 END AS ReportType, NULL AS ActualSubmissionDateTime, NULL AS GeoLocation
		FROM VTReportSubmissions vrs
		INNER JOIN VTSchoolSectors vss ON vrs.VTSchoolSectorId = vss.VTSchoolSectorId AND vrs.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
		WHERE vss.AcademicYearId = AcademicYearId
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (VCId IS NULL OR vtm.VCId = VCId)
			AND (VTId IS NULL OR vtm.VTId = VTId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
			AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistrictsFoNotSubmitted)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)			
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)			
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			AND DATE(vrs.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
			AND DATE(vrs.ReportingDate) BETWEEN DATE(FromDate) AND DATE(ToDate);
		
		SELECT DISTINCT vds.VTDailyReportingId,
			vtd.VTPName, 
			vtd.VCName, 
			vtd.VCMobile, 
			vtd.VCEmail, 
			vtd.VTName,
			vtd.VTMobile,
			vtd.VTEmail,	
			vtd.VTDateOfJoining,            
			vtd.UDISE,
			vtd.SchoolName,
			vtd.SectorName,
            vtd.JobRoleName,
			dvr.Name AS ReportType,
			vds.ReportingDate AS DateOfReport,            
			vds.ActualSubmissionDateTime,            
			vds.GeoLocation,
			COUNT(*) OVER() AS TotalRows,
			1 AS SrNo
		FROM tblVTDailyAttendanceDetails vds
		INNER JOIN VwVocationalTrainerDetails vtd ON vds.AcademicYearId = vtd.AcademicYearId AND vds.VTSchoolSectorId = vtd.VTSchoolSectorId AND vds.VTId = vtd.VTId
		INNER JOIN DataValues dvr ON vds.ReportType = dvr.DataValueId AND dvr.DataTypeId = 'VTReportType'
		ORDER BY vtd.VTPName, vtd.VCName, vtd.VTName, vds.ReportingDate DESC
		LIMIT offSetValue, pageSize;
	END;
	
    DROP TEMPORARY TABLE IF EXISTS tblVTDailyAttendanceDetails;
    DROP TEMPORARY TABLE IF EXISTS tblDistrictsFoNotSubmitted;
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
	# CALL GetVTDailyAttendanceTrackingByCriteriaV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2023/02/16', '2023/02/16', 0, 1500);    
	# CALL GetVTDailyAttendanceTrackingByCriteriaV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', 'fbeb221f-6371-4bcd-a3fa-270978c193c1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2022/10/01', '2022/10/30', 0, 1500);    
	# CALL GetVTDailyAttendanceTrackingByCriteriaV2 ('bb46d443-08ac-43d3-b31a-8b640be6be6f', 'f1bc35f5-8a4c-4355-8fb1-28c825dc76cc', 'eccf976e-6d53-4a44-9207-de9fc6d4ab12', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2023/02/15', '2023/02/15', 0, 1500);    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTDailyMonthlyTrackingByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVTDailyMonthlyTrackingByCriteria`(
    IN AcademicYearId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN VCId VARCHAR(36),
	IN HMId VARCHAR(36),
    IN VTId VARCHAR(36),
	IN SchoolId VARCHAR(36),
    IN DivisionId VARCHAR(36), 
	IN DistrictId VARCHAR(100),
	IN SectorId VARCHAR(36), 
    IN ReportDate DATE
)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	IF(HMId IS NOT NULL) THEN
	BEGIN
		SELECT hm.SchoolId INTO SchoolId 
        FROM HMSchoolsMap hsm
        INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive	= 1                
        WHERE hsm.AcademicYearId = academicYearId AND hsm.HMId = HMId AND hsm.IsActive = 1;
	END;
    END IF;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
    DROP TEMPORARY TABLE IF EXISTS VTMonthlyViewData;
    
    CREATE TEMPORARY TABLE VTMonthlyViewData    
	SELECT DISTINCT vtss.AcademicYearId, vtss.VTSchoolSectorId, vtm.VTId, vtm.VTPId, vtss.SectorId,
		dvs.Code AS WorkdayType,
		DATE(ReportingDate) AS ReportingDate,
		DAY(ReportingDate) AS ReportingDay
	FROM VTSchoolSectors vtss
	INNER JOIN VCTrainersMap vtm ON vtss.AcademicYearId = vtm.AcademicYearId AND vtss.VTId = vtm.VTId AND vtm.IsActive = 1
	INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1		
	INNER JOIN Schools s ON vtss.SchoolId = s.SchoolId AND s.IsActive = 1		
    LEFT JOIN VTDailyReporting vdr ON vtss.VTSchoolSectorId = vdr.VTSchoolSectorId AND vtss.VTId = vdr.VTId 
		AND DATE(vdr.ReportingDate) BETWEEN DATE_FORMAT(DATE(ReportDate),'%Y-%m-01') AND LAST_DAY(DATE(ReportDate))		
	LEFT JOIN DataValues dvs ON dvs.DataValueId = vdr.ReportType And dvs.DataTypeId = 'VTReportType'        
	WHERE vtss.AcademicYearId = AcademicYearId AND vtss.IsActive = 1         
		AND (VTPId IS NULL OR vtm.VTPId = VTPId)
		AND (VCId IS NULL OR vtm.VCId = VCId)
		AND (SectorId IS NULL OR vtss.SectorId = SectorId)  
        AND (SchoolId IS NULL OR vtss.SchoolId = SchoolId)
        AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
        AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts))
	ORDER BY vdr.VTSchoolSectorId, ReportingDay;

    SELECT ROW_NUMBER() OVER (ORDER BY vt.FullName ASC) AS SrNo,
		vt.FullName AS VTName,
        vt.Email AS VTEmailId,
        vt.Mobile AS VTMobile,
        DATE(vtm.DateOfJoining) AS VTDateOfJoining,        
        DATE(vtm.DateOfResignation) AS VTDateOfResignation,
        CASE WHEN (vtm.DateOfResignation IS NULL AND vtm.IsActive = 1) THEN 'Active'
			 WHEN (vtm.DateOfResignation IS NOT NULL AND vtm.IsActive = 0) THEN 'Inactive' ELSE 'NA' END AS VTStatus,        
        vc.FullName AS VCName,
        vc.EmailId AS VCEmailId,
        vc.Mobile AS VCMobile,
        vtp.VTPShortName AS VTPName,
        se.SectorName,
        jr.JobRoleName,
        DATE_FORMAT(md.ReportingDate, '%b-%Y') AS ReportMonth,
        s.SchoolName,
        s.UDISE,
        dv.DivisionName,
        ds.DistrictName,
		MAX(CASE WHEN ReportingDay = 1 THEN WorkdayType ELSE '' END) AS Day1, 
		MAX(CASE WHEN ReportingDay = 2 THEN WorkdayType ELSE '' END) AS Day2, 
		MAX(CASE WHEN ReportingDay = 3 THEN WorkdayType ELSE '' END) AS Day3, 
		MAX(CASE WHEN ReportingDay = 4 THEN WorkdayType ELSE '' END) AS Day4, 
		MAX(CASE WHEN ReportingDay = 5 THEN WorkdayType ELSE '' END) AS Day5, 
		MAX(CASE WHEN ReportingDay = 6 THEN WorkdayType ELSE '' END) AS Day6, 
		MAX(CASE WHEN ReportingDay = 7 THEN WorkdayType ELSE '' END) AS Day7, 
		MAX(CASE WHEN ReportingDay = 8 THEN WorkdayType ELSE '' END) AS Day8, 
		MAX(CASE WHEN ReportingDay = 9 THEN WorkdayType ELSE '' END) AS Day9, 
		MAX(CASE WHEN ReportingDay = 10 THEN WorkdayType ELSE '' END) AS Day10, 
		MAX(CASE WHEN ReportingDay = 11 THEN WorkdayType ELSE '' END) AS Day11, 
		MAX(CASE WHEN ReportingDay = 12 THEN WorkdayType ELSE '' END) AS Day12, 
		MAX(CASE WHEN ReportingDay = 13 THEN WorkdayType ELSE '' END) AS Day13, 
		MAX(CASE WHEN ReportingDay = 14 THEN WorkdayType ELSE '' END) AS Day14, 
		MAX(CASE WHEN ReportingDay = 15 THEN WorkdayType ELSE '' END) AS Day15, 
		MAX(CASE WHEN ReportingDay = 16 THEN WorkdayType ELSE '' END) AS Day16, 
		MAX(CASE WHEN ReportingDay = 17 THEN WorkdayType ELSE '' END) AS Day17, 
		MAX(CASE WHEN ReportingDay = 18 THEN WorkdayType ELSE '' END) AS Day18, 
		MAX(CASE WHEN ReportingDay = 19 THEN WorkdayType ELSE '' END) AS Day19, 
		MAX(CASE WHEN ReportingDay = 20 THEN WorkdayType ELSE '' END) AS Day20, 
		MAX(CASE WHEN ReportingDay = 21 THEN WorkdayType ELSE '' END) AS Day21, 
		MAX(CASE WHEN ReportingDay = 22 THEN WorkdayType ELSE '' END) AS Day22, 
		MAX(CASE WHEN ReportingDay = 23 THEN WorkdayType ELSE '' END) AS Day23, 
		MAX(CASE WHEN ReportingDay = 24 THEN WorkdayType ELSE '' END) AS Day24, 
		MAX(CASE WHEN ReportingDay = 25 THEN WorkdayType ELSE '' END) AS Day25, 
		MAX(CASE WHEN ReportingDay = 26 THEN WorkdayType ELSE '' END) AS Day26, 
		MAX(CASE WHEN ReportingDay = 27 THEN WorkdayType ELSE '' END) AS Day27, 
		MAX(CASE WHEN ReportingDay = 28 THEN WorkdayType ELSE '' END) AS Day28, 
		MAX(CASE WHEN ReportingDay = 29 THEN WorkdayType ELSE '' END) AS Day29, 
		MAX(CASE WHEN ReportingDay = 30 THEN WorkdayType ELSE '' END) AS Day30, 
		MAX(CASE WHEN ReportingDay = 31 THEN WorkdayType ELSE '' END) AS Day31,
        SUM(CASE WHEN md.WorkdayType = 'W' THEN 1 ELSE 0 END) AS WorkingDays,
		GetNoOfSunday(ReportDate) AS Sundays,		        
        SUM(CASE WHEN md.WorkdayType = 'H' THEN 1 ELSE 0 END) AS Holidays,
        SUM(CASE WHEN md.WorkdayType = 'L' THEN 1 ELSE 0 END) AS Leaves,
		DAYOFMONTH(LAST_DAY(ReportDate)) AS DaysInMonth
	FROM VCTrainersMap vtm
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
    INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vtm.VTPId = vcm.VTPId AND vcm.IsActive = 1
    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
    INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
    INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
    LEFT JOIN VTMonthlyViewData md ON vtm.AcademicYearId = md.AcademicYearId AND vtm.VTId = md.VTId 
	LEFT JOIN VTSchoolSectors vss ON md.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
    LEFT JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
    LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1
    LEFT JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
    LEFT JOIN Divisions dv ON s.DivisionId = dv.DivisionId 
    LEFT JOIN Districts ds ON s.DivisionId = ds.DivisionId AND s.DistrictCode = ds.DistrictCode 
    WHERE vtm.AcademicYearId = AcademicYearId AND vtm.IsActive = 1
	GROUP BY vt.FullName, vt.Email, vt.Mobile, vtm.DateOfJoining, vtm.DateOfResignation, vtm.IsActive, vc.FullName, vc.EmailId, vc.Mobile, vtp.VTPShortName, se.SectorName, jr.JobRoleName, s.SchoolName, s.UDISE, dv.DivisionName, ds.DistrictName
	ORDER BY vtp.VTPShortName, vc.FullName, vt.FullName;
    
	DROP TEMPORARY TABLE IF EXISTS VTMonthlyViewData;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    # CALL GetVTDailyMonthlyTrackingByCriteria ('bb46d443-08ac-43d3-b31a-8b640be6be6f', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2023/01/01');  
	# CALL GetVTDailyMonthlyTrackingByCriteria ('fda59df6-729e-493c-8d48-fc65b90008fe', '8e1a5482-7c1a-45f2-9f98-5547cd871e7c', NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2021/10/01');  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTDailyReportingsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTDailyReportingsByCriteria`(
	IN userId VARCHAR(150),
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    SELECT vdr.VTDailyReportingId, s.SchoolName, se.SectorName, dvr.Name AS ReportType, vdr.ReportingDate, 
		GROUP_CONCAT(wdv.Name) AS WorkTypes, vdr.IsActive
	FROM VTDailyReporting vdr
    INNER JOIN VTSchoolSectors vtss ON vdr.VTSchoolSectorId = vtss.VTSchoolSectorId AND vtss.IsActive = 1
    INNER JOIN Schools s ON vtss.SchoolId = s.SchoolId AND s.IsActive = 1
    INNER JOIN Sectors se ON vtss.SectorId = se.SectorId AND se.IsActive = 1
    INNER JOIN DataValues dvr ON vdr.ReportType = dvr.DataValueId AND dvr.DataTypeId = 'VTReportType'
    INNER JOIN AcademicYears ay ON vtss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1    
    LEFT JOIN VTRWorkingDayTypes vwt ON vdr.VTDailyReportingId = vwt.VTDailyReportingId 
    LEFT JOIN DataValues wdv ON vwt.WorkingTypeId = wdv.DataValueId AND wdv.DataTypeId = 'WorkingDayType'     
	WHERE 
		DATE(vdr.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
		AND vdr.VTId = userId
	GROUP BY vdr.VTDailyReportingId, dvr.Name, vwt.VTDailyReportingId
    ORDER BY s.SchoolName, se.SectorName, vdr.ReportingDate DESC, dvr.Name
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTDailyReportNotSubmittedTrackingByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTDailyReportNotSubmittedTrackingByCriteria`(
	IN UserId VARCHAR(150),    
    IN FromDate DateTime,
    IN ToDate DateTime
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
	
    BEGIN
		SELECT r.Code, a.DistrictId, ar.AccountId INTO @roleCode, @districtId, @accountId
        FROM AccountRoles ar
        INNER JOIN Accounts a ON ar.AccountId = a.AccountId
        INNER JOIN Roles r ON ar.RoleId = r.RoleId
        WHERE a.LoginId = UserId;
        
        IF(@roleCode <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
        IF(@roleCode <> 'DisRP') THEN        
			SET @districtId = NULL;
        END IF;
        
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			DATE(vt.DateOfJoining) AS VTDateOfJoining,
			de.DivisionName,
            d.DistrictName,
            s.BlockName,
		    s.UDISE,
			s.SchoolName,
			se.SectorName,
            DATE(vrs.ReportingDate) AS ReportingDate,
			'Not Submitted' AS ReportingStatus			  
		FROM VTSchoolSectors vss
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1
		INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId AND vc.IsActive = 1
        INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1    		
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
        INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
        INNER JOIN Divisions de ON s.DivisionId = de.DivisionId AND de.IsActive = 1
        INNER JOIN Districts d ON de.DivisionId = d.DivisionId AND s.DistrictCode = d.DistrictCode AND d.IsActive = 1        
        INNER JOIN VTReportSubmissions vrs ON vss.VTSchoolSectorId = vrs.VTSchoolSectorId AND vss.VTId = vrs.VTId AND vrs.IsHoliday = 0      
        CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    		
		WHERE vss.IsActive = 1 
			AND DATE(vrs.ReportingDate) BETWEEN DATE(FromDate) AND DATE(ToDate)
			AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (@districtId IS NULL OR s.DistrictCode = @districtId)
            
        ORDER BY vtp.VTPName, vc.FullName, vt.FullName, s.SchoolName, se.SectorName, ReportingDate; 
        
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTDailyReportNotSubmittedTrackingByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTDailyReportNotSubmittedTrackingByCriteriaV2`(
	IN UserId VARCHAR(150),    
    IN FromDate DateTime,
    IN ToDate DateTime
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
	
    BEGIN
		SELECT r.Code, a.DistrictId, ar.AccountId INTO @roleCode, @districtId, @accountId
        FROM AccountRoles ar
        INNER JOIN Accounts a ON ar.AccountId = a.AccountId
        INNER JOIN Roles r ON ar.RoleId = r.RoleId
        WHERE a.LoginId = UserId;
        
        IF(@roleCode <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
        IF(@roleCode <> 'DisRP') THEN        
			SET @districtId = NULL;
        END IF;
        
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			DATE(vtm.DateOfJoining) AS VTDateOfJoining,
			de.DivisionName,
            d.DistrictName,
            s.BlockName,
		    s.UDISE,
			s.SchoolName,
			se.SectorName,
            DATE(vrs.ReportingDate) AS ReportingDate,
			'Not Submitted' AS ReportingStatus			  
		FROM VTSchoolSectors vss
        INNER JOIN VTReportSubmissions vrs ON vss.VTSchoolSectorId = vrs.VTSchoolSectorId AND vss.VTId = vrs.VTId AND vrs.IsHoliday = 0              
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
        INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
        INNER JOIN Divisions de ON s.DivisionId = de.DivisionId AND de.IsActive = 1
        INNER JOIN Districts d ON de.DivisionId = d.DivisionId AND s.DistrictCode = d.DistrictCode AND d.IsActive = 1        
        LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
        LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1	
        LEFT JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
        LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1		 
        LEFT JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
        LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1		        
        CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    		
		WHERE vss.IsActive = 1 
			AND DATE(vrs.ReportingDate) BETWEEN DATE(FromDate) AND DATE(ToDate)
			AND (UserId IS NULL OR vtm.VCId = @accountId)
			AND (@districtId IS NULL OR s.DistrictCode = @districtId)
        ORDER BY vtp.VTPName, vc.FullName, vt.FullName, s.SchoolName, se.SectorName, ReportingDate; 
        
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
     
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTFieldIndustryVisitConductedsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTFieldIndustryVisitConductedsByCriteria`(
	IN userId VARCHAR(150),
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	SELECT fvc.VTFieldIndustryVisitConductedId, sc.Name AS ClassName, fvc.ReportingDate, fvc.FVOrganisation, fvc.FVContactPersonName, fvc.ApprovalStatus, fvc.ApprovedDate
	FROM VTFieldIndustryVisitConducted fvc
    INNER JOIN VTSchoolSectors vss ON fvc.VTSchoolSectorId = vss.VTSchoolSectorId AND fvc.VTId = vss.VTId AND vss.IsActive = 1
	INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
    INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1	
	INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
    LEFT JOIN SchoolClasses sc ON fvc.ClassTaughtId = sc.ClassId
	WHERE DATE(fvc.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
		AND fvc.VTId = userId 
	ORDER BY fvc.ReportingDate DESC
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTGuestLectureConductedsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTGuestLectureConductedsByCriteria`(
	IN userId VARCHAR(150),
    IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT glc.VTGuestLectureId, sc.Name AS ClassName, glc.ReportingDate, dvg.Name AS GLType, glc.GLTopic, glc.GLName, glc.ApprovalStatus, glc.ApprovedDate
	FROM VTGuestLectureConducted glc
    INNER JOIN VTSchoolSectors vss ON glc.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
    INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
    INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1	
    LEFT JOIN SchoolClasses sc ON glc.ClassTaughtId = sc.ClassId
    LEFT JOIN DataValues dvg ON glc.GLType = dvg.DataValueId
	WHERE DATE(glc.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
		AND glc.VTId = userId
	ORDER BY glc.ReportingDate DESC
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTIssueReportingsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTIssueReportingsByCriteria`(
	IN userId VARCHAR(100),
	IN name VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    SELECT DISTINCT v.VTIssueReportingId AS IssueReportingId, s.SchoolName, se.SectorName, 
		v.IssueReportDate, mi.Name AS MainIssue, si.IssueName AS SubIssue,  
		sit.Name AS StudentType, v.NoOfStudents, dvas.Name AS ApprovalStatus 
	FROM VTIssueReporting v  
    LEFT JOIN VocationalTrainers vt ON v.VTId = vt.VTId AND vt.IsActive = 1
    INNER JOIN VTSchoolSectors vtss ON vt.VTId = vtss.VTId AND vtss.IsActive = 1
    INNER JOIN Schools s ON vtss.SchoolId = s.SchoolId AND s.IsActive = 1
    INNER JOIN Sectors se ON vtss.SectorId = se.SectorId AND se.IsActive = 1    
    LEFT JOIN MainIssues mi ON v.MainIssue = mi.MainIssueId
    LEFT JOIN SubIssues si ON v.SubIssue = si.SubIssueId
    LEFT JOIN DataValues dvc ON v.StudentClass = dvc.DataValueId AND dvc.DataTypeId = 'ClassesAffected'
    LEFT JOIN DataValues sit ON v.StudentType = sit.DataValueId AND sit.DataTypeId = 'StudentType'
    LEFT JOIN DataValues dvas ON v.ApprovalStatus = dvas.DataValueId AND dvas.DataTypeId = 'IssueStatus'
	WHERE (userId IS NULL OR v.VTId = userId)     
		AND (name IS NULL OR (mi.Name LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (mi.Name LIKE CONCAT(charBy, '%')))
    ORDER BY v.IssueReportDate DESC, mi.Name, si.IssueName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTIssueReportingsByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTIssueReportingsByCriteriaV2`(
	IN userId VARCHAR(100),
	IN name VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    SELECT DISTINCT v.VTIssueReportingId AS IssueReportingId, s.SchoolName, se.SectorName, 
		v.IssueReportDate, mi.Name AS MainIssue, si.IssueName AS SubIssue,  
		sit.Name AS StudentType, v.NoOfStudents, dvas.Name AS ApprovalStatus 
	FROM VTIssueReporting v  
    LEFT JOIN VocationalTrainers vt ON v.VTId = vt.VTId AND vt.IsActive = 1
    INNER JOIN VTSchoolSectors vtss ON vt.VTId = vtss.VTId AND vtss.IsActive = 1
    INNER JOIN Schools s ON vtss.SchoolId = s.SchoolId AND s.IsActive = 1
    INNER JOIN Sectors se ON vtss.SectorId = se.SectorId AND se.IsActive = 1    
    LEFT JOIN MainIssues mi ON v.MainIssue = mi.MainIssueId
    LEFT JOIN SubIssues si ON v.SubIssue = si.SubIssueId
    LEFT JOIN DataValues dvc ON v.StudentClass = dvc.DataValueId AND dvc.DataTypeId = 'ClassesAffected'
    LEFT JOIN DataValues sit ON v.StudentType = sit.DataValueId AND sit.DataTypeId = 'StudentType'
    LEFT JOIN DataValues dvas ON v.ApprovalStatus = dvas.DataValueId AND dvas.DataTypeId = 'IssueStatus'
	WHERE (userId IS NULL OR v.VTId = userId)     
		AND (name IS NULL OR (mi.Name LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (mi.Name LIKE CONCAT(charBy, '%')))
    ORDER BY v.IssueReportDate DESC, mi.Name, si.IssueName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTIssueReportsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTIssueReportsByCriteria`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,   
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear, 
			se.SectorName, 
			ph.PhaseName, 
			s.SchoolName, 
			vtp.VTPName, 
			vt.FullName AS VTName, 
			vt.Mobile AS VTMobile, 
			vt.Email AS VTEmail, 
			vir.IssueReportDate, 
			mi.Name AS MainIssue, 
			si.IssueName AS SubIssue, 
			si.IssuePriority,
            vir.StudentClass, 
			vir.Month,             
			dvs.Name AS StudentType, 
			vir.NoOfStudents, 
			vir.IssueDetails,             
			dvi.Name AS ApprovalStatus, 
			vir.ApprovedDate
		FROM VTIssueReporting vir
		INNER JOIN VocationalTrainers vt ON vir.VTId = vt.VTId AND vt.IsActive = 1
		INNER JOIN VTSchoolSectors vss ON vt.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1    
		INNER JOIN VocationalTrainingProviders vtp ON vt.VTPId = vtp.VTPId AND vt.IsActive = 1		
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND vt.IsActive = 1
        INNER JOIN AcademicYears say ON vss.AcademicYearId = say.AcademicYearId AND say.IsActive = 1    
		INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND vt.IsActive = 1
		INNER JOIN MainIssues mi ON vir.MainIssue = mi.MainIssueId AND mi.IsActive = 1
		INNER JOIN SubIssues si ON vir.MainIssue = si.MainIssueId AND vir.SubIssue = si.SubIssueId AND mi.IsActive = 1
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN DataValues dvs ON vir.StudentType = dvs.DataValueId AND dvs.DataTypeId = 'StudentType'
		INNER JOIN DataValues dvi ON vir.ApprovalStatus = dvi.DataValueId AND dvi.DataTypeId = 'IssueStatus'
		INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId 
        CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    
		WHERE ((POSITION(@roleName IN 'VC,VT') = 0 AND vir.VTId IS NOT NULL) OR (@roleName = 'VC' AND vt.VCId = @accountId) OR (@roleName = 'VT' AND vt.VTId = @accountId))
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtp.VTPId = VTPId)
			
			AND (MonthId IS NULL OR MONTH(vir.IssueReportDate) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			ORDER BY ay.YearName, SchoolAllottedYear, ph.PhaseName, vtp.VTPName, se.SectorName, s.SchoolName, vt.FullName;
	END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTIssueReportsByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTIssueReportsByCriteriaV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,   
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear, 
			se.SectorName, 
			ph.PhaseName, 
			CONCAT(s.UDISE, '-', s.SchoolName) AS SchoolName, 
			vtp.VTPName, 
			vt.FullName AS VTName, 
			vt.Mobile AS VTMobile, 
			vt.Email AS VTEmail, 
			vir.IssueReportDate, 
			mi.Name AS MainIssue, 
			si.IssueName AS SubIssue, 
			si.IssuePriority,
            vir.StudentClass, 
			vir.Month,             
			dvs.Name AS StudentType, 
			vir.NoOfStudents, 
			vir.IssueDetails,             
			dvi.Name AS ApprovalStatus, 
			vir.ApprovedDate
		FROM VTIssueReporting vir
        INNER JOIN VCTrainersMap vtm ON vir.AcademicYearId = vtm.AcademicYearId AND vir.VTId = vtm.VTId AND vtm.IsActive = 1
		INNER JOIN VTSchoolSectors vss ON vir.AcademicYearId = vss.AcademicYearId AND vtm.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1    		
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
        INNER JOIN AcademicYears say ON vss.AcademicYearId = say.AcademicYearId AND say.IsActive = 1    
		INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
		INNER JOIN MainIssues mi ON vir.MainIssue = mi.MainIssueId AND mi.IsActive = 1
		INNER JOIN SubIssues si ON vir.MainIssue = si.MainIssueId AND vir.SubIssue = si.SubIssueId AND mi.IsActive = 1
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		INNER JOIN DataValues dvs ON vir.StudentType = dvs.DataValueId AND dvs.DataTypeId = 'StudentType'
		INNER JOIN DataValues dvi ON vir.ApprovalStatus = dvi.DataValueId AND dvi.DataTypeId = 'IssueStatus'
		INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId 
        INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId
        INNER JOIN VTPAcademicYearsMap vtpm ON vtm.AcademicYearId = vtpm.AcademicYearId AND vtm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
        INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId
        CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    
		WHERE DATE(vir.IssueReportDate) BETWEEN ay.StartMonth AND ay.EndMonth
			AND ((POSITION(@roleName IN 'VC,VT') = 0 AND vir.VTId IS NOT NULL) OR (@roleName = 'VC' AND vtm.VCId = @accountId) OR (@roleName = 'VT' AND vtm.VTId = @accountId))
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (MonthId IS NULL OR MONTH(vir.IssueReportDate) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		ORDER BY ay.YearName, SchoolAllottedYear, ph.PhaseName, vtp.VTPName, se.SectorName, s.SchoolName, vt.FullName;
	END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
        
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTMonthlyTeachingPlansByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTMonthlyTeachingPlansByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	
    SELECT v.VTMonthlyTeachingPlanId, sc.Name AS ClassName, v.Month, v.WeekStartDate, v.WeekendDate, v.ModulesPlanned, v.IVPlannedDate, v.IVVCAttend, v.IsActive
	FROM VTMonthlyTeachingPlans v
    LEFT JOIN VTClasses vtc ON v.VTClassId = vtc.VTClassId
    LEFT JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId
	WHERE (name IS NULL OR (v.Month LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (v.Month LIKE CONCAT(charBy, '%')))
	ORDER BY v.Month
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTNotReportedDailyAttendances` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTNotReportedDailyAttendances`(
	IN startDate DATETIME,
	IN endDate DATETIME	
	)
BEGIN	 
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY vc.FullName, vt.FullName) AS SrNo,
		vc.FullName AS VCName, vt.FullName AS VTName, vt.Email AS VTEmailId, vt.Mobile AS VTMobile,
		MIN(vda.ReportingDate) AS FromReportDate, MAX(vda.ReportingDate) AS ToReportDate, COUNT(vda.ReportingDate) AS NotReported
	FROM VTReportSubmissions vda
    INNER JOIN VTSchoolSectors vss ON vda.VTSchoolSectorId = vss.VTSchoolSectorId AND vss.IsActive = 1
    INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1
    INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId AND vt.VTPId = vc.VTPId AND vt.IsActive = 1
    
    WHERE vda.ReportingDate BETWEEN startDate AND endDate
    GROUP BY vt.FullName
	ORDER BY vc.FullName, vt.FullName
    LIMIT 3;
	
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTPBillSubmissionStatusReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTPBillSubmissionStatusReport`(
	IN userId VARCHAR(150),
    IN academicYearId VARCHAR(36),
    IN divisionId VARCHAR(36), 
    IN districtId VARCHAR(36), 
    IN sectorId VARCHAR(36), 
    IN jobRoleId VARCHAR(36), 
    IN vtpId VARCHAR(36), 
    IN classId VARCHAR(36)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
	SET @rowIndex = 0;
	
	SELECT DISTINCT  		 
		 (@rowIndex :=@rowIndex + 1) AS SrNo,       
        DATE_FORMAT(now(), "%m-%Y") AS MonthYear,           
		DATE_FORMAT(now(), "%M") AS Month,
		now() AS DateOfSubmissionOfInvoice,
		p.PhaseName AS PhaseName,
		vtp.VTPName AS NameOfVTP,
		'' AS CategoryName,
		'' AS BillsForTheMonthYear,
		CAST(0 AS DECIMAL) AS InvoiceAmountInRs,
		'' AS DocumentsSubmittedRelatedToInvoice,
		'' AS NameOfTheVCWhoSubmittedTheInvoice,
		'' AS Remarks
	FROM VocationalTrainingProviders vtp     
    INNER JOIN SchoolVTPSectors svs ON vtp.VTPId = svs.VTPId
    INNER JOIN Schools s ON svs.SchoolId = s.SchoolId
    INNER JOIN Phases p ON s.PhaseId = p.PhaseId
	CROSS JOIN (SELECT @rowIndex := 0) AS DataRows
	WHERE (academicYearId IS NULL OR vtp.ApprovalYear = academicYearId);

	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTPByAYId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTPByAYId`(
	IN RoleId VARCHAR(15),
    IN UserId VARCHAR(36),
    IN AcademicYearId VARCHAR(36)
)
BEGIN 
	IF(RoleId = 'ADM') THEN
    BEGIN
		SELECT DISTINCT vtp.VTPId AS Id, vtp.VTPName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VTPAcademicYearsMap vtpm
		INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
		WHERE vtpm.IsActive = 1
			AND vtpm.AcademicYearId = AcademicYearId
		ORDER BY vtp.VTPName;
	END;
    ELSEIF(RoleId = 'VC') THEN
    BEGIN
		SELECT DISTINCT vtp.VTPId AS Id, vtp.VTPName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VTPAcademicYearsMap vtpm
        INNER JOIN VTPCoordinatorsMap vcm ON vtpm.AcademicYearId = vcm.AcademicYearId AND vtpm.VTPId = vcm.VTPId AND vcm.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
		WHERE vtpm.IsActive = 1
			AND vtpm.AcademicYearId = AcademicYearId
            AND vcm.VCId = UserId
		ORDER BY vtp.VTPName;
	END;
    ELSEIF(RoleId = 'VT') THEN
    BEGIN
		SELECT DISTINCT vtp.VTPId AS Id, vtp.VTPName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM VTPAcademicYearsMap vtpm
        INNER JOIN VTPCoordinatorsMap vcm ON vtpm.AcademicYearId = vcm.AcademicYearId AND vtpm.VTPId = vcm.VTPId AND vcm.IsActive = 1
        INNER JOIN VCTrainersMap vtm ON vcm.AcademicYearId = vtm.AcademicYearId AND vcm.VTPId = vtm.VTPId AND vcm.VCId = vtm.VCId AND vtm.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
		WHERE vtpm.IsActive = 1
			AND vtpm.AcademicYearId = AcademicYearId
            AND vtm.VTId = UserId
		ORDER BY vtp.VTPName;
	END;
    ELSEIF(RoleId = 'HM') THEN
    BEGIN
		SELECT DISTINCT vtp.VTPId AS Id, vtp.VTPName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM SchoolVTPSectors svs
        INNER JOIN HMSchoolsMap hsm ON svs.AcademicYearId = hsm.AcademicYearId AND svs.SchoolId = hsm.SchoolId AND hsm.IsActive = 1
        INNER JOIN VTPAcademicYearsMap vtpm ON svs.AcademicYearId = vtpm.AcademicYearId AND svs.VTPId = vtpm.VTPId AND vtpm.IsActive = 1        
		INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
		WHERE svs.IsActive = 1
			AND vtpm.AcademicYearId = AcademicYearId
            AND hsm.HMId = UserId
		ORDER BY vtp.VTPName;
	END;
    ELSEIF(POSITION(RoleId IN 'Roles: DisEO, DisRP, DivEO, BRP') > 0) THEN		
    BEGIN
		SELECT DISTINCT vtp.VTPId AS Id, vtp.VTPName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
		FROM SchoolVTPSectors svs
        INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
        INNER JOIN AccountWorkLocations awl ON s.StateCode = awl.StateCode AND s.DivisionId = awl.DivisionId AND s.DistrictCode = awl.DistrictId AND awl.IsActive = 1
        INNER JOIN VTPAcademicYearsMap vtpm ON svs.AcademicYearId = vtpm.AcademicYearId AND svs.VTPId = vtpm.VTPId AND vtpm.IsActive = 1        
		INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
		WHERE svs.IsActive = 1
			AND vtpm.AcademicYearId = AcademicYearId
            AND awl.AccountId = UserId
		ORDER BY vtp.VTPName;             
	END;
    END IF;
    
    
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTPByAYIdSectorId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `GetVTPByAYIdSectorId`(
	IN AcademicYearId VARCHAR(36),
	IN SectorId VARCHAR(36)
)
BEGIN	
	SELECT DISTINCT vtp.VTPId AS Id, vtp.VTPName AS Name, "" AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
	FROM VTPSectors vs
    INNER JOIN SchoolVTPSectors svs ON vs.AcademicYearId = svs.AcademicYearId AND vs.SectorId = svs.SectorId AND svs.IsActive = 1
    INNER JOIN VTPAcademicYearsMap vtpm ON svs.AcademicYearId = vtpm.AcademicYearId AND svs.VTPId = vtpm.VTPId AND vtpm.DateOfResignation IS NULL AND vtpm.IsActive = 1 
    INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1 
	WHERE vs.IsActive = 1 
		AND vs.AcademicYearId = academicYearId AND vs.SectorId = SectorId;
        
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTPByHMId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTPByHMId`(
	IN AcademicYearId VARCHAR(36),
	IN HMId VARCHAR(36)
)
BEGIN	
    SELECT DISTINCT svs.VTPId AS Id, vtp.VTPShortName AS Name, vtp.VTPName AS Description, 0 AS IsSelected, 0 AS IsDisabled, 1 AS SequenceNo
	FROM HeadMasters hm
	INNER JOIN HMSchoolsMap hmm ON hm.HMId = hmm.HMId AND hmm.IsActive =1
	INNER JOIN SchoolVTPSectors svs ON hmm.AcademicYearId = svs.AcademicYearId AND hmm.SchoolId = svs.SchoolId AND svs.IsActive =1
	INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive =1
    INNER JOIN VocationalTrainingProviders vtp ON svs.VTPId = vtp.VTPId AND vtp.IsActive = 1
	WHERE hm.IsActive = 1
		AND hmm.AcademicYearId = AcademicYearId 
		AND hm.HMId = HMId;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTPMonthlyBillSubmissionStatusByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTPMonthlyBillSubmissionStatusByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    SELECT v.VTPMonthlyBillSubmissionStatusId, vc.FullName AS VCName, v.Month, v.DateSubmission, v.Incorrect, v.IncorrectDetails, v.Final, v.ApprovedPMU, v.Amount, v.DiaryentryDone, v.DiaryentryNumber, v.Details, v.IsActive
	FROM VTPMonthlyBillSubmissionStatus v
    LEFT JOIN VocationalCoordinators vc ON v.VCId = vc.VCId
	WHERE (name IS NULL OR (v.Month LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (v.Month LIKE CONCAT(charBy, '%')))
	ORDER BY v.Month
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTPMonthlyTrackingByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTPMonthlyTrackingByCriteria`(
    IN AcademicYearId VARCHAR(36),
    IN VTPId VARCHAR(36),
    IN VCId VARCHAR(36),
	IN HMId VARCHAR(36),
    IN VTId VARCHAR(36),
	IN SchoolId VARCHAR(36),
    IN DivisionId VARCHAR(36), 
	IN DistrictId VARCHAR(100),
	IN SectorId VARCHAR(36),
	IN PageIndex INT,
    IN PageSize INT
)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;    
	SET offSetValue = pageIndex * pageSize;
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
	IF(HMId IS NOT NULL) THEN
	BEGIN
		SELECT hm.SchoolId INTO SchoolId 
        FROM HMSchoolsMap hsm
        INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive	= 1                
        WHERE hsm.AcademicYearId = academicYearId AND hsm.HMId = HMId AND hsm.IsActive = 1;
	END;
    END IF;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY vtp.VTPId ASC) AS SrNo, 		
        vtp.VTPShortName AS VTPName,
		s.UDISE, 
		s.SchoolName, 
		ds.DistrictName, 
		'1' AS Block, 
		'1' AS Village, 
		se.SectorName, 
		'1' AS SubjectCode , 
		'1' AS JobRoleStd9thWithQPCode , 
		'1' AS JobRoleStd10thWithQPCode , 
		'1' AS JobRoleStd11thWithQPCode , 
		'1' AS JobRoleStd12thWithQPCode  , 
		vc.FullName AS VCName, 
		vc.EmailId AS VCEmailId, 
		vt.FullName AS VTName, 
		vt.Email AS VTEmailId, 
		vt.Mobile AS VTMobile, 
		vt.Gender AS VTGender,
		DATE(vtm.DateOfJoining) AS VTDateOfJoining,
        
		hm.FullName AS HMName , 
		hm.Mobile AS HMMobile, 
		'1' AS NoOfVisitsByVCInReportingMonth, 
		'1' AS TotalNoOfVisitsByVCInAY, 
		'1' AS StudentEnrollment9thGirls, 
		'1' AS StudentEnrollment9thBoys, 
		'1' AS StudentEnrollment9thTotal, 
		'1' AS StudentEnrollment10thGirls, 
		'1' AS StudentEnrollment10thBoys, 
		'1' AS StudentEnrollment10thTotal, 
		'1' AS StudentEnrollment11thGirls, 
		'1' AS StudentEnrollment11thBoys, 
		'1' AS StudentEnrollment11thTotal, 
		'1' AS StudentEnrollment12thGirls, 
		'1' AS StudentEnrollment12thBoys, 
		'1' AS StudentEnrollment12thTotal, 
		'1' AS StudentsDropped9InReportingMonth, 
		'1' AS StudentsDropped10InReportingMonth, 
		'1' AS StudentsDropped11InReportingMonth, 
		'1' AS StudentsDropped12InReportingMonth, 
		'1' AS GL9thReportingMonth, 
		'1' AS GL9thTotalInAY, 
		'1' AS GL10thReportingMonth, 
		'1' AS GL10thTotalInAY, 
		'1' AS GL11thReportingMonth, 
		'1' AS GL11thTotalInAY, 
		'1' AS GL12thReportingMonth, 
		'1' AS GL12thTotalInAY, 
		'1' AS FV9thReportingMonth, 
		'1' AS FV9thTotalInAY, 
		'1' AS FV10thReportingMonth, 
		'1' AS FV10thTotalInAY, 
		'1' AS FV11thReportingMonth, 
		'1' AS FV11thTotalInAY, 
		'1' AS FV12thReportingMonth, 
		'1' AS FV12thTotalInAY, 
		'1' AS Student9thAttendanceInPerc,
		'1' AS Student10thAttendanceInPerc,
		'1' AS Student11thAttendanceInPerc,
		'1' AS Student12thAttendanceInPerc,
		'1' AS Remark,
        COUNT(*) OVER() AS TotalRows
	FROM VTSchoolSectors vtss
    INNER JOIN VCTrainersMap vtm ON vtss.AcademicYearId = vtm.AcademicYearId AND vtss.VTId = vtm.VTId AND vtm.IsActive = 1
    INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VTPId = vcm.VTPId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
    INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
    INNER JOIN HMSchoolsMap hsm ON vtss.AcademicYearId = hsm.AcademicYearId AND vtss.SchoolId = hsm.SchoolId AND hsm.IsActive = 1
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
    INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1
    INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive = 1
    INNER JOIN Schools s ON vtss.SchoolId = s.SchoolId AND s.IsActive = 1    
    INNER JOIN Sectors se ON vtss.SectorId = se.SectorId AND se.IsActive = 1 
    INNER JOIN Districts ds ON s.DistrictCode = ds.DistrictCode AND ds.IsActive = 1    
    INNER JOIN AcademicYears ay ON vtss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
    WHERE vtss.AcademicYearId = AcademicYearId
		AND (VTPId IS NULL OR vtm.VTPId = VTPId)
        AND (VCId IS NULL OR vtm.VCId = VCId)
        AND (VTId IS NULL OR vtm.VTId = VTId)
        AND (SchoolId IS NULL OR vtss.SchoolId = SchoolId)
        AND (SectorId IS NULL OR vtss.SectorId = SectorId)
        AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
        AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts))
	ORDER BY vtp.VTPShortName
    LIMIT offSetValue, pageSize;
    
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTPracticalAssessmentsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTPracticalAssessmentsByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	
    SELECT v.VTPracticalAssessmentId, sc.Name AS ClassName, v.AssessmentDate, v.BoysPresent, v.GirlsPresent, v.AssessorName, v.AssessorMobile, v.AssessorEmail, v.AssessorQualification, v.AssessorTimeReached, v.AssessorIdCheck, v.AssessorIdType, v.AssessorSSCLetter, v.AssessorBehaviour, v.AssessorDemands, v.AssessorBehaiourFormality, v.AssessorGroupPhoto, v.VCPMUNameVisit, v.RemarksDetails, v.IsActive
	FROM VTPracticalAssessments v
    LEFT JOIN VTClasses vtc ON v.VTClassId = vtc.VTClassId
    LEFT JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId
	WHERE (name IS NULL OR (v.AssessorName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (v.AssessorName LIKE CONCAT(charBy, '%')))
	ORDER BY v.AssessorName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTPSectorJobRolesByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTPSectorJobRolesByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	
	SELECT v.VTPSectorJobRoleId, vtp.VTPName, s.SectorName, jr.JobRoleName, v.VTPSectorJobRoleName, v.IsActive
	FROM VTPSectorJobRoles v
    LEFT JOIN VocationalTrainingProviders vtp ON v.VTPId = vtp.VTPId
    LEFT JOIN Sectors s ON v.SectorId = s.SectorId
    LEFT JOIN JobRoles jr ON v.JobRoleId = jr.JobRoleId
	WHERE (name IS NULL OR (v.CreatedBy LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (v.CreatedBy LIKE CONCAT(charBy, '%')))
	ORDER BY v.CreatedBy
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTPSectorsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTPSectorsByCriteria`(
	IN academicYearId VARCHAR(36),
    IN vtpId VARCHAR(36),
    IN sectorId VARCHAR(36),
    IN status BIT,
	IN name VARCHAR(100),
	IN isRollover BIT,
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT    
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = pageIndex * pageSize;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    IF(academicYearId IS NULL) THEN 
		SELECT ay.AcademicYearId INTO academicYearId FROM AcademicYears ay WHERE ay.IsCurrentAcademicYear = 1;         
	END IF;

    SELECT DISTINCT vs.VTPSectorId, ay.YearName AS AcademicYear, vtp.VTPName, vs.SectorId, s.SectorName, 
		vs.IsActive, vs.IsAYRollover, COUNT(*) OVER() AS TotalRows
	FROM VTPSectors vs
    INNER JOIN VTPAcademicYearsMap vay ON vs.AcademicYearId = vay.AcademicYearId AND vs.VTPId = vay.VTPId AND vay.IsActive = 1
    INNER JOIN AcademicYears ay ON vs.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1
    INNER JOIN Sectors s ON vs.SectorId = s.SectorId AND ay.IsActive = 1
    LEFT JOIN VocationalTrainingProviders vtp ON vay.VTPId = vtp.VTPId 
	WHERE vs.AcademicYearId = academicYearId
		AND (vtpId IS NULL OR vs.VTPId = vtpId)
        AND (sectorId IS NULL OR vs.SectorId = sectorId)
        AND (status IS NULL OR vs.IsActive = status)
        AND (name IS NULL OR (vtp.VTPName LIKE CONCAT(name, '%') OR s.SectorName LIKE CONCAT(name, '%')))
        AND (isRollover = FALSE OR vs.IsAYRollover = TRUE)
		AND ((charBy IS NULL OR charBy = 'All') OR (vtp.VTPName LIKE CONCAT(charBy, '%')))
	ORDER BY ay.YearName, vtp.VTPName, s.SectorName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTReportingAttendanceReportsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTReportingAttendanceReportsByCriteria`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;

		DROP TEMPORARY TABLE IF EXISTS VTDailyReportingData;
		
		CREATE TEMPORARY TABLE VTDailyReportingData   
        SELECT DISTINCT ta.VTPId, ta.VTId, ta.VTSchoolSectorId,
			DATE_FORMAT(CAST(ta.ReportingMonth AS DATE), "%b-%Y") AS MonthYear,         
			DAYOFMONTH(LAST_DAY(CAST(ta.ReportingMonth AS DATE))) AS TotalDays, 			
			(DAY(LAST_DAY(ta.ReportingMonth)) - GetNoOfSunday(ta.ReportingMonth)) AS WorkingDays,
			GetNoOfSunday(CAST(ta.ReportingMonth AS DATE)) AS NoOfSundays,		
			0 AS GovtHolidays, 
			0 AS ObservationDays,
			ta.WorkingDays AS ActualWorkingDay,
			ta.VTReporting AS VTWorkingDays, 
			ta.Holiday AS VTHolidays, 
			ta.ObservationDay AS VTObservationDays, 
			ta.OnLeave AS VTLeaveDays, 
			(ta.WorkingDays - ta.Holiday - ta.OnLeave) AS TeachingDays,
			0 AS NonTeachingDays,
			(ta.VTReporting + ta.ObservationDay + ta.Holiday + ta.OnLeave) AS VTReportSubmitted
		FROM DsTrainerAttendances AS ta
		INNER JOIN VTSchoolSectors vss ON ta.VTSchoolSectorId = vss.VTSchoolSectorId
		INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId		
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
		WHERE (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)             
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR ta.VTPId = VTPId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (MonthId IS NULL OR MONTH(ta.ReportingMonth) = CAST(MonthId AS UNSIGNED)) 
			
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)	                            		 
		GROUP BY ta.VTPId, ta.VTId, ta.VTSchoolSectorId, ta.ReportingMonth;
 
		SELECT DISTINCT
			ROW_NUMBER() OVER (ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName) AS SrNo, 			
			vdr.VTId,
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear, 
			ph.PhaseName, 
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			vt.DateOfJoining AS VTDateOfJoining,
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
			d.DivisionName,
			ds.DistrictName,
			s.BlockName,
			s.UDISE,
			s.SchoolName,
			se.SectorName,
			vdr.MonthYear,         
			vdr.TotalDays, 			
            vdr.WorkingDays,
			vdr.NoOfSundays,		
			vdr.GovtHolidays, 
			vdr.ObservationDays,
			IF(vdr.VTWorkingDays < 0, vdr.ActualWorkingDay, vdr.VTWorkingDays) AS VTWorkingDays, 
			vdr.VTHolidays, 
			vdr.VTObservationDays, 
			vdr.VTLeaveDays, 
			IF(vdr.TeachingDays < 0, vdr.ActualWorkingDay, vdr.TeachingDays) AS TeachingDays,
			vdr.NonTeachingDays,
			vdr.VTReportSubmitted
		FROM VTDailyReportingData vdr
		LEFT JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId AND vdr.VTId = vss.VTId
        LEFT JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1 
		LEFT JOIN VocationalTrainers vt ON vdr.VTId = vt.VTId AND vt.IsActive = 1
		LEFT JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId 
        LEFT JOIN VocationalTrainingProviders vtp ON vt.VTPId = vtp.VTPId 
		LEFT JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1    
        LEFT JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1 		
		LEFT JOIN Divisions d ON s.DivisionId = d.DivisionId
		LEFT JOIN Districts ds ON s.DistrictCode = ds.DistrictCode
		LEFT JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
        LEFT JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 
		LEFT JOIN Sectors se ON vss.SectorId = se.SectorId
		LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId	
        LEFT JOIN HeadMasters hm ON s.SchoolId = hm.SchoolId AND hm.IsActive = 1     
        ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName;
	
		DROP TEMPORARY TABLE IF EXISTS VTDailyReportingData;	
    END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTReportingAttendanceReportsByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTReportingAttendanceReportsByCriteriaV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10),
    IN hmId VARCHAR(36)
	)
BEGIN
    DECLARE schoolId VARCHAR(36) DEFAULT(NULL);
    
	IF(hmId IS NOT NULL) THEN
	BEGIN
		SELECT hm.SchoolId INTO schoolId FROM HeadMasters hm WHERE hm.HMId = hmId AND hm.IsActive = 1;
	END;
    END IF;
    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = userId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;

		DROP TEMPORARY TABLE IF EXISTS VTDailyReportingData;
		
		CREATE TEMPORARY TABLE VTDailyReportingData   
        SELECT DISTINCT ta.VTPId, ta.VTId, ta.VTSchoolSectorId,
			DATE_FORMAT(CAST(ta.ReportingMonth AS DATE), "%b-%Y") AS MonthYear,         
			DAYOFMONTH(LAST_DAY(CAST(ta.ReportingMonth AS DATE))) AS TotalDays, 			
			(DAY(LAST_DAY(ta.ReportingMonth)) - GetNoOfSunday(ta.ReportingMonth)) AS WorkingDays,
			GetNoOfSunday(CAST(ta.ReportingMonth AS DATE)) AS NoOfSundays,		
			0 AS GovtHolidays, 
			0 AS ObservationDays,
			ta.WorkingDays AS ActualWorkingDay,
			ta.VTReporting AS VTWorkingDays, 
			ta.Holiday AS VTHolidays, 
			ta.ObservationDay AS VTObservationDays, 
			ta.OnLeave AS VTLeaveDays, 
			(ta.WorkingDays - ta.Holiday - ta.OnLeave) AS TeachingDays,
			0 AS NonTeachingDays,
			(ta.VTReporting + ta.ObservationDay + ta.Holiday + ta.OnLeave) AS VTReportSubmitted
		FROM DsTrainerAttendances AS ta
		INNER JOIN VTSchoolSectors vss ON ta.AcademicYearId = vss.AcademicYearId AND ta.VTSchoolSectorId = vss.VTSchoolSectorId
		INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId				
        INNER JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId
		WHERE (UserId IS NULL OR vtm.VCId = @accountId)
			AND (AcademicYearId IS NULL OR ta.AcademicYearId = AcademicYearId)             
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)
			AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
            AND ((hmId IS NULL AND schoolId IS NULL) OR vss.SchoolId = schoolId)
			AND (ClassId IS NULL OR vtc.ClassId = ClassId)
			AND (MonthId IS NULL OR MONTH(ta.ReportingMonth) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)	                            		 
		GROUP BY ta.VTPId, ta.VTId, ta.VTSchoolSectorId, ta.ReportingMonth;
 
		SELECT DISTINCT
			ROW_NUMBER() OVER (ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName) AS SrNo, 			
			vdr.VTId,
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear, 
			ph.PhaseName, 
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			vtm.DateOfJoining AS VTDateOfJoining,
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
			d.DivisionName,
			ds.DistrictName,
			s.BlockName,
			s.UDISE,
			s.SchoolName,
			se.SectorName,
			vdr.MonthYear,         
			vdr.TotalDays, 			
            vdr.WorkingDays,
			vdr.NoOfSundays,		
			vdr.GovtHolidays, 
			vdr.ObservationDays,
			IF(vdr.VTWorkingDays < 0, vdr.ActualWorkingDay, vdr.VTWorkingDays) AS VTWorkingDays, 
			vdr.VTHolidays, 
			vdr.VTObservationDays, 
			vdr.VTLeaveDays, 
			IF(vdr.TeachingDays < 0, vdr.ActualWorkingDay, vdr.TeachingDays) AS TeachingDays,
			vdr.NonTeachingDays,
			vdr.VTReportSubmitted
		FROM VTDailyReportingData vdr
		LEFT JOIN VTSchoolSectors vss ON vdr.VTSchoolSectorId = vss.VTSchoolSectorId AND vdr.VTId = vss.VTId
        LEFT JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1 		
		LEFT JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1    
        LEFT JOIN Sectors se ON vss.SectorId = se.SectorId
		LEFT JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId	
        LEFT JOIN AcademicYears say ON s.AcademicYearId = say.AcademicYearId AND say.IsActive = 1 		
		LEFT JOIN Divisions d ON s.DivisionId = d.DivisionId
		LEFT JOIN Districts ds ON s.DistrictCode = ds.DistrictCode
		LEFT JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
        LEFT JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement' 		
        LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
        LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId 
		LEFT JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
        LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId 
        LEFT JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
        LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId 
        LEFT JOIN HMSchoolsMap hmm ON vss.AcademicYearId = hmm.AcademicYearId AND vss.SchoolId = hmm.SchoolId AND vtpm.IsActive = 1		
        LEFT JOIN HeadMasters hm ON hmm.HMId = hm.HMId AND hm.IsActive = 1     
        ORDER BY ay.YearName, ph.PhaseName, vtp.VTPName, vc.FullName, vt.FullName;
	
		DROP TEMPORARY TABLE IF EXISTS VTDailyReportingData;	
    END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTSchoolClassStudentsById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTSchoolClassStudentsById`(
	IN schoolId  VARCHAR(36), 
    IN vtId  VARCHAR(36) 
	)
BEGIN     
    SELECT DISTINCT s.SchoolName, s.UDISE, se.SectorName, jr.JobRoleName, vt.FullName AS VTName, vt.Email AS VTEmailId, vss.DateOfAllocation, vss.DateOfRemoval, vss.IsActive AS VSSIsActive,
		scc.Name AS VTClassName, sec.Name AS VTSectionName, vtc.IsActive AS VTCIsActive, scc1.Name AS SCClassName, sec1.Name AS SCSectionName, COUNT(sc.StudentId) AS SCStudents, 
         COUNT(scm.StudentId) AS VCSStudents, vss.VTSchoolSectorId, vtc.VTClassId, vss.VTId, vss.SchoolId
	FROM VTSchoolSectors vss    
    INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId
    INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId
    INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1   
    INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
    INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1    
    INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1    
    INNER JOIN VTClasses vtc ON vss.AcademicYearId = vtc.AcademicYearId AND vss.SchoolId = vtc.SchoolId AND vss.VTId = vtc.VTId 
    INNER JOIN SchoolClasses scc ON vtc.ClassId = scc.ClassId
    INNER JOIN VTClassSections vtcs ON vtc.VTClassId = vtcs.VTClassId 
    INNER JOIN Sections sec ON vtcs.SectionId = sec.SectionId
    INNER JOIN StudentClasses sc ON vtc.AcademicYearId = sc.AcademicYearId AND vtc.SchoolId = sc.SchoolId AND vtc.ClassId = sc.ClassId AND sec.SectionId = sc.SectionId 
    INNER JOIN StudentClassMapping scm ON sc.AcademicYearId = scm.AcademicYearId AND sc.SchoolId = scm.SchoolId AND sc.ClassId = scm.ClassId AND sc.SectionId = scm.SectionId AND sc.StudentId = scm.StudentId 
    LEFT JOIN SchoolClasses scc1 ON sc.ClassId = scc1.ClassId
    LEFT JOIN Sections sec1 ON sc.SectionId = sec1.SectionId
	WHERE (schoolId IS NULL OR vss.SchoolId = schoolId)
		AND (vtId IS NULL OR vt.VTId = vtId)
    GROUP BY s.SchoolName, s.UDISE, se.SectorName, jr.JobRoleName, vss.DateOfAllocation, vss.DateOfRemoval, sc.ClassId, sc.SectionId
	ORDER BY s.SchoolName, vt.FullName, scc.DisplayOrder, sec.DisplayOrder;

    
    
    
    
	
	
	
	
	
	
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTSchoolSectorReportsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTSchoolSectorReportsByCriteria`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
		
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,  
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear, 
			se.SectorName, 
            jr.JobRoleName, 
			ph.PhaseName, 
			s.SchoolName, 
			vtp.VTPName, 
			vt.FullName AS VTName, 
			vt.Mobile AS VTMobile, 
			vt.Email AS VTEmail, 
			DATE(vt.DateOfJoining) AS VTDateOfJoining, 
			DATE(vss.DateOfAllocation) AS DateOfAllocation, 
			vss.DateOfRemoval
		FROM VTSchoolSectors vss
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1        
		INNER JOIN VocationalTrainers vt ON vss.VTId = vt.VTId AND vt.IsActive = 1
		INNER JOIN VocationalTrainingProviders vtp ON vt.VTPId = vtp.VTPId AND vtp.IsActive = 1        
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears say ON vss.AcademicYearId = say.AcademicYearId AND say.IsActive = 1        
		INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
        INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1    
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
		CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    
		WHERE vss.IsActive = 1
			AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtp.VTPId = VTPId)
			
			AND (MonthId IS NULL OR MONTH(vss.DateOfAllocation) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		ORDER BY ay.YearName, ph.PhaseName,  vtp.VTPName, se.SectorName, vt.FullName, s.SchoolName;
    END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTSchoolSectorReportsByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTSchoolSectorReportsByCriteriaV2`(
	IN UserId VARCHAR(150),
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(100),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 
    IN ClassId VARCHAR(36),
    IN MonthId VARCHAR(10),
    IN SchoolManagementId VARCHAR(10)
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
	BEGIN
		SELECT r.Code, ar.AccountId INTO @roleName, @accountId
		FROM AccountRoles ar 
		INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
		INNER JOIN Roles r ON ar.RoleId = r.RoleId
		WHERE a.LoginId = UserId;
		
		IF(@roleName <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
		
		SELECT DISTINCT vss.VTSchoolSectorId,  
			ay.YearName AS AcademicYear, 
			say.YearName AS SchoolAllottedYear, 
			se.SectorName, 
            jr.JobRoleName, 
			ph.PhaseName, 
			CONCAT(s.UDISE, s.SchoolName) AS SchoolName, 
			vtp.VTPName, 
			vt.FullName AS VTName, 
			vt.Mobile AS VTMobile, 
			vt.Email AS VTEmail, 
			IFNULL(vtm.DateOfJoining, NOW()) AS VTDateOfJoining, 
			IFNULL(vss.DateOfAllocation, NOW()) AS DateOfAllocation, 
			vss.DateOfRemoval,
            ROW_NUMBER() OVER (ORDER BY vss.VTSchoolSectorId, vss.SectorId) AS SrNo
		FROM VTSchoolSectors vss
		INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1        
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
		INNER JOIN AcademicYears say ON vss.AcademicYearId = say.AcademicYearId AND say.IsActive = 1        
		INNER JOIN Sectors se ON vss.SectorId = se.SectorId AND se.IsActive = 1
        INNER JOIN JobRoles jr ON vss.SectorId = jr.SectorId AND vss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1    
		INNER JOIN Phases ph ON s.PhaseId = ph.PhaseId AND ph.IsActive = 1
        LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1        
		LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId
        LEFT JOIN VTPAcademicYearsMap vtpm ON vtm.AcademicYearId = vtpm.AcademicYearId AND vtm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
        LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId        		        
		WHERE vss.IsActive = 1
			AND (UserId IS NULL OR vtm.VCId = @accountId)
			AND (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)
			AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)
			AND (MonthId IS NULL OR MONTH(vss.DateOfAllocation) = CAST(MonthId AS UNSIGNED)) 
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
		ORDER BY ay.YearName, ph.PhaseName,  vtp.VTPName, se.SectorName, vt.FullName, s.SchoolName;
    END;
    
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
	
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTSchoolSectorsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTSchoolSectorsByCriteria`(
	IN academicYearId VARCHAR(36),
    IN vtpId VARCHAR(36),
    IN vcId VARCHAR(36),
    IN vtId VARCHAR(36),
    IN sectorId VARCHAR(36),
    IN jobRoleId VARCHAR(36),
    IN schoolId VARCHAR(36),
	IN status BIT,
	IN isRollover BIT,
    IN name  VARCHAR(100),    
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;    	    
    SET offSetValue = pageIndex * pageSize;
    
    SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
     
    SELECT DISTINCT vtss.VTSchoolSectorId, ay.YearName AS AcademicYear, vtp.VTPShortName AS VTPName, vc.FullName AS VCName, se.SectorName, jr.JobRoleName, s.SchoolName, s.UDISE, 
		vt.FullName AS VTName, vt.Email AS VTEmailId, vtss.DateOfAllocation, vtss.IsActive, vtss.IsAYRollover, COUNT(*) OVER() AS TotalRows      
	FROM VTSchoolSectors vtss    
	INNER JOIN SchoolVTPSectors svs ON vtss.AcademicYearId = svs.AcademicYearId AND vtss.SchoolId = svs.SchoolId AND vtss.SectorId = svs.SectorId AND svs.IsActive = 1    
    INNER JOIN VCSchoolSectors vcss ON svs.AcademicYearId = vcss.AcademicYearId AND svs.SchoolVTPSectorId = vcss.SchoolVTPSectorId AND vcss.IsActive = 1 
    INNER JOIN AcademicYears ay ON vtss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1  
	INNER JOIN Schools s ON vtss.SchoolId = s.SchoolId AND s.IsActive = 1
	INNER JOIN Sectors se ON vtss.SectorId = se.SectorId AND se.IsActive = 1    
	INNER JOIN JobRoles jr ON vtss.SectorId = jr.SectorId AND vtss.JobRoleId = jr.JobRoleId AND jr.IsActive = 1             
    INNER JOIN VCTrainersMap vtm ON vtss.AcademicYearId = vtm.AcademicYearId AND vtss.VTId = vtm.VTId AND vtm.IsActive = 1     
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
    INNER JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VTPId = vcm.VTPId  AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1 
    INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1    
    INNER JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1 
    INNER JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1    
	WHERE vtss.AcademicYearId = academicYearId
		AND (vtpId IS NULL OR vtm.VTPId = vtpId)
        AND (vcId IS NULL OR vtm.VCId = vcId)
        AND (vtId IS NULL OR vtss.VTId = vtId)
        AND (sectorId IS NULL OR vtss.SectorId = sectorId)
        AND (jobRoleId IS NULL OR vtss.JobRoleId = jobRoleId)
        AND (schoolId IS NULL OR vtss.SchoolId = schoolId)		
        AND (status IS NULL OR vtss.IsActive = status)	
		AND (name IS NULL OR (vtp.VTPName LIKE CONCAT('%', name, '%') OR vc.FullName LIKE CONCAT('%', name, '%') OR vt.FullName LIKE CONCAT('%', name, '%') 
			OR se.SectorName LIKE CONCAT('%', name, '%') OR jr.JobRoleName LIKE CONCAT('%', name, '%') OR s.SchoolName LIKE CONCAT('%', name, '%') OR s.UDISE LIKE CONCAT('%', name, '%')))
		AND (isRollover = FALSE OR (svs.IsAYRollover = TRUE AND vcss.IsAYRollover = TRUE))
		AND ((charBy IS NULL OR charBy = 'All') OR (vt.FullName LIKE CONCAT(charBy, '%')))
	ORDER BY ay.YearName, vtp.VTPName, vc.FullName, se.SectorName, jr.JobRoleName, s.SchoolName, vt.FullName
	LIMIT offSetValue, pageSize;
  
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
      
	
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTStatusOfInductionInserviceTrainingsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTStatusOfInductionInserviceTrainingsByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	
	SELECT v.VTStatusOfInductionInserviceTrainingId, s.SchoolName, se.SectorName, vtss.DateOfAllocation, v.IndustryTrainingStatus, v.InserviceTrainingStatus, v.IsActive
	FROM VTStatusOfInductionInserviceTraining v
    LEFT JOIN VTSchoolSectors vtss ON v.VTSchoolSectorId = vtss.VTSchoolSectorId
    LEFT JOIN Schools s ON vtss.SchoolId = s.SchoolId
    LEFT JOIN Sectors se ON vtss.SectorId = se.SectorId
	WHERE (name IS NULL OR (v.IndustryTrainingStatus LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (v.IndustryTrainingStatus LIKE CONCAT(charBy, '%')))
	ORDER BY v.IndustryTrainingStatus
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTStudentAssessmentsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTStudentAssessmentsByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    SELECT v.VTStudentAssessmentId, sc.Name AS ClassName, v.TestimonialType, v.StudentName, dvg.Name As StudentGender, v.TestimonialTitle, v.IsActive
	FROM VTStudentAssessments v
    LEFT JOIN VTClasses vtc ON v.VTClassId = vtc.VTClassId
    LEFT JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId
    LEFT JOIN DataValues dvg ON v.StudentGender = dvg.DataValueId
	WHERE (name IS NULL OR (v.StudentName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (v.StudentName LIKE CONCAT(charBy, '%')))
	ORDER BY v.StudentName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTStudentPlacementDetailsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTStudentPlacementDetailsByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    SELECT v.VTStudentPlacementDetailId, sc.Name AS ClassName, scc.FullName AS StudentName, v.PlacementApplyStatus, v.PlacementStatus, v.ApprenticeshipApplyStatus, v.ApprenticeshipStatus, v.HigherEducationVE, v.HigherEductaionOther, v.StudentPlacementStatus, v.IsActive
	FROM VTStudentPlacementDetails v
    LEFT JOIN VTClasses vtc ON v.VTClassId = vtc.VTClassId
    LEFT JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId
    LEFT JOIN StudentClasses scc ON v.StudentId = scc.StudentId
	WHERE (name IS NULL OR (v.PlacementApplyStatus LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (v.PlacementApplyStatus LIKE CONCAT(charBy, '%')))
	ORDER BY v.PlacementApplyStatus
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTStudentResultOtherSubjectsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTStudentResultOtherSubjectsByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	
	SELECT v.VTStudentResultOtherSubjectId, sc.Name AS ClassName, scc.FullName AS StudentName, v.SubjectName, v.SubjectNumber, v.SubjectMarks, v.IsActive
	FROM VTStudentResultOtherSubjects v
	LEFT JOIN VTClasses vtc ON v.VTClassId = vtc.VTClassId
    LEFT JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId
    LEFT JOIN StudentClasses scc ON v.StudentId = scc.StudentId
	WHERE (name IS NULL OR (v.SubjectName LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (v.SubjectName LIKE CONCAT(charBy, '%')))
	ORDER BY v.SubjectName
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTStudentTrackingByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTStudentTrackingByCriteria`(
	IN UserId VARCHAR(150),    
    IN FromDate DateTime,
    IN ToDate DateTime
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
	
    BEGIN
		SELECT r.Code, a.DistrictId, ar.AccountId INTO @roleCode, @districtId, @accountId
        FROM AccountRoles ar
        INNER JOIN Accounts a ON ar.AccountId = a.AccountId
        INNER JOIN Roles r ON ar.RoleId = r.RoleId
        WHERE a.LoginId = UserId;
        
        IF(@roleCode <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
        IF(@roleCode <> 'DisRP') THEN        
			SET @districtId = NULL;
        END IF;
         
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			DATE(vt.DateOfJoining) AS VTDateOfJoining,
            hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,	
			dvs.Name AS SchoolManagement,
            de.DivisionName,
            d.DistrictName,
            s.BlockName,
		    s.UDISE,
			s.SchoolName,
			se.SectorName,
            dvr.Name AS ReportType,
            dvw.Name AS WorkingDayType,   
            sc.Name AS ClassTaught,
            dvc.Name AS ClassType,
            sta.Boys,
            sta.Girls,
            v.ReportingDate,
            v.CreatedOn AS SubmissionDate,
			v.GeoLocation		  
		FROM VTDailyReporting v
		INNER JOIN VTSchoolSectors vss ON v.VTSchoolSectorId = vss.VTSchoolSectorId AND v.VTId = vss.VTId AND vss.IsActive = 1
		INNER JOIN VTRWorkingDayTypes vwd ON v.VTDailyReportingId = vwd.VTDailyReportingId
        INNER JOIN VTRTeachingVocationalEducations vtve ON v.VTDailyReportingId = vtve.VTDailyReportingId
        INNER JOIN (
			SELECT vtsa.VTRTeachingVocationalEducationId, SUM(IF(std.Gender='207', 1, 0)) AS Boys, SUM(IF(std.Gender='208', 1, 0)) AS Girls
            FROM VTRStudentAttendances vtsa 
            INNER JOIN StudentClasses std ON vtsa.StudentId = std.StudentId            			
            GROUP BY vtsa.VTRTeachingVocationalEducationId
        ) sta ON vtve.VTRTeachingVocationalEducationId = sta.VTRTeachingVocationalEducationId
        INNER JOIN VocationalTrainers vt ON v.VTId = vt.VTId AND vt.IsActive = 1
		INNER JOIN VocationalCoordinators vc ON vt.VCId = vc.VCId AND vc.IsActive = 1
        INNER JOIN VocationalTrainingProviders vtp ON vc.VTPId = vtp.VTPId AND vtp.IsActive = 1    
		INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
        INNER JOIN HeadMasters hm ON s.SchoolId = hm.SchoolId AND hm.IsActive = 1
        INNER JOIN SchoolClasses sc ON vtve.ClassTaughtId = sc.ClassId
        INNER JOIN Sectors se ON vss.SectorId = se.SectorId
        INNER JOIN Divisions de ON s.DivisionId = de.DivisionId
        INNER JOIN Districts d ON de.DivisionId = d.DivisionId AND s.DistrictCode = d.DistrictCode        
        INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement'
        INNER JOIN DataValues dvr ON v.ReportType = dvr.DataValueId AND dvr.DataTypeId = 'VTReportType'
        INNER JOIN DataValues dvw ON vwd.WorkingTypeId = dvw.DataValueId AND dvw.DataTypeId = 'WorkingDayType'
        INNER JOIN DataValues dvc ON vtve.ClassTypeId = dvc.DataValueId AND dvc.DataTypeId = 'VTClassType'
        CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    		
		WHERE CAST(v.ReportingDate AS Date) BETWEEN CAST(FromDate AS Date) AND CAST(ToDate AS Date)
			AND (UserId IS NULL OR vt.VCId = @accountId)
			AND (@districtId IS NULL OR s.DistrictCode = @districtId)
            
        ORDER BY vtp.VTPName, vc.FullName, vt.FullName, hm.FullName, dvs.Name, se.SectorName, s.SchoolName, v.ReportingDate; 
        
	END;
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
    
	
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTStudentTrackingByCriteriaV2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `GetVTStudentTrackingByCriteriaV2`(
    IN AcademicYearId VARCHAR(36),    
    IN DivisionId VARCHAR(36), 
    IN DistrictId VARCHAR(250),
    IN SectorId VARCHAR(36), 
    IN JobRoleId VARCHAR(36), 
    IN VTPId VARCHAR(36), 	
    IN ClassId VARCHAR(36),
    IN SchoolManagementId VARCHAR(10),
    IN UserId VARCHAR(150),    
    IN FromDate DateTime,
    IN ToDate DateTime
	)
BEGIN
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
	  
	DROP TEMPORARY TABLE IF EXISTS DistrictTmp;
    DROP TEMPORARY TABLE IF EXISTS tblDistricts;
    
	CREATE TEMPORARY TABLE DistrictTmp(DistrictCode TEXT);    
	CREATE TEMPORARY TABLE tblDistricts(DistrictCode VARCHAR(15));
        
    IF(DistrictId IS NOT NULL) THEN
		INSERT INTO DistrictTmp VALUES(DistrictId);
	
		SET @districtSQL = CONCAT("INSERT INTO tblDistricts (DistrictCode) VALUES ('", REPLACE(( SELECT GROUP_CONCAT(DISTINCT DistrictCode) AS DistrictIds FROM DistrictTmp), ",", "'),('"),"');");
		PREPARE districtScripts FROM @districtSQL;
		EXECUTE districtScripts;
	END IF;
    
    BEGIN
		SELECT r.Code, a.DistrictId, ar.AccountId INTO @roleCode, @districtId, @accountId
        FROM AccountRoles ar
        INNER JOIN Accounts a ON ar.AccountId = a.AccountId
        INNER JOIN Roles r ON ar.RoleId = r.RoleId
        WHERE a.LoginId = UserId;
        
        IF(@roleCode <> 'VC') THEN				
			SET UserId = NULL;		 
		END IF;
        
        IF(@roleCode <> 'DisRP') THEN        
			SET @districtId = NULL;
        END IF;
         
		SELECT DISTINCT CAST((@rowIndex :=@rowIndex + 1) AS SIGNED) AS SrNo,
			vtp.VTPName, 
			vc.FullName AS VCName, 
			vc.Mobile AS VCMobile, 
			vc.EmailId AS VCEmail, 
			vt.FullName AS VTName,
			vt.Mobile AS VTMobile,
			vt.Email AS VTEmail,	
			DATE(vtm.DateOfJoining) AS VTDateOfJoining,	
			hm.FullName AS HMName,
			hm.Mobile AS HMMobile,
			hm.Email AS HMEmail,
			dvs.Name AS SchoolManagement,
            de.DivisionName,
            d.DistrictName,
            s.BlockName,
		    s.UDISE,
			s.SchoolName,
			se.SectorName,
            dvr.Name AS ReportType,
            dvw.Name AS WorkingDayType,   
            sc.Name AS ClassTaught,
            dvc.Name AS ClassType,
            sta.Boys,
            sta.Girls,
            v.ReportingDate,
            v.CreatedOn AS SubmissionDate,
			v.GeoLocation		  
		FROM VTDailyReporting v
		INNER JOIN VTSchoolSectors vss ON v.VTSchoolSectorId = vss.VTSchoolSectorId AND v.VTId = vss.VTId AND vss.IsActive = 1
        INNER JOIN AcademicYears ay ON vss.AcademicYearId = ay.AcademicYearId AND ay.IsActive = 1        
		INNER JOIN VTRWorkingDayTypes vwd ON v.VTDailyReportingId = vwd.VTDailyReportingId
        INNER JOIN VTRTeachingVocationalEducations vtve ON v.VTDailyReportingId = vtve.VTDailyReportingId																	
        INNER JOIN (
			SELECT vtsa.VTRTeachingVocationalEducationId, SUM(IF(std.Gender='207', 1, 0)) AS Boys, SUM(IF(std.Gender='208', 1, 0)) AS Girls
            FROM VTRStudentAttendances vtsa 
            INNER JOIN StudentClasses std ON vtsa.StudentId = std.StudentId            			
            GROUP BY vtsa.VTRTeachingVocationalEducationId
        ) sta ON vtve.VTRTeachingVocationalEducationId = sta.VTRTeachingVocationalEducationId
        INNER JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1
        INNER JOIN SchoolClasses sc ON vtve.ClassTaughtId = sc.ClassId
        INNER JOIN Sectors se ON vss.SectorId = se.SectorId
        INNER JOIN Divisions de ON s.DivisionId = de.DivisionId
        INNER JOIN Districts d ON de.DivisionId = d.DivisionId AND s.DistrictCode = d.DistrictCode        
        INNER JOIN DataValues dvs ON s.SchoolManagementId = dvs.DataValueId AND dvs.DataTypeId = 'SchoolManagement'
        INNER JOIN DataValues dvr ON v.ReportType = dvr.DataValueId AND dvr.DataTypeId = 'VTReportType'
        INNER JOIN DataValues dvw ON vwd.WorkingTypeId = dvw.DataValueId AND dvw.DataTypeId = 'WorkingDayType'
        INNER JOIN DataValues dvc ON vtve.ClassTypeId = dvc.DataValueId AND dvc.DataTypeId = 'VTClassType'		
        LEFT JOIN VCTrainersMap vtm ON vss.AcademicYearId = vtm.AcademicYearId AND vss.VTId = vtm.VTId AND vtm.IsActive = 1
        LEFT JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1	
        LEFT JOIN VTPCoordinatorsMap vcm ON vtm.AcademicYearId = vcm.AcademicYearId AND vtm.VCId = vcm.VCId AND vcm.IsActive = 1
        LEFT JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1		 
        LEFT JOIN VTPAcademicYearsMap vtpm ON vcm.AcademicYearId = vtpm.AcademicYearId AND vcm.VTPId = vtpm.VTPId AND vtpm.IsActive = 1
        LEFT JOIN VocationalTrainingProviders vtp ON vtpm.VTPId = vtp.VTPId AND vtp.IsActive = 1		
        LEFT JOIN HMSchoolsMap hmm ON vss.AcademicYearId = hmm.AcademicYearId AND vss.SchoolId = hmm.SchoolId AND hmm.IsActive = 1		
        LEFT JOIN HeadMasters hm ON hmm.HMId = hm.HMId        
        CROSS JOIN (SELECT @rowIndex := 0) AS DataRows    		
		WHERE (AcademicYearId IS NULL OR vss.AcademicYearId = AcademicYearId)
			AND (DivisionId IS NULL OR s.DivisionId = DivisionId)			
            AND (DistrictId IS NULL OR s.DistrictCode IN (SELECT DistrictCode FROM tblDistricts)) 
			AND (SectorId IS NULL OR vss.SectorId = SectorId)			
            AND (JobRoleId IS NULL OR vss.JobRoleId = JobRoleId)	
            AND (UserId IS NULL OR (@roleCode = 'VC' AND vtm.VCId = @accountId))
			AND (VTPId IS NULL OR vtm.VTPId = VTPId)			
			AND (SchoolManagementId IS NULL OR s.SchoolManagementId = SchoolManagementId)
			AND DATE(v.ReportingDate) BETWEEN ay.StartMonth AND ay.EndMonth
			AND DATE(v.ReportingDate) BETWEEN CAST(FromDate AS Date) AND CAST(ToDate AS Date)            
        ORDER BY vtp.VTPName, vc.FullName, vt.FullName,  dvs.Name, se.SectorName, s.SchoolName, v.ReportingDate; 
	END;
    
	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVTStudentVEResultsByCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetVTStudentVEResultsByCriteria`(
	IN name  VARCHAR(100),
	IN charBy VARCHAR(5),
	IN pageIndex INT,
	IN pageSize INT
	)
BEGIN
	DECLARE offSetValue INT DEFAULT 0;
	SET offSetValue = (pageIndex-1) * pageSize;

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	
    SELECT v.VTStudentVEResultId, sc.Name AS ClassName, scc.FullName AS StudentName, v.DateIssuence, v.ExternalMarks, v.TheoryMarks, v.InternalMarks, v.TotalMarks, v.Grade, v.IsActive
	FROM VTStudentVEResults v
    LEFT JOIN VTClasses vtc ON v.VTClassId = vtc.VTClassId
    LEFT JOIN SchoolClasses sc ON vtc.ClassId = sc.ClassId
    LEFT JOIN StudentClasses scc ON v.StudentId = scc.StudentId
	WHERE (name IS NULL OR (v.ExternalMarks LIKE CONCAT(name, '%')))
		AND ((charBy IS NULL OR charBy = 'All') OR (v.ExternalMarks LIKE CONCAT(charBy, '%')))
	ORDER BY v.ExternalMarks
	LIMIT pageSize
	OFFSET offSetValue;

    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MappingOldVTToNewVTWithVCVTP` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `MappingOldVTToNewVTWithVCVTP`(
	IN AcademicYearId VARCHAR(36),    
    IN OldVTPId  VARCHAR(36),
    IN OldVCId  VARCHAR(36),
    IN OldVTId  VARCHAR(36),
    IN NewVTPId  VARCHAR(36),
    IN NewVCId  VARCHAR(36),
    IN NewVTId  VARCHAR(36)
)
BEGIN	
	DECLARE TransferStatus VARCHAR(300);
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
    
		ROLLBACK;
    END;
    
	# Check Old VCTrainersMap
    SET @OldVCTrainerId = NULL;
    
	SELECT vtm.VCTrainerId INTO @OldVCTrainerId
    FROM VCTrainersMap vtm
    WHERE vtm.AcademicYearId = AcademicYearId 
		AND vtm.VTPId = OldVTPId AND vtm.VCId = OldVCId AND vtm.VTId = OldVTId;

	# Check New VCTrainersMap
    SET @NewVCTrainerId = NULL;
	
    SELECT vtm.VCTrainerId INTO @NewVCTrainerId
    FROM VCTrainersMap vtm
    WHERE vtm.IsActive = 1 AND vtm.AcademicYearId = AcademicYearId 
		AND vtm.VTPId = NewVTPId AND vtm.VCId = NewVCId AND vtm.VTId = NewVTId;
 
	IF (@NewVCTrainerId IS NULL) THEN
    BEGIN
		SET @NewVCTrainerId = UUID();
        
		INSERT INTO VCTrainersMap   
		SELECT @NewVCTrainerId, AcademicYearId, NewVCId, NewVTId, NewVTPId, DATE('2022/10/01') AS DateOfJoining, NULL, 58,
			'System' AS CreatedBy, NOW() AS CreatedOn, 'System' AS UpdatedBy, Now() AS UpdatedOn, 1;
		
        SET TransferStatus = 'Insert VCTrainersMap';
    END;
	END IF;
        
    IF (@OldVCTrainerId IS NOT NULL) THEN
    BEGIN
		UPDATE VCTrainersMap vtm SET vtm.IsActive = 0, vtm.DateOfResignation = NOW(), vtm.UpdatedOn = NOW()
        WHERE VCTrainerId = @OldVCTrainerId;
       
        SET TransferStatus = 'Update VCTrainersMap';
    END;
    END IF;
      
	SELECT TransferStatus; #@OldSchoolVTPSectorId, @NewSchoolVTPSectorId, @OldVCSchoolSectorId, @NewVCSchoolSectorId, @VTPCoordinatorId;

	COMMIT;     
    
    # CALL MappingOldVTToNewVTWithVCVTP ('bb46d443-08ac-43d3-b31a-8b640be6be6f', 'cfcd70c9-ac69-4a26-8df7-7eec8b6646cc', 'a15d9791-57c9-4ca0-a161-b438c3f4fd68', '64bd3a51-71a0-4478-ad78-2321ae8d1c01', 'd531eb83-c8ec-4b9e-be51-928dc4547931', 'ae6168d3-4d7b-44c8-9586-746f1980ede5', 'cdbd0206-2964-4e28-8e3f-d7e37146864e');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SchoolVTPSectorTransfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `SchoolVTPSectorTransfer`(
	IN UserId VARCHAR(100),  
	IN SchoolVTPSectorId VARCHAR(36)
    )
BEGIN
	SELECT UserId, SchoolVTPSectorId INTO @UserId, @SchoolVTPSectorId;
    
	SELECT AcademicYearId, YearName INTO @AcademicYearId, @YearName
    FROM AcademicYears 
    WHERE CAST(CONCAT(YEAR(NOW()),'/10/01') AS DATE) BETWEEN StartMonth AND EndMonth; 
	  
    SELECT svs.SchoolId, svs.VTPId, svs.SectorId INTO @SchoolId, @VTPId, @SectorId 
	FROM SchoolVTPSectors svs
	WHERE svs.SchoolVTPSectorId = @SchoolVTPSectorId;
     
	IF NOT EXISTS (SELECT svs.* FROM SchoolVTPSectors svs WHERE svs.AcademicYearId = @AcademicYearId AND svs.SchoolId = @SchoolId AND svs.VTPId = @VTPId AND svs.SectorId = @SectorId) THEN
	BEGIN 
		INSERT INTO SchoolVTPSectors
		SELECT UUID(), @AcademicYearId, svs.SectorId, svs.VTPId, svs.SchoolId, CONCAT('Academic Rollover for ', @YearName) AS Remarks, 0, @UserId,NOW(), @UserId, NOW(), 1 
		FROM SchoolVTPSectors svs
		WHERE svs.SchoolVTPSectorId = @SchoolVTPSectorId;
        
        UPDATE SchoolVTPSectors svs SET svs.IsAYRollover = 1 WHERE svs.SchoolVTPSectorId = @SchoolVTPSectorId;
	END;
	END IF;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `StudentsTransfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `StudentsTransfer`(
	 IN UserId VARCHAR(100), 
	 IN NewVTId VARCHAR(36),
     IN StudentId VARCHAR(36)
)
BEGIN
	SELECT UserId, StudentId, NewVTId INTO @UserId, @StudentId, @NewVTId;
    
	SELECT AcademicYearId, YearName INTO @AcademicYearId, @YearName
    FROM AcademicYears 
    WHERE CAST(CONCAT(YEAR(NOW()),'/10/01') AS DATE) BETWEEN StartMonth AND EndMonth;
	 
    SELECT scm.StudentClassMappingId, sc.StudentId, sc.VTId, sc.SchoolId, scm.ClassId AS CurrentClassId, sc.SectionId, scd.StudentRollNumber, 
		CASE WHEN cls.Name='Class 9' THEN (SELECT ClassId FROM SchoolClasses WHERE Name='Class 10') 
			 WHEN cls.NAME = 'Class 10' THEN (SELECT ClassId FROM SchoolClasses WHERE Name ='Class 11') 
			 WHEN cls.NAME='Class 11' THEN (SELECT ClassId FROM SchoolClasses WHERE Name='Class 12') 
		END AS NextClassId 
	INTO @StudentClassMappingId, @StudentId, @VTId, @SchoolId, @CurrentClassId, @SectionId, @StudentRollNumber, @NextClassId
	FROM StudentClasses sc   	
    LEFT JOIN StudentClassMapping scm on sc.StudentId = scm.StudentId AND scm.IsActive = 1
    INNER JOIN SchoolClasses cls ON scm.ClassId = cls.ClassId AND cls.IsActive = 1
    LEFT JOIN StudentClassDetails scd on sc.StudentId = scd.StudentId AND scd.IsActive = 1
    WHERE sc.StudentId = @StudentId;
       
	IF(@NewVTId IS NOT NULL AND @NewVTId != '') THEN
		SET @VTId = NewVTId;
	END IF;   
	
	IF NOT EXISTS (SELECT scm.* FROM StudentClassMapping scm WHERE scm.AcademicYearId = @AcademicYearId AND scm.SchoolId = @SchoolId 
		AND scm.ClassId = @NextClassId AND scm.SectionId = @SectionId AND scm.VTId = @VTId AND scm.StudentId = @StudentId) THEN 
	BEGIN 
		INSERT INTO StudentClassMapping (StudentClassMappingId, AcademicYearId, SchoolId, ClassId, SectionId, VTId, StudentId, StudentRollNumber, CreatedBy, CreatedOn, UpdatedBy, UpdatedOn, IsActive)
		SELECT UUID(), @AcademicYearId, @SchoolId, @NextClassId, @SectionId, @VTId, @StudentId, @StudentRollNumber, @UserId, NOW(), @UserId, NOW(), 1 
		FROM StudentClassMapping scm
		WHERE scm.StudentClassMappingId = @StudentClassMappingId AND scm.SchoolId = @SchoolId AND scm.StudentId = @StudentId;
        
        UPDATE StudentClassMapping sc SET sc.IsAYRollover = 1, sc.UpdatedBy = @UserId, sc.UpdatedOn = NOW() WHERE sc.StudentClassMappingId = @StudentClassMappingId;
	END;
	END IF;
 
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `TransferOldVTPToNewVTPWithVC` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `TransferOldVTPToNewVTPWithVC`(
	IN AcademicYearId VARCHAR(36),
    IN SectorId  VARCHAR(36),
	IN SchoolId  VARCHAR(36),    
    IN OldVTPId  VARCHAR(36),
    IN OldVCId  VARCHAR(36),
    IN NewVTPId  VARCHAR(36),
    IN NewVCId  VARCHAR(36)
)
BEGIN	
	DECLARE TransferStatus VARCHAR(300);
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
    
		ROLLBACK;
    END;
    
	# Check Old SchoolVTPSectors
	SELECT svs.SchoolVTPSectorId INTO @OldSchoolVTPSectorId
    FROM SchoolVTPSectors svs
    WHERE svs.AcademicYearId = AcademicYearId 
		AND svs.SectorId = SectorId AND svs.SchoolId = SchoolId AND svs.VTPId = OldVTPId;

	# Check New SchoolVTPSectors
    SET @NewSchoolVTPSectorId = NULL;
	#SELECT svs.*
    SELECT svs.SchoolVTPSectorId INTO @NewSchoolVTPSectorId
    FROM SchoolVTPSectors svs
    WHERE svs.IsActive = 1 AND svs.AcademicYearId = AcademicYearId 
		AND svs.SectorId = SectorId	AND svs.SchoolId = SchoolId AND svs.VTPId = NewVTPId;

	IF (@NewSchoolVTPSectorId IS NULL) THEN
    BEGIN
		SET @NewSchoolVTPSectorId = UUID();
        
		INSERT INTO SchoolVTPSectors   
		SELECT @NewSchoolVTPSectorId, AcademicYearId, SectorId, NewVTPId, SchoolId, NULL AS Remarks, 0,
			'System' AS CreatedBy, NOW() AS CreatedOn, 'System' AS UpdatedBy, Now() AS UpdatedOn, 1;
		
        SET TransferStatus = 'Insert SchoolVTPSectors     -';
    END;
    ELSE
    BEGIN
		UPDATE SchoolVTPSectors svs SET svs.IsActive = 0, svs.UpdatedOn = NOW() 
        WHERE svs.SchoolVTPSectorId = @OldSchoolVTPSectorId;
        
        SET TransferStatus = 'Update SchoolVTPSectors     -';
    END;
    END IF;
    
	# Check Old VCSchoolSectors
    SET @OldVCSchoolSectorId = NULL;
	SELECT vcss.VCSchoolSectorId INTO @OldVCSchoolSectorId
    FROM VCSchoolSectors vcss
    WHERE vcss.AcademicYearId = AcademicYearId AND vcss.VCId = OldVCId
		AND vcss.SchoolVTPSectorId = @OldSchoolVTPSectorId AND vcss.IsActive = 1;

	# Check New VCSchoolSectors
    SET @NewVCSchoolSectorId = NULL;
	SELECT vcss.VCSchoolSectorId INTO @NewVCSchoolSectorId
    FROM VCSchoolSectors vcss
    WHERE vcss.AcademicYearId = AcademicYearId AND vcss.VCId = NewVCId
		AND vcss.SchoolVTPSectorId = @NewSchoolVTPSectorId AND vcss.IsActive = 1;
	
    IF (@NewVCSchoolSectorId IS NULL) THEN
    BEGIN
		SET @NewVCSchoolSectorId = UUID();        

		INSERT INTO VCSchoolSectors   
		SELECT @NewVCSchoolSectorId, AcademicYearId, NewVCId, @NewSchoolVTPSectorId, NOW(), NULL, 0, 
			'System' AS CreatedBy, NOW() AS CreatedOn, 'System' AS UpdatedBy, Now() AS UpdatedOn, 1;
		
        SET TransferStatus = CONCAT(TransferStatus, 'Insert VCSchoolSectors     -');
	END;
    ELSE
    BEGIN
		UPDATE VCSchoolSectors vcss SET vcss.IsActive = 0, vcss.DateOfRemoval = NOW(), vcss.UpdatedOn = NOW() 
        WHERE vcss.VCSchoolSectorId = @OldVCSchoolSectorId;
        
        SET TransferStatus = CONCAT(TransferStatus, 'Update VCSchoolSectors     -');
    END;
    END IF;
    
    # Check New VCSchoolSectors
    SET @VTPCoordinatorId = NULL;
	SELECT vtpc.VTPCoordinatorId INTO @VTPCoordinatorId
    FROM VTPCoordinatorsMap vtpc 
    WHERE vtpc.AcademicYearId = AcademicYearId AND vtpc.VTPId = NewVTPId AND vtpc.VCId = NewVCId AND vtpc.DateOfResignation IS NULL;
    
    IF (@VTPCoordinatorId IS NULL) THEN
    BEGIN
		SET @VTPCoordinatorId = UUID();        

		INSERT INTO VTPCoordinatorsMap   
		SELECT @VTPCoordinatorId, AcademicYearId, NewVTPId, NewVCId, NOW(), NULL, 58, 
			'System' AS CreatedBy, NOW() AS CreatedOn, 'System' AS UpdatedBy, Now() AS UpdatedOn, 1;
            
		SET TransferStatus = CONCAT(TransferStatus, 'Insert VTPCoordinatorsMap     -');
	END;
    ELSE
    BEGIN
		UPDATE VTPCoordinatorsMap vtpc SET vtpc.IsActive = 1, vtpc.DateOfResignation = NULL, vtpc.UpdatedOn = NOW() 
        WHERE vtpc.VTPCoordinatorId = @VTPCoordinatorId;
        
        SET TransferStatus = CONCAT(TransferStatus, 'Update VTPCoordinatorsMap     -');
    END;
    END IF;
    
	SELECT TransferStatus; #@OldSchoolVTPSectorId, @NewSchoolVTPSectorId, @OldVCSchoolSectorId, @NewVCSchoolSectorId, @VTPCoordinatorId;

	COMMIT;     
    
    # CALL TransferOldVTPToNewVTPWithVC ('bb46d443-08ac-43d3-b31a-8b640be6be6f', 'a5f9eb0b-c395-11eb-a9b6-000c29808af1', 'f3f274b1-130e-4228-93dd-b96b5522f5b7', 'cfcd70c9-ac69-4a26-8df7-7eec8b6646cc', 'a15d9791-57c9-4ca0-a161-b438c3f4fd68', 'd531eb83-c8ec-4b9e-be51-928dc4547931', 'ae6168d3-4d7b-44c8-9586-746f1980ede5');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `TransferOldVTToNewVT` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `TransferOldVTToNewVT`(
	IN AcademicYear VARCHAR(30),
	IN OldVTEmailId VARCHAR(150),
    IN OldUDISE VARCHAR(150),
	IN NewVTEmailId VARCHAR(150),
	IN NewUDISE VARCHAR(150),
    IN IsVTResigned BIT
)
BEGIN
	DECLARE vtcIndex INT DEFAULT 1;
	DECLARE vtcCount INT DEFAULT 0;
	DECLARE stdIndex INT DEFAULT 1;
	DECLARE stdCount INT DEFAULT 0;
    
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;

		ROLLBACK;
        
		DROP TEMPORARY TABLE IF EXISTS SchoolClassesTmp;
		DROP TEMPORARY TABLE IF EXISTS SchoolStudentsTmp;
    END;
    
	
    SELECT AcademicYearId INTO @AcademicYearId FROM AcademicYears ay WHERE ay.YearName = AcademicYear;
    SET @NewVTSchoolSectorId = @NewSchoolId = @NewVTId = @NewVTUserId = @NewVCUserId = NULL;
    
	SELECT vss.VTSchoolSectorId, vss.SchoolId, vss.VTId, vta.UserId AS OldVTUserId, vca.UserId AS OldVCUserId 
    INTO @OldVTSchoolSectorId, @OldSchoolId, @OldVTId, @OldVTUserId, @OldVCUserId
    FROM VCTrainersMap vtm
    INNER JOIN VTSchoolSectors vss ON vtm.AcademicYearId = vss.AcademicYearId AND vtm.VTId = vss.VTId 
    INNER JOIN Accounts vta ON vtm.VTId = vta.AccountId AND vta.IsActive = 1
    INNER JOIN Accounts vca ON vtm.VCId = vca.AccountId AND vca.IsActive = 1          
    INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
    INNER JOIN Schools s ON vss.SchoolId = s.SchoolId  AND s.IsActive = 1
    WHERE vtm.IsActive = 1 
		AND vss.AcademicYearId = @AcademicYearId 
        AND s.UDISE = OldUDISE 
        AND vt.Email = OldVTEmailId;
	
	SELECT vss.VTSchoolSectorId, vss.SchoolId, vt.VTId, vta.UserId AS NewVTUserId, vca.UserId AS NewVCUserId
    INTO @NewVTSchoolSectorId, @NewSchoolId, @NewVTId, @NewVTUserId, @NewVCUserId
	FROM VCTrainersMap vtm
	INNER JOIN Accounts vta ON vtm.VTId = vta.AccountId AND vta.IsActive = 1
	INNER JOIN Accounts vca ON vtm.VCId = vca.AccountId AND vca.IsActive = 1  
	INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
	LEFT JOIN VTSchoolSectors vss ON vtm.AcademicYearId = vss.AcademicYearId AND vtm.VTId = vss.VTId AND vss.IsActive = 1
	LEFT JOIN Schools s ON vss.SchoolId = s.SchoolId AND s.IsActive = 1 AND s.UDISE = NewUDISE
	WHERE vtm.IsActive = 1
		AND vtm.AcademicYearId = @AcademicYearId		
		AND vt.Email = NewVTEmailId;
    
    SELECT SchoolId INTO @NewSchoolUDISE FROM Schools WHERE UDISE = NewUDISE;
    
	
	IF @NewVTSchoolSectorId IS NULL THEN
	BEGIN
        
        UPDATE VTSchoolSectors vss 
			SET vss.DateOfRemoval = NOW(), vss.IsActive = 0, vss.UpdatedBy = @NewVCUserId, vss.UpdatedOn = NOW() 
        WHERE vss.AcademicYearId = @AcademicYearId AND vss.SchoolId = @OldSchoolId AND vss.VTId = @OldVTId AND vss.DateOfRemoval IS NULL;
        
        
        UPDATE VTSchoolSectors vss 
			SET vss.DateOfRemoval = NOW(), vss.IsActive = 0, vss.UpdatedBy = @NewVCUserId, vss.UpdatedOn = NOW() 
        WHERE vss.AcademicYearId = @AcademicYearId AND vss.SchoolId <> @NewSchoolUDISE AND vss.VTId = @NewVTId AND vss.DateOfRemoval IS NULL;
        
         
		INSERT INTO VTSchoolSectors
		SELECT UUID() AS VTSchoolSectorId, vss.AcademicYearId, @NewVTId AS VTId, vss.SchoolId, vss.SectorId, vss.JobRoleId, NOW() AS DateOfAllocation, 
			NULL AS DateOfRemoval, 0 AS IsAYRollover, @NewVCUserId AS CreatedBy, NOW() AS CreatedOn, @NewVCUserId AS UpdatedBy, NOW() AS UpdatedOn, 1 AS IsActive
		FROM VTSchoolSectors vss 
		WHERE vss.VTSchoolSectorId = @OldVTSchoolSectorId;
	END;
    ELSE 
    BEGIN
		
        UPDATE VTSchoolSectors vss 
			SET vss.DateOfRemoval = NOW(), vss.IsActive = 0, vss.UpdatedBy = @NewVCUserId, vss.UpdatedOn = NOW() 
        WHERE vss.AcademicYearId = @AcademicYearId AND vss.VTId = @OldVTId AND vss.DateOfRemoval IS NULL;
        
		
		UPDATE VTSchoolSectors vss 
			SET vss.IsActive = 1, vss.DateOfAllocation = NOW(), vss.UpdatedBy = @NewVCUserId, vss.UpdatedOn = NOW() 
        WHERE vss.VTSchoolSectorId = @NewVTSchoolSectorId;        
    END;
	END IF;
 
	DROP TEMPORARY TABLE IF EXISTS SchoolClassesTmp;
        
	CREATE TEMPORARY TABLE SchoolClassesTmp  
	SELECT ROW_NUMBER() OVER (ORDER BY vtc.SchoolId, vtc.ClassId) AS RowIndex, vtc.VTClassId, vtc.SchoolId, vtc.ClassId 
	FROM VTClasses vtc 
	WHERE vtc.AcademicYearId = @AcademicYearId AND vtc.SchoolId = @OldSchoolId AND vtc.VTId = @OldVTId 
    ORDER BY vtc.SchoolId, vtc.ClassId;
    
	
    SET vtcCount = (SELECT COUNT(*) FROM SchoolClassesTmp); 
	SET vtcIndex = 1;
	
	WHILE vtcIndex <= vtcCount DO	     	
		SELECT sc.VTClassId, sc.ClassId 
		INTO @OldVTClassId, @OldClassId
		FROM SchoolClassesTmp sc
		WHERE sc.RowIndex = vtcIndex;  
        
        SELECT UUID() INTO @NewVTClassId;

		IF NOT EXISTS (SELECT * FROM VTClasses vtc WHERE vtc.AcademicYearId = @AcademicYearId AND vtc.SchoolId = @OldSchoolId AND vtc.VTId = @NewVTId AND vtc.ClassId = @OldClassId AND vtc.IsActive = 1) THEN
		BEGIN
			
			UPDATE VTClasses vtc 
				SET vtc.IsActive = 0, vtc.UpdatedBy = @NewVCUserId, vtc.UpdatedOn = NOW() 
			WHERE vtc.AcademicYearId = @AcademicYearId AND vtc.SchoolId = @OldSchoolId AND vtc.ClassId = @OldClassId AND vtc.VTId = @OldVTId;
			
			
         	INSERT INTO VTClasses
			SELECT @NewVTClassId AS VTClassId, @NewVTId AS VTId, vtc.SchoolId, vtc.AcademicYearId, vtc.ClassId, vtc.SectionId, 0 AS IsAYRollover,
				@NewVTUserId AS CreatedBy, NOW() AS CreatedOn, @NewVTUserId AS UpdatedBy, NOW() AS UpdatedOn, 1 AS IsActive
			FROM VTClasses vtc 
			WHERE vtc.VTClassId = @OldVTClassId;
		END;
		ELSE 
		BEGIN
			
			UPDATE VTClasses vtc 
				SET vtc.IsActive = 1, vtc.UpdatedBy = @NewVTUserId, vtc.UpdatedOn = NOW() 
			WHERE vtc.AcademicYearId = @AcademicYearId AND vtc.SchoolId = @OldSchoolId AND vtc.VTId = @NewVTId AND vtc.IsActive = 1;
     
            SELECT vtc.VTClassId INTO @NewVTClassId 
            FROM VTClasses vtc 
            WHERE vtc.AcademicYearId = @AcademicYearId AND vtc.SchoolId = @OldSchoolId 
				AND vtc.VTId = @NewVTId AND vtc.ClassId = @OldClassId AND vtc.IsActive = 1;
		END;
		END IF;
        
        IF NOT EXISTS (SELECT * FROM VTClassSections vtcs WHERE vtcs.VTClassId = @NewVTClassId) THEN
		BEGIN
			INSERT INTO VTClassSections
			SELECT UUID() AS VTClassSectionId, @NewVTClassId AS VTClassId, vtcs.SectionId, NULL AS Remarks, 
				@NewVTUserId AS CreatedBy, NOW() AS CreatedOn, 1 AS IsActive
			FROM VTClassSections vtcs 
			WHERE vtcs.VTClassId = @OldVTClassId;
		END;		 
		END IF;
		
		
		UPDATE VTClasses vtc 
			SET vtc.IsActive = 0, vtc.UpdatedBy = @OldVTUserId, vtc.UpdatedOn = NOW() 
		WHERE vtc.VTClassId = @OldVTClassId;
		
        UPDATE VTClassSections vtcs        
			SET vtcs.IsActive = 0
        WHERE vtcs.VTClassId = @OldVTClassId;
        
        SET vtcIndex = vtcIndex + 1;   
	END WHILE;
		
	
    UPDATE VTClassSections vtcs 
    INNER JOIN VTClasses vtc ON vtcs.VTClassId = vtc.VTClassId 
		SET vtcs.IsActive = 0, vtc.CreatedOn = NOW() 
	WHERE vtc.AcademicYearId = @AcademicYearId AND vtc.SchoolId <> @NewSchoolId AND vtc.VTId = @NewVTId;
    
	UPDATE VTClasses vtc 
		SET vtc.IsActive = 0, vtc.UpdatedBy = @NewVCUserId, vtc.UpdatedOn = NOW() 
	WHERE vtc.AcademicYearId = @AcademicYearId AND vtc.SchoolId <> @NewSchoolId AND vtc.VTId = @NewVTId;
	
    DROP TEMPORARY TABLE IF EXISTS SchoolClassesTmp;
    
    
	DROP TEMPORARY TABLE IF EXISTS SchoolStudentsTmp;
    
	CREATE TEMPORARY TABLE SchoolStudentsTmp  
	SELECT ROW_NUMBER() OVER (ORDER BY sc.SchoolId, sc.ClassId, sc.SectionId, sc.StudentId) AS RowIndex, 
		scm.StudentClassMappingId, sc.SchoolId, sc.ClassId, sc.SectionId, scm.VTId, sc.StudentId
	FROM StudentClassMapping scm
    INNER JOIN StudentClasses sc ON scm.SchoolId = sc.SchoolId AND scm.StudentId = sc.StudentId AND sc.IsActive = 1
    WHERE scm.AcademicYearId = @AcademicYearId AND scm.SchoolId = @OldSchoolId 
		AND scm.VTId = @OldVTId AND scm.IsActive = 1 
    ORDER BY sc.SchoolId, sc.ClassId, sc.SectionId, sc.StudentId;
    
	
    SET stdCount = (SELECT COUNT(*) FROM SchoolStudentsTmp); 
	SET stdIndex = 1;
	
	WHILE stdIndex <= stdCount DO	     	
		SELECT sc.StudentClassMappingId, sc.StudentId INTO @StudentClassMappingId, @StudentId
		FROM SchoolStudentsTmp sc
		WHERE sc.RowIndex = stdIndex;  
        
		IF NOT EXISTS (SELECT * FROM StudentClassMapping scm WHERE scm.AcademicYearId = @AcademicYearId AND scm.VTId = @NewVTId AND scm.StudentId = @StudentId AND scm.IsActive = 1) THEN
		BEGIN
			INSERT INTO StudentClassMapping
			SELECT UUID() AS StudentClassMappingId, @AcademicYearId, scm.SchoolId, scm.ClassId, scm.SectionId, @NewVTId AS VTId, 
				@StudentId AS StudentId, NULL, 0, @NewVTUserId AS CreatedBy, NOW() AS CreatedOn, @NewVTUserId AS UpdatedBy, NOW() AS UpdatedOn, 1 AS IsActive
			FROM StudentClassMapping scm 
			WHERE scm.StudentClassMappingId = @StudentClassMappingId;
		END;
		ELSE 
		BEGIN
			
			UPDATE StudentClassMapping scm 
				SET scm.IsActive = 1, scm.UpdatedBy = @NewVTUserId, scm.UpdatedOn = NOW() 
			WHERE scm.AcademicYearId = @AcademicYearId AND scm.SchoolId = @OldSchoolId AND scm.VTId = @NewVTId AND scm.StudentId = @StudentId AND scm.IsActive = 1;
		END;
		END IF;
        
        SET stdIndex = stdIndex + 1;   
	END WHILE;
    
    
	UPDATE StudentClassMapping scm 		
    INNER JOIN StudentClasses sc ON scm.StudentId = sc.StudentId AND sc.IsActive = 1
		SET scm.IsActive = 0, scm.UpdatedBy = @OldVTUserId, scm.UpdatedOn = NOW() 	
	WHERE scm.AcademicYearId = @AcademicYearId AND scm.SchoolId = @OldSchoolId 
		AND scm.VTId = @OldVTId AND scm.IsActive = 1;
    
	IF (IsVTResigned = TRUE) THEN
    BEGIN
		
		UPDATE VocationalTrainers vt 		    
			SET vt.DateOfResignation = NOW(), vt.IsActive = 0, vt.UpdatedBy = @OldVTUserId, vt.UpdatedOn = NOW() 	
		WHERE vt.VTId = @OldVTId; 

		UPDATE VCTrainersMap vtm 		    
			SET vtm.IsActive = 0, vtm.UpdatedBy = @OldVTUserId, vtm.UpdatedOn = NOW() 	
		WHERE vtm.AcademicYearId = @AcademicYearId AND vtm.VTId = @OldVTId; 
        
		
		UPDATE Accounts a
			SET a.PasswordExpiredOn = NOW(), a.IsLocked = 1, a.IsActive = 0, a.UpdatedBy = @OldVTUserId, a.UpdatedOn = NOW() 	
		WHERE a.AccountId = @OldVTId; 
    END;
    END IF;
    
    DROP TEMPORARY TABLE IF EXISTS SchoolClassesTmp; 

    COMMIT;    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `TransferVTTransactionsByDate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `TransferVTTransactionsByDate`(UserId VARCHAR(150))
BEGIN			
    DECLARE vtIndex INT DEFAULT 1;
    DECLARE vtCount INT DEFAULT 0;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		ROLLBACK;
    END;

	DROP TEMPORARY TABLE IF EXISTS VTDailyReportingData;    
    
    CREATE TEMPORARY TABLE VTDailyReportingData
    SELECT ROW_NUMBER() OVER (ORDER BY v.VTId, v.VTDailyReportingId) AS RowIndex, v.VTId, v.VTDailyReportingId, v.IsSync
    FROM VTDailyReportingLahi2GJ AS v
    WHERE IsSync = 0
		AND v.VTId <> '728a4be5-34dc-4d7b-931b-7fa8939ad8bb'
		
	;
    
    SET vtCount = (SELECT COUNT(*) FROM VTDailyReportingData);
    
    WHILE vtIndex <= vtCount DO		        
        
        SELECT VTDailyReportingId, IsSync INTO @vtDailyReportingId, @IsSync FROM VTDailyReportingData WHERE RowIndex = vtIndex;
        
        IF (@IsSync = 0) THEN       
			START TRANSACTION;
			
            
			INSERT INTO LighthouseGJ.VTDailyReporting 
			SELECT vdr.*
			FROM LighthouseLAHI.VTDailyReporting vdr
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			            
			INSERT INTO LighthouseGJ.VTRWorkingDayTypes 
			SELECT vdrw.*
			FROM LighthouseLAHI.VTRWorkingDayTypes vdrw
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdrw.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
     
			INSERT INTO LighthouseGJ.VTRTeachingVocationalEducations 
			SELECT vdrt.* 
			FROM LighthouseLAHI.VTRTeachingVocationalEducations vdrt
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRClassSectionsTaught         
			SELECT drcs.* 
			FROM LighthouseLAHI.VTRClassSectionsTaught drcs
			INNER JOIN LighthouseLAHI.VTRTeachingVocationalEducations vdrt ON drcs.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRActivityTypes 
			SELECT drat.* 
			FROM LighthouseLAHI.VTRActivityTypes drat
			INNER JOIN LighthouseLAHI.VTRTeachingVocationalEducations vdrt ON drat.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRUnitSessionsTaught 
			SELECT drus.* 
			FROM LighthouseLAHI.VTRUnitSessionsTaught drus
			INNER JOIN LighthouseLAHI.VTRTeachingVocationalEducations vdrt ON drus.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRStudentAttendances 
			SELECT drsa.* 
			FROM LighthouseLAHI.VTRStudentAttendances drsa
			INNER JOIN LighthouseLAHI.VTRTeachingVocationalEducations vdrt ON drsa.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRReasonOfNotConductingTheClasses 
			SELECT drnc.* 
			FROM LighthouseLAHI.VTRReasonOfNotConductingTheClasses drnc
			INNER JOIN LighthouseLAHI.VTRTeachingVocationalEducations vdrt ON drnc.VTRTeachingVocationalEducationId = vdrt.VTRTeachingVocationalEducationId
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdrt.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRTrainingOfTeachers 
			SELECT vdtt.* 
			FROM LighthouseLAHI.VTRTrainingOfTeachers vdtt
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRTrainingTopics         
			SELECT drtp.* 
			FROM LighthouseLAHI.VTRTrainingTopics drtp
			INNER JOIN LighthouseLAHI.VTRTrainingOfTeachers vdtt ON drtp.VTRTrainingOfTeacherId = vdtt.VTRTrainingOfTeacherId
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdtt.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTROnJobTrainingCoordinations 
			SELECT vdjt.* 
			FROM LighthouseLAHI.VTROnJobTrainingCoordinations vdjt
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdjt.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRAssessorInOtherSchoolForExams 
			SELECT vdas.* 
			FROM LighthouseLAHI.VTRAssessorInOtherSchoolForExams vdas
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdas.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRParentTeachersMeetings 
			SELECT vdpt.* 
			FROM LighthouseLAHI.VTRParentTeachersMeetings vdpt
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdpt.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRCommunityHomeVisits 
			SELECT vdhv.* 
			FROM LighthouseLAHI.VTRCommunityHomeVisits vdhv
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdhv.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRVisitToIndustries 
			SELECT vdvi.* 
			FROM LighthouseLAHI.VTRVisitToIndustries vdvi
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdvi.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRVisitToEducationalInstitutions 
			SELECT vdve.* 
			FROM LighthouseLAHI.VTRVisitToEducationalInstitutions vdve
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdve.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRAssignmentFromVocationalDepartments 
			SELECT vdav.* 
			FROM LighthouseLAHI.VTRAssignmentFromVocationalDepartments vdav
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdav.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRTeachingNonVocationalSubjects 
			SELECT vdnv.* 
			FROM LighthouseLAHI.VTRTeachingNonVocationalSubjects vdnv
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdnv.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRLeaves 
			SELECT vdl.* 
			FROM LighthouseLAHI.VTRLeaves vdl
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdl.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRHolidays 
			SELECT vdh.* 
			FROM LighthouseLAHI.VTRHolidays vdh
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdh.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			INSERT INTO LighthouseGJ.VTRObservationDays 
			SELECT vdod.* 
			FROM LighthouseLAHI.VTRObservationDays vdod
			INNER JOIN LighthouseLAHI.VTDailyReporting vdr ON vdod.VTDailyReportingId = vdr.VTDailyReportingId
			WHERE vdr.VTDailyReportingId = @vtDailyReportingId;
			
            
			UPDATE VTDailyReportingLahi2GJ SET IsSync = 1 WHERE VTDailyReportingId = @vtDailyReportingId;
			
			COMMIT WORK;
        END IF;
        
		SET vtIndex = vtIndex + 1;        
    END WHILE;
	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateUserLoginDetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `UpdateUserLoginDetails`(
	IN LoginUniqueId VARCHAR(36),    
    IN AccountId VARCHAR(36),    
    IN UserId VARCHAR(45),    
	IN LoginDateTime DATETIME,
	IN LogoutDateTime DATETIME,
	IN AuthToken VARCHAR(500),
    IN IsMobile BIT,
    IN LoginType VARCHAR(10)
)
BEGIN    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
    
    IF(LoginType = 'Login') THEN
    BEGIN
		UPDATE Accounts a SET a.AuthToken = AuthToken, a.LastLoginDate = LoginDateTime WHERE a.AccountId = AccountId;    
        
		INSERT INTO LogoutHistories VALUES (LoginUniqueId, AccountId, UserId, LoginDateTime, NULL, AuthToken, IsMobile);
    END;
    ELSE 
    BEGIN
		UPDATE LogoutHistories a SET a.LogoutDateTime = LogoutDateTime WHERE a.LoginUniqueId = LoginUniqueId;    		
    END;
    END IF;
    
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ValidateUserLogin` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `ValidateUserLogin`(
	IN loginId VARCHAR(150)
)
BEGIN    
	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
    
	SELECT r.Code, r.LandingPageUrl
	INTO @roleCode, @landingPageUrl
	FROM AccountRoles ar 
	INNER JOIN Accounts a ON ar.AccountId = a.AccountId AND a.IsActive = 1
	INNER JOIN Roles r ON ar.RoleId = r.RoleId
	WHERE a.LoginId = loginId
    LIMIT 1;
    
    SELECT StateCode INTO @stateId FROM States WHERE IsActive = 1 LIMIT 1;    
    
	IF(@roleCode = 'VC') THEN				
		SELECT DISTINCT vcm.AcademicYearId, vc.VCId, DATE(vcm.DateOfJoining) AS DateOfJoining, DATE(vcss.DateOfAllocation) AS DateOfAllocation, NULL AS SectorId  
        INTO @academicYearId, @userTypeId, @dateOfJoining, @dateOfAllocation, @sectorId  
        FROM VTPCoordinatorsMap vcm 
		INNER JOIN VocationalCoordinators vc ON vcm.VCId = vc.VCId AND vc.IsActive = 1
        INNER JOIN AcademicYears ay ON vcm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1  
		LEFT JOIN VCSchoolSectors vcss ON vcm.AcademicYearId = vcss.AcademicYearId AND vcm.VCId = vcss.VCId		
        WHERE vcm.IsActive = 1 AND vcm.DateOfResignation IS NULL AND vc.EmailId = loginId
        LIMIT 1;
	ELSEIF(@roleCode = 'VT') THEN			
		SELECT DISTINCT vtm.AcademicYearId, vt.VTId, DATE(vtm.DateOfJoining) AS DateOfJoining, DATE(vtss.DateOfAllocation) AS DateOfAllocation, vtss.SectorId 
        INTO @academicYearId, @userTypeId, @dateOfJoining, @dateOfAllocation, @sectorId 
        FROM VCTrainersMap vtm 
        INNER JOIN VocationalTrainers vt ON vtm.VTId = vt.VTId AND vt.IsActive = 1
        INNER JOIN AcademicYears ay ON vtm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1        
        LEFT JOIN VTSchoolSectors vtss ON vtm.AcademicYearId = vtss.AcademicYearId AND vtm.VTId = vtss.VTId AND vtss.IsActive = 1                
        WHERE vtm.IsActive = 1 AND vtm.DateOfResignation IS NULL AND vt.Email = loginId
        LIMIT 1;
    ELSEIF(@roleCode = 'HM') THEN 			
		SELECT DISTINCT hsm.AcademicYearId, hm.HMId, DATE(hsm.DateOfJoining) AS DateOfJoining, DATE(hsm.DateOfJoining) AS DateOfAllocation, NULL AS SectorId
        INTO @academicYearId, @userTypeId, @dateOfJoining, @dateOfAllocation, @sectorId 
        FROM HMSchoolsMap hsm
		INNER JOIN HeadMasters hm ON hsm.HMId = hm.HMId AND hm.IsActive = 1
        INNER JOIN AcademicYears ay ON hsm.AcademicYearId = ay.AcademicYearId AND ay.IsCurrentAcademicYear = 1        
        WHERE hsm.IsActive = 1 AND hsm.DateOfResignation IS NULL AND hm.Email = loginId
        LIMIT 1;
	ELSE 				
		SELECT ay.AcademicYearId INTO @academicYearId FROM AcademicYears ay WHERE ay.IsCurrentAcademicYear = 1;
		
        SELECT a.AccountId, a.CreatedOn AS DateOfJoining, a.CreatedOn AS DateOfAllocation, NULL
        INTO @userTypeId, @dateOfJoining, @dateOfAllocation, @sectorId 
        FROM Accounts a
        WHERE a.IsActive = 1 AND a.LoginId = loginId
        LIMIT 1;
    END IF;
    	
	SELECT DISTINCT
		UUID() AS LoginUniqueId
		,@academicYearId AS AcademicYearId
		,a.AccountId AS UserTypeId
		,a.LoginId
		,a.Password
		,a.UserId
		,a.UserName
		,a.FirstName
		,a.LastName
		,a.Designation
        ,CAST(@dateOfJoining AS DATETIME) AS DateOfJoining
        ,CAST(@dateOfAllocation AS DATETIME) AS DateOfAllocation
		,a.EmailId
		,a.Mobile		
        ,@roleCode AS RoleCode
		,a.AccountType   
        ,@stateId AS DefaultStateId
        ,a.StateId
        ,a.DivisionId
        ,a.DistrictId
        ,a.BlockId        
        ,@sectorId AS SectorId
        ,@landingPageUrl AS LandingPageUrl
		,a.PasswordUpdateDate
		,a.PasswordExpiredOn
		,a.LastLoginDate
		,a.InvalidAttempt		
		,a.IsPasswordReset
		,a.PasswordResetToken
		,a.AuthToken
		,a.TokenExpiredOn
		,a.IsLocked    
        ,0 AS IsMobile
	FROM Accounts a    
	WHERE a.IsActive = 1 AND a.IsLocked = 0 AND a.LoginId = loginId
    LIMIT 1;
    
    SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
	
    # CALL ValidateUserLogin('namitatoppo03@gmail.com');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `VCSchoolSectorTransfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `VCSchoolSectorTransfer`(
	IN UserId VARCHAR(100), 
	IN VCSchoolSectorId VARCHAR(36)
    )
BEGIN
	SELECT UserId, VCSchoolSectorId INTO @UserId, @VCSchoolSectorId;
    
	SELECT AcademicYearId, YearName INTO @AcademicYearId, @YearName
    FROM AcademicYears 
    WHERE CAST(CONCAT(YEAR(NOW()),'/10/01') AS DATE) BETWEEN StartMonth AND EndMonth;

	SELECT nsvs.VCId, nsvs.DateOfAllocation, svs.SchoolVTPSectorId, svs.VTPId
    INTO @VCId, @DateOfAllocation, @SchoolVTPSectorId, @VTPId
	FROM SchoolVTPSectors svs
	INNER JOIN (
		SELECT vss.VCId, svs.SchoolId, svs.VTPId, svs.SectorId, vss.DateOfAllocation
		FROM VCSchoolSectors vss 
		INNER JOIN SchoolVTPSectors svs ON vss.AcademicYearId = svs.AcademicYearId AND vss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
		WHERE vss.IsActive = 1 AND vss.VCSchoolSectorId = @VCSchoolSectorId
	) nsvs ON svs.SchoolId = nsvs.SchoolId AND svs.VTPId = nsvs.VTPId AND svs.SectorId = nsvs.SectorId
	WHERE svs.AcademicYearId = @AcademicYearId;
        
	IF NOT EXISTS (SELECT vss.* FROM VCSchoolSectors vss WHERE vss.AcademicYearId = @AcademicYearId AND vss.VCId = @VCId AND vss.SchoolVTPSectorId = @SchoolVTPSectorId) THEN 
	BEGIN 				
		INSERT INTO VCSchoolSectors (VCSchoolSectorId, AcademicYearId, VCId, SchoolVTPSectorId, DateOfAllocation, DateOfRemoval, IsAYRollover, CreatedBy, CreatedOn, UpdatedBy, UpdatedOn, IsActive)
        SELECT UUID() AS VCSchoolSectorId, @AcademicYearId, @VCId, @SchoolVTPSectorId, @DateOfAllocation, NULL AS DateOfRemoval, 0, @UserId, NOW(), @UserId, NOW(), 1;
		
		IF NOT EXISTS (SELECT vcm.* FROM VTPCoordinatorsMap vcm WHERE vcm.AcademicYearId = @AcademicYearId AND vcm.VTPId = @VTPId AND vcm.VCId = @VCId AND vcm.IsActive = 1) THEN 
		BEGIN 				
			INSERT INTO VTPCoordinatorsMap
            SELECT UUID() AS VTPCoordinatorId, @AcademicYearId, @VTPId, vc.VCId, NOW() AS DateOfJoining, NULL AS DateOfResignation, 58, vc.CreatedBy, NOW(), vc.UpdatedBy, NOW(), 1			
			FROM VocationalCoordinators vc
			WHERE vc.VCId = @VCId;
		END;
		END IF;
    
        UPDATE VCSchoolSectors vss SET vss.IsAYRollover = 1 WHERE vss.VCSchoolSectorId = @VCSchoolSectorId;
	END;
	END IF;
        
    # CALL VCSchoolSectorTransfer ('rakesh.gtmcs', '8dd28b67-9aea-46c8-ab05-c909438d79a2');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `VocationalCoordinatorTransfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `VocationalCoordinatorTransfer`(
    IN UserId VARCHAR(100),
    IN AcademicYearId VARCHAR(36),
	IN OldVCId VARCHAR(36), 
	IN NewVCId VARCHAR(36),   
    IN ParamsId INT
)
BEGIN
	DECLARE vcssIndex INT DEFAULT 1;
	DECLARE vtIndex INT DEFAULT 1;
	DECLARE vcssCount INT DEFAULT 0;
	DECLARE vtCount INT DEFAULT 0;
	DECLARE CreatedGUID  varchar(150) DEFAULT 0;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
    
		ROLLBACK;
        
        DROP TEMPORARY TABLE IF EXISTS VCSchoolSectorsTmp;  
		DROP TEMPORARY TABLE IF EXISTS VocationalTrainersTmp;          
		DROP TEMPORARY TABLE IF EXISTS VCSchoolSectorIdsTmp;  
        DROP TEMPORARY TABLE IF EXISTS VTIdsTmp;  
        DELETE FROM LighthouseParams lp WHERE lp.LighthouseParamId = ParamsId;  
    END;
        
    START TRANSACTION;
	SELECT AcademicYearId, UserId INTO @academicYearId, @userId;
	
    SELECT lp.Param1, lp.Param2
    INTO @VCSchoolSectorIds, @VTIds
    FROM LighthouseParams lp WHERE lp.LighthouseParamId = ParamsId;
    
	
    CREATE TEMPORARY TABLE VCSchoolSectorIdsTmp(RowIndex INT NOT NULL AUTO_INCREMENT PRIMARY KEY, VCSchoolSectorId VARCHAR(36));
	IF (@VCSchoolSectorIds IS NOT NULL) THEN
		SET @vcSchoolSectorSQL = CONCAT("INSERT INTO VCSchoolSectorIdsTmp (VCSchoolSectorId) VALUES ('", REPLACE(@VCSchoolSectorIds, ",", "'),('"),"');");
		PREPARE vcSchoolSectorsScripts FROM @vcSchoolSectorSQL;
		EXECUTE vcSchoolSectorsScripts;
    END IF;
    
    
	CREATE TEMPORARY TABLE VTIdsTmp(RowIndex INT NOT NULL AUTO_INCREMENT PRIMARY KEY, VTId VARCHAR(36));
	IF (@VTIds IS NOT NULL) THEN
		SET @vtSQL = CONCAT("INSERT INTO VTIdsTmp (VTId) VALUES ('", REPLACE(@VTIds, ",", "'),('"),"');");
		PREPARE vtScripts FROM @vtSQL;
		EXECUTE vtScripts;
    END IF;
 
	IF (ISNULL(NewVCId) OR NewVCId = "" )Then
	BEGIN
		SELECT VCId,VTPId,FirstName,MiddleName,LastName,FullName,Mobile,Mobile1,EmailId,Gender,
			DateOfJoining,DateOfResignation,NatureOfAppointment, CreatedBy,CreatedOn,UpdatedBy,UpdatedOn,IsActive
		INTO @VC_VCId,@VC_VTPId,@VC_FirstName,@VC_MiddleName,@VC_LastName,@VC_FullName,@VC_Mobile,@VC_Mobile1,@VC_EmailId,@VC_Gender,
			@VC_DateOfJoining,@VC_DateOfResignation,@VC_NatureOfAppointment, @VC_CreatedBy, @VC_CreatedOn, @VC_UpdatedBy, @VC_UpdatedOn, @VC_IsActive
		FROM VocationalCoordinators 
        WHERE VCId = OldVCId;
		
        SELECT UUID() INTO @CreatedVCGUID;
        
		IF NOT EXISTS (SELECT * FROM VocationalCoordinators WHERE FullName = CONCAT(@VC_FullName," dummy") AND EmailId = CONCAT("dummy.", @VC_EmailId)) THEN		
		BEGIN 
			INSERT INTO VocationalCoordinators
				(VCId,VTPId,FirstName,MiddleName,LastName,FullName,Mobile,Mobile1,EmailId,Gender, DateOfJoining,DateOfResignation,NatureOfAppointment, CreatedBy,CreatedOn,UpdatedBy,UpdatedOn, IsActive)
			VALUES (@CreatedVCGUID, @VC_VTPId, @VC_FirstName, @VC_MiddleName, @VC_LastName, CONCAT(@VC_FullName," dummy"), @VC_Mobile, @VC_Mobile1, CONCAT("dummy.", @VC_EmailId), @VC_Gender,
				@VC_DateOfJoining, @VC_DateOfResignation, @VC_NatureOfAppointment, @userId, NOW(), @userId, NOW(), 1);
            
			IF NOT EXISTS (SELECT * FROM Accounts WHERE AccountId = @CreatedVTGUID AND EmailId = CONCAT("dummy.", @VC_EmailId)) THEN 
			BEGIN 
				INSERT INTO Accounts 
				(AccountId, LoginId, Password, UserId, UserName, FirstName, LastName, Designation, EmailId, Mobile, AccountType, StateId, DivisionId, DistrictId, BlockId, ClusterId, 
                PasswordUpdateDate, PasswordExpiredOn, LastLoginDate, InvalidAttempt, IsPasswordReset, PasswordResetToken, AuthToken, TokenExpiredOn, IsLocked, CreatedBy, CreatedOn, UpdatedBy, UpdatedOn, IsActive) 
				SELECT @CreatedVCGUID, CONCAT("dummy.",LoginId), 'Si91JG0GZeKUcq4K6Fsl/g==', UserId, UserName, FirstName, LastName, Designation,
				CONCAT("dummy.",EmailId), Mobile, AccountType, StateId, DivisionId, DistrictId, BlockId, ClusterId, PasswordUpdateDate,
				PasswordExpiredOn, LastLoginDate,InvalidAttempt, IsPasswordReset, PasswordResetToken, AuthToken , TokenExpiredOn, IsLocked, 
				CreatedBy, NOW(), UpdatedBy, NOW(), 1 
                FROM Accounts 
                WHERE AccountId=OldVCId;
				
				INSERT INTO AccountRoles
				SELECT UUID(), @CreatedVCGUID, RoleId, Remarks, CreatedBy, NOW(), UpdatedBy, NOW(), 1 
				FROM AccountRoles WHERE AccountId=OldVCId;
			END;
			END IF; 
		END;
		ELSE 
		BEGIN
			SELECT VCId INTO @CreatedVCGUID FROM VocationalCoordinators 
			WHERE FullName = CONCAT(@VC_FullName," dummy") AND EmailId = CONCAT("dummy.", @VC_EmailId);
		END;
		END IF;
		
		SET NewVCId = @CreatedVCGUID; 
	END;
	END If;
	
	DROP TEMPORARY TABLE IF EXISTS VCSchoolSectorsTmp;  
    
	CREATE TEMPORARY TABLE VCSchoolSectorsTmp  
	SELECT ROW_NUMBER() OVER (ORDER BY vcss.VCSchoolSectorId) as RowIndex ,
		vcss.VCSchoolSectorId, vcss.AcademicYearId, vcss.VCId, vcss.SchoolVTPSectorId, vcss.DateOfAllocation, vcss.DateOfRemoval
	FROM VCSchoolSectors vcss
    WHERE vcss.AcademicYearId = @academicYearId AND vcss.IsActive = 1
		AND vcss.VCSchoolSectorId IN (SELECT VCSchoolSectorId FROM VCSchoolSectorIdsTmp)
        AND vcss.VCId = OldVCId;  
	   
	SET vcssCount = (SELECT COUNT(*) FROM VCSchoolSectorsTmp);   
	SET vcssIndex  = 1;
         
	WHILE vcssIndex <= vcssCount DO		      
		SELECT VCSchoolSectorId, SchoolVTPSectorId 
        INTO @VCSchoolSectorId, @SchoolVTPSectorId
		FROM VCSchoolSectorsTmp 
        WHERE RowIndex = vcssIndex;
		
		IF NOT EXISTS (SELECT vcss.* FROM VCSchoolSectors vcss WHERE vcss.AcademicYearId = @academicYearId AND vcss.SchoolVTPSectorId = @SchoolVTPSectorId AND vcss.VCId = NewVCId) THEN 
		BEGIN 	                
			INSERT INTO VCSchoolSectors   
			SELECT UUID(), @academicYearId, NewVCId, @SchoolVTPSectorId, NOW(), NULL, 0, 
				@userId AS CreatedBy, NOW() AS CreatedOn, @userId AS UpdatedBy, NOW() AS UpdatedOn, 1              
			FROM VCSchoolSectorsTmp vsst
			WHERE vsst.VCSchoolSectorId = @VCSchoolSectorId AND vsst.SchoolVTPSectorId = @SchoolVTPSectorId;        
		END;
		END IF; 
        
		SET vcssIndex = vcssIndex + 1;   
	END WHILE;
	
	DROP TEMPORARY TABLE IF EXISTS VocationalTrainersTmp;  
    
	CREATE TEMPORARY TABLE VocationalTrainersTmp  
	SELECT ROW_NUMBER() OVER (ORDER BY vt.Email, vt.Mobile) as RowIndex, vt.VTId, vt.VCId, vt.Mobile, vt.Email
	FROM VocationalTrainers vt
	WHERE vt.VCId = OldVCId AND vt.IsActive = 1
		AND vt.VTId IN (SELECT VTId FROM VTIdsTmp);

	SET vtCount = (SELECT COUNT(*) FROM VocationalTrainersTmp);    
	SET vtIndex = 1;
    
	WHILE vtIndex <= vtCount DO		      
		SELECT vt.RowIndex, vt.VTId, vt.VCId, vt.Mobile, vt.Email
		INTO @RowIndex, @VTId, @VCId, @Mobile, @Email
		FROM VocationalTrainersTmp vt
		WHERE vt.RowIndex = vtIndex;
				   
		IF NOT EXISTS (SELECT vth.* FROM VocationalTrainersHistory vth WHERE vth.Mobile = @Mobile AND vth.VCId = OldVCId AND vth.Email = @Email) THEN 
		BEGIN             
			INSERT INTO VocationalTrainersHistory    
			SELECT * FROM VocationalTrainers vt
			WHERE vt.Mobile = @Mobile AND vt.Email = @Email;        
		END;
		END IF;
        
		UPDATE VocationalTrainers vt
			SET vt.VCId = NewVCId, vt.UpdatedBy = @userId, vt.UpdatedOn = NOW()
		WHERE vt.VTId = @VTId AND vt.Mobile = @Mobile AND vt.Email = @Email;

		SET vtIndex = vtIndex + 1;   
	END WHILE;
	
	UPDATE Accounts a SET a.IsActive = 0, a.UpdatedOn = NOW()
	WHERE a.AccountId = OldVCId; 
    
    UPDATE AccountRoles ar SET ar.IsActive = 0, ar.UpdatedOn = NOW()
	WHERE ar.AccountId = OldVCId; 
    
	UPDATE VocationalCoordinators vc SET vc.IsActive = 0, vc.UpdatedOn = NOW()
	WHERE vc.VCId = OldVCId; 
     
    UPDATE VCSchoolSectors vcss SET vcss.IsActive = 0, vcss.UpdatedOn = NOW()
	WHERE vcss.AcademicYearId = @academicYearId AND vcss.VCId = OldVCId; 
	
    DELETE FROM LighthouseParams lp WHERE lp.LighthouseParamId = ParamsId;  
	COMMIT; 
    
	DROP TEMPORARY TABLE IF EXISTS VCSchoolSectorsTmp;  
	DROP TEMPORARY TABLE IF EXISTS VocationalTrainersTmp;          
	DROP TEMPORARY TABLE IF EXISTS VCSchoolSectorIdsTmp;  
	DROP TEMPORARY TABLE IF EXISTS VTIdsTmp;  
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `VocationalTrainersTransfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `VocationalTrainersTransfer`(
    IN UserId VARCHAR(100), 
	IN OldVTId VARCHAR(36), 
	IN NewVTId VARCHAR(36),
    IN AcademicYearId VARCHAR(36)
)
BEGIN
	DECLARE vtcIndex INT DEFAULT 1;
	DECLARE VTClassSectionsIndex INT DEFAULT 1;
	DECLARE vssIndex INT DEFAULT 1;
	DECLARE scmIndex INT DEFAULT 1;
	DECLARE vtcCount INT DEFAULT 0;
	DECLARE VTClassSectionsCount INT DEFAULT 0;
	DECLARE vssCount INT DEFAULT 0;
	DECLARE scmCount INT DEFAULT 0;
	DECLARE CreatedGUID  varchar(150) DEFAULT 0;
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN		
		DROP TEMPORARY TABLE IF EXISTS VTClassSectionsTmp; 
		DROP TEMPORARY TABLE IF EXISTS VTClassesTmp;      
		DROP TEMPORARY TABLE IF EXISTS VTSchoolSectorsTmp;  
		DROP TEMPORARY TABLE IF EXISTS StudentClassMappingTmp;  
        
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
		
        ROLLBACK;
    END;
        
    START TRANSACTION;	
    SELECT AcademicYearId, UserId INTO @academicYearId, @userId;
        
	IF (ISNULL(NewVTId)  OR NewVTId = "" ) THEN
	BEGIN
		SELECT  VTId, VCId, VTPId, FirstName, MiddleName, LastName, FullName, Mobile, Mobile1, Email, Gender, DateOfBirth, SocialCategory,NatureOfAppointment, 
		AcademicQualification, ProfessionalQualification, ProfessionalQualificationDetails, IndustryExperienceMonths,TrainingExperienceMonths, 
		AadhaarNumber, DateOfJoining, DateOfResignation, CreatedBy, CreatedOn, UpdatedBy, UpdatedOn, IsActive
		INTO @VT_VTId, @VT_VCId, @VT_VTPId, @VT_FirstName, @VT_MiddleName, @VT_LastName, @VT_FullName, @VT_Mobile, @VT_Mobile1, @VT_Email, @VT_Gender, 
		@VT_DateOfBirth, @VT_SocialCategory, @VT_NatureOfAppointment, @VT_AcademicQualification, @VT_ProfessionalQualification, @VT_ProfessionalQualificationDetails,
		@VT_IndustryExperienceMonths, @VT_TrainingExperienceMonths, @VT_AadhaarNumber, @VT_DateOfJoining, @VT_DateOfResignation, @VT_CreatedBy, @VT_CreatedOn, @VT_UpdatedBy, @VT_UpdatedOn, @VT_IsActive 
		FROM VocationalTrainers 
        WHERE VTId = OldVTId;
	 
		IF NOT EXISTS ( SELECT * FROM VocationalTrainers WHERE FullName=CONCAT(@VT_FullName, " dummy") AND Email = CONCAT("dummy.", @VT_Email)) THEN 
		BEGIN 
			SELECT UUID() INTO @CreatedVTGUID;
			
			INSERT INTO VocationalTrainers
			(VTId, VCId, VTPId, FirstName, MiddleName, LastName, FullName, Mobile, Mobile1, Email, Gender, DateOfBirth, SocialCategory, NatureOfAppointment,
			AcademicQualification, ProfessionalQualification, ProfessionalQualificationDetails, IndustryExperienceMonths, TrainingExperienceMonths, AadhaarNumber, DateOfJoining, DateOfResignation,
			CreatedBy, CreatedOn, UpdatedBy, UpdatedOn, IsActive)
			VALUES
			(@CreatedVTGUID, @VT_VCId, @VT_VTPId, @VT_FirstName, @VT_MiddleName, @VT_LastName, CONCAT(@VT_FullName, " dummy"), @VT_Mobile,@VT_Mobile1, CONCAT("dummy.", @VT_Email),@VT_Gender,
			@VT_DateOfBirth,@VT_SocialCategory,@VT_NatureOfAppointment,
			@VT_AcademicQualification,@VT_ProfessionalQualification,@VT_ProfessionalQualificationDetails,
			@VT_IndustryExperienceMonths,@VT_TrainingExperienceMonths,@VT_AadhaarNumber,@VT_DateOfJoining,@VT_DateOfResignation,
			@userId ,NOW() ,@userId ,NOW(),1);
			
			IF NOT EXISTS ( SELECT * FROM Accounts WHERE AccountId=@CreatedVTGUID AND EmailId = CONCAT("dummy.", @VT_Email)) THEN 
			BEGIN 
				INSERT INTO Accounts
				SELECT @CreatedVTGUID, CONCAT("dummy.", LoginId), 'Si91JG0GZeKUcq4K6Fsl/g==', UserId, UserName, FirstName, LastName, Designation,
				CONCAT("dummy.", EmailId) , Mobile, AccountType,StateId, DivisionId, DistrictId, BlockId, ClusterId, PasswordUpdateDate,
				PasswordExpiredOn, LastLoginDate,InvalidAttempt, IsPasswordReset, PasswordResetToken, AuthToken , TokenExpiredOn, IsLocked, 
				CreatedBy, NOW(), UpdatedBy, NOW(), 1 FROM  Accounts WHERE AccountId=OldVTId;
				
				INSERT INTO AccountRoles
				SELECT UUID(), @CreatedVTGUID, RoleId,Remarks,CreatedBy,NOW(),UpdatedBy,NOW(),1 
				FROM AccountRoles WHERE AccountId=OldVTId;
			END;
			END IF;     
		END;
		ELSE 
		BEGIN 
			SELECT VTId INTO @CreatedVTGUID FROM VocationalTrainers WHERE FullName=CONCAT(@VT_FullName, " dummy")
			AND Email = CONCAT("dummy.", @VT_Email);
		END;
		END IF;

		SET NewVTId = @CreatedVTGUID;
	END;
	END If;
	
	DROP TEMPORARY TABLE IF EXISTS VTClassesTmp;  
	
    CREATE TEMPORARY TABLE VTClassesTmp  
	SELECT ROW_NUMBER() OVER (ORDER BY vtc.VTClassId) as RowIndex , 
		vtc.VTClassId, vtc.VTId, vtc.SchoolId, vtc.AcademicYearId, vtc.ClassId, vtc.SectionId, vtc.CreatedBy, vtc.CreatedOn, vtc.UpdatedBy, vtc.UpdatedOn, vtc.IsActive 
	FROM VTClasses vtc
    WHERE vtc.AcademicYearId = @academicYearId AND vtc.IsActive = 1
		AND vtc.VTId=OldVTId;  
   
	SET vtcCount = (SELECT COUNT(*) FROM VTClassesTmp);    

	SET vtcIndex  = 1;
	WHILE vtcIndex <= vtcCount DO		      
		SELECT RowIndex,VTClassId, VTId, SchoolId, AcademicYearId, ClassId, SectionId, ISActive 
		INTO @RowIndex,@OLDVTClassId, @VTId, @SchoolId, @OldAcademicYearId, @ClassId, @SectionId,@IsActive
        FROM VTClassesTmp 
        WHERE RowIndex = vtcIndex;                
 
		IF NOT EXISTS (SELECT vtc.* FROM VTClasses vtc WHERE vtc.AcademicYearId = @academicYearId AND vtc.SchoolId = @SchoolId AND vtc.ClassId = @ClassId AND vtc.VTId = NewVTId) THEN 
		BEGIN	                      
			INSERT INTO VTClasses    
			SELECT UUID(), NewVTId, @SchoolID, @academicYearId, @ClassID, @SectionId, 0,   
				@userId as CreatedBy, NOW() as CreatedOn, @userId as UpdatedBy, NOW() as UpdatedOn, @IsActive                
			FROM VTClassesTmp
			WHERE AcademicYearId = @academicYearId AND SchoolId = @SchoolId AND ClassId = @ClassId AND VTId = OldVTId; 

			SELECT VTClassId INTO @NewVTClassID 
            FROM VTClasses 
            WHERE AcademicYearId = @academicYearId AND SchoolId = @SchoolId AND ClassId=@ClassId AND VTId=NewVTId;
 
			DROP TEMPORARY TABLE IF EXISTS VTClassSectionsTmp;  
			
            CREATE TEMPORARY TABLE VTClassSectionsTmp  
			SELECT ROW_NUMBER() OVER (ORDER BY VCS.VTClassSectionId) as RowIndex , 
				VCS.VTClassSectionId, VCS.VTClassId, VCS.SectionId, VCS.Remarks, VCS.CreatedBy, VCS.CreatedOn, VCS.IsActive
			FROM VTClassSections VCS 
            INNER JOIN VTClasses VTC ON VTC.VTClassId= VCS.VTClassId
			WHERE VCS.IsActive = 1 AND VCS.VTClassId=@OLDVTClassId;  

			SET VTClassSectionsCount = (SELECT COUNT(*) FROM VTClassSectionsTmp); 
			SET VTClassSectionsIndex  = 1;
 
			WHILE VTClassSectionsIndex <= VTClassSectionsCount DO		      
				SELECT RowIndex,VTClassSectionId, VTClassId, SectionId, Remarks, ISActive 
				INTO @RowIndex,@VTClassSectionId, @VTClassId, @SectionId, @Remarks,@IsActive
				FROM VTClassSectionsTmp WHERE RowIndex = VTClassSectionsIndex;                
					
				IF NOT EXISTS (SELECT  vs.* FROM VTClassSections vs WHERE VTClassId=@NewVTClassID AND SectionId=@SectionId AND IsActive=@IsActive ) THEN 
				BEGIN 	                
					INSERT INTO VTClassSections   						   
					SELECT UUID(), @NewVTClassID, @SectionId, 'Transfer', @userId AS CreatedBy, NOW() AS CreatedOn, 1          
					FROM VTClassSectionsTmp
					WHERE VTClassId = @VTClassId AND SectionId = @SectionId;    
				END;
				END IF; 
 
				SET VTClassSectionsIndex = VTClassSectionsIndex + 1;   
			END WHILE;	            
			
		END;
		END IF; 
        
        SET vtcIndex = vtcIndex + 1;   
	END WHILE;
    	
	DROP TEMPORARY TABLE IF EXISTS VTSchoolSectorsTmp;  
  
	CREATE TEMPORARY TABLE VTSchoolSectorsTmp  
	SELECT ROW_NUMBER() OVER (ORDER BY vss.VTSchoolSectorId) as RowIndex, 
		vss.VTSchoolSectorId, vss.AcademicYearId, vss.VTId, vss.SchoolId, vss.SectorId, vss.JobRoleId, vss.DateOfAllocation, vss.DateOfRemoval, 
		vss.CreatedBy, vss.CreatedOn, vss.UpdatedBy, vss.UpdatedOn, vss.IsActive
	FROM VTSchoolSectors vss
    WHERE vss.AcademicYearId = @academicYearId 
		AND vss.VTId = OldVTId;  
   
	SET vssCount = (SELECT COUNT(*) FROM VTSchoolSectorsTmp);    
	SET vssIndex  = 1;
   
	WHILE vssIndex <= vssCount DO		      
		SELECT RowIndex,VTSchoolSectorId, AcademicYearId, VTId, SchoolId, SectorId, JobRoleId, DateOfAllocation, DateOfRemoval, ISActive 
        INTO @RowIndex,@VTSchoolSectorId, @OldAcademicYearId, @VTId, @SchoolId, @SectorId, @JobRoleId, @DateOfAllocation, @DateOfRemoval,@IsActive
        FROM VTSchoolSectorsTmp 
        WHERE RowIndex = vssIndex;
        
		IF NOT EXISTS (SELECT  vs.* FROM VTSchoolSectors vs	WHERE  vs.AcademicYearId=@academicYearId AND vs.VTId=NewVTId AND vs.SchoolId=@SchoolId AND vs.SectorId=@SectorId AND vs.JobRoleId=@JobRoleId AND IsActive=@IsActive ) THEN 
		BEGIN 	                
			INSERT INTO VTSchoolSectors   
			SELECT UUID(), @academicYearId ,NewVTId,@SchoolID,@SectorId,@JobRoleId, NOW(), NULL, 1, @userId AS CreatedBy, NOW() AS CreatedOn, @userId AS UpdatedBy, NOW() AS UpdatedOn, 1
			FROM VTSchoolSectorsTmp
			WHERE AcademicYearId=@academicYearId AND SchoolId=@SchoolId AND SectorId=@SectorId AND JobRoleId=@JobRoleId AND  IsActive=@IsActive;   
		END;
		END IF; 
        
        SET vssIndex = vssIndex + 1;   
	END WHILE;	
	
	DROP TEMPORARY TABLE IF EXISTS StudentClassMappingTmp;  
	
    CREATE TEMPORARY TABLE StudentClassMappingTmp  
    SELECT ROW_NUMBER() OVER (ORDER BY scm.StudentClassMappingId) as RowIndex , 
	   scm.StudentClassMappingId, scm.AcademicYearId, scm.SchoolId, scm.ClassId, scm.SectionId, scm.VTId, scm.StudentId, scm.StudentRollNumber, 
	   scm.CreatedBy, scm.CreatedOn, scm.UpdatedBy, scm.UpdatedOn, scm.IsActive,
	   CASE WHEN scm.ClassId='ef71e220-ed0a-4cec-a5b0-e06325d3dbf4' THEN (SELECT ClassId FROM SchoolClasses WHERE Name='Class 10') 
			WHEN scm.ClassId= '3d99b3d3-f955-4e8f-9f2e-ec697a774bbc' THEN (SELECT ClassId FROM SchoolClasses WHERE Name ='Class 11') 
			WHEN scm.ClassId='69257ab5-e836-46f1-b888-dfae5da5489c' THEN (SELECT ClassId FROM SchoolClasses WHERE Name='Class 12') 
	   END AS NextClass 
    FROM StudentClassMapping scm
    WHERE scm.AcademicYearId = @academicYearId AND scm.IsActive = 1 
		AND scm.VTId = OldVTId;  
   
	SET scmCount = (SELECT COUNT(*) FROM StudentClassMappingTmp);    
	SET scmIndex  = 1;
    
	WHILE scmIndex <= scmCount DO		      
		SELECT RowIndex, StudentClassMappingId, AcademicYearId, SchoolId, ClassId, SectionId, VTId, StudentId, StudentRollNumber, NextClass 
        INTO @RowIndex, @StudentClassMappingId, @OldAcademicYearId, @SchoolId, @ClassId, @SectionId, @VTId, @StudentId, @StudentRollNumber, @nextClass
        FROM StudentClassMappingTmp 
        WHERE RowIndex = scmIndex;
                    
		IF NOT EXISTS (SELECT scm.* FROM StudentClassMapping scm WHERE scm.AcademicYearId = @academicYearId AND scm.VTId = NewVTId AND scm.StudentId = @StudentId AND scm.ClassId = @ClassId) THEN 
		BEGIN 	                
			INSERT INTO StudentClassMapping                  
			SELECT UUID(), @OldAcademicYearId, @SchoolId, @ClassId, @SectionId, NewVTId, @StudentId, @StudentRollNumber, 0, 
				@userId AS CreatedBy, NOW() AS CreatedOn, @userId AS UpdatedBy, NOW() AS UpdatedOn, 1                
			FROM StudentClassMappingTmp scm
			WHERE scm.AcademicYearId = @academicYearId AND scm.StudentId = @StudentId AND scm.ClassId = @ClassId;   
		END;
		END IF; 
        
        SET scmIndex = scmIndex + 1;   
	END WHILE;    
	
	UPDATE Accounts SET IsActive = 0 , UpdatedOn = NOW()
	WHERE AccountId = OldVTId; 
    
    UPDATE AccountRoles SET IsActive = 0 , UpdatedOn = NOW()
	WHERE AccountId = OldVTId; 
    
	UPDATE VocationalTrainers SET IsActive = 0 , UpdatedOn = NOW()
	WHERE VTId = OldVTId; 
    
    UPDATE VTSchoolSectors SET IsActive = 0 , UpdatedOn = NOW()
	WHERE VTId = OldVTId; 
    
    UPDATE VTClasses SET IsActive = 0 , UpdatedOn = NOW()
	WHERE VTId = OldVTId; 
    
	UPDATE StudentClasses SET VTId = NewVTId, UpdatedOn = NOW()
    WHERE VTId = OldVTId; 
    
    UPDATE StudentClassMapping SET IsActive = 0 , UpdatedOn = NOW()
    WHERE VTId = OldVTId; 
    
    DROP TEMPORARY TABLE IF EXISTS VTClassSectionsTmp; 
	DROP TEMPORARY TABLE IF EXISTS VTClassesTmp;      
    DROP TEMPORARY TABLE IF EXISTS VTSchoolSectorsTmp;  
    DROP TEMPORARY TABLE IF EXISTS StudentClassMappingTmp;  
    
	COMMIT; 
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `VTClassesTransfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `VTClassesTransfer`(
	IN UserId VARCHAR(100), 
	IN VTClassId VARCHAR(36)
    )
BEGIN
	SELECT UserId, VTClassId INTO @UserId, @VTClassId;
    
	SELECT AcademicYearId, YearName INTO @AcademicYearId, @YearName
    FROM AcademicYears 
    WHERE CAST(CONCAT(YEAR(NOW()),'/10/01') AS DATE) BETWEEN StartMonth AND EndMonth;
	
    SELECT vtc.VTId, vtc.SchoolId, vtc.ClassId INTO @VTId, @SchoolId, @ClassId
	FROM VTClasses vtc	
	WHERE vtc.VTClassId = @VTClassId;
         
	IF NOT EXISTS (SELECT vtc.* FROM VTClasses vtc WHERE vtc.AcademicYearId = @AcademicYearId AND vtc.VTId = @VTId AND vtc.SchoolId = @SchoolId AND vtc.ClassId = @ClassId) THEN 
	BEGIN
		SELECT UUID() INTO @NewVTClassId;
        
		INSERT INTO VTClasses
		SELECT @NewVTClassId, vtc.VTId, vtc.SchoolId, @AcademicYearId, vtc.ClassId, NULL, 0, @UserId, NOW(), @UserId, NOW(), 1
        FROM VTClasses vtc
		WHERE vtc.VTClassId = @VTClassId;
		
        INSERT INTO VTClassSections
		SELECT UUID(), @NewVTClassId, vcs.SectionId, NULL, @UserId, NOW(), 1
        FROM VTClassSections vcs
		WHERE vcs.VTClassId = @VTClassId;
        
        UPDATE VTClasses vtc SET vtc.IsAYRollover = 1 WHERE vtc.VTClassId = @VTClassId;
	END;
	END IF;
        
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `VTPSectorTransfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`%` PROCEDURE `VTPSectorTransfer`(
	IN UserId VARCHAR(100), 
	IN VTPSectorId VARCHAR(36)
    )
BEGIN
	SELECT UserId, VTPSectorId INTO @UserId, @VTPSectorId;
    
	SELECT AcademicYearId, YearName INTO @AcademicYearId, @YearName
    FROM AcademicYears 
    WHERE CAST(CONCAT(YEAR(NOW()),'/10/01') AS DATE) BETWEEN StartMonth AND EndMonth;
        
	SELECT vs.VTPId, vs.SectorId INTO @VTPId, @SectorId 
	FROM VTPSectors vs
	WHERE vs.VTPSectorId = @VTPSectorId;
         
	IF NOT EXISTS (SELECT vs.* FROM VTPSectors vs WHERE vs.AcademicYearId = @AcademicYearId AND vs.VTPId = @VTPId AND vs.SectorId = @SectorId) THEN 
	BEGIN 				
		INSERT INTO VTPSectors
		SELECT UUID(), @AcademicYearId, vs.VTPId, vs.SectorId , CONCAT('Academic Rollover for ', @YearName) AS Remarks, 0, @UserId, NOW(), @UserId, NOW(), 1
        FROM VTPSectors vs
		WHERE vs.VTPSectorId = @VTPSectorId;
		
        UPDATE VTPSectors vs SET vs.IsAYRollover = 1 WHERE vs.VTPSectorId = @VTPSectorId;
	END;
	END IF;

	IF NOT EXISTS (SELECT vtpm.* FROM VTPAcademicYearsMap vtpm WHERE vtpm.AcademicYearId = @AcademicYearId AND vtpm.VTPId = @VTPId AND vtpm.IsActive = 1) THEN 
	BEGIN 				
		INSERT INTO VTPAcademicYearsMap
		SELECT UUID() AS VTPAcademicYearId, @AcademicYearId, vtp.VTPId, IFNULL(vtp.ContractApprovalDate, NOW()), vtp.ContractEndDate, vtp.CreatedBy, NOW(), vtp.UpdatedBy, NOW(), 1
		FROM VocationalTrainingProviders vtp
        WHERE vtp.VTPId = @VTPId;
	END;
	END IF;
    
    # CALL VTPSectorTransfer ('rakesh.gtmcs', '3a6573e3-e3bb-4df6-afde-4074aaa95c9e');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `VTPTransfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `VTPTransfer`(
    IN UserId VARCHAR(100), 
    IN AcademicYearId VARCHAR(36),
	IN OldVTPId VARCHAR(36), 
	IN NewVTPId VARCHAR(36),    
    IN ParamsId INT
    )
BEGIN
	DECLARE VTPSectorsIndex INT DEFAULT 1;
	DECLARE svsIndex INT DEFAULT 1;
	DECLARE vcIndex INT DEFAULT 1;
	DECLARE VocationalTrainersIndex INT DEFAULT 1;
	DECLARE vcssIndex INT DEFAULT 1;
	DECLARE svsCount INT DEFAULT 0;
	DECLARE VTPSectorsCount INT DEFAULT 0;
	DECLARE vcCount INT DEFAULT 0;
	DECLARE VocationalTrainersCount INT DEFAULT 0;
	DECLARE vcssCount INT DEFAULT 0;
	DECLARE CreatedGUID  varchar(150) DEFAULT 0;
    DECLARE sIndex INT DEFAULT 1;
	DECLARE sCount INT DEFAULT 0;
    
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN	
		DROP TEMPORARY TABLE IF EXISTS VTPSectorsTmp;  
		DROP TEMPORARY TABLE IF EXISTS SchoolVTPSectorsTmp;  
        DROP TEMPORARY TABLE IF EXISTS VCSchoolSectorsTmp;  
        DROP TEMPORARY TABLE IF EXISTS VocationalCoordinatorsTmp;  
        DROP TEMPORARY TABLE IF EXISTS VTPSectorIdsTmp;  
		DROP TEMPORARY TABLE IF EXISTS SchoolVTPSectorIdsTmp;  
		DROP TEMPORARY TABLE IF EXISTS VCSchoolSectorIdsTmp;  
        DELETE FROM LighthouseParams lp WHERE lp.LighthouseParamId = ParamsId;  
        
		GET DIAGNOSTICS CONDITION 1
		@ErrorMessage = MESSAGE_TEXT;
		SELECT @ErrorMessage;
    
		ROLLBACK;
    END;
    
	SELECT AcademicYearId, UserId INTO @academicYearId, @userId;
    
	SELECT lp.Param1, lp.Param2, lp.Param3 
    INTO @VTPSectorIds, @SchoolVTPSectorIds, @VCSchoolSectorIds
    FROM LighthouseParams lp WHERE lp.LighthouseParamId = ParamsId;
    
	
    CREATE TEMPORARY TABLE VTPSectorIdsTmp(RowIndex INT NOT NULL AUTO_INCREMENT PRIMARY KEY, VTPSectorId VARCHAR(36));
	IF (@VTPSectorIds IS NOT NULL) THEN
		SET @sectorsSQL = CONCAT("INSERT INTO VTPSectorIdsTmp (VTPSectorId) VALUES ('", REPLACE(@VTPSectorIds, ",", "'),('"),"');");
		PREPARE sectorsScripts FROM @sectorsSQL;
		EXECUTE sectorsScripts;
    END IF;
    
    
	CREATE TEMPORARY TABLE SchoolVTPSectorIdsTmp(RowIndex INT NOT NULL AUTO_INCREMENT PRIMARY KEY, SchoolVTPSectorId VARCHAR(36));
	IF (@SchoolVTPSectorIds IS NOT NULL) THEN
		SET @schoolVTPSectorsSQL = CONCAT("INSERT INTO SchoolVTPSectorIdsTmp (SchoolVTPSectorId) VALUES ('", REPLACE(@SchoolVTPSectorIds, ",", "'),('"),"');");
		PREPARE schoolVTPSectorsScripts FROM @schoolVTPSectorsSQL;
		EXECUTE schoolVTPSectorsScripts;
    END IF;
    
    
	CREATE TEMPORARY TABLE VCSchoolSectorIdsTmp(RowIndex INT NOT NULL AUTO_INCREMENT PRIMARY KEY, VCSchoolSectorId VARCHAR(36));
	IF (@VCSchoolSectorIds IS NOT NULL) THEN
		SET @vcSchoolSectorsSQL = CONCAT("INSERT INTO VCSchoolSectorIdsTmp (VCSchoolSectorId) VALUES ('", REPLACE(@VCSchoolSectorIds, ",", "'),('"),"');");
		PREPARE vcSchoolSectorsScripts FROM @vcSchoolSectorsSQL;
		EXECUTE vcSchoolSectorsScripts;
    END IF;
    
    START TRANSACTION;
    IF (ISNULL(NewVTPId)  OR NewVTPId = "" )Then
	BEGIN
		SELECT VTPId,VTPShortName,VTPName,ApprovalYear,CertificationNo,CertificationAgency,VTPMobileNo,
			VTPEmailId,VTPAddress,PrimaryContactPerson,PrimaryMobileNumber,PrimaryContactEmail,VTPStateCoordinator,
			VTPStateCoordinatorMobile,VTPStateCoordinatorEmail,ContractApprovalDate,ContractEndDate,MOUDocUpload,
			CreatedBy,CreatedOn,UpdatedBy,UpdatedOn,IsActive
		INTO
			@VTP_VTPId, @VTP_VTPShortName, @VTP_VTPName, @VTP_ApprovalYear, @VTP_CertificationNo, @VTP_CertificationAgency, @VTP_VTPMobileNo, 
			@VTP_VTPEmailId, @VTP_VTPAddress, @VTP_PrimaryContactPerson, @VTP_PrimaryMobileNumber, @VTP_PrimaryContactEmail, @VTP_VTPStateCoordinator, 
			@VTP_VTPStateCoordinatorMobile, @VTP_VTPStateCoordinatorEmail, @VTP_ContractApprovalDate, @VTP_ContractEndDate, @VTP_MOUDocUpload, 
			@VTP_CreatedBy, @VTP_CreatedOn, @VTP_UpdatedBy, @VTP_UpdatedOn, @VTP_IsActive
		FROM VocationalTrainingProviders 
		WHERE VTPId = OldVTPId
        LIMIT 1;

		IF NOT EXISTS (SELECT * FROM VocationalTrainingProviders WHERE VTPShortName = CONCAT(@VTP_VTPShortName," dummy") AND VTPName = CONCAT(@VTP_VTPName," dummy") AND VTPEmailId = CONCAT("dummy.",@VTP_VTPEmailId)) THEN
		BEGIN 
			SELECT UUID() INTO @CreatedGUID;

			INSERT INTO VocationalTrainingProviders
				(VTPId,VTPShortName,VTPName,ApprovalYear,CertificationNo,CertificationAgency,VTPMobileNo,VTPEmailId,VTPAddress,PrimaryContactPerson,
				PrimaryMobileNumber,PrimaryContactEmail,VTPStateCoordinator,VTPStateCoordinatorMobile,VTPStateCoordinatorEmail,ContractApprovalDate,
				ContractEndDate,MOUDocUpload,CreatedBy,CreatedOn,UpdatedBy,UpdatedOn,IsActive)
			VALUES
				(@CreatedGUID,CONCAT(@VTP_VTPShortName, " dummy"),CONCAT(@VTP_VTPName, " dummy"), @VTP_ApprovalYear,@VTP_CertificationNo, 
				@VTP_CertificationAgency,@VTP_VTPMobileNo, CONCAT("dummy.",@VTP_VTPEmailId),
				@VTP_VTPAddress,@VTP_PrimaryContactPerson,@VTP_PrimaryMobileNumber,@VTP_PrimaryContactEmail,@VTP_VTPStateCoordinator,
				@VTP_VTPStateCoordinatorMobile,@VTP_VTPStateCoordinatorEmail,@VTP_ContractApprovalDate,@VTP_ContractEndDate,@VTP_MOUDocUpload,
				@userId,NOW() ,@userId ,Now(), @VTP_IsActive );
		END;
		ELSE 
		BEGIN
		   SELECT VTPId INTO  @CreatedGUID 
		   FROM VocationalTrainingProviders
		   WHERE VTPShortName = CONCAT(@VTP_VTPShortName," dummy") AND VTPName = CONCAT(@VTP_VTPName," dummy") AND VTPEmailId = CONCAT("dummy.", @VTP_VTPEmailId);
		END;   
		END IF;
		
		SET NewVTPId = @CreatedGUID;
	END;
	END IF;

	DROP TEMPORARY TABLE IF EXISTS VTPSectorsTmp;  
	
	CREATE TEMPORARY TABLE VTPSectorsTmp  
	SELECT ROW_NUMBER() OVER (ORDER BY vs.VTPSectorId) as RowIndex , vs.AcademicYearId, vs.VTPId, vs.SectorId, vs.Remarks, vs.IsActive 
	FROM VTPSectors vs
	WHERE vs.IsActive = 1 AND vs.AcademicYearId = @academicYearId 
		AND vs.VTPSectorId IN (SELECT VTPSectorId FROM VTPSectorIdsTmp)
		AND vs.VTPId = OldVTPId AND vs.IsActive = 1;  

	SET VTPSectorsCount = (SELECT COUNT(*) FROM VTPSectorsTmp);    
	SET VTPSectorsIndex  = 1;

	WHILE VTPSectorsIndex <= VTPSectorsCount DO		      
		SELECT RowIndex, VTPId, SectorId, Remarks
		INTO @RowIndex, @OLDVTP, @SectorId, @Remarks
		FROM VTPSectorsTmp 
		WHERE RowIndex = VTPSectorsIndex;
				 
		IF NOT EXISTS (SELECT vs.* FROM VTPSectors vs WHERE vs.AcademicYearId = @academicYearId AND vs.SectorId = @SectorId AND vs.VTPId = NewVTPId AND vs.IsActive = @IsActive) THEN 
		BEGIN            
			INSERT INTO VTPSectors   
			SELECT UUID(), @academicYearId, NewVTPId, @SectorId, 'Transfer', 0, @userId AS CreatedBy, NOW() AS CreatedOn, @userId AS UpdatedBy, Now() AS UpdatedOn, 1               
			FROM VTPSectorsTmp
			WHERE RowIndex = VTPSectorsIndex AND SectorId = @SectorId AND IsActive = 1;        
		END;
		END IF; 
		SET VTPSectorsIndex = VTPSectorsIndex + 1;   
	END WHILE;
	 
	DROP TEMPORARY TABLE IF EXISTS SchoolVTPSectorsTmp; 
	
	CREATE TEMPORARY TABLE SchoolVTPSectorsTmp  
	SELECT ROW_NUMBER() OVER (ORDER BY se.SectorName, s.UDISE) AS RowIndex, svs.*
	FROM SchoolVTPSectors svs
    INNER JOIN VTPSectors vs ON svs.VTPId = vs.VTPId AND svs.SectorId = vs.SectorId AND vs.IsActive = 1
	INNER JOIN Sectors se ON svs.SectorId = se.SectorId AND se.IsActive = 1
	INNER JOIN Schools s ON svs.SchoolId = s.SchoolId AND s.IsActive = 1
	WHERE svs.IsActive = 1 AND svs.AcademicYearId = @academicYearId 
		AND vs.VTPSectorId IN (SELECT VTPSectorId FROM VTPSectorIdsTmp)
		AND svs.SchoolVTPSectorId IN (SELECT SchoolVTPSectorId FROM SchoolVTPSectorIdsTmp)
		AND svs.VTPId = OldVTPId AND svs.IsActive = 1
	ORDER BY se.SectorName, s.UDISE;  
	
	SET svsCount = (SELECT COUNT(*) FROM SchoolVTPSectorsTmp); 
	SET svsIndex  = 1;
	
	WHILE svsIndex <= svsCount DO	     	
		SELECT SchoolVTPSectorId, SchoolId, SectorId 
		INTO @SVS_SchoolVTPSectorId, @SVS_SchoolId, @SVS_SectorId
		FROM SchoolVTPSectorsTmp
		WHERE RowIndex = svsIndex;   
		
		IF NOT EXISTS (SELECT svs.* FROM SchoolVTPSectors svs WHERE svs.AcademicYearId = @academicYearId AND svs.SchoolId = @SVS_SchoolId AND svs.VTPId = NewVTPId AND svs.SectorId = @SVS_SectorId) THEN 
		BEGIN        
			SELECT UUID() INTO @NewSchoolVTPSectorsId; 
		
			INSERT INTO SchoolVTPSectors   
			SELECT @NewSchoolVTPSectorsId, svs.AcademicYearId, svs.SectorId, NewVTPId, svs.SchoolId, svs.Remarks, 0,
				@userId AS CreatedBy, NOW() AS CreatedOn, @userId AS UpdatedBy, Now() AS UpdatedOn, 1                
			FROM SchoolVTPSectorsTmp svs
			WHERE svs.SchoolVTPSectorId = @SVS_SchoolVTPSectorId;

			DROP TEMPORARY TABLE IF EXISTS VCSchoolSectorsTmp;  
						
			CREATE TEMPORARY TABLE VCSchoolSectorsTmp  
			SELECT ROW_NUMBER() OVER (ORDER BY vcss.SchoolVTPSectorId) AS RowIndex, vcss.*				
			FROM VCSchoolSectors vcss 
			INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
            INNER JOIN VTPSectors vs ON svs.VTPId = vs.VTPId AND svs.SectorId = vs.SectorId AND vs.IsActive = 1
			WHERE vcss.AcademicYearId = @academicYearId 
				AND vs.VTPSectorId IN (SELECT VTPSectorId FROM VTPSectorIdsTmp)
				AND vcss.VCSchoolSectorId IN (SELECT VCSchoolSectorId FROM VCSchoolSectorIdsTmp)
				AND vcss.SchoolVTPSectorId = @SVS_SchoolVTPSectorId AND vcss.IsActive = 1;    
		   
			SET vcssCount = (SELECT COUNT(*) FROM VCSchoolSectorsTmp);
			SET vcssIndex = 1;
			
			IF(vcssCount > 0) THEN
			BEGIN
			WHILE vcssIndex <= vcssCount DO		      
				SELECT RowIndex, VCSchoolSectorId, AcademicYearId, VCId, SchoolVTPSectorId
				INTO @VCSS_RowIndex, @VCSS_VCSchoolSectorId, @VCSS_AcademicYearId, @VCSS_VCId, @VCSS_SchoolVTPSectorId
				FROM VCSchoolSectorsTmp 
				WHERE RowIndex = vcssIndex;						

				IF NOT EXISTS (SELECT vs.* FROM VCSchoolSectors vs WHERE vs.AcademicYearId = @academicYearId AND vs.VCId = @VCSS_VCId AND vs.SchoolVTPSectorId = @NewSchoolVTPSectorsId) THEN 
				BEGIN 	   
					INSERT INTO VCSchoolSectors   
					SELECT UUID(), @academicYearId, VCId, @NewSchoolVTPSectorsId, NOW(), NULL, 0, 
						@userId AS CreatedBy, NOW() AS CreatedOn, @userId AS UpdatedBy, Now() AS UpdatedOn,1                
					FROM VCSchoolSectorsTmp
					WHERE VCSchoolSectorId = @VCSS_VCSchoolSectorId;     
				END;
				END IF; 

				SET vcssIndex = vcssIndex + 1;   
			END WHILE;
			END;
			END IF; 
		  
		END;
		END IF;
		
		SET svsIndex = svsIndex + 1;   
	END WHILE; 
	
     
    SELECT COUNT(vs.SectorId) INTO @TotalSectorCount 
    FROM VTPSectors vs 
    WHERE vs.VTPId = OldVTPId AND vs.IsActive = 1;
    
    
	SELECT COUNT(vs.SectorId) INTO @SectorCount 
    FROM VTPSectors vs 
    WHERE vs.VTPId = OldVTPId AND vs.IsActive = 1
		AND vs.VTPSectorId IN (SELECT VTPSectorId FROM VTPSectorIdsTmp);
        
	DROP TEMPORARY TABLE IF EXISTS VocationalCoordinatorsTmp;  
	
	CREATE TEMPORARY TABLE VocationalCoordinatorsTmp  
    SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY vcl.VCId, vcl.VTPId) AS RowIndex, vcl.VCId, vcl.VTPId
    FROM (
		SELECT DISTINCT vc.VCId, vc.VTPId
		FROM VocationalCoordinators vc
		INNER JOIN VCSchoolSectors vcss ON vc.VCId = vcss.VCId AND vcss.IsActive = 1
		INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId AND svs.IsActive = 1
		INNER JOIN VTPSectors vs ON svs.VTPId = vs.VTPId AND svs.SectorId = vs.SectorId AND vs.IsActive = 1
		WHERE vc.VTPId = OldVTPId AND vc.IsActive = 1
			AND vcss.VCSchoolSectorId IN (SELECT VCSchoolSectorId FROM VCSchoolSectorIdsTmp)
			AND vs.VTPSectorId IN (SELECT VTPSectorId FROM VTPSectorIdsTmp)    
		ORDER BY vc.FullName
	) AS vcl;
    
	SET vcCount = (SELECT COUNT(*) FROM VocationalCoordinatorsTmp);    
	SET vcIndex  = 1;
	
	WHILE vcIndex <= vcCount DO		   
		SELECT RowIndex, VCId, VTPId
		INTO @RowIndex, @VC_VCId, @VC_VTPId
		FROM VocationalCoordinatorsTmp 
		WHERE RowIndex = vcIndex;               
				 
		IF NOT EXISTS (SELECT vch.* FROM VocationalCoordinatorsHistory vch WHERE vch.VCId = @VC_VCId AND vch.VTPId = OldVTPId) THEN 
		BEGIN 	   
			INSERT INTO VocationalCoordinatorsHistory   
			SELECT vc.* 
			FROM VocationalCoordinators vc
			WHERE vc.VCId = @VC_VCId AND vc.VTPId = OldVTPId;
			
			UPDATE VocationalCoordinators vc
			SET vc.VTPId = NewVTPId, vc.UpdatedBy = @userId, vc.UpdatedOn = NOW()
			WHERE vc.VCId = @VC_VCId AND vc.VTPId = OldVTPId;	
		
			INSERT INTO VocationalTrainersHistory   
			SELECT vt.*         
			FROM VocationalTrainers vt
			WHERE vt.VCId = @VC_VCId AND vt.VTPId = OldVTPId;  
			
			UPDATE VocationalTrainers vt
			SET vt.VTPId = NewVTPId, vt.UpdatedBy = @userId, vt.UpdatedOn = NOW()
			WHERE vt.VCId = @VC_VCId AND vt.VTPId = OldVTPId;            
		END;
		END IF;

		SET vcIndex = vcIndex + 1;   
	END WHILE;
	
	UPDATE VCSchoolSectors vcss 
	INNER JOIN SchoolVTPSectors svs ON vcss.SchoolVTPSectorId = svs.SchoolVTPSectorId
	SET vcss.IsActive = 0, vcss.UpdatedOn = NOW()
	WHERE svs.VTPId = OldVTPId
		AND vcss.VCSchoolSectorId IN (SELECT VCSchoolSectorId FROM VCSchoolSectorIdsTmp); 
	
	UPDATE SchoolVTPSectors svs SET svs.IsActive = 0, svs.UpdatedOn = NOW()
	WHERE svs.VTPId = OldVTPId
		AND svs.SchoolVTPSectorId IN (SELECT SchoolVTPSectorId FROM SchoolVTPSectorIdsTmp);
	
	UPDATE VTPSectors vs SET vs.IsActive = 0, vs.UpdatedOn = NOW()
	WHERE vs.VTPId = OldVTPId
		AND vs.VTPSectorId IN (SELECT VTPSectorId FROM VTPSectorIdsTmp); 
	
	IF (@SectorCount = @TotalSectorCount ) THEN
	BEGIN
		UPDATE VocationalTrainingProviders SET IsActive = 0, UpdatedOn = NOW()
		WHERE VTPId = OldVTPId; 
	END;
	END IF;
    
	DELETE FROM LighthouseParams lp WHERE lp.LighthouseParamId = ParamsId;  

	DROP TEMPORARY TABLE IF EXISTS VTPSectorsTmp;  
	DROP TEMPORARY TABLE IF EXISTS SchoolVTPSectorsTmp;  
	DROP TEMPORARY TABLE IF EXISTS VCSchoolSectorsTmp;  
	DROP TEMPORARY TABLE IF EXISTS VocationalCoordinatorsTmp;  

	DROP TEMPORARY TABLE IF EXISTS VTPSectorIdsTmp;  
    DROP TEMPORARY TABLE IF EXISTS SchoolVTPSectorIdsTmp;  
	DROP TEMPORARY TABLE IF EXISTS VCSchoolSectorIdsTmp;  
	 
	COMMIT; 	
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `VTSchoolSectorTransfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`igmiteadm`@`localhost` PROCEDURE `VTSchoolSectorTransfer`(
	IN UserId VARCHAR(100), 
	IN VTSchoolSectorId VARCHAR(36)
    )
BEGIN
	SELECT UserId, VTSchoolSectorId INTO @UserId, @VTSchoolSectorId;
    
	SELECT AcademicYearId, YearName INTO @AcademicYearId, @YearName
    FROM AcademicYears 
    WHERE CAST(CONCAT(YEAR(NOW()),'/10/01') AS DATE) BETWEEN StartMonth AND EndMonth;
	
    SELECT vss.VTId, vss.SchoolId, vss.SectorId, vss.JobRoleId INTO @VTId, @SchoolId, @SectorId, @JobRoleId
	FROM VTSchoolSectors vss	
	WHERE vss.VTSchoolSectorId = @VTSchoolSectorId;
         
	IF NOT EXISTS (SELECT vss.* FROM VTSchoolSectors vss WHERE vss.AcademicYearId = @AcademicYearId AND vss.VTId = @VTId AND vss.SchoolId = @SchoolId AND vss.SectorId = @SectorId AND vss.JobRoleId = @JobRoleId) THEN 
	BEGIN 				
		INSERT INTO VTSchoolSectors
		SELECT UUID(), @AcademicYearId, vss.VTId, vss.SchoolId, vss.SectorId, vss.JobRoleId, vss.DateOfAllocation, vss.DateOfRemoval, 0, @UserId, NOW(), @UserId, NOW(), 1
        FROM VTSchoolSectors vss
		WHERE vss.VTSchoolSectorId = @VTSchoolSectorId;
		
        UPDATE VTSchoolSectors vss SET vss.IsAYRollover = 1 WHERE vss.VTSchoolSectorId = @VTSchoolSectorId;
	END;
	END IF;
        
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Final view structure for view `schoolsbyvtpsectorglfv`
--

/*!50001 DROP VIEW IF EXISTS `schoolsbyvtpsectorglfv`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `schoolsbyvtpsectorglfv` AS select distinct if(((`s`.`IsActive` = 1) and (`s`.`IsImplemented` = 1)),`s`.`SchoolId`,NULL) AS `ImplementedSchoolId`,if((`s`.`IsActive` = 1),`s`.`SchoolId`,NULL) AS `ApprovedSchoolId`,`svtps`.`AcademicYearId` AS `AcademicYearId`,`svtps`.`VTPId` AS `VTPId`,`svtps`.`SectorId` AS `SectorId`,`vcss`.`VCId` AS `VCId`,`vss`.`VTId` AS `VTId`,`vss`.`VTSchoolSectorId` AS `VTSchoolSectorId` from ((((((((`schoolvtpsectors` `svtps` join `schools` `s` on(((`s`.`SchoolId` = `svtps`.`SchoolId`) and (`s`.`IsActive` = 1)))) join `vocationaltrainingproviders` `vtp` on(((`svtps`.`VTPId` = `vtp`.`VTPId`) and (`vtp`.`IsActive` = 1)))) join `sectors` `se` on(((`svtps`.`SectorId` = `se`.`SectorId`) and (`se`.`IsActive` = 1)))) join `academicyears` `ar` on(((`svtps`.`AcademicYearId` = `ar`.`AcademicYearId`) and (`ar`.`IsActive` = 1)))) left join `vcschoolsectors` `vcss` on(((`svtps`.`SchoolVTPSectorId` = `vcss`.`SchoolVTPSectorId`) and (`vcss`.`IsActive` = 1)))) left join `vocationaltrainers` `vt` on(((`vcss`.`VCId` = `vt`.`VCId`) and (`vt`.`IsActive` = 1)))) left join `vtschoolsectors` `vss` on(((`svtps`.`AcademicYearId` = `vss`.`AcademicYearId`) and (`svtps`.`SchoolId` = `vss`.`SchoolId`) and (`svtps`.`SectorId` = `vss`.`SectorId`) and (`vss`.`IsActive` = 1)))) left join `vtclasses` `vtc` on(((`vss`.`AcademicYearId` = `vtc`.`AcademicYearId`) and (`s`.`SchoolId` = `vtc`.`SchoolId`) and (`vss`.`VTId` = `vtc`.`VTId`) and (`vtc`.`IsActive` = 1)))) where (`svtps`.`IsActive` = 1) order by `svtps`.`VTPId`,`svtps`.`SectorId` */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `schoolsbyvtpsectorinfo`
--

/*!50001 DROP VIEW IF EXISTS `schoolsbyvtpsectorinfo`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`igmiteadm`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `schoolsbyvtpsectorinfo` AS select distinct if(((`s`.`IsActive` = 1) and (`s`.`IsImplemented` = 1)),`s`.`SchoolId`,NULL) AS `ImplementedSchoolId`,if((`s`.`IsActive` = 1),`s`.`SchoolId`,NULL) AS `ApprovedSchoolId`,`svs`.`AcademicYearId` AS `AcademicYearId`,`svs`.`VTPId` AS `VTPId`,`svs`.`SectorId` AS `SectorId`,`vcss`.`VCId` AS `VCId`,`vtss`.`VTId` AS `VTId`,`vtss`.`VTSchoolSectorId` AS `VTSchoolSectorId`,`vtc`.`VTClassId` AS `VTClassId`,`s`.`DivisionId` AS `DivisionId`,`s`.`DistrictCode` AS `DistrictId` from (((((((((((`schoolvtpsectors` `svs` join `schools` `s` on(((`svs`.`SchoolId` = `s`.`SchoolId`) and (`s`.`IsActive` = 1)))) join `vtpacademicyearsmap` `vtpm` on(((`svs`.`AcademicYearId` = `vtpm`.`AcademicYearId`) and (`svs`.`VTPId` = `vtpm`.`VTPId`) and (`vtpm`.`IsActive` = 1)))) join `vocationaltrainingproviders` `vtp` on(((`vtpm`.`VTPId` = `vtp`.`VTPId`) and (`vtp`.`IsActive` = 1)))) join `sectors` `se` on(((`svs`.`SectorId` = `se`.`SectorId`) and (`se`.`IsActive` = 1)))) join `academicyears` `ay` on(((`svs`.`AcademicYearId` = `ay`.`AcademicYearId`) and (`ay`.`IsActive` = 1)))) left join `vcschoolsectors` `vcss` on(((`svs`.`AcademicYearId` = `vcss`.`AcademicYearId`) and (`svs`.`SchoolVTPSectorId` = `vcss`.`SchoolVTPSectorId`) and (`vcss`.`IsActive` = 1)))) left join `vtpcoordinatorsmap` `vcm` on(((`vcss`.`AcademicYearId` = `vcm`.`AcademicYearId`) and (`vcss`.`VCId` = `vcm`.`VCId`) and (`vcm`.`IsActive` = 1)))) left join `vtschoolsectors` `vtss` on(((`svs`.`AcademicYearId` = `vtss`.`AcademicYearId`) and (`svs`.`SchoolId` = `vtss`.`SchoolId`) and (`svs`.`SectorId` = `vtss`.`SectorId`) and (`vtss`.`IsActive` = 1)))) left join `vtclasses` `vtc` on(((`vtss`.`AcademicYearId` = `vtc`.`AcademicYearId`) and (`s`.`SchoolId` = `vtc`.`SchoolId`) and (`vtss`.`VTId` = `vtc`.`VTId`) and (`vtc`.`IsActive` = 1)))) left join `vctrainersmap` `vtm` on(((`vcm`.`AcademicYearId` = `vtm`.`AcademicYearId`) and (`vcm`.`VTPId` = `vtm`.`VTPId`) and (`vcm`.`VCId` = `vtm`.`VCId`) and (`vtm`.`IsActive` = 1)))) left join `vocationaltrainers` `vt` on(((`vtm`.`VTId` = `vt`.`VTId`) and (`vt`.`IsActive` = 1)))) where (`svs`.`IsActive` = 1) order by `svs`.`AcademicYearId`,`svs`.`SectorId`,`svs`.`VTPId`,`svs`.`SchoolId` */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `vtvc_issue_reporting_for_dashboard`
--

/*!50001 DROP VIEW IF EXISTS `vtvc_issue_reporting_for_dashboard`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`igmiteadm`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vtvc_issue_reporting_for_dashboard` AS select distinct `vcis`.`MainIssue` AS `MainIssueId`,`vcis`.`SubIssue` AS `SubIssueId`,`vcis`.`VCId` AS `VCId`,'VC' AS `Type`,`mi`.`Description` AS `Name`,`si`.`IssuePriority` AS `IssuePriority`,`vcis`.`IssueReportDate` AS `IssueReportDate`,`vcis`.`VCIssueReportingId` AS `VCIssueReportingId`,`vcis`.`ApprovalStatus` AS `ApprovalStatus`,`si`.`IssueName` AS `SubIssueName`,`vcis`.`IsActive` AS `IsActive` from ((`vcissuereporting` `vcis` join `mainissues` `mi` on((`vcis`.`MainIssue` = `mi`.`MainIssueId`))) join `subissues` `si` on(((`mi`.`MainIssueId` = `si`.`MainIssueId`) and (`vcis`.`SubIssue` = `si`.`SubIssueId`)))) union select distinct `vtis`.`MainIssue` AS `MainIssueId`,`vtis`.`SubIssue` AS `SubIssueId`,`vtis`.`VTId` AS `VCVTID`,'VT' AS `Type`,`mi`.`Description` AS `Name`,`si`.`IssuePriority` AS `IssuePriority`,`vtis`.`IssueReportDate` AS `IssueReportDate`,`vtis`.`VTIssueReportingId` AS `VTIssueReportingId`,`vtis`.`ApprovalStatus` AS `ApprovalStatus`,`si`.`IssueName` AS `SubIssueName`,`vtis`.`IsActive` AS `IsActive` from ((`vtissuereporting` `vtis` join `mainissues` `mi` on((`vtis`.`MainIssue` = `mi`.`MainIssueId`))) join `subissues` `si` on(((`mi`.`MainIssueId` = `si`.`MainIssueId`) and (`vtis`.`SubIssue` = `si`.`SubIssueId`)))) union select distinct `hmis`.`MainIssue` AS `MainIssueId`,`hmis`.`SubIssue` AS `SubIssueId`,`hmis`.`HMId` AS `VCVTID`,'HM' AS `Type`,`mi`.`Description` AS `Name`,`si`.`IssuePriority` AS `IssuePriority`,`hmis`.`IssueReportDate` AS `IssueReportDate`,`hmis`.`HMIssueReportingId` AS `HMIssueReportingId`,`hmis`.`ApprovalStatus` AS `ApprovalStatus`,`si`.`IssueName` AS `SubIssueName`,`hmis`.`IsActive` AS `IsActive` from ((`hmissuereporting` `hmis` join `mainissues` `mi` on((`hmis`.`MainIssue` = `mi`.`MainIssueId`))) join `subissues` `si` on(((`mi`.`MainIssueId` = `si`.`MainIssueId`) and (`hmis`.`SubIssue` = `si`.`SubIssueId`)))) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `vwvocationaltrainerdetails`
--

/*!50001 DROP VIEW IF EXISTS `vwvocationaltrainerdetails`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwvocationaltrainerdetails` AS select distinct `vss`.`AcademicYearId` AS `AcademicYearId`,`vss`.`VTSchoolSectorId` AS `VTSchoolSectorId`,`vtp`.`VTPId` AS `VTPId`,`vc`.`VCId` AS `VCId`,`vss`.`VTId` AS `VTId`,`vtp`.`VTPName` AS `VTPName`,`vc`.`FullName` AS `VCName`,`vc`.`Mobile` AS `VCMobile`,`vc`.`EmailId` AS `VCEmail`,`vt`.`FullName` AS `VTName`,`vt`.`Mobile` AS `VTMobile`,`vt`.`Email` AS `VTEmail`,`vtm`.`DateOfJoining` AS `VTDateOfJoining`,`hm`.`FullName` AS `HMName`,`hm`.`Mobile` AS `HMMobile`,`hm`.`Email` AS `HMEmail`,`se`.`SectorName` AS `SectorName`,`jr`.`JobRoleName` AS `JobRoleName`,`s`.`UDISE` AS `UDISE`,`s`.`SchoolName` AS `SchoolName` from (((((((((((`vtschoolsectors` `vss` join `vctrainersmap` `vtm` on(((`vss`.`AcademicYearId` = `vtm`.`AcademicYearId`) and (`vss`.`VTId` = `vtm`.`VTId`) and (`vtm`.`IsActive` = 1)))) join `vtpcoordinatorsmap` `vcm` on(((`vtm`.`AcademicYearId` = `vcm`.`AcademicYearId`) and (`vtm`.`VCId` = `vcm`.`VCId`) and (`vcm`.`IsActive` = 1)))) join `vtpacademicyearsmap` `vtpm` on(((`vcm`.`AcademicYearId` = `vtpm`.`AcademicYearId`) and (`vcm`.`VTPId` = `vtpm`.`VTPId`) and (`vtpm`.`IsActive` = 1)))) join `vocationaltrainers` `vt` on(((`vtm`.`VTId` = `vt`.`VTId`) and (`vt`.`IsActive` = 1)))) join `vocationalcoordinators` `vc` on(((`vcm`.`VCId` = `vc`.`VCId`) and (`vc`.`IsActive` = 1)))) join `vocationaltrainingproviders` `vtp` on(((`vtpm`.`VTPId` = `vtp`.`VTPId`) and (`vtp`.`IsActive` = 1)))) join `schools` `s` on(((`vss`.`SchoolId` = `s`.`SchoolId`) and (`s`.`IsActive` = 1)))) join `sectors` `se` on(((`vss`.`SectorId` = `se`.`SectorId`) and (`se`.`IsActive` = 1)))) join `jobroles` `jr` on(((`vss`.`SectorId` = `jr`.`SectorId`) and (`vss`.`JobRoleId` = `jr`.`JobRoleId`) and (`jr`.`IsActive` = 1)))) left join `hmschoolsmap` `hsm` on(((`vss`.`AcademicYearId` = `hsm`.`AcademicYearId`) and (`vss`.`SchoolId` = `hsm`.`SchoolId`) and (`hsm`.`IsActive` = 1)))) left join `headmasters` `hm` on(((`hsm`.`HMId` = `hm`.`HMId`) and (`hm`.`IsActive` = 1)))) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-05-17 12:31:32
