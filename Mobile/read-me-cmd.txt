Set the ANDROID_SDK_ROOT environment variable. This path should be the Android SDK Location used in the previous section.
$ export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk

Add the Android SDK command-line directories to PATH. Each directory corresponds to the category of command-line tool.
$ export PATH=$PATH:$ANDROID_SDK_ROOT/tools/bin
$ export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools
$ export PATH=$PATH:$ANDROID_SDK_ROOT/emulator
------------------------------------------------------------------------------------

Migrating from Ionic 5.x to Ionic 6.x​

For Angular based projects, you can simply run:
npm install @ionic/angular@latest @ionic/angular-toolkit@latest --save

Changes in Package Name​
In Ionic 4, the package name is @ionic/angular. Uninstall Ionic 3 and install Ionic 4 using the new package name:

$ npm uninstall ionic-angular
$ npm install @ionic/angular

ionic repair
npm i @ionic/angular-toolkit@latest
npm install --save-dev @angular-devkit/build-angular

Delete the entire node_modules folder in your project and then run this command :
npm install @ionic/app-scripts@latest --save-dev

npm i node-sass@7.0.1
cordova platform update android --save

https://cordova.apache.org/docs/en/latest/

D:\IgmiteProjects\Lighthouse\NgMobileV1
------------------------------------------------------------------------------------

Ionic Generate =>
This command uses the Angular CLI to generate features such as pages, components, directives, services, etc.

You can specify a path to nest your feature within any number of subdirectories. 
For example, specify a name of "pages/New Page" to generate page files at src/app/pages/new-page/.

Type =>	The type of generator (e.g. component, directive, page, pipe, provider, tabs)

$ ionic generate [<type>] [<name>]
$ ionic generate page Login
$ ionic generate page Detail --no-module
$ ionic generate page About --constants
$ ionic generate component Produnct
$ ionic generate component contact/form
$ ionic generate component login-form --change-detection=OnPush
$ ionic generate directive ripple --skip-import
$ ionic generate service api/user
$ ionic generate provider
$ ionic generate tabs
$ ionic generate pipe MyFilterPipe

--no-module	Do not generate an NgModule for the component
--constants	Generate a page constant file for lazy-loaded pages

Project Types => The Ionic CLI works with a variety of Ionic project types.
ionic-angular: Ionic Angular
ionic1: Ionic 1

Ionic Angular => Ionic Angular (ionic-angular) uses Angular 5 and @ionic/app-scripts for tooling.
    You can start a new Ionic Angular app with the following command:
    $ ionic start myNewProject --type=ionic-angular 

Ionic 1 => Ionic 1 (ionic-v1) uses AngularJS.
    You can start a new Ionic 1 app with the following command:
    $ ionic start myNewProject --type=ionic1

There are three templates available:
    tabs: A tabs based layout
    sidemenu: A sidemenu based layout
    blank: An empty project with a single page

Ionic CLI => The Ionic Command Line Interface (CLI) is your go-to tool for developing Ionic apps.
    $ npm install -g ionic@latest

Using Cordova => Integrate Ionic with Cordova to bring native capabilities to your app.
    $ npm install -g cordova@latest

Manage Cordova platform targets
    $ ionic cordova platform add ios
    $ ionic cordova platform add android
    $ ionic cordova platform remove android

https://cordova.apache.org/docs/en/10.x/reference/cordova-cli/
Clean Project Build
    $ cordova clean    
	npm cache clean --force

Android Publishing
    $ ionic cordova build --release android   
    $ ionic cordova build android --prod --release
    # ionic cordova run android --prod --release 

Use Cordova to build for Android and iOS platform targets
    $ ionic cordova build [options]    

cordova plugin add cordova-plugin-whitelist
cordova plugin rm cordova-plugin-whitelist

Examples​
    $ ionic cordova build android
    $ ionic cordova build android --buildConfig=build.json
    $ ionic cordova build android --prod --release -- -- --gradleArg=-PcdvBuildMultipleApks=true
    $ ionic cordova build android --prod --release -- -- --keystore=filename.keystore --alias=myalias
    $ ionic cordova build android --prod --release -- -- --minSdkVersion=21
    $ ionic cordova build android --prod --release -- -- --versionCode=55
    $ ionic cordova build android --prod --release --buildConfig=build.json
    $ ionic cordova build ios
    $ ionic cordova build ios --buildConfig=build.json
    $ ionic cordova build ios --prod --release
    $ ionic cordova build ios --prod --release -- --developmentTeam="ABCD" --codeSignIdentity="iPhone Developer" --packageType="app-store"
    $ ionic cordova build ios --prod --release --buildConfig=build.json
	
	
Once you installed the latest NodeJS and NPM software, then delete your node_modules folder and package-lock.json file:

rm -rf node_modules && rm package-lock.json
Once both are removed, then clean your NPM cache using the following command:

npm cache clean --force
Finally, try installing your dependencies again:

npm install
You should be able to install all dependencies without the maximum call stack size exceeded error now.	